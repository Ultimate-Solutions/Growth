// #region / JQuery v3.6.0
//        _  ____
//       | |/ __ \
//       | | |  | |_   _  ___ _ __ _   _
//   _   | | |  | | | | |/ _ \ '__| | | |
//  | |__| | |__| | |_| |  __/ |  | |_| |
//   \____/ \___\_\\__,_|\___|_|   \__, |
//                                  __/ |
//                                 |___/    v3.6.0
/*!
 * jQuery JavaScript Library v3.6.0 (https://jquery.com/)
 * Includes Sizzle.js (https://sizzlejs.com/)
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license (https://jquery.org/license)
 * Date: 2021-03-02T17:08Z
 */
(function (global, factory) {
  'use strict';

  if (typeof module === 'object' && typeof module.exports === 'object') {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document
      ? factory(global, true)
      : function (w) {
          if (!w.document) {
            throw new Error('jQuery requires a window with a document');
          }
          return factory(w);
        };
  } else {
    factory(global);
  }

  // Pass this if window is not defined yet
})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  'use strict';

  var arr = [];

  var getProto = Object.getPrototypeOf;

  var slice = arr.slice;

  var flat = arr.flat
    ? function (array) {
        return arr.flat.call(array);
      }
    : function (array) {
        return arr.concat.apply([], array);
      };

  var push = arr.push;

  var indexOf = arr.indexOf;

  var class2type = {};

  var toString = class2type.toString;

  var hasOwn = class2type.hasOwnProperty;

  var fnToString = hasOwn.toString;

  var ObjectFunctionString = fnToString.call(Object);

  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return (
      typeof obj === 'function' &&
      typeof obj.nodeType !== 'number' &&
      typeof obj.item !== 'function'
    );
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var document = window.document;

  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true,
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;

    var i,
      val,
      script = doc.createElement('script');

    script.text = code;
    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || (node.getAttribute && node.getAttribute(i));
        if (val) {
          script.setAttribute(i, val);
        }
      }
    }
    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + '';
    }

    // Support: Android <=2.3 only (functionish RegExp)
    return typeof obj === 'object' || typeof obj === 'function'
      ? class2type[toString.call(obj)] || 'object'
      : typeof obj;
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module

  var version = '3.6.0',
    // Define a local copy of jQuery
    jQuery = function (selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init(selector, context);
    };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,

    constructor: jQuery,

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function () {
      return slice.call(this);
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function (num) {
      // Return all the elements in a clean array
      if (num == null) {
        return slice.call(this);
      }

      // Return just the one element from the set
      return num < 0 ? this[num + this.length] : this[num];
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function (elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;

      // Return the newly-formed element set
      return ret;
    },

    // Execute a callback for every element in the matched set.
    each: function (callback) {
      return jQuery.each(this, callback);
    },

    map: function (callback) {
      return this.pushStack(
        jQuery.map(this, function (elem, i) {
          return callback.call(elem, i, elem);
        })
      );
    },

    slice: function () {
      return this.pushStack(slice.apply(this, arguments));
    },

    first: function () {
      return this.eq(0);
    },

    last: function () {
      return this.eq(-1);
    },

    even: function () {
      return this.pushStack(
        jQuery.grep(this, function (_elem, i) {
          return (i + 1) % 2;
        })
      );
    },

    odd: function () {
      return this.pushStack(
        jQuery.grep(this, function (_elem, i) {
          return i % 2;
        })
      );
    },

    eq: function (i) {
      var len = this.length,
        j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },

    end: function () {
      return this.prevObject || this.constructor();
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice,
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;

      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !isFunction(target)) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name];

          // Prevent Object.prototype pollution
          // Prevent never-ending loop
          if (name === '__proto__' || target === copy) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name];

            // Ensure proper type for the source value
            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;

            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);

            // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),

    // Assume jQuery is ready without the ready module
    isReady: true,

    error: function (msg) {
      throw new Error(msg);
    },

    noop: function () {},

    isPlainObject: function (obj) {
      var proto, Ctor;

      // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects
      if (!obj || toString.call(obj) !== '[object Object]') {
        return false;
      }

      proto = getProto(obj);

      // Objects with no prototype (e.g., `Object.create( null )`) are plain
      if (!proto) {
        return true;
      }

      // Objects with prototype are plain iff they were constructed by a global Object function
      Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
    },

    isEmptyObject: function (obj) {
      var name;

      for (name in obj) {
        return false;
      }
      return true;
    },

    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function (code, options, doc) {
      DOMEval(code, { nonce: options && options.nonce }, doc);
    },

    each: function (obj, callback) {
      var length,
        i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },

    // results is for internal usage only
    makeArray: function (arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },

    inArray: function (elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },

    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function (first, second) {
      var len = +second.length,
        j = 0,
        i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;

      return first;
    },

    grep: function (elems, callback, invert) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },

    // arg is for internal usage only
    map: function (elems, callback, arg) {
      var length,
        value,
        i = 0,
        ret = [];

      // Go through the array, translating each of the items to their new values
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }

        // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      }

      // Flatten any nested arrays
      return flat(ret);
    },

    // A global GUID counter for objects
    guid: 1,

    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support,
  });

  if (typeof Symbol === 'function') {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  }

  // Populate the class2type map
  jQuery.each(
    'Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '),
    function (_i, name) {
      class2type['[object ' + name + ']'] = name.toLowerCase();
    }
  );

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && 'length' in obj && obj.length,
      type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return (
      type === 'array' ||
      length === 0 ||
      (typeof length === 'number' && length > 0 && length - 1 in obj)
    );
  }
  var Sizzle =
    /*!
     * Sizzle CSS Selector Engine v2.3.6
     * https://sizzlejs.com/
     *
     * Copyright JS Foundation and other contributors
     * Released under the MIT license
     * https://js.foundation/
     *
     * Date: 2021-02-16
     */
    (function (window) {
      var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
        setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
        expando = 'sizzle' + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function (a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        },
        // Instance methods
        hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        pushNative = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function (list, elem) {
          var i = 0,
            len = list.length;
          for (; i < len; i++) {
            if (list[i] === elem) {
              return i;
            }
          }
          return -1;
        },
        booleans =
          'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|' +
          'ismap|loop|multiple|open|readonly|required|scoped',
        // Regular expressions

        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = '[\\x20\\t\\r\\n\\f]',
        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier =
          '(?:\\\\[\\da-fA-F]{1,6}' + whitespace + '?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+',
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes =
          '\\[' +
          whitespace +
          '*(' +
          identifier +
          ')(?:' +
          whitespace +
          // Operator (capture 2)
          '*([*^$|!~]?=)' +
          whitespace +
          // "Attribute values must be CSS identifiers [capture 5]
          // or strings [capture 3 or capture 4]"
          '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' +
          identifier +
          '))|)' +
          whitespace +
          '*\\]',
        pseudos =
          ':(' +
          identifier +
          ')(?:\\((' +
          // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
          // 1. quoted (capture 3; capture 4 or capture 5)
          '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' +
          // 2. simple (capture 6)
          '((?:\\\\.|[^\\\\()[\\]]|' +
          attributes +
          ')*)|' +
          // 3. anything else (capture 2)
          '.*' +
          ')\\)|)',
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + '+', 'g'),
        rtrim = new RegExp(
          '^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$',
          'g'
        ),
        rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'),
        rcombinators = new RegExp(
          '^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'
        ),
        rdescend = new RegExp(whitespace + '|>'),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp('^' + identifier + '$'),
        matchExpr = {
          ID: new RegExp('^#(' + identifier + ')'),
          CLASS: new RegExp('^\\.(' + identifier + ')'),
          TAG: new RegExp('^(' + identifier + '|[*])'),
          ATTR: new RegExp('^' + attributes),
          PSEUDO: new RegExp('^' + pseudos),
          CHILD: new RegExp(
            '^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' +
              whitespace +
              '*(even|odd|(([+-]|)(\\d*)n|)' +
              whitespace +
              '*(?:([+-]|)' +
              whitespace +
              '*(\\d+)|))' +
              whitespace +
              '*\\)|)',
            'i'
          ),
          bool: new RegExp('^(?:' + booleans + ')$', 'i'),

          // For use in libraries implementing .is()
          // We use this for POS matching in `select`
          needsContext: new RegExp(
            '^' +
              whitespace +
              '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' +
              whitespace +
              '*((?:-\\d)?\\d*)' +
              whitespace +
              '*\\)|)(?=[^-]|$)',
            'i'
          ),
        },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp('\\\\[\\da-fA-F]{1,6}' + whitespace + '?|\\\\([^\\r\\n\\f])', 'g'),
        funescape = function (escape, nonHex) {
          var high = '0x' + escape.slice(1) - 0x10000;

          return nonHex
            ? // Strip the backslash prefix from a non-hex escape sequence
              nonHex
            : // Replace a hexadecimal escape sequence with the encoded Unicode code point
            // Support: IE <=11+
            // For values outside the Basic Multilingual Plane (BMP), manually construct a
            // surrogate pair
            high < 0
            ? String.fromCharCode(high + 0x10000)
            : String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);
        },
        // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function (ch, asCodePoint) {
          if (asCodePoint) {
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if (ch === '\0') {
              return '\uFFFD';
            }

            // Control characters and (dependent upon position) numbers get escaped as code points
            return ch.slice(0, -1) + '\\' + ch.charCodeAt(ch.length - 1).toString(16) + ' ';
          }

          // Other potentially-special ASCII characters get backslash-escaped
          return '\\' + ch;
        },
        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function () {
          setDocument();
        },
        inDisabledFieldset = addCombinator(
          function (elem) {
            return elem.disabled === true && elem.nodeName.toLowerCase() === 'fieldset';
          },
          { dir: 'parentNode', next: 'legend' }
        );

      // Optimize for push.apply( _, NodeList )
      try {
        push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes);

        // Support: Android<4.0
        // Detect silently failing push.apply
        // eslint-disable-next-line no-unused-expressions
        arr[preferredDoc.childNodes.length].nodeType;
      } catch (e) {
        push = {
          apply: arr.length
            ? // Leverage slice if possible
              function (target, els) {
                pushNative.apply(target, slice.call(els));
              }
            : // Support: IE<9
              // Otherwise append directly
              function (target, els) {
                var j = target.length,
                  i = 0;

                // Can't trust NodeList.length
                while ((target[j++] = els[i++])) {}
                target.length = j - 1;
              },
        };
      }

      function Sizzle(selector, context, results, seed) {
        var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
          nodeType = context ? context.nodeType : 9;

        results = results || [];

        // Return early from calls with invalid selector or context
        if (
          typeof selector !== 'string' ||
          !selector ||
          (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
        ) {
          return results;
        }

        // Try to shortcut find operations (as opposed to filters) in HTML documents
        if (!seed) {
          setDocument(context);
          context = context || document;

          if (documentIsHTML) {
            // If the selector is sufficiently simple, try using a "get*By*" DOM method
            // (excepting DocumentFragment context, where the methods don't exist)
            if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
              // ID selector
              if ((m = match[1])) {
                // Document context
                if (nodeType === 9) {
                  if ((elem = context.getElementById(m))) {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  } else {
                    return results;
                  }

                  // Element context
                } else {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (
                    newContext &&
                    (elem = newContext.getElementById(m)) &&
                    contains(context, elem) &&
                    elem.id === m
                  ) {
                    results.push(elem);
                    return results;
                  }
                }

                // Type selector
              } else if (match[2]) {
                push.apply(results, context.getElementsByTagName(selector));
                return results;

                // Class selector
              } else if (
                (m = match[3]) &&
                support.getElementsByClassName &&
                context.getElementsByClassName
              ) {
                push.apply(results, context.getElementsByClassName(m));
                return results;
              }
            }

            // Take advantage of querySelectorAll
            if (
              support.qsa &&
              !nonnativeSelectorCache[selector + ' '] &&
              (!rbuggyQSA || !rbuggyQSA.test(selector)) &&
              // Support: IE 8 only
              // Exclude object elements
              (nodeType !== 1 || context.nodeName.toLowerCase() !== 'object')
            ) {
              newSelector = selector;
              newContext = context;

              // qSA considers elements outside a scoping root when evaluating child or
              // descendant combinators, which is not what we want.
              // In such cases, we work around the behavior by prefixing every selector in the
              // list with an ID selector referencing the scope context.
              // The technique has to be used as well when a leading combinator is used
              // as such selectors are not recognized by querySelectorAll.
              // Thanks to Andrew Dupont for this technique.
              if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                // Expand context for sibling selectors
                newContext =
                  (rsibling.test(selector) && testContext(context.parentNode)) || context;

                // We can use :scope instead of the ID hack if the browser
                // supports it & if we're not changing the context.
                if (newContext !== context || !support.scope) {
                  // Capture the context ID, setting it first if necessary
                  if ((nid = context.getAttribute('id'))) {
                    nid = nid.replace(rcssescape, fcssescape);
                  } else {
                    context.setAttribute('id', (nid = expando));
                  }
                }

                // Prefix every selector in the list
                groups = tokenize(selector);
                i = groups.length;
                while (i--) {
                  groups[i] = (nid ? '#' + nid : ':scope') + ' ' + toSelector(groups[i]);
                }
                newSelector = groups.join(',');
              }

              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {
                nonnativeSelectorCache(selector, true);
              } finally {
                if (nid === expando) {
                  context.removeAttribute('id');
                }
              }
            }
          }
        }

        // All others
        return select(selector.replace(rtrim, '$1'), context, results, seed);
      }

      /**
       * Create key-value caches of limited size
       * @returns {function(string, object)} Returns the Object data after storing it on itself with
       *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
       *	deleting the oldest entry
       */
      function createCache() {
        var keys = [];

        function cache(key, value) {
          // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
          if (keys.push(key + ' ') > Expr.cacheLength) {
            // Only keep the most recent entries
            delete cache[keys.shift()];
          }
          return (cache[key + ' '] = value);
        }
        return cache;
      }

      /**
       * Mark a function for special use by Sizzle
       * @param {Function} fn The function to mark
       */
      function markFunction(fn) {
        fn[expando] = true;
        return fn;
      }

      /**
       * Support testing using an element
       * @param {Function} fn Passed the created element and returns a boolean result
       */
      function assert(fn) {
        var el = document.createElement('fieldset');

        try {
          return !!fn(el);
        } catch (e) {
          return false;
        } finally {
          // Remove from its parent by default
          if (el.parentNode) {
            el.parentNode.removeChild(el);
          }

          // release memory in IE
          el = null;
        }
      }

      /**
       * Adds the same handler for all of the specified attrs
       * @param {String} attrs Pipe-separated list of attributes
       * @param {Function} handler The method that will be applied
       */
      function addHandle(attrs, handler) {
        var arr = attrs.split('|'),
          i = arr.length;

        while (i--) {
          Expr.attrHandle[arr[i]] = handler;
        }
      }

      /**
       * Checks document order of two siblings
       * @param {Element} a
       * @param {Element} b
       * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
       */
      function siblingCheck(a, b) {
        var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

        // Use IE sourceIndex if available on both nodes
        if (diff) {
          return diff;
        }

        // Check if b follows a
        if (cur) {
          while ((cur = cur.nextSibling)) {
            if (cur === b) {
              return -1;
            }
          }
        }

        return a ? 1 : -1;
      }

      /**
       * Returns a function to use in pseudos for input types
       * @param {String} type
       */
      function createInputPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === 'input' && elem.type === type;
        };
      }

      /**
       * Returns a function to use in pseudos for buttons
       * @param {String} type
       */
      function createButtonPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return (name === 'input' || name === 'button') && elem.type === type;
        };
      }

      /**
       * Returns a function to use in pseudos for :enabled/:disabled
       * @param {Boolean} disabled true for :disabled; false for :enabled
       */
      function createDisabledPseudo(disabled) {
        // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
        return function (elem) {
          // Only certain elements can match :enabled or :disabled
          // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
          // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
          if ('form' in elem) {
            // Check for inherited disabledness on relevant non-disabled elements:
            // * listed form-associated elements in a disabled fieldset
            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
            // * option elements in a disabled optgroup
            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
            // All such elements have a "form" property.
            if (elem.parentNode && elem.disabled === false) {
              // Option elements defer to a parent optgroup if present
              if ('label' in elem) {
                if ('label' in elem.parentNode) {
                  return elem.parentNode.disabled === disabled;
                } else {
                  return elem.disabled === disabled;
                }
              }

              // Support: IE 6 - 11
              // Use the isDisabled shortcut property to check for disabled fieldset ancestors
              return (
                elem.isDisabled === disabled ||
                // Where there is no isDisabled, check manually
                /* jshint -W018 */
                (elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled)
              );
            }

            return elem.disabled === disabled;

            // Try to winnow out elements that can't be disabled before trusting the disabled property.
            // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
            // even exist on them, let alone have a boolean value.
          } else if ('label' in elem) {
            return elem.disabled === disabled;
          }

          // Remaining elements are neither :enabled nor :disabled
          return false;
        };
      }

      /**
       * Returns a function to use in pseudos for positionals
       * @param {Function} fn
       */
      function createPositionalPseudo(fn) {
        return markFunction(function (argument) {
          argument = +argument;
          return markFunction(function (seed, matches) {
            var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length;

            // Match elements found at the specified indexes
            while (i--) {
              if (seed[(j = matchIndexes[i])]) {
                seed[j] = !(matches[j] = seed[j]);
              }
            }
          });
        });
      }

      /**
       * Checks a node for validity as a Sizzle context
       * @param {Element|Object=} context
       * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
       */
      function testContext(context) {
        return context && typeof context.getElementsByTagName !== 'undefined' && context;
      }

      // Expose support vars for convenience
      support = Sizzle.support = {};

      /**
       * Detects XML nodes
       * @param {Element|Object} elem An element or a document
       * @returns {Boolean} True iff elem is a non-HTML XML node
       */
      isXML = Sizzle.isXML = function (elem) {
        var namespace = elem && elem.namespaceURI,
          docElem = elem && (elem.ownerDocument || elem).documentElement;

        // Support: IE <=8
        // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
        // https://bugs.jquery.com/ticket/4833
        return !rhtml.test(namespace || (docElem && docElem.nodeName) || 'HTML');
      };

      /**
       * Sets document-related variables once based on the current document
       * @param {Element|Object} [doc] An element or document object to use to set the document
       * @returns {Object} Returns the current document
       */
      setDocument = Sizzle.setDocument = function (node) {
        var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc;

        // Return early if doc is invalid or already selected
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
          return document;
        }

        // Update global variables
        document = doc;
        docElem = document.documentElement;
        documentIsHTML = !isXML(document);

        // Support: IE 9 - 11+, Edge 12 - 18+
        // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (
          preferredDoc != document &&
          (subWindow = document.defaultView) &&
          subWindow.top !== subWindow
        ) {
          // Support: IE 11, Edge
          if (subWindow.addEventListener) {
            subWindow.addEventListener('unload', unloadHandler, false);

            // Support: IE 9 - 10 only
          } else if (subWindow.attachEvent) {
            subWindow.attachEvent('onunload', unloadHandler);
          }
        }

        // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
        // Safari 4 - 5 only, Opera <=11.6 - 12.x only
        // IE/Edge & older browsers don't support the :scope pseudo-class.
        // Support: Safari 6.0 only
        // Safari 6.0 supports :scope but it's an alias of :root there.
        support.scope = assert(function (el) {
          docElem.appendChild(el).appendChild(document.createElement('div'));
          return (
            typeof el.querySelectorAll !== 'undefined' &&
            !el.querySelectorAll(':scope fieldset div').length
          );
        });

        /* Attributes
	---------------------------------------------------------------------- */

        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties
        // (excepting IE8 booleans)
        support.attributes = assert(function (el) {
          el.className = 'i';
          return !el.getAttribute('className');
        });

        /* getElement(s)By*
	---------------------------------------------------------------------- */

        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function (el) {
          el.appendChild(document.createComment(''));
          return !el.getElementsByTagName('*').length;
        });

        // Support: IE<9
        support.getElementsByClassName = rnative.test(document.getElementsByClassName);

        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programmatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function (el) {
          docElem.appendChild(el).id = expando;
          return !document.getElementsByName || !document.getElementsByName(expando).length;
        });

        // ID filter and find
        if (support.getById) {
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              return elem.getAttribute('id') === attrId;
            };
          };
          Expr.find['ID'] = function (id, context) {
            if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
              var elem = context.getElementById(id);
              return elem ? [elem] : [];
            }
          };
        } else {
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              var node =
                typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
              return node && node.value === attrId;
            };
          };

          // Support: IE 6 - 7 only
          // getElementById is not reliable as a find shortcut
          Expr.find['ID'] = function (id, context) {
            if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
              var node,
                i,
                elems,
                elem = context.getElementById(id);

              if (elem) {
                // Verify the id attribute
                node = elem.getAttributeNode('id');
                if (node && node.value === id) {
                  return [elem];
                }

                // Fall back on getElementsByName
                elems = context.getElementsByName(id);
                i = 0;
                while ((elem = elems[i++])) {
                  node = elem.getAttributeNode('id');
                  if (node && node.value === id) {
                    return [elem];
                  }
                }
              }

              return [];
            }
          };
        }

        // Tag
        Expr.find['TAG'] = support.getElementsByTagName
          ? function (tag, context) {
              if (typeof context.getElementsByTagName !== 'undefined') {
                return context.getElementsByTagName(tag);

                // DocumentFragment nodes don't have gEBTN
              } else if (support.qsa) {
                return context.querySelectorAll(tag);
              }
            }
          : function (tag, context) {
              var elem,
                tmp = [],
                i = 0,
                // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName(tag);

              // Filter out possible comments
              if (tag === '*') {
                while ((elem = results[i++])) {
                  if (elem.nodeType === 1) {
                    tmp.push(elem);
                  }
                }

                return tmp;
              }
              return results;
            };

        // Class
        Expr.find['CLASS'] =
          support.getElementsByClassName &&
          function (className, context) {
            if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };

        /* QSA/matchesSelector
	---------------------------------------------------------------------- */

        // QSA and matchesSelector support

        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];

        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See https://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];

        if ((support.qsa = rnative.test(document.querySelectorAll))) {
          // Build QSA regex
          // Regex strategy adopted from Diego Perini
          assert(function (el) {
            var input;

            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // https://bugs.jquery.com/ticket/12359
            docElem.appendChild(el).innerHTML =
              "<a id='" +
              expando +
              "'></a>" +
              "<select id='" +
              expando +
              "-\r\\' msallowcapture=''>" +
              "<option selected=''></option></select>";

            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if (el.querySelectorAll("[msallowcapture^='']").length) {
              rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
            }

            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if (!el.querySelectorAll('[selected]').length) {
              rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
            }

            // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
            if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
              rbuggyQSA.push('~=');
            }

            // Support: IE 11+, Edge 15 - 18+
            // IE 11/Edge don't find elements on a `[name='']` query in some cases.
            // Adding a temporary attribute to the document before the selection works
            // around the issue.
            // Interestingly, IE 10 & older don't seem to have the issue.
            input = document.createElement('input');
            input.setAttribute('name', '');
            el.appendChild(input);
            if (!el.querySelectorAll("[name='']").length) {
              rbuggyQSA.push(
                '\\[' + whitespace + '*name' + whitespace + '*=' + whitespace + '*(?:\'\'|"")'
              );
            }

            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if (!el.querySelectorAll(':checked').length) {
              rbuggyQSA.push(':checked');
            }

            // Support: Safari 8+, iOS 8+
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibling-combinator selector` fails
            if (!el.querySelectorAll('a#' + expando + '+*').length) {
              rbuggyQSA.push('.#.+[+~]');
            }

            // Support: Firefox <=3.6 - 5 only
            // Old Firefox doesn't throw on a badly-escaped identifier.
            el.querySelectorAll('\\\f');
            rbuggyQSA.push('[\\r\\n\\f]');
          });

          assert(function (el) {
            el.innerHTML =
              "<a href='' disabled='disabled'></a>" +
              "<select disabled='disabled'><option/></select>";

            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = document.createElement('input');
            input.setAttribute('type', 'hidden');
            el.appendChild(input).setAttribute('name', 'D');

            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if (el.querySelectorAll('[name=d]').length) {
              rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
            }

            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if (el.querySelectorAll(':enabled').length !== 2) {
              rbuggyQSA.push(':enabled', ':disabled');
            }

            // Support: IE9-11+
            // IE's :disabled selector does not pick up the children of disabled fieldsets
            docElem.appendChild(el).disabled = true;
            if (el.querySelectorAll(':disabled').length !== 2) {
              rbuggyQSA.push(':enabled', ':disabled');
            }

            // Support: Opera 10 - 11 only
            // Opera 10-11 does not throw on post-comma invalid pseudos
            el.querySelectorAll('*,:x');
            rbuggyQSA.push(',.*:');
          });
        }

        if (
          (support.matchesSelector = rnative.test(
            (matches =
              docElem.matches ||
              docElem.webkitMatchesSelector ||
              docElem.mozMatchesSelector ||
              docElem.oMatchesSelector ||
              docElem.msMatchesSelector)
          ))
        ) {
          assert(function (el) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call(el, '*');

            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call(el, "[s!='']:x");
            rbuggyMatches.push('!=', pseudos);
          });
        }

        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
        rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));

        /* Contains
	---------------------------------------------------------------------- */
        hasCompare = rnative.test(docElem.compareDocumentPosition);

        // Element contains another
        // Purposefully self-exclusive
        // As in, an element does not contain itself
        contains =
          hasCompare || rnative.test(docElem.contains)
            ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a,
                  bup = b && b.parentNode;
                return (
                  a === bup ||
                  !!(
                    bup &&
                    bup.nodeType === 1 &&
                    (adown.contains
                      ? adown.contains(bup)
                      : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16)
                  )
                );
              }
            : function (a, b) {
                if (b) {
                  while ((b = b.parentNode)) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };

        /* Sorting
	---------------------------------------------------------------------- */

        // Document order sorting
        sortOrder = hasCompare
          ? function (a, b) {
              // Flag for duplicate removal
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              // Sort on method existence if only one input has compareDocumentPosition
              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }

              // Calculate position if both inputs belong to the same document
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              compare =
                (a.ownerDocument || a) == (b.ownerDocument || b)
                  ? a.compareDocumentPosition(b)
                  : // Otherwise we know they are disconnected
                    1;

              // Disconnected nodes
              if (
                compare & 1 ||
                (!support.sortDetached && b.compareDocumentPosition(a) === compare)
              ) {
                // Choose the first element that is related to our preferred document
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  a == document ||
                  (a.ownerDocument == preferredDoc && contains(preferredDoc, a))
                ) {
                  return -1;
                }

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  b == document ||
                  (b.ownerDocument == preferredDoc && contains(preferredDoc, b))
                ) {
                  return 1;
                }

                // Maintain original order
                return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
              }

              return compare & 4 ? -1 : 1;
            }
          : function (a, b) {
              // Exit early if the nodes are identical
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [a],
                bp = [b];

              // Parentless nodes are either documents or disconnected
              if (!aup || !bup) {
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */
                return a == document
                  ? -1
                  : b == document
                  ? 1
                  : /* eslint-enable eqeqeq */
                  aup
                  ? -1
                  : bup
                  ? 1
                  : sortInput
                  ? indexOf(sortInput, a) - indexOf(sortInput, b)
                  : 0;

                // If the nodes are siblings, we can do a quick check
              } else if (aup === bup) {
                return siblingCheck(a, b);
              }

              // Otherwise we need full lists of their ancestors for comparison
              cur = a;
              while ((cur = cur.parentNode)) {
                ap.unshift(cur);
              }
              cur = b;
              while ((cur = cur.parentNode)) {
                bp.unshift(cur);
              }

              // Walk down the tree looking for a discrepancy
              while (ap[i] === bp[i]) {
                i++;
              }

              return i
                ? // Do a sibling check if the nodes have a common ancestor
                  siblingCheck(ap[i], bp[i])
                : // Otherwise nodes in our document sort first
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */
                ap[i] == preferredDoc
                ? -1
                : bp[i] == preferredDoc
                ? 1
                : /* eslint-enable eqeqeq */
                  0;
            };

        return document;
      };

      Sizzle.matches = function (expr, elements) {
        return Sizzle(expr, null, null, elements);
      };

      Sizzle.matchesSelector = function (elem, expr) {
        setDocument(elem);

        if (
          support.matchesSelector &&
          documentIsHTML &&
          !nonnativeSelectorCache[expr + ' '] &&
          (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
          (!rbuggyQSA || !rbuggyQSA.test(expr))
        ) {
          try {
            var ret = matches.call(elem, expr);

            // IE 9's matchesSelector returns false on disconnected nodes
            if (
              ret ||
              support.disconnectedMatch ||
              // As well, disconnected nodes are said to be in a document
              // fragment in IE 9
              (elem.document && elem.document.nodeType !== 11)
            ) {
              return ret;
            }
          } catch (e) {
            nonnativeSelectorCache(expr, true);
          }
        }

        return Sizzle(expr, document, null, [elem]).length > 0;
      };

      Sizzle.contains = function (context, elem) {
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ((context.ownerDocument || context) != document) {
          setDocument(context);
        }
        return contains(context, elem);
      };

      Sizzle.attr = function (elem, name) {
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ((elem.ownerDocument || elem) != document) {
          setDocument(elem);
        }

        var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
          val =
            fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
              ? fn(elem, name, !documentIsHTML)
              : undefined;

        return val !== undefined
          ? val
          : support.attributes || !documentIsHTML
          ? elem.getAttribute(name)
          : (val = elem.getAttributeNode(name)) && val.specified
          ? val.value
          : null;
      };

      Sizzle.escape = function (sel) {
        return (sel + '').replace(rcssescape, fcssescape);
      };

      Sizzle.error = function (msg) {
        throw new Error('Syntax error, unrecognized expression: ' + msg);
      };

      /**
       * Document sorting and removing duplicates
       * @param {ArrayLike} results
       */
      Sizzle.uniqueSort = function (results) {
        var elem,
          duplicates = [],
          j = 0,
          i = 0;

        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice(0);
        results.sort(sortOrder);

        if (hasDuplicate) {
          while ((elem = results[i++])) {
            if (elem === results[i]) {
              j = duplicates.push(i);
            }
          }
          while (j--) {
            results.splice(duplicates[j], 1);
          }
        }

        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;

        return results;
      };

      /**
       * Utility function for retrieving the text value of an array of DOM nodes
       * @param {Array|Element} elem
       */
      getText = Sizzle.getText = function (elem) {
        var node,
          ret = '',
          i = 0,
          nodeType = elem.nodeType;

        if (!nodeType) {
          // If no nodeType, this is expected to be an array
          while ((node = elem[i++])) {
            // Do not traverse comment nodes
            ret += getText(node);
          }
        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
          // Use textContent for elements
          // innerText usage removed for consistency of new lines (jQuery #11153)
          if (typeof elem.textContent === 'string') {
            return elem.textContent;
          } else {
            // Traverse its children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              ret += getText(elem);
            }
          }
        } else if (nodeType === 3 || nodeType === 4) {
          return elem.nodeValue;
        }

        // Do not include comment or processing instruction nodes

        return ret;
      };

      Expr = Sizzle.selectors = {
        // Can be adjusted by the user
        cacheLength: 50,

        createPseudo: markFunction,

        match: matchExpr,

        attrHandle: {},

        find: {},

        relative: {
          '>': { dir: 'parentNode', first: true },
          ' ': { dir: 'parentNode' },
          '+': { dir: 'previousSibling', first: true },
          '~': { dir: 'previousSibling' },
        },

        preFilter: {
          ATTR: function (match) {
            match[1] = match[1].replace(runescape, funescape);

            // Move the given value to match[3] whether quoted or unquoted
            match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);

            if (match[2] === '~=') {
              match[3] = ' ' + match[3] + ' ';
            }

            return match.slice(0, 4);
          },

          CHILD: function (match) {
            /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
            match[1] = match[1].toLowerCase();

            if (match[1].slice(0, 3) === 'nth') {
              // nth-* requires argument
              if (!match[3]) {
                Sizzle.error(match[0]);
              }

              // numeric x and y parameters for Expr.filter.CHILD
              // remember that false/true cast respectively to 0/1
              match[4] = +(match[4]
                ? match[5] + (match[6] || 1)
                : 2 * (match[3] === 'even' || match[3] === 'odd'));
              match[5] = +(match[7] + match[8] || match[3] === 'odd');

              // other types prohibit arguments
            } else if (match[3]) {
              Sizzle.error(match[0]);
            }

            return match;
          },

          PSEUDO: function (match) {
            var excess,
              unquoted = !match[6] && match[2];

            if (matchExpr['CHILD'].test(match[0])) {
              return null;
            }

            // Accept quoted arguments as-is
            if (match[3]) {
              match[2] = match[4] || match[5] || '';

              // Strip excess characters from unquoted arguments
            } else if (
              unquoted &&
              rpseudo.test(unquoted) &&
              // Get excess from tokenize (recursively)
              (excess = tokenize(unquoted, true)) &&
              // advance to the next closing parenthesis
              (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)
            ) {
              // excess is a negative index
              match[0] = match[0].slice(0, excess);
              match[2] = unquoted.slice(0, excess);
            }

            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice(0, 3);
          },
        },

        filter: {
          TAG: function (nodeNameSelector) {
            var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
            return nodeNameSelector === '*'
              ? function () {
                  return true;
                }
              : function (elem) {
                  return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                };
          },

          CLASS: function (className) {
            var pattern = classCache[className + ' '];

            return (
              pattern ||
              ((pattern = new RegExp(
                '(^|' + whitespace + ')' + className + '(' + whitespace + '|$)'
              )) &&
                classCache(className, function (elem) {
                  return pattern.test(
                    (typeof elem.className === 'string' && elem.className) ||
                      (typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class')) ||
                      ''
                  );
                }))
            );
          },

          ATTR: function (name, operator, check) {
            return function (elem) {
              var result = Sizzle.attr(elem, name);

              if (result == null) {
                return operator === '!=';
              }
              if (!operator) {
                return true;
              }

              result += '';

              /* eslint-disable max-len */

              return operator === '='
                ? result === check
                : operator === '!='
                ? result !== check
                : operator === '^='
                ? check && result.indexOf(check) === 0
                : operator === '*='
                ? check && result.indexOf(check) > -1
                : operator === '$='
                ? check && result.slice(-check.length) === check
                : operator === '~='
                ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1
                : operator === '|='
                ? result === check || result.slice(0, check.length + 1) === check + '-'
                : false;
              /* eslint-enable max-len */
            };
          },

          CHILD: function (type, what, _argument, first, last) {
            var simple = type.slice(0, 3) !== 'nth',
              forward = type.slice(-4) !== 'last',
              ofType = what === 'of-type';

            return first === 1 && last === 0
              ? // Shortcut for :nth-*(n)
                function (elem) {
                  return !!elem.parentNode;
                }
              : function (elem, _context, xml) {
                  var cache,
                    uniqueCache,
                    outerCache,
                    node,
                    nodeIndex,
                    start,
                    dir = simple !== forward ? 'nextSibling' : 'previousSibling',
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType,
                    diff = false;

                  if (parent) {
                    // :(first|last|only)-(child|of-type)
                    if (simple) {
                      while (dir) {
                        node = elem;
                        while ((node = node[dir])) {
                          if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                            return false;
                          }
                        }

                        // Reverse direction for :only-* (if we haven't yet done so)
                        start = dir = type === 'only' && !start && 'nextSibling';
                      }
                      return true;
                    }

                    start = [forward ? parent.firstChild : parent.lastChild];

                    // non-xml :nth-child(...) stores cache data on `parent`
                    if (forward && useCache) {
                      // Seek `elem` from a previously-cached index

                      // ...in a gzip-friendly way
                      node = parent;
                      outerCache = node[expando] || (node[expando] = {});

                      // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];

                      while (
                        (node =
                          (++nodeIndex && node && node[dir]) ||
                          // Fallback to seeking `elem` from the start
                          (diff = nodeIndex = 0) ||
                          start.pop())
                      ) {
                        // When found, cache indexes on `parent` and break
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          uniqueCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      // Use previously-cached element index if available
                      if (useCache) {
                        // ...in a gzip-friendly way
                        node = elem;
                        outerCache = node[expando] || (node[expando] = {});

                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

                        cache = uniqueCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }

                      // xml :nth-child(...)
                      // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                      if (diff === false) {
                        // Use the same loop as above to seek `elem` from the start
                        while (
                          (node =
                            (++nodeIndex && node && node[dir]) ||
                            (diff = nodeIndex = 0) ||
                            start.pop())
                        ) {
                          if (
                            (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) &&
                            ++diff
                          ) {
                            // Cache the index of each encountered element
                            if (useCache) {
                              outerCache = node[expando] || (node[expando] = {});

                              // Support: IE <9 only
                              // Defend against cloned attroperties (jQuery gh-1709)
                              uniqueCache =
                                outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

                              uniqueCache[type] = [dirruns, diff];
                            }

                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }

                    // Incorporate the offset, then check against cycle size
                    diff -= last;
                    return diff === first || (diff % first === 0 && diff / first >= 0);
                  }
                };
          },

          PSEUDO: function (pseudo, argument) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args,
              fn =
                Expr.pseudos[pseudo] ||
                Expr.setFilters[pseudo.toLowerCase()] ||
                Sizzle.error('unsupported pseudo: ' + pseudo);

            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if (fn[expando]) {
              return fn(argument);
            }

            // But maintain support for old signatures
            if (fn.length > 1) {
              args = [pseudo, pseudo, '', argument];
              return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())
                ? markFunction(function (seed, matches) {
                    var idx,
                      matched = fn(seed, argument),
                      i = matched.length;
                    while (i--) {
                      idx = indexOf(seed, matched[i]);
                      seed[idx] = !(matches[idx] = matched[i]);
                    }
                  })
                : function (elem) {
                    return fn(elem, 0, args);
                  };
            }

            return fn;
          },
        },

        pseudos: {
          // Potentially complex pseudos
          not: markFunction(function (selector) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, '$1'));

            return matcher[expando]
              ? markFunction(function (seed, matches, _context, xml) {
                  var elem,
                    unmatched = matcher(seed, null, xml, []),
                    i = seed.length;

                  // Match elements unmatched by `matcher`
                  while (i--) {
                    if ((elem = unmatched[i])) {
                      seed[i] = !(matches[i] = elem);
                    }
                  }
                })
              : function (elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);

                  // Don't keep the element (issue #299)
                  input[0] = null;
                  return !results.pop();
                };
          }),

          has: markFunction(function (selector) {
            return function (elem) {
              return Sizzle(selector, elem).length > 0;
            };
          }),

          contains: markFunction(function (text) {
            text = text.replace(runescape, funescape);
            return function (elem) {
              return (elem.textContent || getText(elem)).indexOf(text) > -1;
            };
          }),

          // "Whether an element is represented by a :lang() selector
          // is based solely on the element's language value
          // being equal to the identifier C,
          // or beginning with the identifier C immediately followed by "-".
          // The matching of C against the element's language value is performed case-insensitively.
          // The identifier C does not have to be a valid language name."
          // http://www.w3.org/TR/selectors/#lang-pseudo
          lang: markFunction(function (lang) {
            // lang value must be a valid identifier
            if (!ridentifier.test(lang || '')) {
              Sizzle.error('unsupported lang: ' + lang);
            }
            lang = lang.replace(runescape, funescape).toLowerCase();
            return function (elem) {
              var elemLang;
              do {
                if (
                  (elemLang = documentIsHTML
                    ? elem.lang
                    : elem.getAttribute('xml:lang') || elem.getAttribute('lang'))
                ) {
                  elemLang = elemLang.toLowerCase();
                  return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                }
              } while ((elem = elem.parentNode) && elem.nodeType === 1);
              return false;
            };
          }),

          // Miscellaneous
          target: function (elem) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice(1) === elem.id;
          },

          root: function (elem) {
            return elem === docElem;
          },

          focus: function (elem) {
            return (
              elem === document.activeElement &&
              (!document.hasFocus || document.hasFocus()) &&
              !!(elem.type || elem.href || ~elem.tabIndex)
            );
          },

          // Boolean properties
          enabled: createDisabledPseudo(false),
          disabled: createDisabledPseudo(true),

          checked: function (elem) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return (
              (nodeName === 'input' && !!elem.checked) || (nodeName === 'option' && !!elem.selected)
            );
          },

          selected: function (elem) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if (elem.parentNode) {
              // eslint-disable-next-line no-unused-expressions
              elem.parentNode.selectedIndex;
            }

            return elem.selected === true;
          },

          // Contents
          empty: function (elem) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              if (elem.nodeType < 6) {
                return false;
              }
            }
            return true;
          },

          parent: function (elem) {
            return !Expr.pseudos['empty'](elem);
          },

          // Element/input types
          header: function (elem) {
            return rheader.test(elem.nodeName);
          },

          input: function (elem) {
            return rinputs.test(elem.nodeName);
          },

          button: function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === 'input' && elem.type === 'button') || name === 'button';
          },

          text: function (elem) {
            var attr;
            return (
              elem.nodeName.toLowerCase() === 'input' &&
              elem.type === 'text' &&
              // Support: IE<8
              // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
              ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text')
            );
          },

          // Position-in-collection
          first: createPositionalPseudo(function () {
            return [0];
          }),

          last: createPositionalPseudo(function (_matchIndexes, length) {
            return [length - 1];
          }),

          eq: createPositionalPseudo(function (_matchIndexes, length, argument) {
            return [argument < 0 ? argument + length : argument];
          }),

          even: createPositionalPseudo(function (matchIndexes, length) {
            var i = 0;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          odd: createPositionalPseudo(function (matchIndexes, length) {
            var i = 1;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          lt: createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument > length ? length : argument;
            for (; --i >= 0; ) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          gt: createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; ++i < length; ) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
        },
      };

      Expr.pseudos['nth'] = Expr.pseudos['eq'];

      // Add button/input type pseudos
      for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
        Expr.pseudos[i] = createInputPseudo(i);
      }
      for (i in { submit: true, reset: true }) {
        Expr.pseudos[i] = createButtonPseudo(i);
      }

      // Easy API for creating new setFilters
      function setFilters() {}
      setFilters.prototype = Expr.filters = Expr.pseudos;
      Expr.setFilters = new setFilters();

      tokenize = Sizzle.tokenize = function (selector, parseOnly) {
        var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + ' '];

        if (cached) {
          return parseOnly ? 0 : cached.slice(0);
        }

        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;

        while (soFar) {
          // Comma and first run
          if (!matched || (match = rcomma.exec(soFar))) {
            if (match) {
              // Don't consume trailing commas as valid
              soFar = soFar.slice(match[0].length) || soFar;
            }
            groups.push((tokens = []));
          }

          matched = false;

          // Combinators
          if ((match = rcombinators.exec(soFar))) {
            matched = match.shift();
            tokens.push({
              value: matched,

              // Cast descendant combinators to space
              type: match[0].replace(rtrim, ' '),
            });
            soFar = soFar.slice(matched.length);
          }

          // Filters
          for (type in Expr.filter) {
            if (
              (match = matchExpr[type].exec(soFar)) &&
              (!preFilters[type] || (match = preFilters[type](match)))
            ) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: type,
                matches: match,
              });
              soFar = soFar.slice(matched.length);
            }
          }

          if (!matched) {
            break;
          }
        }

        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly
          ? soFar.length
          : soFar
          ? Sizzle.error(selector)
          : // Cache the tokens
            tokenCache(selector, groups).slice(0);
      };

      function toSelector(tokens) {
        var i = 0,
          len = tokens.length,
          selector = '';
        for (; i < len; i++) {
          selector += tokens[i].value;
        }
        return selector;
      }

      function addCombinator(matcher, combinator, base) {
        var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === 'parentNode',
          doneName = done++;

        return combinator.first
          ? // Check against closest ancestor/preceding element
            function (elem, context, xml) {
              while ((elem = elem[dir])) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
              return false;
            }
          : // Check against all ancestor/preceding elements
            function (elem, context, xml) {
              var oldCache,
                uniqueCache,
                outerCache,
                newCache = [dirruns, doneName];

              // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
              if (xml) {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});

                    // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)
                    uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                    if (skip && skip === elem.nodeName.toLowerCase()) {
                      elem = elem[dir] || elem;
                    } else if (
                      (oldCache = uniqueCache[key]) &&
                      oldCache[0] === dirruns &&
                      oldCache[1] === doneName
                    ) {
                      // Assign to newCache so results back-propagate to previous elements
                      return (newCache[2] = oldCache[2]);
                    } else {
                      // Reuse newcache so results back-propagate to previous elements
                      uniqueCache[key] = newCache;

                      // A match means we're done; a fail means we have to keep checking
                      if ((newCache[2] = matcher(elem, context, xml))) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            };
      }

      function elementMatcher(matchers) {
        return matchers.length > 1
          ? function (elem, context, xml) {
              var i = matchers.length;
              while (i--) {
                if (!matchers[i](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            }
          : matchers[0];
      }

      function multipleContexts(selector, contexts, results) {
        var i = 0,
          len = contexts.length;
        for (; i < len; i++) {
          Sizzle(selector, contexts[i], results);
        }
        return results;
      }

      function condense(unmatched, map, filter, context, xml) {
        var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

        for (; i < len; i++) {
          if ((elem = unmatched[i])) {
            if (!filter || filter(elem, context, xml)) {
              newUnmatched.push(elem);
              if (mapped) {
                map.push(i);
              }
            }
          }
        }

        return newUnmatched;
      }

      function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
        if (postFilter && !postFilter[expando]) {
          postFilter = setMatcher(postFilter);
        }
        if (postFinder && !postFinder[expando]) {
          postFinder = setMatcher(postFinder, postSelector);
        }
        return markFunction(function (seed, results, context, xml) {
          var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
            elems =
              seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn =
              preFilter && (seed || !selector)
                ? condense(elems, preMap, preFilter, context, xml)
                : elems,
            matcherOut = matcher
              ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter)
                ? // ...intermediate processing is necessary
                  []
                : // ...otherwise use results directly
                  results
              : matcherIn;

          // Find primary matches
          if (matcher) {
            matcher(matcherIn, matcherOut, context, xml);
          }

          // Apply postFilter
          if (postFilter) {
            temp = condense(matcherOut, postMap);
            postFilter(temp, [], context, xml);

            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while (i--) {
              if ((elem = temp[i])) {
                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
              }
            }
          }

          if (seed) {
            if (postFinder || preFilter) {
              if (postFinder) {
                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                temp = [];
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i])) {
                    // Restore matcherIn since elem is not yet a final match
                    temp.push((matcherIn[i] = elem));
                  }
                }
                postFinder(null, (matcherOut = []), temp, xml);
              }

              // Move matched elements from seed to results to keep them synchronized
              i = matcherOut.length;
              while (i--) {
                if (
                  (elem = matcherOut[i]) &&
                  (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1
                ) {
                  seed[temp] = !(results[temp] = elem);
                }
              }
            }

            // Add elements to results, through postFinder if defined
          } else {
            matcherOut = condense(
              matcherOut === results
                ? matcherOut.splice(preexisting, matcherOut.length)
                : matcherOut
            );
            if (postFinder) {
              postFinder(null, results, matcherOut, xml);
            } else {
              push.apply(results, matcherOut);
            }
          }
        });
      }

      function matcherFromTokens(tokens) {
        var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[' '],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(
            function (elem) {
              return elem === checkContext;
            },
            implicitRelative,
            true
          ),
          matchAnyContext = addCombinator(
            function (elem) {
              return indexOf(checkContext, elem) > -1;
            },
            implicitRelative,
            true
          ),
          matchers = [
            function (elem, context, xml) {
              var ret =
                (!leadingRelative && (xml || context !== outermostContext)) ||
                ((checkContext = context).nodeType
                  ? matchContext(elem, context, xml)
                  : matchAnyContext(elem, context, xml));

              // Avoid hanging onto element (issue #299)
              checkContext = null;
              return ret;
            },
          ];

        for (; i < len; i++) {
          if ((matcher = Expr.relative[tokens[i].type])) {
            matchers = [addCombinator(elementMatcher(matchers), matcher)];
          } else {
            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

            // Return special upon seeing a positional matcher
            if (matcher[expando]) {
              // Find the next relative operator (if any) for proper handling
              j = ++i;
              for (; j < len; j++) {
                if (Expr.relative[tokens[j].type]) {
                  break;
                }
              }
              return setMatcher(
                i > 1 && elementMatcher(matchers),
                i > 1 &&
                  toSelector(
                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })
                  ).replace(rtrim, '$1'),
                matcher,
                i < j && matcherFromTokens(tokens.slice(i, j)),
                j < len && matcherFromTokens((tokens = tokens.slice(j))),
                j < len && toSelector(tokens)
              );
            }
            matchers.push(matcher);
          }
        }

        return elementMatcher(matchers);
      }

      function matcherFromGroupMatchers(elementMatchers, setMatchers) {
        var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function (seed, context, xml, results, outermost) {
            var elem,
              j,
              matcher,
              matchedCount = 0,
              i = '0',
              unmatched = seed && [],
              setMatched = [],
              contextBackup = outermostContext,
              // We must always have either seed elements or outermost context
              elems = seed || (byElement && Expr.find['TAG']('*', outermost)),
              // Use integer dirruns iff this is the outermost matcher
              dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
              len = elems.length;

            if (outermost) {
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              outermostContext = context == document || context || outermost;
            }

            // Add elements passing elementMatchers directly to results
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0;

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (!context && elem.ownerDocument != document) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while ((matcher = elementMatchers[j++])) {
                  if (matcher(elem, context || document, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }

              // Track unmatched elements for set filters
              if (bySet) {
                // They will have gone through all possible matchers
                if ((elem = !matcher && elem)) {
                  matchedCount--;
                }

                // Lengthen the array for every element, matched or not
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }

            // `i` is now the count of elements visited above, and adding it to `matchedCount`
            // makes the latter nonnegative.
            matchedCount += i;

            // Apply set filters to unmatched elements
            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
            // no element matchers and no seed.
            // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
            // case, which will result in a "00" `matchedCount` that differs from `i` but is also
            // numerically zero.
            if (bySet && i !== matchedCount) {
              j = 0;
              while ((matcher = setMatchers[j++])) {
                matcher(unmatched, setMatched, context, xml);
              }

              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results);
                    }
                  }
                }

                // Discard index placeholder values to get only actual matches
                setMatched = condense(setMatched);
              }

              // Add matches to results
              push.apply(results, setMatched);

              // Seedless set matches succeeding multiple successful matchers stipulate sorting
              if (
                outermost &&
                !seed &&
                setMatched.length > 0 &&
                matchedCount + setMatchers.length > 1
              ) {
                Sizzle.uniqueSort(results);
              }
            }

            // Override manipulation of globals by nested matchers
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }

            return unmatched;
          };

        return bySet ? markFunction(superMatcher) : superMatcher;
      }

      compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
        var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + ' '];

        if (!cached) {
          // Generate a function of recursive functions that can be used to check each element
          if (!match) {
            match = tokenize(selector);
          }
          i = match.length;
          while (i--) {
            cached = matcherFromTokens(match[i]);
            if (cached[expando]) {
              setMatchers.push(cached);
            } else {
              elementMatchers.push(cached);
            }
          }

          // Cache the compiled function
          cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

          // Save selector and tokenization
          cached.selector = selector;
        }
        return cached;
      };

      /**
       * A low-level selection function that works with Sizzle's compiled
       *  selector functions
       * @param {String|Function} selector A selector or a pre-compiled
       *  selector function built with Sizzle.compile
       * @param {Element} context
       * @param {Array} [results]
       * @param {Array} [seed] A set of elements to match against
       */
      select = Sizzle.select = function (selector, context, results, seed) {
        var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === 'function' && selector,
          match = !seed && tokenize((selector = compiled.selector || selector));

        results = results || [];

        // Try to minimize operations if there is only one selector in the list and no seed
        // (the latter of which guarantees us context)
        if (match.length === 1) {
          // Reduce context if the leading compound selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (
            tokens.length > 2 &&
            (token = tokens[0]).type === 'ID' &&
            context.nodeType === 9 &&
            documentIsHTML &&
            Expr.relative[tokens[1].type]
          ) {
            context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) ||
              [])[0];
            if (!context) {
              return results;

              // Precompiled matchers will still verify ancestry, so step up a level
            } else if (compiled) {
              context = context.parentNode;
            }

            selector = selector.slice(tokens.shift().value.length);
          }

          // Fetch a seed set for right-to-left matching
          i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];

            // Abort if we hit a combinator
            if (Expr.relative[(type = token.type)]) {
              break;
            }
            if ((find = Expr.find[type])) {
              // Search, expanding context for leading sibling combinators
              if (
                (seed = find(
                  token.matches[0].replace(runescape, funescape),
                  (rsibling.test(tokens[0].type) && testContext(context.parentNode)) || context
                ))
              ) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results;
                }

                break;
              }
            }
          }
        }

        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        (compiled || compile(selector, match))(
          seed,
          context,
          !documentIsHTML,
          results,
          !context || (rsibling.test(selector) && testContext(context.parentNode)) || context
        );
        return results;
      };

      // One-time assignments

      // Sort stability
      support.sortStable = expando.split('').sort(sortOrder).join('') === expando;

      // Support: Chrome 14-35+
      // Always assume duplicates if they aren't passed to the comparison function
      support.detectDuplicates = !!hasDuplicate;

      // Initialize against the default document
      setDocument();

      // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
      // Detached nodes confoundingly follow *each other*
      support.sortDetached = assert(function (el) {
        // Should return 1, but returns 4 (following)
        return el.compareDocumentPosition(document.createElement('fieldset')) & 1;
      });

      // Support: IE<8
      // Prevent attribute/property "interpolation"
      // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
      if (
        !assert(function (el) {
          el.innerHTML = "<a href='#'></a>";
          return el.firstChild.getAttribute('href') === '#';
        })
      ) {
        addHandle('type|href|height|width', function (elem, name, isXML) {
          if (!isXML) {
            return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
          }
        });
      }

      // Support: IE<9
      // Use defaultValue in place of getAttribute("value")
      if (
        !support.attributes ||
        !assert(function (el) {
          el.innerHTML = '<input/>';
          el.firstChild.setAttribute('value', '');
          return el.firstChild.getAttribute('value') === '';
        })
      ) {
        addHandle('value', function (elem, _name, isXML) {
          if (!isXML && elem.nodeName.toLowerCase() === 'input') {
            return elem.defaultValue;
          }
        });
      }

      // Support: IE<9
      // Use getAttributeNode to fetch booleans when getAttribute lies
      if (
        !assert(function (el) {
          return el.getAttribute('disabled') == null;
        })
      ) {
        addHandle(booleans, function (elem, name, isXML) {
          var val;
          if (!isXML) {
            return elem[name] === true
              ? name.toLowerCase()
              : (val = elem.getAttributeNode(name)) && val.specified
              ? val.value
              : null;
          }
        });
      }

      return Sizzle;
    })(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;

  // Deprecated
  jQuery.expr[':'] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function (elem, dir, until) {
    var matched = [],
      truncate = until !== undefined;

    while ((elem = elem[dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };

  var siblings = function (n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    // Single element
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return (elem === qualifier) !== not;
      });
    }

    // Arraylike of elements (jQuery, arguments, Array)
    if (typeof qualifier !== 'string') {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    }

    // Filtered directly for both simple and complex selectors
    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ':not(' + expr + ')';
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(
      expr,
      jQuery.grep(elems, function (elem) {
        return elem.nodeType === 1;
      })
    );
  };

  jQuery.fn.extend({
    find: function (selector) {
      var i,
        ret,
        len = this.length,
        self = this;

      if (typeof selector !== 'string') {
        return this.pushStack(
          jQuery(selector).filter(function () {
            for (i = 0; i < len; i++) {
              if (jQuery.contains(self[i], this)) {
                return true;
              }
            }
          })
        );
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function (selector) {
      return !!winnow(
        this,

        // If this is a positional/relative selector, check membership in the returned set
        // so $("p:first").is("p:last") won't return true for a doc with two "p".
        typeof selector === 'string' && rneedsContext.test(selector)
          ? jQuery(selector)
          : selector || [],
        false
      ).length;
    },
  });

  // Initialize a jQuery object

  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
    init = (jQuery.fn.init = function (selector, context, root) {
      var match, elem;

      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }

      // Method init() accepts an alternate rootjQuery
      // so migrate can support jQuery.sub (gh-2101)
      root = root || rootjQuery;

      // Handle HTML strings
      if (typeof selector === 'string') {
        if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [null, selector, null];
        } else {
          match = rquickExpr.exec(selector);
        }

        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;

            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge(
              this,
              jQuery.parseHTML(
                match[1],
                context && context.nodeType ? context.ownerDocument || context : document,
                true
              )
            );

            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (isFunction(this[match])) {
                  this[match](context[match]);

                  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }

            return this;

            // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);

            if (elem) {
              // Inject the element directly into the jQuery object
              this[0] = elem;
              this.length = 1;
            }
            return this;
          }

          // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || root).find(selector);

          // HANDLE: $(expr, context)
          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }

        // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
        return this;

        // HANDLE: $(function)
        // Shortcut for document ready
      } else if (isFunction(selector)) {
        return root.ready !== undefined
          ? root.ready(selector)
          : // Execute immediately if ready is not present
            selector(jQuery);
      }

      return jQuery.makeArray(selector, this);
    });

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;

  // Initialize central reference
  rootjQuery = jQuery(document);

  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true,
    };

  jQuery.fn.extend({
    has: function (target) {
      var targets = jQuery(target, this),
        l = targets.length;

      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },

    closest: function (selectors, context) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        targets = typeof selectors !== 'string' && jQuery(selectors);

      // Positional selectors never match, since there's no _selection_ context
      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (
              cur.nodeType < 11 &&
              (targets
                ? targets.index(cur) > -1
                : // Don't pass non-elements to Sizzle
                  cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))
            ) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },

    // Determine the position of an element within the set
    index: function (elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }

      // Index in selector
      if (typeof elem === 'string') {
        return indexOf.call(jQuery(elem), this[0]);
      }

      // Locate the position of the desired element
      return indexOf.call(
        this,

        // If it receives a jQuery object, the first element is used
        elem.jquery ? elem[0] : elem
      );
    },

    add: function (selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },

    addBack: function (selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    },
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    return cur;
  }

  jQuery.each(
    {
      parent: function (elem) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null;
      },
      parents: function (elem) {
        return dir(elem, 'parentNode');
      },
      parentsUntil: function (elem, _i, until) {
        return dir(elem, 'parentNode', until);
      },
      next: function (elem) {
        return sibling(elem, 'nextSibling');
      },
      prev: function (elem) {
        return sibling(elem, 'previousSibling');
      },
      nextAll: function (elem) {
        return dir(elem, 'nextSibling');
      },
      prevAll: function (elem) {
        return dir(elem, 'previousSibling');
      },
      nextUntil: function (elem, _i, until) {
        return dir(elem, 'nextSibling', until);
      },
      prevUntil: function (elem, _i, until) {
        return dir(elem, 'previousSibling', until);
      },
      siblings: function (elem) {
        return siblings((elem.parentNode || {}).firstChild, elem);
      },
      children: function (elem) {
        return siblings(elem.firstChild);
      },
      contents: function (elem) {
        if (
          elem.contentDocument != null &&
          // Support: IE 11+
          // <object> elements with no `data` attribute has an object
          // `contentDocument` with a `null` prototype.
          getProto(elem.contentDocument)
        ) {
          return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if (nodeName(elem, 'template')) {
          elem = elem.content || elem;
        }

        return jQuery.merge([], elem.childNodes);
      },
    },
    function (name, fn) {
      jQuery.fn[name] = function (until, selector) {
        var matched = jQuery.map(this, fn, until);

        if (name.slice(-5) !== 'Until') {
          selector = until;
        }

        if (selector && typeof selector === 'string') {
          matched = jQuery.filter(selector, matched);
        }

        if (this.length > 1) {
          // Remove duplicates
          if (!guaranteedUnique[name]) {
            jQuery.uniqueSort(matched);
          }

          // Reverse order for parents* and prev-derivatives
          if (rparentsprev.test(name)) {
            matched.reverse();
          }
        }

        return this.pushStack(matched);
      };
    }
  );
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

  // Convert String-formatted options into Object-formatted ones
  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
      firing,
      // Last fire value for non-forgettable lists
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to prevent firing
      locked,
      // Actual callback list
      list = [],
      // Queue of execution data for repeatable lists
      queue = [],
      // Index of currently firing callback (modified by add/remove as needed)
      firingIndex = -1,
      // Fire callbacks
      fire = function () {
        // Enforce single-firing
        locked = locked || options.once;

        // Execute callbacks for all pending executions,
        // respecting firingIndex overrides and runtime changes
        fired = firing = true;
        for (; queue.length; firingIndex = -1) {
          memory = queue.shift();
          while (++firingIndex < list.length) {
            // Run callback and check for early termination
            if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
              // Jump to end and forget the data so .add doesn't re-fire
              firingIndex = list.length;
              memory = false;
            }
          }
        }

        // Forget the data if we're done with it
        if (!options.memory) {
          memory = false;
        }

        firing = false;

        // Clean up if we're done firing for good
        if (locked) {
          // Keep an empty list if we have data for future add calls
          if (memory) {
            list = [];

            // Otherwise, this object is spent
          } else {
            list = '';
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function () {
          if (list) {
            // If we have memory from a past run, we should fire after adding
            if (memory && !firing) {
              firingIndex = list.length - 1;
              queue.push(memory);
            }

            (function add(args) {
              jQuery.each(args, function (_, arg) {
                if (isFunction(arg)) {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && toType(arg) !== 'string') {
                  // Inspect recursively
                  add(arg);
                }
              });
            })(arguments);

            if (memory && !firing) {
              fire();
            }
          }
          return this;
        },

        // Remove a callback from the list
        remove: function () {
          jQuery.each(arguments, function (_, arg) {
            var index;
            while ((index = jQuery.inArray(arg, list, index)) > -1) {
              list.splice(index, 1);

              // Handle firing indexes
              if (index <= firingIndex) {
                firingIndex--;
              }
            }
          });
          return this;
        },

        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function (fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
        },

        // Remove all callbacks from the list
        empty: function () {
          if (list) {
            list = [];
          }
          return this;
        },

        // Disable .fire and .add
        // Abort any current/pending executions
        // Clear all callbacks and values
        disable: function () {
          locked = queue = [];
          list = memory = '';
          return this;
        },
        disabled: function () {
          return !list;
        },

        // Disable .fire
        // Also disable .add unless we have memory (since it would have no effect)
        // Abort any pending executions
        lock: function () {
          locked = queue = [];
          if (!memory && !firing) {
            list = memory = '';
          }
          return this;
        },
        locked: function () {
          return !!locked;
        },

        // Call all callbacks with the given context and arguments
        fireWith: function (context, args) {
          if (!locked) {
            args = args || [];
            args = [context, args.slice ? args.slice() : args];
            queue.push(args);
            if (!firing) {
              fire();
            }
          }
          return this;
        },

        // Call all the callbacks with the given arguments
        fire: function () {
          self.fireWith(this, arguments);
          return this;
        },

        // To know if the callbacks have already been called at least once
        fired: function () {
          return !!fired;
        },
      };

    return self;
  };

  function Identity(v) {
    return v;
  }
  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction((method = value.promise))) {
        method.call(value).done(resolve).fail(reject);

        // Other thenables
      } else if (value && isFunction((method = value.then))) {
        method.call(value, resolve, reject);

        // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      }

      // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.
    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function (func) {
      var tuples = [
          // action, add listener, callbacks,
          // ... .then handlers, argument index, [final state]
          ['notify', 'progress', jQuery.Callbacks('memory'), jQuery.Callbacks('memory'), 2],
          [
            'resolve',
            'done',
            jQuery.Callbacks('once memory'),
            jQuery.Callbacks('once memory'),
            0,
            'resolved',
          ],
          [
            'reject',
            'fail',
            jQuery.Callbacks('once memory'),
            jQuery.Callbacks('once memory'),
            1,
            'rejected',
          ],
        ],
        state = 'pending',
        promise = {
          state: function () {
            return state;
          },
          always: function () {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          catch: function (fn) {
            return promise.then(null, fn);
          },

          // Keep pipe for back-compat
          pipe: function (/* fnDone, fnFail, fnProgress */) {
            var fns = arguments;

            return jQuery
              .Deferred(function (newDefer) {
                jQuery.each(tuples, function (_i, tuple) {
                  // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                  // deferred.progress(function() { bind to newDefer or newDefer.notify })
                  // deferred.done(function() { bind to newDefer or newDefer.resolve })
                  // deferred.fail(function() { bind to newDefer or newDefer.reject })
                  deferred[tuple[1]](function () {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && isFunction(returned.promise)) {
                      returned
                        .promise()
                        .progress(newDefer.notify)
                        .done(newDefer.resolve)
                        .fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + 'With'](this, fn ? [returned] : arguments);
                    }
                  });
                });
                fns = null;
              })
              .promise();
          },
          then: function (onFulfilled, onRejected, onProgress) {
            var maxDepth = 0;
            function resolve(depth, deferred, handler, special) {
              return function () {
                var that = this,
                  args = arguments,
                  mightThrow = function () {
                    var returned, then;

                    // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts
                    if (depth < maxDepth) {
                      return;
                    }

                    returned = handler.apply(that, args);

                    // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48
                    if (returned === deferred.promise()) {
                      throw new TypeError('Thenable self-resolution');
                    }

                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once
                    then =
                      returned &&
                      // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      (typeof returned === 'object' || typeof returned === 'function') &&
                      returned.then;

                    // Handle a returned thenable
                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(
                          returned,
                          resolve(maxDepth, deferred, Identity, special),
                          resolve(maxDepth, deferred, Thrower, special)
                        );

                        // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;

                        then.call(
                          returned,
                          resolve(maxDepth, deferred, Identity, special),
                          resolve(maxDepth, deferred, Thrower, special),
                          resolve(maxDepth, deferred, Identity, deferred.notifyWith)
                        );
                      }

                      // Handle all other returned values
                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      }

                      // Process the value(s)
                      // Default process is resolve
                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                  // Only normal processors (resolve) catch and reject exceptions
                  process = special
                    ? mightThrow
                    : function () {
                        try {
                          mightThrow();
                        } catch (e) {
                          if (jQuery.Deferred.exceptionHook) {
                            jQuery.Deferred.exceptionHook(e, process.stackTrace);
                          }

                          // Support: Promises/A+ section 2.3.3.3.4.1
                          // https://promisesaplus.com/#point-61
                          // Ignore post-resolution exceptions
                          if (depth + 1 >= maxDepth) {
                            // Only substitute handlers pass on context
                            // and multiple values (non-spec behavior)
                            if (handler !== Thrower) {
                              that = undefined;
                              args = [e];
                            }

                            deferred.rejectWith(that, args);
                          }
                        }
                      };

                // Support: Promises/A+ section 2.3.3.3.1
                // https://promisesaplus.com/#point-57
                // Re-resolve promises immediately to dodge false rejection from
                // subsequent errors
                if (depth) {
                  process();
                } else {
                  // Call an optional hook to record the stack, in case of exception
                  // since it's otherwise lost when execution goes async
                  if (jQuery.Deferred.getStackHook) {
                    process.stackTrace = jQuery.Deferred.getStackHook();
                  }
                  window.setTimeout(process);
                }
              };
            }

            return jQuery
              .Deferred(function (newDefer) {
                // progress_handlers.add( ... )
                tuples[0][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onProgress) ? onProgress : Identity,
                    newDefer.notifyWith
                  )
                );

                // fulfilled_handlers.add( ... )
                tuples[1][3].add(
                  resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)
                );

                // rejected_handlers.add( ... )
                tuples[2][3].add(
                  resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower)
                );
              })
              .promise();
          },

          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function (obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          },
        },
        deferred = {};

      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
          stateString = tuple[5];

        // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add
        promise[tuple[1]] = list.add;

        // Handle state
        if (stateString) {
          list.add(
            function () {
              // state = "resolved" (i.e., fulfilled)
              // state = "rejected"
              state = stateString;
            },

            // rejected_callbacks.disable
            // fulfilled_callbacks.disable
            tuples[3 - i][2].disable,

            // rejected_handlers.disable
            // fulfilled_handlers.disable
            tuples[3 - i][3].disable,

            // progress_callbacks.lock
            tuples[0][2].lock,

            // progress_handlers.lock
            tuples[0][3].lock
          );
        }

        // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire
        list.add(tuple[3].fire);

        // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + 'With'](this === deferred ? undefined : this, arguments);
          return this;
        };

        // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith
        deferred[tuple[0] + 'With'] = list.fireWith;
      });

      // Make the deferred a promise
      promise.promise(deferred);

      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }

      // All done!
      return deferred;
    },

    // Deferred helper
    when: function (singleValue) {
      var // count of uncompleted subordinates
        remaining = arguments.length,
        // count of unprocessed arguments
        i = remaining,
        // subordinate fulfillment data
        resolveContexts = Array(i),
        resolveValues = slice.call(arguments),
        // the primary Deferred
        primary = jQuery.Deferred(),
        // subordinate callback factory
        updateFunc = function (i) {
          return function (value) {
            resolveContexts[i] = this;
            resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
            if (!--remaining) {
              primary.resolveWith(resolveContexts, resolveValues);
            }
          };
        };

      // Single- and empty arguments are adopted like Promise.resolve
      if (remaining <= 1) {
        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);

        // Use .then() to unwrap secondary thenables (cf. gh-3000)
        if (
          primary.state() === 'pending' ||
          isFunction(resolveValues[i] && resolveValues[i].then)
        ) {
          return primary.then();
        }
      }

      // Multiple arguments are aggregated like Promise.all array elements
      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }

      return primary.promise();
    },
  });

  // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.
  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn('jQuery.Deferred exception: ' + error.message, error.stack, stack);
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  };

  // The deferred used on DOM ready
  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList
      .then(fn)

      // Wrap jQuery.readyException in a function so that the lookup
      // happens at the time of error handling instead of callback
      // registration.
      .catch(function (error) {
        jQuery.readyException(error);
      });

    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,

    // Handle when the DOM is ready
    ready: function (wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }

      // Remember that the DOM is ready
      jQuery.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
    },
  });

  jQuery.ready.then = readyList.then;

  // The ready event handler and self cleanup method
  function completed() {
    document.removeEventListener('DOMContentLoaded', completed);
    window.removeEventListener('load', completed);
    jQuery.ready();
  }

  // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon
  if (
    document.readyState === 'complete' ||
    (document.readyState !== 'loading' && !document.documentElement.doScroll)
  ) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener('DOMContentLoaded', completed);

    // A fallback to window.onload, that will always work
    window.addEventListener('load', completed);
  }

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
      len = elems.length,
      bulk = key == null;

    // Sets many values
    if (toType(key) === 'object') {
      chainable = true;
      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      }

      // Sets one value
    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;

          // ...except when executing function values
        } else {
          bulk = fn;
          fn = function (elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    }

    // Gets
    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  };

  // Matches dashed string for camelizing
  var rmsPrefix = /^-ms-/,
    rdashAlpha = /-([a-z])/g;

  // Used by camelCase as callback to replace()
  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  }

  // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)
  function camelCase(string) {
    return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
  }
  var acceptData = function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;

  Data.prototype = {
    cache: function (owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando];

      // If not, create one
      if (!value) {
        value = {};

        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.
        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true,
            });
          }
        }
      }

      return value;
    },
    set: function (owner, data, value) {
      var prop,
        cache = this.cache(owner);

      // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)
      if (typeof data === 'string') {
        cache[camelCase(data)] = value;

        // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }
      return cache;
    },
    get: function (owner, key) {
      return key === undefined
        ? this.cache(owner)
        : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function (owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || (key && typeof key === 'string' && value === undefined)) {
        return this.get(owner, key);
      }

      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i,
        cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key);

          // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace
          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      }

      // Remove the expando if there's no more data
      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function (owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    },
  };
  var dataPriv = new Data();

  var dataUser = new Data();

  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === 'true') {
      return true;
    }

    if (data === 'false') {
      return false;
    }

    if (data === 'null') {
      return null;
    }

    // Only convert to a number if it doesn't change the string
    if (data === +data + '') {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === 'string') {
        try {
          data = getData(data);
        } catch (e) {}

        // Make sure we set the data so it isn't changed later
        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }

  jQuery.extend({
    hasData: function (elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },

    data: function (elem, name, data) {
      return dataUser.access(elem, name, data);
    },

    removeData: function (elem, name) {
      dataUser.remove(elem, name);
    },

    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function (elem, name, data) {
      return dataPriv.access(elem, name, data);
    },

    _removeData: function (elem, name) {
      dataPriv.remove(elem, name);
    },
  });

  jQuery.fn.extend({
    data: function (key, value) {
      var i,
        name,
        data,
        elem = this[0],
        attrs = elem && elem.attributes;

      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
            i = attrs.length;
            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf('data-') === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            dataPriv.set(elem, 'hasDataAttrs', true);
          }
        }

        return data;
      }

      // Sets multiple values
      if (typeof key === 'object') {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(
        this,
        function (value) {
          var data;

          // The calling jQuery object (element matches) is not empty
          // (and therefore has an element appears at this[ 0 ]) and the
          // `value` parameter was not undefined. An empty jQuery object
          // will result in `undefined` for elem = this[ 0 ] which will
          // throw an exception if an attempt to read a data cache is made.
          if (elem && value === undefined) {
            // Attempt to get data from the cache
            // The key will always be camelCased in Data
            data = dataUser.get(elem, key);
            if (data !== undefined) {
              return data;
            }

            // Attempt to "discover" the data in
            // HTML5 custom data-* attrs
            data = dataAttr(elem, key);
            if (data !== undefined) {
              return data;
            }

            // We tried really hard, but the data doesn't exist.
            return;
          }

          // Set the data...
          this.each(function () {
            // We always store the camelCased key
            dataUser.set(this, key, value);
          });
        },
        null,
        value,
        arguments.length > 1,
        null,
        true
      );
    },

    removeData: function (key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    },
  });

  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;

      if (elem) {
        type = (type || 'fx') + 'queue';
        queue = dataPriv.get(elem, type);

        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },

    dequeue: function (elem, type) {
      type = type || 'fx';

      var queue = jQuery.queue(elem, type),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = jQuery._queueHooks(elem, type),
        next = function () {
          jQuery.dequeue(elem, type);
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === 'inprogress') {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === 'fx') {
          queue.unshift('inprogress');
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },

    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function (elem, type) {
      var key = type + 'queueHooks';
      return (
        dataPriv.get(elem, key) ||
        dataPriv.access(elem, key, {
          empty: jQuery.Callbacks('once memory').add(function () {
            dataPriv.remove(elem, [type + 'queue', key]);
          }),
        })
      );
    },
  });

  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;

      if (typeof type !== 'string') {
        data = type;
        type = 'fx';
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined
        ? this
        : this.each(function () {
            var queue = jQuery.queue(this, type, data);

            // Ensure a hooks for this queue
            jQuery._queueHooks(this, type);

            if (type === 'fx' && queue[0] !== 'inprogress') {
              jQuery.dequeue(this, type);
            }
          });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function (type) {
      return this.queue(type || 'fx', []);
    },

    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function (type, obj) {
      var tmp,
        count = 1,
        defer = jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function () {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };

      if (typeof type !== 'string') {
        obj = type;
        type = undefined;
      }
      type = type || 'fx';

      while (i--) {
        tmp = dataPriv.get(elements[i], type + 'queueHooks');
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    },
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

  var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');

  var cssExpand = ['Top', 'Right', 'Bottom', 'Left'];

  var documentElement = document.documentElement;

  var isAttached = function (elem) {
      return jQuery.contains(elem.ownerDocument, elem);
    },
    composed = { composed: true };

  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.
  if (documentElement.getRootNode) {
    isAttached = function (elem) {
      return (
        jQuery.contains(elem.ownerDocument, elem) ||
        elem.getRootNode(composed) === elem.ownerDocument
      );
    };
  }
  var isHiddenWithinTree = function (elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;

    // Inline style trumps all
    return (
      elem.style.display === 'none' ||
      (elem.style.display === '' &&
        // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) &&
        jQuery.css(elem, 'display') === 'none')
    );
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
      scale,
      maxIterations = 20,
      currentValue = tween
        ? function () {
            return tween.cur();
          }
        : function () {
            return jQuery.css(elem, prop, '');
          },
      initial = currentValue(),
      unit = (valueParts && valueParts[3]) || (jQuery.cssNumber[prop] ? '' : 'px'),
      // Starting value computation is required for potential unit mismatches
      initialInUnit =
        elem.nodeType &&
        (jQuery.cssNumber[prop] || (unit !== 'px' && +initial)) &&
        rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2;

      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3];

      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);
        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }
        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit);

      // Make sure we update the tween properties later on
      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0;

      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[1]
        ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
        : +valueParts[2];
      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
      doc = elem.ownerDocument,
      nodeName = elem.nodeName,
      display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, 'display');

    temp.parentNode.removeChild(temp);

    if (display === 'none') {
      display = 'block';
    }
    defaultDisplayMap[nodeName] = display;

    return display;
  }

  function showHide(elements, show) {
    var display,
      elem,
      values = [],
      index = 0,
      length = elements.length;

    // Determine new display value for elements that need to change
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }

      display = elem.style.display;
      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === 'none') {
          values[index] = dataPriv.get(elem, 'display') || null;
          if (!values[index]) {
            elem.style.display = '';
          }
        }
        if (elem.style.display === '' && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== 'none') {
          values[index] = 'none';

          // Remember what we're overwriting
          dataPriv.set(elem, 'display', display);
        }
      }
    }

    // Set the display of the elements in a second loop to avoid constant reflow
    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function () {
      return showHide(this, true);
    },
    hide: function () {
      return showHide(this);
    },
    toggle: function (state) {
      if (typeof state === 'boolean') {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    },
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;

  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

  (function () {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild(document.createElement('div')),
      input = document.createElement('input');

    // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)
    input.setAttribute('type', 'radio');
    input.setAttribute('checked', 'checked');
    input.setAttribute('name', 't');

    div.appendChild(input);

    // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

    // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = '<textarea>x</textarea>';
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

    // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.
    div.innerHTML = '<option></option>';
    support.option = !!div.lastChild;
  })();

  // We have to close these tags to support XHTML (#13200)
  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, '<table>', '</table>'],
    col: [2, '<table><colgroup>', '</colgroup></table>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],

    _default: [0, '', ''],
  };

  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  // Support: IE <=9 only
  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", '</select>'];
  }

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== 'undefined') {
      ret = context.getElementsByTagName(tag || '*');
    } else if (typeof context.querySelectorAll !== 'undefined') {
      ret = context.querySelectorAll(tag || '*');
    } else {
      ret = [];
    }

    if (tag === undefined || (tag && nodeName(context, tag))) {
      return jQuery.merge([context], ret);
    }

    return ret;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0,
      l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(
        elems[i],
        'globalEval',
        !refElements || dataPriv.get(refElements[i], 'globalEval')
      );
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
      tmp,
      tag,
      wrap,
      attached,
      j,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i = 0,
      l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === 'object') {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

          // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem));

          // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement('div'));

          // Deserialize a standard representation
          tag = (rtagName.exec(elem) || ['', ''])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

          // Descend through wrappers to the right content
          j = wrap[0];
          while (j--) {
            tmp = tmp.lastChild;
          }

          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, tmp.childNodes);

          // Remember the top-level container
          tmp = fragment.firstChild;

          // Ensure the created nodes are orphaned (#12392)
          tmp.textContent = '';
        }
      }
    }

    // Remove wrapper from fragment
    fragment.textContent = '';

    i = 0;
    while ((elem = nodes[i++])) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
        continue;
      }

      attached = isAttached(elem);

      // Append to fragment
      tmp = getAll(fragment.appendChild(elem), 'script');

      // Preserve script evaluation history
      if (attached) {
        setGlobalEval(tmp);
      }

      // Capture executables
      if (scripts) {
        j = 0;
        while ((elem = tmp[j++])) {
          if (rscriptType.test(elem.type || '')) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  }

  // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).
  function expectSync(elem, type) {
    return (elem === safeActiveElement()) === (type === 'focus');
  }

  // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function on(elem, types, selector, data, fn, one) {
    var origFn, type;

    // Types can be a map of types/handlers
    if (typeof types === 'object') {
      // ( types-Object, selector, data )
      if (typeof selector !== 'string') {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for (type in types) {
        on(elem, type, selector, data, types[type], one);
      }
      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === 'string') {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;
      fn = function (event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      };

      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }
    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {
    global: {},

    add: function (elem, types, handler, data, selector) {
      var handleObjIn,
        eventHandle,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.get(elem);

      // Only attach events to objects that accept data
      if (!acceptData(elem)) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type
            ? jQuery.event.dispatch.apply(elem, arguments)
            : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = (types || '').match(rnothtmlwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();

        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;

        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};

        // handleObj is passed to all event handlers
        handleObj = jQuery.extend(
          {
            type: type,
            origType: origType,
            data: data,
            handler: handler,
            guid: handler.guid,
            selector: selector,
            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
            namespace: namespaces.join('.'),
          },
          handleObjIn
        );

        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }

        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },

    // Detach an event or set of events from an element
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j,
        origCount,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = (types || '').match(rnothtmlwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();

        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');

        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];

          if (
            (mappedTypes || origType === handleObj.origType) &&
            (!handler || handler.guid === handleObj.guid) &&
            (!tmp || tmp.test(handleObj.namespace)) &&
            (!selector ||
              selector === handleObj.selector ||
              (selector === '**' && handleObj.selector))
          ) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (
            !special.teardown ||
            special.teardown.call(elem, namespaces, elemData.handle) === false
          ) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      }

      // Remove data and the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, 'handle events');
      }
    },

    dispatch: function (nativeEvent) {
      var i,
        j,
        ret,
        matched,
        handleObj,
        handlerQueue,
        args = new Array(arguments.length),
        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix(nativeEvent),
        handlers = (dataPriv.get(this, 'events') || Object.create(null))[event.type] || [],
        special = jQuery.event.special[event.type] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }

      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;

        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (
            !event.rnamespace ||
            handleObj.namespace === false ||
            event.rnamespace.test(handleObj.namespace)
          ) {
            event.handleObj = handleObj;
            event.data = handleObj.data;

            ret = (
              (jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler
            ).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },

    handlers: function (event, handlers) {
      var i,
        handleObj,
        sel,
        matchedHandlers,
        matchedSelectors,
        handlerQueue = [],
        delegateCount = handlers.delegateCount,
        cur = event.target;

      // Find delegate handlers
      if (
        delegateCount &&
        // Support: IE <=9
        // Black-hole SVG <use> instance trees (trac-13180)
        cur.nodeType &&
        // Support: Firefox <=42
        // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
        // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
        // Support: IE 11 only
        // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
        !(event.type === 'click' && event.button >= 1)
      ) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];

              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + ' ';

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext
                  ? jQuery(sel, this).index(cur) > -1
                  : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }
            if (matchedHandlers.length) {
              handlerQueue.push({ elem: cur, handlers: matchedHandlers });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      cur = this;
      if (delegateCount < handlers.length) {
        handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
      }

      return handlerQueue;
    },

    addProp: function (name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,

        get: isFunction(hook)
          ? function () {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            }
          : function () {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },

        set: function (value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value,
          });
        },
      });
    },

    fix: function (originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },

    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true,
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function (data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Claim the first handler
          if (rcheckableType.test(el.type) && el.click && nodeName(el, 'input')) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, 'click', returnTrue);
          }

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function (data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Force setup before triggering a click
          if (rcheckableType.test(el.type) && el.click && nodeName(el, 'input')) {
            leverageNative(el, 'click');
          }

          // Return non-false to allow normal event-path propagation
          return true;
        },

        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function (event) {
          var target = event.target;
          return (
            (rcheckableType.test(target.type) &&
              target.click &&
              nodeName(target, 'input') &&
              dataPriv.get(target, 'click')) ||
            nodeName(target, 'a')
          );
        },
      },

      beforeunload: {
        postDispatch: function (event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        },
      },
    },
  };

  // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.
  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }
      return;
    }

    // Register the controller as a special universal handler for all event namespaces
    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function (event) {
        var notAsync,
          result,
          saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = slice.call(arguments);
            dataPriv.set(this, type, saved);

            // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous
            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);
            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }
            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();

              // Support: Chrome 86+
              // In Chrome, if an element having a focusout handler is blurred by
              // clicking outside of it, it invokes the handler synchronously. If
              // that handler calls `.remove()` on the element, the data is cleared,
              // leaving `result` undefined. We need to guard against this.
              return result && result.value;
            }

            // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.
          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          }

          // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments
        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger(
              // Support: IE <=9 - 11+
              // Extend with the prototype to reset the above stopImmediatePropagation()
              jQuery.extend(saved[0], jQuery.Event.prototype),
              saved.slice(1),
              this
            ),
          });

          // Abort handling of the native event
          event.stopImmediatePropagation();
        }
      },
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }

    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented =
        src.defaultPrevented ||
        (src.defaultPrevented === undefined &&
          // Support: Android <=2.3 only
          src.returnValue === false)
          ? returnTrue
          : returnFalse;

      // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)
      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = (src && src.timeStamp) || Date.now();

    // Mark it as fixed
    this[jQuery.expando] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,

    preventDefault: function () {
      var e = this.originalEvent;

      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;

      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      var e = this.originalEvent;

      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    },
  };

  // Includes all common event props including KeyEvent and MouseEvent specific props
  jQuery.each(
    {
      altKey: true,
      bubbles: true,
      cancelable: true,
      changedTouches: true,
      ctrlKey: true,
      detail: true,
      eventPhase: true,
      metaKey: true,
      pageX: true,
      pageY: true,
      shiftKey: true,
      view: true,
      char: true,
      code: true,
      charCode: true,
      key: true,
      keyCode: true,
      button: true,
      buttons: true,
      clientX: true,
      clientY: true,
      offsetX: true,
      offsetY: true,
      pointerId: true,
      pointerType: true,
      screenX: true,
      screenY: true,
      targetTouches: true,
      toElement: true,
      touches: true,
      which: true,
    },
    jQuery.event.addProp
  );

  jQuery.each({ focus: 'focusin', blur: 'focusout' }, function (type, delegateType) {
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function () {
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, expectSync);

        // Return false to allow normal processing in the caller
        return false;
      },
      trigger: function () {
        // Force setup before trigger
        leverageNative(this, type);

        // Return non-false to allow normal event-path propagation
        return true;
      },

      // Suppress native focus or blur as it's already being fired
      // in leverageNative.
      _default: function () {
        return true;
      },

      delegateType: delegateType,
    };
  });

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  jQuery.each(
    {
      mouseenter: 'mouseover',
      mouseleave: 'mouseout',
      pointerenter: 'pointerover',
      pointerleave: 'pointerout',
    },
    function (orig, fix) {
      jQuery.event.special[orig] = {
        delegateType: fix,
        bindType: fix,

        handle: function (event) {
          var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj;

          // For mouseenter/leave call the handler if related is outside the target.
          // NB: No relatedTarget if the mouse left/entered the browser window
          if (!related || (related !== target && !jQuery.contains(target, related))) {
            event.type = handleObj.origType;
            ret = handleObj.handler.apply(this, arguments);
            event.type = fix;
          }
          return ret;
        },
      };
    }
  );

  jQuery.fn.extend({
    on: function (types, selector, data, fn) {
      return on(this, types, selector, data, fn);
    },
    one: function (types, selector, data, fn) {
      return on(this, types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(
          handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType,
          handleObj.selector,
          handleObj.handler
        );
        return this;
      }
      if (typeof types === 'object') {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === 'function') {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
  });

  var // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

  // Prefer a tbody over its parent table for containing new rows
  function manipulationTarget(elem, content) {
    if (
      nodeName(elem, 'table') &&
      nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')
    ) {
      return jQuery(elem).children('tbody')[0] || elem;
    }

    return elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    if ((elem.type || '').slice(0, 5) === 'true/') {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute('type');
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;

      if (events) {
        dataPriv.remove(dest, 'handle events');

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }

    // 2. Copy user data
    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);

      dataUser.set(dest, udataCur);
    }
  }

  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === 'input' && rcheckableType.test(src.type)) {
      dest.checked = src.checked;

      // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === 'input' || nodeName === 'textarea') {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);

    var fragment,
      first,
      scripts,
      hasScripts,
      node,
      doc,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[0],
      valueIsFunction = isFunction(value);

    // We can't cloneNode fragments that contain checked, in WebKit
    if (
      valueIsFunction ||
      (l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value))
    ) {
      return collection.each(function (index) {
        var self = collection.eq(index);
        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      }

      // Require either new content or an interest in ignored elements to invoke the callback
      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
        hasScripts = scripts.length;

        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).
        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true);

            // Keep references to cloned scripts for later restoration
            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, 'script'));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument;

          // Reenable scripts
          jQuery.map(scripts, restoreScript);

          // Evaluate executable scripts on first document insertion
          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];
            if (
              rscriptType.test(node.type || '') &&
              !dataPriv.access(node, 'globalEval') &&
              jQuery.contains(doc, node)
            ) {
              if (node.src && (node.type || '').toLowerCase() !== 'module') {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(
                    node.src,
                    {
                      nonce: node.nonce || node.getAttribute('nonce'),
                    },
                    doc
                  );
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ''), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function remove(elem, selector, keepData) {
    var node,
      nodes = selector ? jQuery.filter(selector, elem) : elem,
      i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, 'script'));
        }
        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function (html) {
      return html;
    },

    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i,
        l,
        srcElements,
        destElements,
        clone = elem.cloneNode(true),
        inPage = isAttached(elem);

      // Fix IE cloning issues
      if (
        !support.noCloneChecked &&
        (elem.nodeType === 1 || elem.nodeType === 11) &&
        !jQuery.isXMLDoc(elem)
      ) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }

      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }

      // Preserve script evaluation history
      destElements = getAll(clone, 'script');
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
      }

      // Return the cloned set
      return clone;
    },

    cleanData: function (elems) {
      var data,
        elem,
        type,
        special = jQuery.event.special,
        i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if ((data = elem[dataPriv.expando])) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }

            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataPriv.expando] = undefined;
          }
          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    },
  });

  jQuery.fn.extend({
    detach: function (selector) {
      return remove(this, selector, true);
    },

    remove: function (selector) {
      return remove(this, selector);
    },

    text: function (value) {
      return access(
        this,
        function (value) {
          return value === undefined
            ? jQuery.text(this)
            : this.empty().each(function () {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value;
                }
              });
        },
        null,
        value,
        arguments.length
      );
    },

    append: function () {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },

    prepend: function () {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },

    before: function () {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },

    after: function () {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },

    empty: function () {
      var elem,
        i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));

          // Remove any remaining nodes
          elem.textContent = '';
        }
      }

      return this;
    },

    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },

    html: function (value) {
      return access(
        this,
        function (value) {
          var elem = this[0] || {},
            i = 0,
            l = this.length;

          if (value === undefined && elem.nodeType === 1) {
            return elem.innerHTML;
          }

          // See if we can take a shortcut and just use innerHTML
          if (
            typeof value === 'string' &&
            !rnoInnerhtml.test(value) &&
            !wrapMap[(rtagName.exec(value) || ['', ''])[1].toLowerCase()]
          ) {
            value = jQuery.htmlPrefilter(value);

            try {
              for (; i < l; i++) {
                elem = this[i] || {};

                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                  jQuery.cleanData(getAll(elem, false));
                  elem.innerHTML = value;
                }
              }

              elem = 0;

              // If using innerHTML throws an exception, use the fallback method
            } catch (e) {}
          }

          if (elem) {
            this.empty().append(value);
          }
        },
        null,
        value,
        arguments.length
      );
    },

    replaceWith: function () {
      var ignored = [];

      // Make the changes, replacing each non-ignored context element with the new content
      return domManip(
        this,
        arguments,
        function (elem) {
          var parent = this.parentNode;

          if (jQuery.inArray(this, ignored) < 0) {
            jQuery.cleanData(getAll(this));
            if (parent) {
              parent.replaceChild(elem, this);
            }
          }

          // Force callback invocation
        },
        ignored
      );
    },
  });

  jQuery.each(
    {
      appendTo: 'append',
      prependTo: 'prepend',
      insertBefore: 'before',
      insertAfter: 'after',
      replaceAll: 'replaceWith',
    },
    function (name, original) {
      jQuery.fn[name] = function (selector) {
        var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

        for (; i <= last; i++) {
          elems = i === last ? this : this.clone(true);
          jQuery(insert[i])[original](elems);

          // Support: Android <=4.0 only, PhantomJS 1 only
          // .get() because push.apply(_, arraylike) throws on ancient WebKit
          push.apply(ret, elems.get());
        }

        return this.pushStack(ret);
      };
    }
  );
  var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');

  var getStyles = function (elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function (elem, options, callback) {
    var ret,
      name,
      old = {};

    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.call(elem);

    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var rboxStyle = new RegExp(cssExpand.join('|'), 'i');

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText =
        'position:absolute;left:-11111px;width:60px;' + 'margin-top:1px;padding:0;border:0';
      div.style.cssText =
        'position:relative;display:block;box-sizing:border-box;overflow:scroll;' +
        'margin:auto;border:1px;padding:1px;' +
        'width:60%;top:1%';
      documentElement.appendChild(container).appendChild(div);

      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== '1%';

      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't
      div.style.right = '60%';
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

      // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements
      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

      // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)
      div.style.position = 'absolute';
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

      documentElement.removeChild(container);

      // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed
      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
      boxSizingReliableVal,
      scrollboxSizeVal,
      pixelBoxStylesVal,
      reliableTrDimensionsVal,
      reliableMarginLeftVal,
      container = document.createElement('div'),
      div = document.createElement('div');

    // Finish early in limited (non-browser) environments
    if (!div.style) {
      return;
    }

    // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)
    div.style.backgroundClip = 'content-box';
    div.cloneNode(true).style.backgroundClip = '';
    support.clearCloneStyle = div.style.backgroundClip === 'content-box';

    jQuery.extend(support, {
      boxSizingReliable: function () {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function () {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function () {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function () {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function () {
        computeStyleTests();
        return scrollboxSizeVal;
      },

      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function () {
        var table, tr, trChild, trStyle;
        if (reliableTrDimensionsVal == null) {
          table = document.createElement('table');
          tr = document.createElement('tr');
          trChild = document.createElement('div');

          table.style.cssText = 'position:absolute;left:-11111px;border-collapse:separate';
          tr.style.cssText = 'border:1px solid';

          // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.
          tr.style.height = '1px';
          trChild.style.height = '9px';

          // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is display: block
          // gets around this issue.
          trChild.style.display = 'block';

          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);

          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal =
            parseInt(trStyle.height, 10) +
              parseInt(trStyle.borderTopWidth, 10) +
              parseInt(trStyle.borderBottomWidth, 10) ===
            tr.offsetHeight;

          documentElement.removeChild(table);
        }
        return reliableTrDimensionsVal;
      },
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
      minWidth,
      maxWidth,
      ret,
      // Support: Firefox 51+
      // Retrieving style before computed somehow
      // fixes an issue with getting wrong values
      // on detached elements
      style = elem.style;

    computed = computed || getStyles(elem);

    // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)
    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === '' && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      }

      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values
      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined
      ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + ''
      : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function () {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      },
    };
  }

  var cssPrefixes = ['Webkit', 'Moz', 'ms'],
    emptyStyle = document.createElement('div').style,
    vendorProps = {};

  // Return a vendor-prefixed property or undefined
  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
      i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  }

  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  function finalPropName(name) {
    var final = jQuery.cssProps[name] || vendorProps[name];

    if (final) {
      return final;
    }
    if (name in emptyStyle) {
      return name;
    }
    return (vendorProps[name] = vendorPropName(name) || name);
  }

  var // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rcustomProp = /^--/,
    cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' },
    cssNormalTransform = {
      letterSpacing: '0',
      fontWeight: '400',
    };

  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches
      ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px')
      : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === 'width' ? 1 : 0,
      extra = 0,
      delta = 0;

    // Adjustment may not be necessary
    if (box === (isBorderBox ? 'border' : 'content')) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === 'margin') {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      }

      // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);

        // For "border" or "margin", add border
        if (box !== 'padding') {
          delta += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);

          // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }

        // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"
      } else {
        // For "content", subtract padding
        if (box === 'content') {
          delta -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        }

        // For "content" or "padding", subtract border
        if (box !== 'margin') {
          delta -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      }
    }

    // Account for positive content-box scroll gutter when requested by providing computedVal
    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta +=
        Math.max(
          0,
          Math.ceil(
            elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] -
              computedVal -
              delta -
              extra -
              0.5

            // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
            // Use an explicit zero to avoid NaN (gh-3964)
          )
        ) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
      // Fake content-box until we know it's needed to know the true value.
      boxSizingNeeded = !support.boxSizingReliable() || extra,
      isBorderBox =
        boxSizingNeeded && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box',
      valueIsBorderBox = isBorderBox,
      val = curCSS(elem, dimension, styles),
      offsetProp = 'offset' + dimension[0].toUpperCase() + dimension.slice(1);

    // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.
    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }
      val = 'auto';
    }

    // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.
    if (
      ((!support.boxSizingReliable() && isBorderBox) ||
        // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        (!support.reliableTrDimensions() && nodeName(elem, 'tr')) ||
        // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === 'auto' ||
        // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        (!parseFloat(val) && jQuery.css(elem, 'display', false, styles) === 'inline')) &&
      // Make sure the element is visible & connected
      elem.getClientRects().length
    ) {
      isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';

      // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.
      valueIsBorderBox = offsetProp in elem;
      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    }

    // Normalize "" and auto
    val = parseFloat(val) || 0;

    // Adjust for the element's box model
    return (
      val +
      boxModelAdjustment(
        elem,
        dimension,
        extra || (isBorderBox ? 'border' : 'content'),
        valueIsBorderBox,
        styles,

        // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val
      ) +
      'px'
    );
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function (elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, 'opacity');
            return ret === '' ? '1' : ret;
          }
        },
      },
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      animationIterationCount: true,
      columnCount: true,
      fillOpacity: true,
      flexGrow: true,
      flexShrink: true,
      fontWeight: true,
      gridArea: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnStart: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowStart: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      widows: true,
      zIndex: true,
      zoom: true,
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},

    // Get and set the style property on a DOM Node
    style: function (elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }

      // Make sure that we're working with the right name
      var ret,
        type,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name),
        style = elem.style;

      // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value;

        // Convert "+=" or "-=" to relative numbers (#7345)
        if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret);

          // Fixes bug #9237
          type = 'number';
        }

        // Make sure that null and NaN values aren't set (#7116)
        if (value == null || value !== value) {
          return;
        }

        // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.
        if (type === 'number' && !isCustomProp) {
          value += (ret && ret[3]) || (jQuery.cssNumber[origName] ? '' : 'px');
        }

        // background-* props affect original clone's values
        if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
          style[name] = 'inherit';
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[name];
      }
    },

    css: function (elem, name, extra, styles) {
      var val,
        num,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name);

      // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // If a hook was provided get the computed value from there
      if (hooks && 'get' in hooks) {
        val = hooks.get(elem, true, extra);
      }

      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }

      // Convert "normal" to computed value
      if (val === 'normal' && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === '' || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    },
  });

  jQuery.each(['height', 'width'], function (_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function (elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, 'display')) &&
            // Support: Safari 8+
            // Table columns in Safari have non-zero offsetWidth & zero
            // getBoundingClientRect().width unless display is changed.
            // Support: IE <=11 only
            // Running getBoundingClientRect on a disconnected node
            // in IE throws an error.
            (!elem.getClientRects().length || !elem.getBoundingClientRect().width)
            ? swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, dimension, extra);
              })
            : getWidthOrHeight(elem, dimension, extra);
        }
      },

      set: function (elem, value, extra) {
        var matches,
          styles = getStyles(elem),
          // Only read styles.position if the test has a chance to fail
          // to avoid forcing a reflow.
          scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === 'absolute',
          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
          boxSizingNeeded = scrollboxSizeBuggy || extra,
          isBorderBox =
            boxSizingNeeded && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box',
          subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;

        // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)
        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(
            elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] -
              parseFloat(styles[dimension]) -
              boxModelAdjustment(elem, dimension, 'border', false, styles) -
              0.5
          );
        }

        // Convert to pixels if value adjustment is needed
        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      },
    };
  });

  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (
        (parseFloat(curCSS(elem, 'marginLeft')) ||
          elem.getBoundingClientRect().left -
            swap(elem, { marginLeft: 0 }, function () {
              return elem.getBoundingClientRect().left;
            })) + 'px'
      );
    }
  });

  // These hooks are used by animate to expand properties
  jQuery.each(
    {
      margin: '',
      padding: '',
      border: 'Width',
    },
    function (prefix, suffix) {
      jQuery.cssHooks[prefix + suffix] = {
        expand: function (value) {
          var i = 0,
            expanded = {},
            // Assumes a single number if not a string
            parts = typeof value === 'string' ? value.split(' ') : [value];

          for (; i < 4; i++) {
            expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
          }

          return expanded;
        },
      };

      if (prefix !== 'margin') {
        jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
      }
    }
  );

  jQuery.fn.extend({
    css: function (name, value) {
      return access(
        this,
        function (elem, name, value) {
          var styles,
            len,
            map = {},
            i = 0;

          if (Array.isArray(name)) {
            styles = getStyles(elem);
            len = name.length;

            for (; i < len; i++) {
              map[name[i]] = jQuery.css(elem, name[i], false, styles);
            }

            return map;
          }

          return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
        },
        name,
        value,
        arguments.length > 1
      );
    },
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;

  Tween.prototype = {
    constructor: Tween,
    init: function (elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
    },
    cur: function () {
      var hooks = Tween.propHooks[this.prop];

      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function (percent) {
      var eased,
        hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](
          percent,
          this.options.duration * percent,
          0,
          1,
          this.options.duration
        );
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    },
  };

  Tween.prototype.init.prototype = Tween.prototype;

  Tween.propHooks = {
    _default: {
      get: function (tween) {
        var result;

        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if (
          tween.elem.nodeType !== 1 ||
          (tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null)
        ) {
          return tween.elem[tween.prop];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css(tween.elem, tween.prop, '');

        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === 'auto' ? 0 : result;
      },
      set: function (tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (
          tween.elem.nodeType === 1 &&
          (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)
        ) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      },
    },
  };

  // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function (tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    },
  };

  jQuery.easing = {
    linear: function (p) {
      return p;
    },
    swing: function (p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: 'swing',
  };

  jQuery.fx = Tween.prototype.init;

  // Back compat <1.8 extension point
  jQuery.fx.step = {};

  var fxNow,
    inProgress,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  }

  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return (fxNow = Date.now());
  }

  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which,
      i = 0,
      attrs = { height: type };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs['margin' + which] = attrs['padding' + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
      collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']),
      index = 0,
      length = collection.length;
    for (; index < length; index++) {
      if ((tween = collection[index].call(animation, prop, value))) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
      value,
      toggle,
      hooks,
      oldfire,
      propTween,
      restoreDisplay,
      display,
      isBox = 'width' in props || 'height' in props,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHiddenWithinTree(elem),
      dataShow = dataPriv.get(elem, 'fxshow');

    // Queue-skipping animations hijack the fx hooks
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, 'fx');
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;

      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, 'fx').length) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Detect show/hide animations
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === 'toggle';
        if (value === (hidden ? 'hide' : 'show')) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
            hidden = true;

            // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }
        orig[prop] = (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
      }
    }

    // Bail out if this is a no-op like .hide().hide()
    propTween = !jQuery.isEmptyObject(props);
    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    }

    // Restrict "overflow" and "display" styles during box animations
    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];

      // Identify a display type, preferring old show/hide data over the CSS cascade
      restoreDisplay = dataShow && dataShow.display;
      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, 'display');
      }
      display = jQuery.css(elem, 'display');
      if (display === 'none') {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, 'display');
          showHide([elem]);
        }
      }

      // Animate inline elements as inline-block
      if (display === 'inline' || (display === 'inline-block' && restoreDisplay != null)) {
        if (jQuery.css(elem, 'float') === 'none') {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });
            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === 'none' ? '' : display;
            }
          }
          style.display = 'inline-block';
        }
      }
    }

    if (opts.overflow) {
      style.overflow = 'hidden';
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }

    // Implement show/hide animations
    propTween = false;
    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ('hidden' in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, 'fxshow', { display: restoreDisplay });
        }

        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
        if (toggle) {
          dataShow.hidden = !hidden;
        }

        // Show elements before animating them
        if (hidden) {
          showHide([elem], true);
        }

        /* eslint-disable no-loop-func */

        anim.done(function () {
          /* eslint-enable no-loop-func */

          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }
          dataPriv.remove(elem, 'fxshow');
          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      }

      // Per-property setup
      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;
        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];
      if (hooks && 'expand' in hooks) {
        value = hooks.expand(value);
        delete props[name];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = jQuery.Deferred().always(function () {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function () {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }

        deferred.notifyWith(elem, [animation, percent, remaining]);

        // If there's more to do, yield
        if (percent < 1 && length) {
          return remaining;
        }

        // If this was an empty animation, synthesize a final progress notification
        if (!length) {
          deferred.notifyWith(elem, [animation, 1, 0]);
        }

        // Resolve the animation and report its conclusion
        deferred.resolveWith(elem, [animation]);
        return false;
      },
      animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(
          true,
          {
            specialEasing: {},
            easing: jQuery.easing._default,
          },
          options
        ),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function (prop, end) {
          var tween = jQuery.Tween(
            elem,
            animation.opts,
            prop,
            end,
            animation.opts.specialEasing[prop] || animation.opts.easing
          );
          animation.tweens.push(tween);
          return tween;
        },
        stop: function (gotoEnd) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }

          // Resolve when we played the last frame; otherwise, reject
          if (gotoEnd) {
            deferred.notifyWith(elem, [animation, 1, 0]);
            deferred.resolveWith(elem, [animation, gotoEnd]);
          } else {
            deferred.rejectWith(elem, [animation, gotoEnd]);
          }
          return this;
        },
      }),
      props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }
        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    // Attach callbacks from options
    animation
      .progress(animation.opts.progress)
      .done(animation.opts.done, animation.opts.complete)
      .fail(animation.opts.fail)
      .always(animation.opts.always);

    jQuery.fx.timer(
      jQuery.extend(tick, {
        elem: elem,
        anim: animation,
        queue: animation.opts.queue,
      })
    );

    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      '*': [
        function (prop, value) {
          var tween = this.createTween(prop, value);
          adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
          return tween;
        },
      ],
    },

    tweener: function (props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ['*'];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
        index = 0,
        length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },

    prefilters: [defaultPrefilter],

    prefilter: function (callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    },
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt =
      speed && typeof speed === 'object'
        ? jQuery.extend({}, speed)
        : {
            complete: fn || (!fn && easing) || (isFunction(speed) && speed),
            duration: speed,
            easing: (fn && easing) || (easing && !isFunction(easing) && easing),
          };

    // Go to the end state if fx are off
    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== 'number') {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    }

    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = 'fx';
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function (speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return (
        this.filter(isHiddenWithinTree)
          .css('opacity', 0)
          .show()

          // Animate to the value specified
          .end()
          .animate({ opacity: to }, speed, easing, callback)
      );
    },
    animate: function (prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
        optall = jQuery.speed(speed, easing, callback),
        doAnimation = function () {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);

          // Empty animations, or finishing resolves immediately
          if (empty || dataPriv.get(this, 'finish')) {
            anim.stop(true);
          }
        };

      doAnimation.finish = doAnimation;

      return empty || optall.queue === false
        ? this.each(doAnimation)
        : this.queue(optall.queue, doAnimation);
    },
    stop: function (type, clearQueue, gotoEnd) {
      var stopQueue = function (hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== 'string') {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue) {
        this.queue(type || 'fx', []);
      }

      return this.each(function () {
        var dequeue = true,
          index = type != null && type + 'queueHooks',
          timers = jQuery.timers,
          data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--; ) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function (type) {
      if (type !== false) {
        type = type || 'fx';
      }
      return this.each(function () {
        var index,
          data = dataPriv.get(this),
          queue = data[type + 'queue'],
          hooks = data[type + 'queueHooks'],
          timers = jQuery.timers,
          length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }

        // Look for any active animations, and finish them
        for (index = timers.length; index--; ) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }

        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    },
  });

  jQuery.each(['toggle', 'show', 'hide'], function (_i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === 'boolean'
        ? cssFn.apply(this, arguments)
        : this.animate(genFx(name, true), speed, easing, callback);
    };
  });

  // Generate shortcuts for custom animations
  jQuery.each(
    {
      slideDown: genFx('show'),
      slideUp: genFx('hide'),
      slideToggle: genFx('toggle'),
      fadeIn: { opacity: 'show' },
      fadeOut: { opacity: 'hide' },
      fadeToggle: { opacity: 'toggle' },
    },
    function (name, props) {
      jQuery.fn[name] = function (speed, easing, callback) {
        return this.animate(props, speed, easing, callback);
      };
    }
  );

  jQuery.timers = [];
  jQuery.fx.tick = function () {
    var timer,
      i = 0,
      timers = jQuery.timers;

    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i];

      // Run the timer and safely remove it when done (allowing for external removal)
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,

    // Default speed
    _default: 400,
  };

  // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || 'fx';

    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);
      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement('input'),
      select = document.createElement('select'),
      opt = select.appendChild(document.createElement('option'));

    input.type = 'checkbox';

    // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== '';

    // Support: IE <=11 only
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: IE <=11 only
    // An input loses its value after becoming a radio
    input = document.createElement('input');
    input.value = 't';
    input.type = 'radio';
    support.radioValue = input.value === 't';
  })();

  var boolHook,
    attrHandle = jQuery.expr.attrHandle;

  jQuery.fn.extend({
    attr: function (name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },

    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    },
  });

  jQuery.extend({
    attr: function (elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set attributes on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === 'undefined') {
        return jQuery.prop(elem, name, value);
      }

      // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks =
          jQuery.attrHooks[name.toLowerCase()] ||
          (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + '');
        return value;
      }

      if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name);

      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },

    attrHooks: {
      type: {
        set: function (elem, value) {
          if (!support.radioValue && value === 'radio' && nodeName(elem, 'input')) {
            var val = elem.value;
            elem.setAttribute('type', value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        },
      },
    },

    removeAttr: function (elem, value) {
      var name,
        i = 0,
        // Attribute names can contain non-HTML whitespace characters
        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
        attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while ((name = attrNames[i++])) {
          elem.removeAttribute(name);
        }
      }
    },
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    },
  };

  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
        handle,
        lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }
      return ret;
    };
  });

  var rfocusable = /^(?:input|select|textarea|button)$/i,
    rclickable = /^(?:a|area)$/i;

  jQuery.fn.extend({
    prop: function (name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },

    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    },
  });

  jQuery.extend({
    prop: function (elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return (elem[name] = value);
      }

      if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },

    propHooks: {
      tabIndex: {
        get: function (elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, 'tabindex');

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || (rclickable.test(elem.nodeName) && elem.href)) {
            return 0;
          }

          return -1;
        },
      },
    },

    propFix: {
      for: 'htmlFor',
      class: 'className',
    },
  });

  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function (elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      },
    };
  }

  jQuery.each(
    [
      'tabIndex',
      'readOnly',
      'maxLength',
      'cellSpacing',
      'cellPadding',
      'rowSpan',
      'colSpan',
      'useMap',
      'frameBorder',
      'contentEditable',
    ],
    function () {
      jQuery.propFix[this.toLowerCase()] = this;
    }
  );

  // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(' ');
  }

  function getClass(elem) {
    return (elem.getAttribute && elem.getAttribute('class')) || '';
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === 'string') {
      return value.match(rnothtmlwhite) || [];
    }
    return [];
  }

  jQuery.fn.extend({
    addClass: function (value) {
      var classes,
        elem,
        cur,
        curValue,
        clazz,
        j,
        finalValue,
        i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while ((elem = this[i++])) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';

          if (cur) {
            j = 0;
            while ((clazz = classes[j++])) {
              if (cur.indexOf(' ' + clazz + ' ') < 0) {
                cur += clazz + ' ';
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              elem.setAttribute('class', finalValue);
            }
          }
        }
      }

      return this;
    },

    removeClass: function (value) {
      var classes,
        elem,
        cur,
        curValue,
        clazz,
        j,
        finalValue,
        i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr('class', '');
      }

      classes = classesToArray(value);

      if (classes.length) {
        while ((elem = this[i++])) {
          curValue = getClass(elem);

          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';

          if (cur) {
            j = 0;
            while ((clazz = classes[j++])) {
              // Remove *all* instances
              while (cur.indexOf(' ' + clazz + ' ') > -1) {
                cur = cur.replace(' ' + clazz + ' ', ' ');
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              elem.setAttribute('class', finalValue);
            }
          }
        }
      }

      return this;
    },

    toggleClass: function (value, stateVal) {
      var type = typeof value,
        isValidValue = type === 'string' || Array.isArray(value);

      if (typeof stateVal === 'boolean' && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while ((className = classNames[i++])) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }

          // Toggle whole class name
        } else if (value === undefined || type === 'boolean') {
          className = getClass(this);
          if (className) {
            // Store className if set
            dataPriv.set(this, '__className__', className);
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if (this.setAttribute) {
            this.setAttribute(
              'class',
              className || value === false ? '' : dataPriv.get(this, '__className__') || ''
            );
          }
        }
      });
    },

    hasClass: function (selector) {
      var className,
        elem,
        i = 0;

      className = ' ' + selector + ' ';
      while ((elem = this[i++])) {
        if (
          elem.nodeType === 1 &&
          (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1
        ) {
          return true;
        }
      }

      return false;
    },
  });

  var rreturn = /\r/g;

  jQuery.fn.extend({
    val: function (value) {
      var hooks,
        ret,
        valueIsFunction,
        elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
            return ret;
          }

          ret = elem.value;

          // Handle most common string cases
          if (typeof ret === 'string') {
            return ret.replace(rreturn, '');
          }

          // Handle cases where value is null/undef or number
          return ret == null ? '' : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);

      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = '';
        } else if (typeof val === 'number') {
          val += '';
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? '' : value + '';
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

        // If set returns undefined, fall back to normal setting
        if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
          this.value = val;
        }
      });
    },
  });

  jQuery.extend({
    valHooks: {
      option: {
        get: function (elem) {
          var val = jQuery.find.attr(elem, 'value');
          return val != null
            ? val
            : // Support: IE <=10 - 11 only
              // option.text throws exceptions (#14686, #14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem));
        },
      },
      select: {
        get: function (elem) {
          var value,
            option,
            i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === 'select-one',
            values = one ? null : [],
            max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];

            // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)
            if (
              (option.selected || i === index) &&
              // Don't return options that are disabled or in a disabled optgroup
              !option.disabled &&
              (!option.parentNode.disabled || !nodeName(option.parentNode, 'optgroup'))
            ) {
              // Get the specific value for the option
              value = jQuery(option).val();

              // We don't need an array for one selects
              if (one) {
                return value;
              }

              // Multi-Selects return an array
              values.push(value);
            }
          }

          return values;
        },

        set: function (elem, value) {
          var optionSet,
            option,
            options = elem.options,
            values = jQuery.makeArray(value),
            i = options.length;

          while (i--) {
            option = options[i];

            /* eslint-disable no-cond-assign */

            if (
              (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1)
            ) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        },
      },
    },
  });

  // Radios and checkboxes getter/setter
  jQuery.each(['radio', 'checkbox'], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (Array.isArray(value)) {
          return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1);
        }
      },
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute('value') === null ? 'on' : elem.value;
      };
    }
  });

  // Return jQuery for attributes-only inclusion

  support.focusin = 'onfocusin' in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    stopPropagationCallback = function (e) {
      e.stopPropagation();
    };

  jQuery.extend(jQuery.event, {
    trigger: function (event, data, elem, onlyHandlers) {
      var i,
        cur,
        tmp,
        bubbleType,
        ontype,
        handle,
        special,
        lastElement,
        eventPath = [elem || document],
        type = hasOwn.call(event, 'type') ? event.type : event,
        namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];

      cur = lastElement = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf('.') > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split('.');
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(':') < 0 && 'on' + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando]
        ? event
        : new jQuery.Event(type, typeof event === 'object' && event);

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join('.');
      event.rnamespace = event.namespace
        ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)')
        : null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);

      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type;

        // jQuery handler
        handle =
          (dataPriv.get(cur, 'events') || Object.create(null))[event.type] &&
          dataPriv.get(cur, 'handle');
        if (handle) {
          handle.apply(cur, data);
        }

        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if (
          (!special._default || special._default.apply(eventPath.pop(), data) === false) &&
          acceptData(elem)
        ) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },

    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function (type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true,
      });

      jQuery.event.trigger(e, null, elem);
    },
  });

  jQuery.fn.extend({
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    },
  });

  // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
  if (!support.focusin) {
    jQuery.each({ focus: 'focusin', blur: 'focusout' }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function (event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function () {
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function () {
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        },
      };
    });
  }
  var location = window.location;

  var nonce = { guid: Date.now() };

  var rquery = /\?/;

  // Cross-browser xml parsing
  jQuery.parseXML = function (data) {
    var xml, parserErrorElem;
    if (!data || typeof data !== 'string') {
      return null;
    }

    // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.
    try {
      xml = new window.DOMParser().parseFromString(data, 'text/xml');
    } catch (e) {}

    parserErrorElem = xml && xml.getElementsByTagName('parsererror')[0];
    if (!xml || parserErrorElem) {
      jQuery.error(
        'Invalid XML: ' +
          (parserErrorElem
            ? jQuery
                .map(parserErrorElem.childNodes, function (el) {
                  return el.textContent;
                })
                .join('\n')
            : data)
      );
    }
    return xml;
  };

  var rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(
            prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']',
            v,
            traditional,
            add
          );
        }
      });
    } else if (!traditional && toType(obj) === 'object') {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix,
      s = [],
      add = function (key, valueOrFunction) {
        // If value is a function, invoke it and use its return value
        var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

        s[s.length] =
          encodeURIComponent(key) + '=' + encodeURIComponent(value == null ? '' : value);
      };

    if (a == null) {
      return '';
    }

    // If an array was passed in, assume that it is an array of form elements.
    if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }

    // Return the resulting serialization
    return s.join('&');
  };

  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, 'elements');
        return elements ? jQuery.makeArray(elements) : this;
      })
        .filter(function () {
          var type = this.type;

          // Use .is( ":disabled" ) so that fieldset[disabled] works
          return (
            this.name &&
            !jQuery(this).is(':disabled') &&
            rsubmittable.test(this.nodeName) &&
            !rsubmitterTypes.test(type) &&
            (this.checked || !rcheckableType.test(type))
          );
        })
        .map(function (_i, elem) {
          var val = jQuery(this).val();

          if (val == null) {
            return null;
          }

          if (Array.isArray(val)) {
            return jQuery.map(val, function (val) {
              return { name: elem.name, value: val.replace(rCRLF, '\r\n') };
            });
          }

          return { name: elem.name, value: val.replace(rCRLF, '\r\n') };
        })
        .get();
    },
  });

  var r20 = /%20/g,
    rhash = /#.*$/,
    rantiCache = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = '*/'.concat('*'),
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement('a');

  originAnchor.href = location.href;

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== 'string') {
        func = dataTypeExpression;
        dataTypeExpression = '*';
      }

      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while ((dataType = dataTypes[i++])) {
          // Prepend if requested
          if (dataType[0] === '+') {
            dataType = dataType.slice(1) || '*';
            (structure[dataType] = structure[dataType] || []).unshift(func);

            // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
      seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (
          typeof dataTypeOrTransport === 'string' &&
          !seekingTransport &&
          !inspected[dataTypeOrTransport]
        ) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || (!inspected['*'] && inspect('*'));
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend(target, src) {
    var key,
      deep,
      flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
      type,
      finalDataType,
      firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === '*') {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
      }
    }

    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }

      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
      current,
      conv,
      tmp,
      prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }

      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === '*') {
          current = prev;

          // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== '*' && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + ' ' + current] || converters['* ' + current];

          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(' ');
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];

                    // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s.throws) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: 'parsererror',
                  error: conv ? e : 'No conversion from ' + prev + ' to ' + current,
                };
              }
            }
          }
        }
      }
    }

    return { state: 'success', data: response };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
      url: location.href,
      type: 'GET',
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',

      /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

      accepts: {
        '*': allTypes,
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript',
      },

      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/,
      },

      responseFields: {
        xml: 'responseXML',
        text: 'responseText',
        json: 'responseJSON',
      },

      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        '* text': String,

        // Text to html (true = no transformation)
        'text html': true,

        // Evaluate text as a json expression
        'text json': JSON.parse,

        // Parse text as xml
        'text xml': jQuery.parseXML,
      },

      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true,
      },
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function (target, settings) {
      return settings
        ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
        : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target);
    },

    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),

    // Main method
    ajax: function (url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === 'object') {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};

      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString,
        responseHeaders,
        // timeout handle
        timeoutTimer,
        // Url cleanup var
        urlAnchor,
        // Request state (becomes false upon send and true upon completion)
        completed,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // uncached part of the url
        uncached,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext =
          s.context && (callbackContext.nodeType || callbackContext.jquery)
            ? jQuery(callbackContext)
            : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks('once memory'),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
        // Default abort message
        strAbort = 'canceled',
        // Fake xhr
        jqXHR = {
          readyState: 0,

          // Builds headers hashtable if needed
          getResponseHeader: function (key) {
            var match;
            if (completed) {
              if (!responseHeaders) {
                responseHeaders = {};
                while ((match = rheaders.exec(responseHeadersString))) {
                  responseHeaders[match[1].toLowerCase() + ' '] = (
                    responseHeaders[match[1].toLowerCase() + ' '] || []
                  ).concat(match[2]);
                }
              }
              match = responseHeaders[key.toLowerCase() + ' '];
            }
            return match == null ? null : match.join(', ');
          },

          // Raw string
          getAllResponseHeaders: function () {
            return completed ? responseHeadersString : null;
          },

          // Caches the header
          setRequestHeader: function (name, value) {
            if (completed == null) {
              name = requestHeadersNames[name.toLowerCase()] =
                requestHeadersNames[name.toLowerCase()] || name;
              requestHeaders[name] = value;
            }
            return this;
          },

          // Overrides response content-type header
          overrideMimeType: function (type) {
            if (completed == null) {
              s.mimeType = type;
            }
            return this;
          },

          // Status-dependent callbacks
          statusCode: function (map) {
            var code;
            if (map) {
              if (completed) {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              } else {
                // Lazy-add the new callbacks in a way that preserves old ones
                for (code in map) {
                  statusCode[code] = [statusCode[code], map[code]];
                }
              }
            }
            return this;
          },

          // Cancel the request
          abort: function (statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          },
        };

      // Attach deferreds
      deferred.promise(jqXHR);

      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || location.href) + '').replace(rprotocol, location.protocol + '//');

      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || [''];

      // A cross-domain request is in order when the origin doesn't match the current origin.
      if (s.crossDomain == null) {
        urlAnchor = document.createElement('a');

        // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;

          // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain =
            originAnchor.protocol + '//' + originAnchor.host !==
            urlAnchor.protocol + '//' + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }

      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== 'string') {
        s.data = jQuery.param(s.data, s.traditional);
      }

      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

      // If request was aborted inside a prefilter, stop there
      if (completed) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
      fireGlobals = jQuery.event && s.global;

      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger('ajaxStart');
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation
      cacheURL = s.url.replace(rhash, '');

      // More options handling for requests with no content
      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length);

        // If data is available and should be processed, append data to url
        if (s.data && (s.processData || typeof s.data === 'string')) {
          cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;

          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add or update anti-cache param if needed
        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, '$1');
          uncached = (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce.guid++ + uncached;
        }

        // Put hash and anti-cache on the URL that will be requested (gh-1732)
        s.url = cacheURL + uncached;

        // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (
        s.data &&
        s.processData &&
        (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0
      ) {
        s.data = s.data.replace(r20, '+');
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
        }
      }

      // Set the correct header, if data is being sent
      if ((s.data && s.hasContent && s.contentType !== false) || options.contentType) {
        jqXHR.setRequestHeader('Content-Type', s.contentType);
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader(
        'Accept',
        s.dataTypes[0] && s.accepts[s.dataTypes[0]]
          ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '')
          : s.accepts['*']
      );

      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }

      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = 'abort';

      // Install callbacks on deferreds
      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error);

      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

      // If no transport, we auto-abort
      if (!transport) {
        done(-1, 'No Transport');
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger('ajaxSend', [jqXHR, s]);
        }

        // If request was aborted inside ajaxSend, stop there
        if (completed) {
          return jqXHR;
        }

        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort('timeout');
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          }

          // Propagate others as results
          done(-1, e);
        }
      }

      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
          success,
          error,
          response,
          modified,
          statusText = nativeStatusText;

        // Ignore repeat invocations
        if (completed) {
          return;
        }

        completed = true;

        // Clear timeout if it exists
        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || '';

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = (status >= 200 && status < 300) || status === 304;

        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }

        // Use a noop converter for missing script but not if jsonp
        if (
          !isSuccess &&
          jQuery.inArray('script', s.dataTypes) > -1 &&
          jQuery.inArray('json', s.dataTypes) < 0
        ) {
          s.converters['text script'] = function () {};
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);

        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader('Last-Modified');
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader('etag');
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }

          // if no content
          if (status === 204 || s.type === 'HEAD') {
            statusText = 'nocontent';

            // if not modified
          } else if (status === 304) {
            statusText = 'notmodified';

            // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = 'error';
            if (status < 0) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + '';

        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        // Status-dependent callbacks
        jqXHR.statusCode(statusCode);
        statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
            jqXHR,
            s,
            isSuccess ? success : error,
          ]);
        }

        // Complete
        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger('ajaxComplete', [jqXHR, s]);

          // Handle the global AJAX counter
          if (!--jQuery.active) {
            jQuery.event.trigger('ajaxStop');
          }
        }
      }

      return jqXHR;
    },

    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, 'json');
    },

    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, 'script');
    },
  });

  jQuery.each(['get', 'post'], function (_i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      // The url can be an options object (which then must have .url)
      return jQuery.ajax(
        jQuery.extend(
          {
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback,
          },
          jQuery.isPlainObject(url) && url
        )
      );
    };
  });

  jQuery.ajaxPrefilter(function (s) {
    var i;
    for (i in s.headers) {
      if (i.toLowerCase() === 'content-type') {
        s.contentType = s.headers[i] || '';
      }
    }
  });

  jQuery._evalUrl = function (url, options, doc) {
    return jQuery.ajax({
      url: url,

      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: 'GET',
      dataType: 'script',
      cache: true,
      async: false,
      global: false,

      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        'text script': function () {},
      },
      dataFilter: function (response) {
        jQuery.globalEval(response, options, doc);
      },
    });
  };

  jQuery.fn.extend({
    wrapAll: function (html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        }

        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap
          .map(function () {
            var elem = this;

            while (elem.firstElementChild) {
              elem = elem.firstElementChild;
            }

            return elem;
          })
          .append(this);
      }

      return this;
    },

    wrapInner: function (html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
          contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },

    wrap: function (html) {
      var htmlIsFunction = isFunction(html);

      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },

    unwrap: function (selector) {
      this.parent(selector)
        .not('body')
        .each(function () {
          jQuery(this).replaceWith(this.childNodes);
        });
      return this;
    },
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };
  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
      // File protocol always yields status code 0, assume 200
      0: 200,

      // Support: IE <=9 only
      // #1450: sometimes IE returns 1223 when it should be 204
      1223: 204,
    },
    xhrSupported = jQuery.ajaxSettings.xhr();

  support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;

  jQuery.ajaxTransport(function (options) {
    var callback, errorCallback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || (xhrSupported && !options.crossDomain)) {
      return {
        send: function (headers, complete) {
          var i,
            xhr = options.xhr();

          xhr.open(options.type, options.url, options.async, options.username, options.password);

          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }

          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
          }

          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }

          // Callback
          callback = function (type) {
            return function () {
              if (callback) {
                callback =
                  errorCallback =
                  xhr.onload =
                  xhr.onerror =
                  xhr.onabort =
                  xhr.ontimeout =
                  xhr.onreadystatechange =
                    null;

                if (type === 'abort') {
                  xhr.abort();
                } else if (type === 'error') {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== 'number') {
                    complete(0, 'error');
                  } else {
                    complete(
                      // File: protocol always yields status 0; see #8605, #14207
                      xhr.status,
                      xhr.statusText
                    );
                  }
                } else {
                  complete(
                    xhrSuccessStatus[xhr.status] || xhr.status,
                    xhr.statusText,

                    // Support: IE <=9 only
                    // IE9 has no XHR2 but throws on binary (trac-11426)
                    // For XHR2 non-text, let the caller handle it (gh-2498)
                    (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string'
                      ? { binary: xhr.response }
                      : { text: xhr.responseText },
                    xhr.getAllResponseHeaders()
                  );
                }
              }
            };
          };

          // Listen to events
          xhr.onload = callback();
          errorCallback = xhr.onerror = xhr.ontimeout = callback('error');

          // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (callback) {
                    errorCallback();
                  }
                });
              }
            };
          }

          // Create the abort callback
          callback = callback('abort');

          try {
            // Do send the request (this may raise an exception)
            xhr.send((options.hasContent && options.data) || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (callback) {
              throw e;
            }
          }
        },

        abort: function () {
          if (callback) {
            callback();
          }
        },
      };
    }
  });

  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  });

  // Install script dataType
  jQuery.ajaxSetup({
    accepts: {
      script:
        'text/javascript, application/javascript, ' +
        'application/ecmascript, application/x-ecmascript',
    },
    contents: {
      script: /\b(?:java|ecma)script\b/,
    },
    converters: {
      'text script': function (text) {
        jQuery.globalEval(text);
        return text;
      },
    },
  });

  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter('script', function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = 'GET';
    }
  });

  // Bind script tag hack transport
  jQuery.ajaxTransport('script', function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, callback;
      return {
        send: function (_, complete) {
          script = jQuery('<script>')
            .attr(s.scriptAttrs || {})
            .prop({ charset: s.scriptCharset, src: s.url })
            .on(
              'load error',
              (callback = function (evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === 'error' ? 404 : 200, evt.type);
                }
              })
            );

          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild(script[0]);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        },
      };
    }
  });

  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: 'callback',
    jsonpCallback: function () {
      var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce.guid++;
      this[callback] = true;
      return callback;
    },
  });

  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
    var callbackName,
      overwritten,
      responseContainer,
      jsonProp =
        s.jsonp !== false &&
        (rjsonp.test(s.url)
          ? 'url'
          : typeof s.data === 'string' &&
            (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 &&
            rjsonp.test(s.data) &&
            'data');

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === 'jsonp') {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
        ? s.jsonpCallback()
        : s.jsonpCallback;

      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters['script json'] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + ' was not called');
        }
        return responseContainer[0];
      };

      // Force json dataType
      s.dataTypes[0] = 'json';

      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName);

          // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        }

        // Save back as free
        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // Save the callback name for future use
          oldCallbacks.push(callbackName);
        }

        // Call if it was a function and we have a response
        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return 'script';
    }
  });

  // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337
  support.createHTMLDocument = (function () {
    var body = document.implementation.createHTMLDocument('').body;
    body.innerHTML = '<form></form><form></form>';
    return body.childNodes.length === 2;
  })();

  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== 'string') {
      return [];
    }
    if (typeof context === 'boolean') {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument('');

        // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)
        base = context.createElement('base');
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && [];

    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };

  /**
   * Load a url into a page
   */
  jQuery.fn.load = function (url, params, callback) {
    var selector,
      type,
      response,
      self = this,
      off = url.indexOf(' ');

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    }

    // If it's a function
    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if (params && typeof params === 'object') {
      type = 'POST';
    }

    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery
        .ajax({
          url: url,

          // If "type" variable is undefined, then "GET" method will be used.
          // Make value of this field explicit since
          // user can override it through ajaxSetup method
          type: type || 'GET',
          dataType: 'html',
          data: params,
        })
        .done(function (responseText) {
          // Save response for use in complete callback
          response = arguments;

          self.html(
            selector
              ? // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector)
              : // Otherwise use the full result
                responseText
          );

          // If the request succeeds, this function gets "data", "status", "jqXHR"
          // but they are ignored because response was set above.
          // If it fails, this function gets "jqXHR", "status", "error"
        })
        .always(
          callback &&
            function (jqXHR, status) {
              self.each(function () {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            }
        );
    }

    return this;
  };

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function (elem, options, i) {
      var curPosition,
        curLeft,
        curCSSTop,
        curTop,
        curOffset,
        curCSSLeft,
        calculatePosition,
        position = jQuery.css(elem, 'position'),
        curElem = jQuery(elem),
        props = {};

      // Set position first, in-case top/left are set even on static elem
      if (position === 'static') {
        elem.style.position = 'relative';
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, 'top');
      curCSSLeft = jQuery.css(elem, 'left');
      calculatePosition =
        (position === 'absolute' || position === 'fixed') &&
        (curCSSTop + curCSSLeft).indexOf('auto') > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ('using' in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    },
  };

  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function (options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined
          ? this
          : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i);
            });
      }

      var rect,
        win,
        elem = this[0];

      if (!elem) {
        return;
      }

      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error
      if (!elem.getClientRects().length) {
        return { top: 0, left: 0 };
      }

      // Get document-relative position by adding viewport scroll to viewport-relative gBCR
      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset,
      };
    },

    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function () {
      if (!this[0]) {
        return;
      }

      var offsetParent,
        offset,
        doc,
        elem = this[0],
        parentOffset = { top: 0, left: 0 };

      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if (jQuery.css(elem, 'position') === 'fixed') {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset();

        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;
        while (
          offsetParent &&
          (offsetParent === doc.body || offsetParent === doc.documentElement) &&
          jQuery.css(offsetParent, 'position') === 'static'
        ) {
          offsetParent = offsetParent.parentNode;
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, 'borderTopWidth', true);
          parentOffset.left += jQuery.css(offsetParent, 'borderLeftWidth', true);
        }
      }

      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
        left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true),
      };
    },

    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function () {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    },
  });

  // Create scrollLeft and scrollTop methods
  jQuery.each({ scrollLeft: 'pageXOffset', scrollTop: 'pageYOffset' }, function (method, prop) {
    var top = 'pageYOffset' === prop;

    jQuery.fn[method] = function (val) {
      return access(
        this,
        function (elem, method, val) {
          // Coalesce documents and windows
          var win;
          if (isWindow(elem)) {
            win = elem;
          } else if (elem.nodeType === 9) {
            win = elem.defaultView;
          }

          if (val === undefined) {
            return win ? win[prop] : elem[method];
          }

          if (win) {
            win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
          } else {
            elem[method] = val;
          }
        },
        method,
        val,
        arguments.length
      );
    };
  });

  // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each(['top', 'left'], function (_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop);

        // If curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
      }
    });
  });

  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({ Height: 'height', Width: 'width' }, function (name, type) {
    jQuery.each(
      {
        padding: 'inner' + name,
        content: type,
        '': 'outer' + name,
      },
      function (defaultExtra, funcName) {
        // Margin is only for outerHeight, outerWidth
        jQuery.fn[funcName] = function (margin, value) {
          var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'),
            extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');

          return access(
            this,
            function (elem, type, value) {
              var doc;

              if (isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf('outer') === 0
                  ? elem['inner' + name]
                  : elem.document.documentElement['client' + name];
              }

              // Get document width or height
              if (elem.nodeType === 9) {
                doc = elem.documentElement;

                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest
                return Math.max(
                  elem.body['scroll' + name],
                  doc['scroll' + name],
                  elem.body['offset' + name],
                  doc['offset' + name],
                  doc['client' + name]
                );
              }

              return value === undefined
                ? // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery.css(elem, type, extra)
                : // Set width or height on the element
                  jQuery.style(elem, type, value, extra);
            },
            type,
            chainable ? margin : undefined,
            chainable
          );
        };
      }
    );
  });

  jQuery.each(
    ['ajaxStart', 'ajaxStop', 'ajaxComplete', 'ajaxError', 'ajaxSuccess', 'ajaxSend'],
    function (_i, type) {
      jQuery.fn[type] = function (fn) {
        return this.on(type, fn);
      };
    }
  );

  jQuery.fn.extend({
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },

    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1
        ? this.off(selector, '**')
        : this.off(types, selector || '**', fn);
    },

    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
  });

  jQuery.each(
    (
      'blur focus focusin focusout resize scroll click dblclick ' +
      'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
      'change select submit keydown keypress keyup contextmenu'
    ).split(' '),
    function (_i, name) {
      // Handle event binding
      jQuery.fn[name] = function (data, fn) {
        return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
      };
    }
  );

  // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon
  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === 'string') {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    }

    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if (!isFunction(fn)) {
      return undefined;
    }

    // Simulated bind
    args = slice.call(arguments, 2);
    proxy = function () {
      return fn.apply(context || this, args.concat(slice.call(arguments)));
    };

    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };
  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;

  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (
      (type === 'number' || type === 'string') &&
      // parseFloat NaNs numeric-cast false positives ("")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      !isNaN(obj - parseFloat(obj))
    );
  };

  jQuery.trim = function (text) {
    return text == null ? '' : (text + '').replace(rtrim, '');
  };

  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (typeof define === 'function' && define.amd) {
    define('jquery', [], function () {
      return jQuery;
    });
  }

  var // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)
  if (typeof noGlobal === 'undefined') {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});
// #endregion

// #region / Popper v2.11.2
//   _____
//  |  __ \
//  | |__) |__  _ __  _ __   ___ _ __
//  |  ___/ _ \| '_ \| '_ \ / _ \ '__|
//  | |  | (_) | |_) | |_) |  __/ |
//  |_|   \___/| .__/| .__/ \___|_|
//             | |   | |
//             |_|   |_|                v2.11.2
/**
 * @popperjs/core v2.11.2 (https://popper.js.org/)
 * Released under the MIT license (https://github.com/floating-ui/floating-ui/blob/master/LICENSE)
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined'
    ? factory(exports)
    : typeof define === 'function' && define.amd
    ? define(['exports'], factory)
    : ((global = typeof globalThis !== 'undefined' ? globalThis : global || self),
      factory((global.Popper = {})));
})(this, function (exports) {
  'use strict';

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
      // Fallback to 1 in case both values are `0`

      if (offsetWidth > 0) {
        scaleX = round(rect.width) / offsetWidth || 1;
      }

      if (offsetHeight > 0) {
        scaleY = round(rect.height) / offsetHeight || 1;
      }
    }

    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY,
    };
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop,
    };
  }

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop,
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return (
      (isElement(element)
        ? element.ownerDocument // $FlowFixMe[prop-missing]
        : element.document) || window.document
    ).documentElement;
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return (
      getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft
    );
  }

  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.

  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0,
    };
    var offsets = {
      x: 0,
      y: 0,
    };

    if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {
      if (
        getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)
      ) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height,
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height,
    };
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback
    );
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody =
      scrollParent ===
      ((_element$ownerDocumen = element.ownerDocument) == null
        ? void 0
        : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody
      ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : [])
      : scrollParent;
    var updatedList = list.concat(target);
    return isBody
      ? updatedList // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      : updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getTrueOffsetParent(element) {
    if (
      !isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle(element).position === 'fixed'
    ) {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block

  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (
        css.transform !== 'none' ||
        css.perspective !== 'none' ||
        css.contain === 'paint' ||
        ['transform', 'perspective'].indexOf(css.willChange) !== -1 ||
        (isFirefox && css.willChange === 'filter') ||
        (isFirefox && css.filter && css.filter !== 'none')
      ) {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.

  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (
      offsetParent &&
      isTableElement(offsetParent) &&
      getComputedStyle(offsetParent).position === 'static'
    ) {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (
      offsetParent &&
      (getNodeName(offsetParent) === 'html' ||
        (getNodeName(offsetParent) === 'body' &&
          getComputedStyle(offsetParent).position === 'static'))
    ) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + '-' + start, placement + '-' + end]);
  }, []);
  var placements = /*#__PURE__*/ []
    .concat(basePlacements, [auto])
    .reduce(function (acc, placement) {
      return acc.concat([placement, placement + '-' + start, placement + '-' + end]);
    }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite,
  ];

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(
        orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        })
      );
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (
      var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
      _key < _len;
      _key++
    ) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR =
    'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR =
    'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      []
        .concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function (value, index, self) {
          return self.indexOf(value) === index;
        })
        .forEach(function (key) {
          switch (key) {
            case 'name':
              if (typeof modifier.name !== 'string') {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    String(modifier.name),
                    '"name"',
                    '"string"',
                    '"' + String(modifier.name) + '"'
                  )
                );
              }

              break;

            case 'enabled':
              if (typeof modifier.enabled !== 'boolean') {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"enabled"',
                    '"boolean"',
                    '"' + String(modifier.enabled) + '"'
                  )
                );
              }

              break;

            case 'phase':
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"phase"',
                    'either ' + modifierPhases.join(', '),
                    '"' + String(modifier.phase) + '"'
                  )
                );
              }

              break;

            case 'fn':
              if (typeof modifier.fn !== 'function') {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"fn"',
                    '"function"',
                    '"' + String(modifier.fn) + '"'
                  )
                );
              }

              break;

            case 'effect':
              if (modifier.effect != null && typeof modifier.effect !== 'function') {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"effect"',
                    '"function"',
                    '"' + String(modifier.fn) + '"'
                  )
                );
              }

              break;

            case 'requires':
              if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"requires"',
                    '"array"',
                    '"' + String(modifier.requires) + '"'
                  )
                );
              }

              break;

            case 'requiresIfExists':
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"requiresIfExists"',
                    '"array"',
                    '"' + String(modifier.requiresIfExists) + '"'
                  )
                );
              }

              break;

            case 'options':
            case 'data':
              break;

            default:
              console.error(
                'PopperJS: an invalid property has been provided to the "' +
                  modifier.name +
                  '" modifier, valid properties are ' +
                  VALID_PROPERTIES.map(function (s) {
                    return '"' + s + '"';
                  }).join(', ') +
                  '; but "' +
                  key +
                  '" was provided.'
              );
          }

          modifier.requires &&
            modifier.requires.forEach(function (requirement) {
              if (
                modifiers.find(function (mod) {
                  return mod.name === requirement;
                }) == null
              ) {
                console.error(
                  format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement)
                );
              }
            });
        });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing
        ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data),
          })
        : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y,
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body =
      (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(
      html.scrollWidth,
      html.clientWidth,
      body ? body.scrollWidth : 0,
      body ? body.clientWidth : 0
    );
    var height = max(
      html.scrollHeight,
      html.clientHeight,
      body ? body.scrollHeight : 0,
      body ? body.clientHeight : 0
    );
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y,
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...

        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false

    return false;
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height,
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport
      ? rectToClientRect(getViewportRect(element))
      : isElement(clippingParent)
      ? getInnerBoundingClientRect(clippingParent)
      : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`

  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement =
      canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

    return clippingParents.filter(function (clippingParent) {
      return (
        isElement(clippingParent) &&
        contains(clippingParent, clipperElement) &&
        getNodeName(clippingParent) !== 'body'
      );
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents

  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents =
      boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height,
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height,
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY,
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY,
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y,
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(
      typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements)
    );
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(
      isElement(element)
        ? element
        : element.contextElement || getDocumentElement(state.elements.popper),
      boundary,
      rootBoundary
    );
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement,
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right,
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  var INVALID_ELEMENT_ERROR =
    'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR =
    'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute',
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper,
        },
        attributes: {},
        styles: {},
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options =
            typeof setOptionsAction === 'function'
              ? setOptionsAction(state.options)
              : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference)
              ? listScrollParents(reference)
              : reference.contextElement
              ? listScrollParents(reference.contextElement)
              : [],
            popper: listScrollParents(popper),
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(
            mergeByName([].concat(defaultModifiers, state.options.modifiers))
          ); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy(
              [].concat(orderedModifiers, state.options.modifiers),
              function (_ref) {
                var name = _ref.name;
                return name;
              }
            );
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(
                  [
                    'Popper: "auto" placements require the "flip" modifier be',
                    'present and enabled to work.',
                  ].join(' ')
                );
              }
            }

            var _getComputedStyle = getComputedStyle(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer

            if (
              [marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                return parseFloat(margin);
              })
            ) {
              console.warn(
                [
                  'Popper: CSS "margin" styles cannot be used to apply padding',
                  'between the popper and its reference element or boundary.',
                  'To replicate margin, use the `offset` modifier, as well as',
                  'the `padding` option in the `preventOverflow` and `flip`',
                  'modifiers.',
                ].join(' ')
              );
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers

          state.rects = {
            reference: getCompositeRect(
              reference,
              getOffsetParent(popper),
              state.options.strategy === 'fixed'
            ),
            popper: getLayoutRect(popper),
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return (state.modifiersData[modifier.name] = Object.assign({}, modifier.data));
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state =
                fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance,
                }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        },
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options,
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var passive = {
    passive: true,
  };

  function effect$2(_ref) {
    var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
    var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules

  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect$2,
    data: {},
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
      name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement,
    });
  } // eslint-disable-next-line import/no-unused-modules

  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {},
  };

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto',
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
      y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0,
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 =
      typeof roundOffsets === 'function'
        ? roundOffsets({
            x: x,
            y: y,
          })
        : {
            x: x,
            y: y,
          };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

      offsetParent = offsetParent;

      if (placement === top || ((placement === left || placement === right) && variation === end)) {
        sideY = bottom;
        var offsetY =
          isFixed && win.visualViewport
            ? win.visualViewport.height // $FlowFixMe[prop-missing]
            : offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (
        placement === left ||
        ((placement === top || placement === bottom) && variation === end)
      ) {
        sideX = right;
        var offsetX =
          isFixed && win.visualViewport
            ? win.visualViewport.width // $FlowFixMe[prop-missing]
            : offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign(
      {
        position: position,
      },
      adaptive && unsetSides
    );

    var _ref4 =
      roundOffsets === true
        ? roundOffsetsByDPR({
            x: x,
            y: y,
          })
        : {
            x: x,
            y: y,
          };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign(
        {},
        commonStyles,
        ((_Object$assign = {}),
        (_Object$assign[sideY] = hasY ? '0' : ''),
        (_Object$assign[sideX] = hasX ? '0' : ''),
        (_Object$assign.transform =
          (win.devicePixelRatio || 1) <= 1
            ? 'translate(' + x + 'px, ' + y + 'px)'
            : 'translate3d(' + x + 'px, ' + y + 'px, 0)'),
        _Object$assign)
      );
    }

    return Object.assign(
      {},
      commonStyles,
      ((_Object$assign2 = {}),
      (_Object$assign2[sideY] = hasY ? y + 'px' : ''),
      (_Object$assign2[sideX] = hasX ? x + 'px' : ''),
      (_Object$assign2.transform = ''),
      _Object$assign2)
    );
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
      options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    {
      var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

      if (
        adaptive &&
        ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
          return transitionProperty.indexOf(property) >= 0;
        })
      ) {
        console.warn(
          [
            'Popper: Detected CSS transitions on at least one of the following',
            'CSS properties: "transform", "top", "right", "bottom", "left".',
            '\n\n',
            'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
            'for smooth transitions, or remove these properties from the CSS',
            'transition declaration on the popper element if only transitioning',
            'opacity or background-color for example.',
            '\n\n',
            'We recommend using the popper element as a wrapper around an inner',
            'element that can have any CSS property transitioned for animations.',
          ].join(' ')
        );
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed',
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign(
        {},
        state.styles.popper,
        mapToStyles(
          Object.assign({}, commonStyles, {
            offsets: state.modifiersData.popperOffsets,
            position: state.options.strategy,
            adaptive: adaptive,
            roundOffsets: roundOffsets,
          })
        )
      );
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign(
        {},
        state.styles.arrow,
        mapToStyles(
          Object.assign({}, commonStyles, {
            offsets: state.modifiersData.arrow,
            position: 'absolute',
            adaptive: false,
            roundOffsets: roundOffsets,
          })
        )
      );
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement,
    });
  } // eslint-disable-next-line import/no-unused-modules

  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {},
  };

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$1(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0',
      },
      arrow: {
        position: 'absolute',
      },
      reference: {},
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(
          state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]
        ); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules

  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$1,
    requires: ['computeStyles'],
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref =
        typeof offset === 'function'
          ? offset(
              Object.assign({}, rects, {
                placement: placement,
              })
            )
          : offset,
      skidding = _ref[0],
      distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0
      ? {
          x: distance,
          y: skidding,
        }
      : {
          x: skidding,
          y: distance,
        };
  }

  function offset(_ref2) {
    var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
    var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset,
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom',
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start',
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation
      ? flipVariations
        ? variationPlacements
        : variationPlacements.filter(function (placement) {
            return getVariation(placement) === variation;
          })
      : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      {
        console.error(
          [
            'Popper: The `allowedAutoPlacements` option did not allow any',
            'placements. Ensure the `placement` option matches the variation',
            'of the allowed placements.',
            'For example, "auto" cannot be used to allow "bottom-start".',
            'Use "auto-start" instead.',
          ].join(' ')
        );
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [
      getOppositeVariationPlacement(placement),
      oppositePlacement,
      getOppositeVariationPlacement(oppositePlacement),
    ];
  }

  function flip(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements =
      specifiedFallbackPlacements ||
      (isBasePlacement || !flipVariations
        ? [getOppositePlacement(preferredPlacement)]
        : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement]
      .concat(fallbackPlacements)
      .reduce(function (acc, placement) {
        return acc.concat(
          getBasePlacement(placement) === auto
            ? computeAutoPlacement(state, {
                placement: placement,
                boundary: boundary,
                rootBoundary: rootBoundary,
                padding: padding,
                flipVariations: flipVariations,
                allowedAutoPlacements: allowedAutoPlacements,
              })
            : placement
        );
      }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding,
      });
      var mainVariationSide = isVertical
        ? isStartVariation
          ? right
          : left
        : isStartVariation
        ? bottom
        : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (
        checks.every(function (check) {
          return check;
        })
      ) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return 'break';
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === 'break') break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules

  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false,
    },
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary,
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue =
      typeof tetherOffset === 'function'
        ? tetherOffset(
            Object.assign({}, state.rects, {
              placement: state.placement,
            })
          )
        : tetherOffset;
    var normalizedTetherOffsetValue =
      typeof tetherOffsetValue === 'number'
        ? {
            mainAxis: tetherOffsetValue,
            altAxis: tetherOffsetValue,
          }
        : Object.assign(
            {
              mainAxis: 0,
              altAxis: 0,
            },
            tetherOffsetValue
          );
    var offsetModifierState = state.modifiersData.offset
      ? state.modifiersData.offset[state.placement]
      : null;
    var data = {
      x: 0,
      y: 0,
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect =
        tether && arrowElement
          ? getLayoutRect(arrowElement)
          : {
              width: 0,
              height: 0,
            };
      var arrowPaddingObject = state.modifiersData['arrow#persistent']
        ? state.modifiersData['arrow#persistent'].padding
        : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement
        ? referenceRect[len] / 2 -
          additive -
          arrowLen -
          arrowPaddingMin -
          normalizedTetherOffsetValue.mainAxis
        : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement
        ? -referenceRect[len] / 2 +
          additive +
          arrowLen +
          arrowPaddingMax +
          normalizedTetherOffsetValue.mainAxis
        : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent
        ? mainAxis === 'y'
          ? arrowOffsetParent.clientTop || 0
          : arrowOffsetParent.clientLeft || 0
        : 0;
      var offsetModifierValue =
        (_offsetModifierState$ =
          offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null
          ? _offsetModifierState$
          : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(
        tether ? min(min$1, tetherMin) : min$1,
        offset,
        tether ? max(max$1, tetherMax) : max$1
      );
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue =
        (_offsetModifierState$2 =
          offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null
          ? _offsetModifierState$2
          : 0;

      var _tetherMin = isOriginSide
        ? _min
        : _offset -
          referenceRect[_len] -
          popperRect[_len] -
          _offsetModifierValue +
          normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide
        ? _offset +
          referenceRect[_len] +
          popperRect[_len] -
          _offsetModifierValue -
          normalizedTetherOffsetValue.altAxis
        : _max;

      var _preventedOffset =
        tether && isOriginSide
          ? withinMaxClamp(_tetherMin, _offset, _tetherMax)
          : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset'],
  };

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding =
      typeof padding === 'function'
        ? padding(
            Object.assign({}, state.rects, {
              placement: state.placement,
            })
          )
        : padding;
    return mergePaddingObject(
      typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements)
    );
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff =
      state.rects.reference[len] +
      state.rects.reference[axis] -
      popperOffsets[axis] -
      state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent
      ? axis === 'y'
        ? arrowOffsetParent.clientHeight || 0
        : arrowOffsetParent.clientWidth || 0
      : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] =
      ((_state$modifiersData$ = {}),
      (_state$modifiersData$[axisProp] = offset),
      (_state$modifiersData$.centerOffset = offset - center),
      _state$modifiersData$);
  }

  function effect(_ref2) {
    var state = _ref2.state,
      options = _ref2.options;
    var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector

    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(
          [
            'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
            'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
            'the arrow.',
          ].join(' ')
        );
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(
          ['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(
            ' '
          )
        );
      }

      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules

  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow'],
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0,
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x,
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
      name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference',
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true,
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped,
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped,
    });
  } // eslint-disable-next-line import/no-unused-modules

  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide,
  };

  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /*#__PURE__*/ popperGenerator({
    defaultModifiers: defaultModifiers$1,
  }); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers = [
    eventListeners,
    popperOffsets$1,
    computeStyles$1,
    applyStyles$1,
    offset$1,
    flip$1,
    preventOverflow$1,
    arrow$1,
    hide$1,
  ];
  var createPopper = /*#__PURE__*/ popperGenerator({
    defaultModifiers: defaultModifiers,
  }); // eslint-disable-next-line import/no-unused-modules

  exports.applyStyles = applyStyles$1;
  exports.arrow = arrow$1;
  exports.computeStyles = computeStyles$1;
  exports.createPopper = createPopper;
  exports.createPopperLite = createPopper$1;
  exports.defaultModifiers = defaultModifiers;
  exports.detectOverflow = detectOverflow;
  exports.eventListeners = eventListeners;
  exports.flip = flip$1;
  exports.hide = hide$1;
  exports.offset = offset$1;
  exports.popperGenerator = popperGenerator;
  exports.popperOffsets = popperOffsets$1;
  exports.preventOverflow = preventOverflow$1;

  Object.defineProperty(exports, '__esModule', { value: true });
});
// #endregion

// #region / Bootstrap v5.1.1
//   ____              _       _
//  |  _ \            | |     | |
//  | |_) | ___   ___ | |_ ___| |_ _ __ __ _ _ __
//  |  _ < / _ \ / _ \| __/ __| __| '__/ _` | '_ \
//  | |_) | (_) | (_) | |_\__ \ |_| | | (_| | |_) |
//  |____/ \___/ \___/ \__|___/\__|_|  \__,_| .__/
//                                          | |
//                                          |_|     v5.1.1
/*!
 * Bootstrap v5.1.1 (https://getbootstrap.com/)
 * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */
!(function (t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = e(require('@popperjs/core')))
    : 'function' == typeof define && define.amd
    ? define(['@popperjs/core'], e)
    : ((t = 'undefined' != typeof globalThis ? globalThis : t || self).bootstrap = e(t.Popper));
})(this, function (t) {
  'use strict';
  function e(t) {
    if (t && t.__esModule) return t;
    var e = Object.create(null);
    return (
      t &&
        Object.keys(t).forEach(function (i) {
          if ('default' !== i) {
            var s = Object.getOwnPropertyDescriptor(t, i);
            Object.defineProperty(
              e,
              i,
              s.get
                ? s
                : {
                    enumerable: !0,
                    get: function () {
                      return t[i];
                    },
                  }
            );
          }
        }),
      (e.default = t),
      Object.freeze(e)
    );
  }
  var i = e(t);
  const s = (t) => {
      let e = t.getAttribute('data-bs-target');
      if (!e || '#' === e) {
        let i = t.getAttribute('href');
        if (!i || (!i.includes('#') && !i.startsWith('.'))) return null;
        i.includes('#') && !i.startsWith('#') && (i = '#' + i.split('#')[1]),
          (e = i && '#' !== i ? i.trim() : null);
      }
      return e;
    },
    n = (t) => {
      const e = s(t);
      return e && document.querySelector(e) ? e : null;
    },
    o = (t) => {
      const e = s(t);
      return e ? document.querySelector(e) : null;
    },
    r = (t) => {
      t.dispatchEvent(new Event('transitionend'));
    },
    a = (t) =>
      !(!t || 'object' != typeof t) && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType),
    l = (t) =>
      a(t)
        ? t.jquery
          ? t[0]
          : t
        : 'string' == typeof t && t.length > 0
        ? document.querySelector(t)
        : null,
    c = (t, e, i) => {
      Object.keys(i).forEach((s) => {
        const n = i[s],
          o = e[s],
          r =
            o && a(o)
              ? 'element'
              : null == (l = o)
              ? '' + l
              : {}.toString
                  .call(l)
                  .match(/\s([a-z]+)/i)[1]
                  .toLowerCase();
        var l;
        if (!new RegExp(n).test(r))
          throw new TypeError(
            `${t.toUpperCase()}: Option "${s}" provided type "${r}" but expected type "${n}".`
          );
      });
    },
    h = (t) =>
      !(!a(t) || 0 === t.getClientRects().length) &&
      'visible' === getComputedStyle(t).getPropertyValue('visibility'),
    d = (t) =>
      !t ||
      t.nodeType !== Node.ELEMENT_NODE ||
      !!t.classList.contains('disabled') ||
      (void 0 !== t.disabled
        ? t.disabled
        : t.hasAttribute('disabled') && 'false' !== t.getAttribute('disabled')),
    u = (t) => {
      if (!document.documentElement.attachShadow) return null;
      if ('function' == typeof t.getRootNode) {
        const e = t.getRootNode();
        return e instanceof ShadowRoot ? e : null;
      }
      return t instanceof ShadowRoot ? t : t.parentNode ? u(t.parentNode) : null;
    },
    g = () => {},
    p = (t) => {
      t.offsetHeight;
    },
    f = () => {
      const { jQuery: t } = window;
      return t && !document.body.hasAttribute('data-bs-no-jquery') ? t : null;
    },
    _ = [],
    m = () => 'rtl' === document.documentElement.dir,
    b = (t) => {
      var e;
      (e = () => {
        const e = f();
        if (e) {
          const i = t.NAME,
            s = e.fn[i];
          (e.fn[i] = t.jQueryInterface),
            (e.fn[i].Constructor = t),
            (e.fn[i].noConflict = () => ((e.fn[i] = s), t.jQueryInterface));
        }
      }),
        'loading' === document.readyState
          ? (_.length ||
              document.addEventListener('DOMContentLoaded', () => {
                _.forEach((t) => t());
              }),
            _.push(e))
          : e();
    },
    v = (t) => {
      'function' == typeof t && t();
    },
    w = (t, e, i = !0) => {
      if (!i) return void v(t);
      const s =
        ((t) => {
          if (!t) return 0;
          let { transitionDuration: e, transitionDelay: i } = window.getComputedStyle(t);
          const s = Number.parseFloat(e),
            n = Number.parseFloat(i);
          return s || n
            ? ((e = e.split(',')[0]),
              (i = i.split(',')[0]),
              1e3 * (Number.parseFloat(e) + Number.parseFloat(i)))
            : 0;
        })(e) + 5;
      let n = !1;
      const o = ({ target: i }) => {
        i === e && ((n = !0), e.removeEventListener('transitionend', o), v(t));
      };
      e.addEventListener('transitionend', o),
        setTimeout(() => {
          n || r(e);
        }, s);
    },
    y = (t, e, i, s) => {
      let n = t.indexOf(e);
      if (-1 === n) return t[!i && s ? t.length - 1 : 0];
      const o = t.length;
      return (n += i ? 1 : -1), s && (n = (n + o) % o), t[Math.max(0, Math.min(n, o - 1))];
    },
    E = /[^.]*(?=\..*)\.|.*/,
    A = /\..*/,
    T = /::\d+$/,
    C = {};
  let k = 1;
  const L = { mouseenter: 'mouseover', mouseleave: 'mouseout' },
    S = /^(mouseenter|mouseleave)/i,
    O = new Set([
      'click',
      'dblclick',
      'mouseup',
      'mousedown',
      'contextmenu',
      'mousewheel',
      'DOMMouseScroll',
      'mouseover',
      'mouseout',
      'mousemove',
      'selectstart',
      'selectend',
      'keydown',
      'keypress',
      'keyup',
      'orientationchange',
      'touchstart',
      'touchmove',
      'touchend',
      'touchcancel',
      'pointerdown',
      'pointermove',
      'pointerup',
      'pointerleave',
      'pointercancel',
      'gesturestart',
      'gesturechange',
      'gestureend',
      'focus',
      'blur',
      'change',
      'reset',
      'select',
      'submit',
      'focusin',
      'focusout',
      'load',
      'unload',
      'beforeunload',
      'resize',
      'move',
      'DOMContentLoaded',
      'readystatechange',
      'error',
      'abort',
      'scroll',
    ]);
  function N(t, e) {
    return (e && `${e}::${k++}`) || t.uidEvent || k++;
  }
  function D(t) {
    const e = N(t);
    return (t.uidEvent = e), (C[e] = C[e] || {}), C[e];
  }
  function I(t, e, i = null) {
    const s = Object.keys(t);
    for (let n = 0, o = s.length; n < o; n++) {
      const o = t[s[n]];
      if (o.originalHandler === e && o.delegationSelector === i) return o;
    }
    return null;
  }
  function P(t, e, i) {
    const s = 'string' == typeof e,
      n = s ? i : e;
    let o = j(t);
    return O.has(o) || (o = t), [s, n, o];
  }
  function x(t, e, i, s, n) {
    if ('string' != typeof e || !t) return;
    if ((i || ((i = s), (s = null)), S.test(e))) {
      const t = (t) =>
        function (e) {
          if (
            !e.relatedTarget ||
            (e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget))
          )
            return t.call(this, e);
        };
      s ? (s = t(s)) : (i = t(i));
    }
    const [o, r, a] = P(e, i, s),
      l = D(t),
      c = l[a] || (l[a] = {}),
      h = I(c, r, o ? i : null);
    if (h) return void (h.oneOff = h.oneOff && n);
    const d = N(r, e.replace(E, '')),
      u = o
        ? (function (t, e, i) {
            return function s(n) {
              const o = t.querySelectorAll(e);
              for (let { target: r } = n; r && r !== this; r = r.parentNode)
                for (let a = o.length; a--; )
                  if (o[a] === r)
                    return (
                      (n.delegateTarget = r), s.oneOff && H.off(t, n.type, e, i), i.apply(r, [n])
                    );
              return null;
            };
          })(t, i, s)
        : (function (t, e) {
            return function i(s) {
              return (s.delegateTarget = t), i.oneOff && H.off(t, s.type, e), e.apply(t, [s]);
            };
          })(t, i);
    (u.delegationSelector = o ? i : null),
      (u.originalHandler = r),
      (u.oneOff = n),
      (u.uidEvent = d),
      (c[d] = u),
      t.addEventListener(a, u, o);
  }
  function M(t, e, i, s, n) {
    const o = I(e[i], s, n);
    o && (t.removeEventListener(i, o, Boolean(n)), delete e[i][o.uidEvent]);
  }
  function j(t) {
    return (t = t.replace(A, '')), L[t] || t;
  }
  const H = {
      on(t, e, i, s) {
        x(t, e, i, s, !1);
      },
      one(t, e, i, s) {
        x(t, e, i, s, !0);
      },
      off(t, e, i, s) {
        if ('string' != typeof e || !t) return;
        const [n, o, r] = P(e, i, s),
          a = r !== e,
          l = D(t),
          c = e.startsWith('.');
        if (void 0 !== o) {
          if (!l || !l[r]) return;
          return void M(t, l, r, o, n ? i : null);
        }
        c &&
          Object.keys(l).forEach((i) => {
            !(function (t, e, i, s) {
              const n = e[i] || {};
              Object.keys(n).forEach((o) => {
                if (o.includes(s)) {
                  const s = n[o];
                  M(t, e, i, s.originalHandler, s.delegationSelector);
                }
              });
            })(t, l, i, e.slice(1));
          });
        const h = l[r] || {};
        Object.keys(h).forEach((i) => {
          const s = i.replace(T, '');
          if (!a || e.includes(s)) {
            const e = h[i];
            M(t, l, r, e.originalHandler, e.delegationSelector);
          }
        });
      },
      trigger(t, e, i) {
        if ('string' != typeof e || !t) return null;
        const s = f(),
          n = j(e),
          o = e !== n,
          r = O.has(n);
        let a,
          l = !0,
          c = !0,
          h = !1,
          d = null;
        return (
          o &&
            s &&
            ((a = s.Event(e, i)),
            s(t).trigger(a),
            (l = !a.isPropagationStopped()),
            (c = !a.isImmediatePropagationStopped()),
            (h = a.isDefaultPrevented())),
          r
            ? ((d = document.createEvent('HTMLEvents')), d.initEvent(n, l, !0))
            : (d = new CustomEvent(e, { bubbles: l, cancelable: !0 })),
          void 0 !== i &&
            Object.keys(i).forEach((t) => {
              Object.defineProperty(d, t, { get: () => i[t] });
            }),
          h && d.preventDefault(),
          c && t.dispatchEvent(d),
          d.defaultPrevented && void 0 !== a && a.preventDefault(),
          d
        );
      },
    },
    B = new Map();
  var z = {
    set(t, e, i) {
      B.has(t) || B.set(t, new Map());
      const s = B.get(t);
      s.has(e) || 0 === s.size
        ? s.set(e, i)
        : console.error(
            `Bootstrap doesn't allow more than one instance per element. Bound instance: ${
              Array.from(s.keys())[0]
            }.`
          );
    },
    get: (t, e) => (B.has(t) && B.get(t).get(e)) || null,
    remove(t, e) {
      if (!B.has(t)) return;
      const i = B.get(t);
      i.delete(e), 0 === i.size && B.delete(t);
    },
  };
  class R {
    constructor(t) {
      (t = l(t)) && ((this._element = t), z.set(this._element, this.constructor.DATA_KEY, this));
    }
    dispose() {
      z.remove(this._element, this.constructor.DATA_KEY),
        H.off(this._element, this.constructor.EVENT_KEY),
        Object.getOwnPropertyNames(this).forEach((t) => {
          this[t] = null;
        });
    }
    _queueCallback(t, e, i = !0) {
      w(t, e, i);
    }
    static getInstance(t) {
      return z.get(l(t), this.DATA_KEY);
    }
    static getOrCreateInstance(t, e = {}) {
      return this.getInstance(t) || new this(t, 'object' == typeof e ? e : null);
    }
    static get VERSION() {
      return '5.1.1';
    }
    static get NAME() {
      throw new Error('You have to implement the static method "NAME", for each component!');
    }
    static get DATA_KEY() {
      return 'bs.' + this.NAME;
    }
    static get EVENT_KEY() {
      return '.' + this.DATA_KEY;
    }
  }
  const F = (t, e = 'hide') => {
    const i = 'click.dismiss' + t.EVENT_KEY,
      s = t.NAME;
    H.on(document, i, `[data-bs-dismiss="${s}"]`, function (i) {
      if ((['A', 'AREA'].includes(this.tagName) && i.preventDefault(), d(this))) return;
      const n = o(this) || this.closest('.' + s);
      t.getOrCreateInstance(n)[e]();
    });
  };
  class q extends R {
    static get NAME() {
      return 'alert';
    }
    close() {
      if (H.trigger(this._element, 'close.bs.alert').defaultPrevented) return;
      this._element.classList.remove('show');
      const t = this._element.classList.contains('fade');
      this._queueCallback(() => this._destroyElement(), this._element, t);
    }
    _destroyElement() {
      this._element.remove(), H.trigger(this._element, 'closed.bs.alert'), this.dispose();
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = q.getOrCreateInstance(this);
        if ('string' == typeof t) {
          if (void 0 === e[t] || t.startsWith('_') || 'constructor' === t)
            throw new TypeError(`No method named "${t}"`);
          e[t](this);
        }
      });
    }
  }
  F(q, 'close'), b(q);
  class W extends R {
    static get NAME() {
      return 'button';
    }
    toggle() {
      this._element.setAttribute('aria-pressed', this._element.classList.toggle('active'));
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = W.getOrCreateInstance(this);
        'toggle' === t && e[t]();
      });
    }
  }
  function $(t) {
    return (
      'true' === t ||
      ('false' !== t &&
        (t === Number(t).toString() ? Number(t) : '' === t || 'null' === t ? null : t))
    );
  }
  function U(t) {
    return t.replace(/[A-Z]/g, (t) => '-' + t.toLowerCase());
  }
  H.on(document, 'click.bs.button.data-api', '[data-bs-toggle="button"]', (t) => {
    t.preventDefault();
    const e = t.target.closest('[data-bs-toggle="button"]');
    W.getOrCreateInstance(e).toggle();
  }),
    b(W);
  const K = {
      setDataAttribute(t, e, i) {
        t.setAttribute('data-bs-' + U(e), i);
      },
      removeDataAttribute(t, e) {
        t.removeAttribute('data-bs-' + U(e));
      },
      getDataAttributes(t) {
        if (!t) return {};
        const e = {};
        return (
          Object.keys(t.dataset)
            .filter((t) => t.startsWith('bs'))
            .forEach((i) => {
              let s = i.replace(/^bs/, '');
              (s = s.charAt(0).toLowerCase() + s.slice(1, s.length)), (e[s] = $(t.dataset[i]));
            }),
          e
        );
      },
      getDataAttribute: (t, e) => $(t.getAttribute('data-bs-' + U(e))),
      offset(t) {
        const e = t.getBoundingClientRect();
        return { top: e.top + window.pageYOffset, left: e.left + window.pageXOffset };
      },
      position: (t) => ({ top: t.offsetTop, left: t.offsetLeft }),
    },
    V = {
      find: (t, e = document.documentElement) =>
        [].concat(...Element.prototype.querySelectorAll.call(e, t)),
      findOne: (t, e = document.documentElement) => Element.prototype.querySelector.call(e, t),
      children: (t, e) => [].concat(...t.children).filter((t) => t.matches(e)),
      parents(t, e) {
        const i = [];
        let s = t.parentNode;
        for (; s && s.nodeType === Node.ELEMENT_NODE && 3 !== s.nodeType; )
          s.matches(e) && i.push(s), (s = s.parentNode);
        return i;
      },
      prev(t, e) {
        let i = t.previousElementSibling;
        for (; i; ) {
          if (i.matches(e)) return [i];
          i = i.previousElementSibling;
        }
        return [];
      },
      next(t, e) {
        let i = t.nextElementSibling;
        for (; i; ) {
          if (i.matches(e)) return [i];
          i = i.nextElementSibling;
        }
        return [];
      },
      focusableChildren(t) {
        const e = [
          'a',
          'button',
          'input',
          'textarea',
          'select',
          'details',
          '[tabindex]',
          '[contenteditable="true"]',
        ]
          .map((t) => t + ':not([tabindex^="-"])')
          .join(', ');
        return this.find(e, t).filter((t) => !d(t) && h(t));
      },
    },
    X = { interval: 5e3, keyboard: !0, slide: !1, pause: 'hover', wrap: !0, touch: !0 },
    Y = {
      interval: '(number|boolean)',
      keyboard: 'boolean',
      slide: '(boolean|string)',
      pause: '(string|boolean)',
      wrap: 'boolean',
      touch: 'boolean',
    },
    Q = 'next',
    G = 'prev',
    Z = 'left',
    J = 'right',
    tt = { ArrowLeft: J, ArrowRight: Z };
  class et extends R {
    constructor(t, e) {
      super(t),
        (this._items = null),
        (this._interval = null),
        (this._activeElement = null),
        (this._isPaused = !1),
        (this._isSliding = !1),
        (this.touchTimeout = null),
        (this.touchStartX = 0),
        (this.touchDeltaX = 0),
        (this._config = this._getConfig(e)),
        (this._indicatorsElement = V.findOne('.carousel-indicators', this._element)),
        (this._touchSupported =
          'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0),
        (this._pointerEvent = Boolean(window.PointerEvent)),
        this._addEventListeners();
    }
    static get Default() {
      return X;
    }
    static get NAME() {
      return 'carousel';
    }
    next() {
      this._slide(Q);
    }
    nextWhenVisible() {
      !document.hidden && h(this._element) && this.next();
    }
    prev() {
      this._slide(G);
    }
    pause(t) {
      t || (this._isPaused = !0),
        V.findOne('.carousel-item-next, .carousel-item-prev', this._element) &&
          (r(this._element), this.cycle(!0)),
        clearInterval(this._interval),
        (this._interval = null);
    }
    cycle(t) {
      t || (this._isPaused = !1),
        this._interval && (clearInterval(this._interval), (this._interval = null)),
        this._config &&
          this._config.interval &&
          !this._isPaused &&
          (this._updateInterval(),
          (this._interval = setInterval(
            (document.visibilityState ? this.nextWhenVisible : this.next).bind(this),
            this._config.interval
          )));
    }
    to(t) {
      this._activeElement = V.findOne('.active.carousel-item', this._element);
      const e = this._getItemIndex(this._activeElement);
      if (t > this._items.length - 1 || t < 0) return;
      if (this._isSliding) return void H.one(this._element, 'slid.bs.carousel', () => this.to(t));
      if (e === t) return this.pause(), void this.cycle();
      const i = t > e ? Q : G;
      this._slide(i, this._items[t]);
    }
    _getConfig(t) {
      return (
        (t = { ...X, ...K.getDataAttributes(this._element), ...('object' == typeof t ? t : {}) }),
        c('carousel', t, Y),
        t
      );
    }
    _handleSwipe() {
      const t = Math.abs(this.touchDeltaX);
      if (t <= 40) return;
      const e = t / this.touchDeltaX;
      (this.touchDeltaX = 0), e && this._slide(e > 0 ? J : Z);
    }
    _addEventListeners() {
      this._config.keyboard && H.on(this._element, 'keydown.bs.carousel', (t) => this._keydown(t)),
        'hover' === this._config.pause &&
          (H.on(this._element, 'mouseenter.bs.carousel', (t) => this.pause(t)),
          H.on(this._element, 'mouseleave.bs.carousel', (t) => this.cycle(t))),
        this._config.touch && this._touchSupported && this._addTouchEventListeners();
    }
    _addTouchEventListeners() {
      const t = (t) => this._pointerEvent && ('pen' === t.pointerType || 'touch' === t.pointerType),
        e = (e) => {
          t(e)
            ? (this.touchStartX = e.clientX)
            : this._pointerEvent || (this.touchStartX = e.touches[0].clientX);
        },
        i = (t) => {
          this.touchDeltaX =
            t.touches && t.touches.length > 1 ? 0 : t.touches[0].clientX - this.touchStartX;
        },
        s = (e) => {
          t(e) && (this.touchDeltaX = e.clientX - this.touchStartX),
            this._handleSwipe(),
            'hover' === this._config.pause &&
              (this.pause(),
              this.touchTimeout && clearTimeout(this.touchTimeout),
              (this.touchTimeout = setTimeout((t) => this.cycle(t), 500 + this._config.interval)));
        };
      V.find('.carousel-item img', this._element).forEach((t) => {
        H.on(t, 'dragstart.bs.carousel', (t) => t.preventDefault());
      }),
        this._pointerEvent
          ? (H.on(this._element, 'pointerdown.bs.carousel', (t) => e(t)),
            H.on(this._element, 'pointerup.bs.carousel', (t) => s(t)),
            this._element.classList.add('pointer-event'))
          : (H.on(this._element, 'touchstart.bs.carousel', (t) => e(t)),
            H.on(this._element, 'touchmove.bs.carousel', (t) => i(t)),
            H.on(this._element, 'touchend.bs.carousel', (t) => s(t)));
    }
    _keydown(t) {
      if (/input|textarea/i.test(t.target.tagName)) return;
      const e = tt[t.key];
      e && (t.preventDefault(), this._slide(e));
    }
    _getItemIndex(t) {
      return (
        (this._items = t && t.parentNode ? V.find('.carousel-item', t.parentNode) : []),
        this._items.indexOf(t)
      );
    }
    _getItemByOrder(t, e) {
      const i = t === Q;
      return y(this._items, e, i, this._config.wrap);
    }
    _triggerSlideEvent(t, e) {
      const i = this._getItemIndex(t),
        s = this._getItemIndex(V.findOne('.active.carousel-item', this._element));
      return H.trigger(this._element, 'slide.bs.carousel', {
        relatedTarget: t,
        direction: e,
        from: s,
        to: i,
      });
    }
    _setActiveIndicatorElement(t) {
      if (this._indicatorsElement) {
        const e = V.findOne('.active', this._indicatorsElement);
        e.classList.remove('active'), e.removeAttribute('aria-current');
        const i = V.find('[data-bs-target]', this._indicatorsElement);
        for (let e = 0; e < i.length; e++)
          if (
            Number.parseInt(i[e].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(t)
          ) {
            i[e].classList.add('active'), i[e].setAttribute('aria-current', 'true');
            break;
          }
      }
    }
    _updateInterval() {
      const t = this._activeElement || V.findOne('.active.carousel-item', this._element);
      if (!t) return;
      const e = Number.parseInt(t.getAttribute('data-bs-interval'), 10);
      e
        ? ((this._config.defaultInterval = this._config.defaultInterval || this._config.interval),
          (this._config.interval = e))
        : (this._config.interval = this._config.defaultInterval || this._config.interval);
    }
    _slide(t, e) {
      const i = this._directionToOrder(t),
        s = V.findOne('.active.carousel-item', this._element),
        n = this._getItemIndex(s),
        o = e || this._getItemByOrder(i, s),
        r = this._getItemIndex(o),
        a = Boolean(this._interval),
        l = i === Q,
        c = l ? 'carousel-item-start' : 'carousel-item-end',
        h = l ? 'carousel-item-next' : 'carousel-item-prev',
        d = this._orderToDirection(i);
      if (o && o.classList.contains('active')) return void (this._isSliding = !1);
      if (this._isSliding) return;
      if (this._triggerSlideEvent(o, d).defaultPrevented) return;
      if (!s || !o) return;
      (this._isSliding = !0),
        a && this.pause(),
        this._setActiveIndicatorElement(o),
        (this._activeElement = o);
      const u = () => {
        H.trigger(this._element, 'slid.bs.carousel', {
          relatedTarget: o,
          direction: d,
          from: n,
          to: r,
        });
      };
      if (this._element.classList.contains('slide')) {
        o.classList.add(h), p(o), s.classList.add(c), o.classList.add(c);
        const t = () => {
          o.classList.remove(c, h),
            o.classList.add('active'),
            s.classList.remove('active', h, c),
            (this._isSliding = !1),
            setTimeout(u, 0);
        };
        this._queueCallback(t, s, !0);
      } else s.classList.remove('active'), o.classList.add('active'), (this._isSliding = !1), u();
      a && this.cycle();
    }
    _directionToOrder(t) {
      return [J, Z].includes(t) ? (m() ? (t === Z ? G : Q) : t === Z ? Q : G) : t;
    }
    _orderToDirection(t) {
      return [Q, G].includes(t) ? (m() ? (t === G ? Z : J) : t === G ? J : Z) : t;
    }
    static carouselInterface(t, e) {
      const i = et.getOrCreateInstance(t, e);
      let { _config: s } = i;
      'object' == typeof e && (s = { ...s, ...e });
      const n = 'string' == typeof e ? e : s.slide;
      if ('number' == typeof e) i.to(e);
      else if ('string' == typeof n) {
        if (void 0 === i[n]) throw new TypeError(`No method named "${n}"`);
        i[n]();
      } else s.interval && s.ride && (i.pause(), i.cycle());
    }
    static jQueryInterface(t) {
      return this.each(function () {
        et.carouselInterface(this, t);
      });
    }
    static dataApiClickHandler(t) {
      const e = o(this);
      if (!e || !e.classList.contains('carousel')) return;
      const i = { ...K.getDataAttributes(e), ...K.getDataAttributes(this) },
        s = this.getAttribute('data-bs-slide-to');
      s && (i.interval = !1),
        et.carouselInterface(e, i),
        s && et.getInstance(e).to(s),
        t.preventDefault();
    }
  }
  H.on(
    document,
    'click.bs.carousel.data-api',
    '[data-bs-slide], [data-bs-slide-to]',
    et.dataApiClickHandler
  ),
    H.on(window, 'load.bs.carousel.data-api', () => {
      const t = V.find('[data-bs-ride="carousel"]');
      for (let e = 0, i = t.length; e < i; e++) et.carouselInterface(t[e], et.getInstance(t[e]));
    }),
    b(et);
  const it = { toggle: !0, parent: null },
    st = { toggle: 'boolean', parent: '(null|element)' };
  class nt extends R {
    constructor(t, e) {
      super(t),
        (this._isTransitioning = !1),
        (this._config = this._getConfig(e)),
        (this._triggerArray = []);
      const i = V.find('[data-bs-toggle="collapse"]');
      for (let t = 0, e = i.length; t < e; t++) {
        const e = i[t],
          s = n(e),
          o = V.find(s).filter((t) => t === this._element);
        null !== s && o.length && ((this._selector = s), this._triggerArray.push(e));
      }
      this._initializeChildren(),
        this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()),
        this._config.toggle && this.toggle();
    }
    static get Default() {
      return it;
    }
    static get NAME() {
      return 'collapse';
    }
    toggle() {
      this._isShown() ? this.hide() : this.show();
    }
    show() {
      if (this._isTransitioning || this._isShown()) return;
      let t,
        e = [];
      if (this._config.parent) {
        const t = V.find('.collapse .collapse', this._config.parent);
        e = V.find('.collapse.show, .collapse.collapsing', this._config.parent).filter(
          (e) => !t.includes(e)
        );
      }
      const i = V.findOne(this._selector);
      if (e.length) {
        const s = e.find((t) => i !== t);
        if (((t = s ? nt.getInstance(s) : null), t && t._isTransitioning)) return;
      }
      if (H.trigger(this._element, 'show.bs.collapse').defaultPrevented) return;
      e.forEach((e) => {
        i !== e && nt.getOrCreateInstance(e, { toggle: !1 }).hide(),
          t || z.set(e, 'bs.collapse', null);
      });
      const s = this._getDimension();
      this._element.classList.remove('collapse'),
        this._element.classList.add('collapsing'),
        (this._element.style[s] = 0),
        this._addAriaAndCollapsedClass(this._triggerArray, !0),
        (this._isTransitioning = !0);
      const n = 'scroll' + (s[0].toUpperCase() + s.slice(1));
      this._queueCallback(
        () => {
          (this._isTransitioning = !1),
            this._element.classList.remove('collapsing'),
            this._element.classList.add('collapse', 'show'),
            (this._element.style[s] = ''),
            H.trigger(this._element, 'shown.bs.collapse');
        },
        this._element,
        !0
      ),
        (this._element.style[s] = this._element[n] + 'px');
    }
    hide() {
      if (this._isTransitioning || !this._isShown()) return;
      if (H.trigger(this._element, 'hide.bs.collapse').defaultPrevented) return;
      const t = this._getDimension();
      (this._element.style[t] = this._element.getBoundingClientRect()[t] + 'px'),
        p(this._element),
        this._element.classList.add('collapsing'),
        this._element.classList.remove('collapse', 'show');
      const e = this._triggerArray.length;
      for (let t = 0; t < e; t++) {
        const e = this._triggerArray[t],
          i = o(e);
        i && !this._isShown(i) && this._addAriaAndCollapsedClass([e], !1);
      }
      (this._isTransitioning = !0),
        (this._element.style[t] = ''),
        this._queueCallback(
          () => {
            (this._isTransitioning = !1),
              this._element.classList.remove('collapsing'),
              this._element.classList.add('collapse'),
              H.trigger(this._element, 'hidden.bs.collapse');
          },
          this._element,
          !0
        );
    }
    _isShown(t = this._element) {
      return t.classList.contains('show');
    }
    _getConfig(t) {
      return (
        ((t = { ...it, ...K.getDataAttributes(this._element), ...t }).toggle = Boolean(t.toggle)),
        (t.parent = l(t.parent)),
        c('collapse', t, st),
        t
      );
    }
    _getDimension() {
      return this._element.classList.contains('collapse-horizontal') ? 'width' : 'height';
    }
    _initializeChildren() {
      if (!this._config.parent) return;
      const t = V.find('.collapse .collapse', this._config.parent);
      V.find('[data-bs-toggle="collapse"]', this._config.parent)
        .filter((e) => !t.includes(e))
        .forEach((t) => {
          const e = o(t);
          e && this._addAriaAndCollapsedClass([t], this._isShown(e));
        });
    }
    _addAriaAndCollapsedClass(t, e) {
      t.length &&
        t.forEach((t) => {
          e ? t.classList.remove('collapsed') : t.classList.add('collapsed'),
            t.setAttribute('aria-expanded', e);
        });
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = {};
        'string' == typeof t && /show|hide/.test(t) && (e.toggle = !1);
        const i = nt.getOrCreateInstance(this, e);
        if ('string' == typeof t) {
          if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);
          i[t]();
        }
      });
    }
  }
  H.on(document, 'click.bs.collapse.data-api', '[data-bs-toggle="collapse"]', function (t) {
    ('A' === t.target.tagName || (t.delegateTarget && 'A' === t.delegateTarget.tagName)) &&
      t.preventDefault();
    const e = n(this);
    V.find(e).forEach((t) => {
      nt.getOrCreateInstance(t, { toggle: !1 }).toggle();
    });
  }),
    b(nt);
  const ot = new RegExp('ArrowUp|ArrowDown|Escape'),
    rt = m() ? 'top-end' : 'top-start',
    at = m() ? 'top-start' : 'top-end',
    lt = m() ? 'bottom-end' : 'bottom-start',
    ct = m() ? 'bottom-start' : 'bottom-end',
    ht = m() ? 'left-start' : 'right-start',
    dt = m() ? 'right-start' : 'left-start',
    ut = {
      offset: [0, 2],
      boundary: 'clippingParents',
      reference: 'toggle',
      display: 'dynamic',
      popperConfig: null,
      autoClose: !0,
    },
    gt = {
      offset: '(array|string|function)',
      boundary: '(string|element)',
      reference: '(string|element|object)',
      display: 'string',
      popperConfig: '(null|object|function)',
      autoClose: '(boolean|string)',
    };
  class pt extends R {
    constructor(t, e) {
      super(t),
        (this._popper = null),
        (this._config = this._getConfig(e)),
        (this._menu = this._getMenuElement()),
        (this._inNavbar = this._detectNavbar());
    }
    static get Default() {
      return ut;
    }
    static get DefaultType() {
      return gt;
    }
    static get NAME() {
      return 'dropdown';
    }
    toggle() {
      return this._isShown() ? this.hide() : this.show();
    }
    show() {
      if (d(this._element) || this._isShown(this._menu)) return;
      const t = { relatedTarget: this._element };
      if (H.trigger(this._element, 'show.bs.dropdown', t).defaultPrevented) return;
      const e = pt.getParentFromElement(this._element);
      this._inNavbar ? K.setDataAttribute(this._menu, 'popper', 'none') : this._createPopper(e),
        'ontouchstart' in document.documentElement &&
          !e.closest('.navbar-nav') &&
          [].concat(...document.body.children).forEach((t) => H.on(t, 'mouseover', g)),
        this._element.focus(),
        this._element.setAttribute('aria-expanded', !0),
        this._menu.classList.add('show'),
        this._element.classList.add('show'),
        H.trigger(this._element, 'shown.bs.dropdown', t);
    }
    hide() {
      if (d(this._element) || !this._isShown(this._menu)) return;
      const t = { relatedTarget: this._element };
      this._completeHide(t);
    }
    dispose() {
      this._popper && this._popper.destroy(), super.dispose();
    }
    update() {
      (this._inNavbar = this._detectNavbar()), this._popper && this._popper.update();
    }
    _completeHide(t) {
      H.trigger(this._element, 'hide.bs.dropdown', t).defaultPrevented ||
        ('ontouchstart' in document.documentElement &&
          [].concat(...document.body.children).forEach((t) => H.off(t, 'mouseover', g)),
        this._popper && this._popper.destroy(),
        this._menu.classList.remove('show'),
        this._element.classList.remove('show'),
        this._element.setAttribute('aria-expanded', 'false'),
        K.removeDataAttribute(this._menu, 'popper'),
        H.trigger(this._element, 'hidden.bs.dropdown', t));
    }
    _getConfig(t) {
      if (
        ((t = { ...this.constructor.Default, ...K.getDataAttributes(this._element), ...t }),
        c('dropdown', t, this.constructor.DefaultType),
        'object' == typeof t.reference &&
          !a(t.reference) &&
          'function' != typeof t.reference.getBoundingClientRect)
      )
        throw new TypeError(
          'dropdown'.toUpperCase() +
            ': Option "reference" provided type "object" without a required "getBoundingClientRect" method.'
        );
      return t;
    }
    _createPopper(t) {
      if (void 0 === i)
        throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
      let e = this._element;
      'parent' === this._config.reference
        ? (e = t)
        : a(this._config.reference)
        ? (e = l(this._config.reference))
        : 'object' == typeof this._config.reference && (e = this._config.reference);
      const s = this._getPopperConfig(),
        n = s.modifiers.find((t) => 'applyStyles' === t.name && !1 === t.enabled);
      (this._popper = i.createPopper(e, this._menu, s)),
        n && K.setDataAttribute(this._menu, 'popper', 'static');
    }
    _isShown(t = this._element) {
      return t.classList.contains('show');
    }
    _getMenuElement() {
      return V.next(this._element, '.dropdown-menu')[0];
    }
    _getPlacement() {
      const t = this._element.parentNode;
      if (t.classList.contains('dropend')) return ht;
      if (t.classList.contains('dropstart')) return dt;
      const e = 'end' === getComputedStyle(this._menu).getPropertyValue('--bs-position').trim();
      return t.classList.contains('dropup') ? (e ? at : rt) : e ? ct : lt;
    }
    _detectNavbar() {
      return null !== this._element.closest('.navbar');
    }
    _getOffset() {
      const { offset: t } = this._config;
      return 'string' == typeof t
        ? t.split(',').map((t) => Number.parseInt(t, 10))
        : 'function' == typeof t
        ? (e) => t(e, this._element)
        : t;
    }
    _getPopperConfig() {
      const t = {
        placement: this._getPlacement(),
        modifiers: [
          { name: 'preventOverflow', options: { boundary: this._config.boundary } },
          { name: 'offset', options: { offset: this._getOffset() } },
        ],
      };
      return (
        'static' === this._config.display && (t.modifiers = [{ name: 'applyStyles', enabled: !1 }]),
        {
          ...t,
          ...('function' == typeof this._config.popperConfig
            ? this._config.popperConfig(t)
            : this._config.popperConfig),
        }
      );
    }
    _selectMenuItem({ key: t, target: e }) {
      const i = V.find(
        '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)',
        this._menu
      ).filter(h);
      i.length && y(i, e, 'ArrowDown' === t, !i.includes(e)).focus();
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = pt.getOrCreateInstance(this, t);
        if ('string' == typeof t) {
          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
          e[t]();
        }
      });
    }
    static clearMenus(t) {
      if (t && (2 === t.button || ('keyup' === t.type && 'Tab' !== t.key))) return;
      const e = V.find('[data-bs-toggle="dropdown"]');
      for (let i = 0, s = e.length; i < s; i++) {
        const s = pt.getInstance(e[i]);
        if (!s || !1 === s._config.autoClose) continue;
        if (!s._isShown()) continue;
        const n = { relatedTarget: s._element };
        if (t) {
          const e = t.composedPath(),
            i = e.includes(s._menu);
          if (
            e.includes(s._element) ||
            ('inside' === s._config.autoClose && !i) ||
            ('outside' === s._config.autoClose && i)
          )
            continue;
          if (
            s._menu.contains(t.target) &&
            (('keyup' === t.type && 'Tab' === t.key) ||
              /input|select|option|textarea|form/i.test(t.target.tagName))
          )
            continue;
          'click' === t.type && (n.clickEvent = t);
        }
        s._completeHide(n);
      }
    }
    static getParentFromElement(t) {
      return o(t) || t.parentNode;
    }
    static dataApiKeydownHandler(t) {
      if (
        /input|textarea/i.test(t.target.tagName)
          ? 'Space' === t.key ||
            ('Escape' !== t.key &&
              (('ArrowDown' !== t.key && 'ArrowUp' !== t.key) ||
                t.target.closest('.dropdown-menu')))
          : !ot.test(t.key)
      )
        return;
      const e = this.classList.contains('show');
      if (!e && 'Escape' === t.key) return;
      if ((t.preventDefault(), t.stopPropagation(), d(this))) return;
      const i = this.matches('[data-bs-toggle="dropdown"]')
          ? this
          : V.prev(this, '[data-bs-toggle="dropdown"]')[0],
        s = pt.getOrCreateInstance(i);
      if ('Escape' !== t.key)
        return 'ArrowUp' === t.key || 'ArrowDown' === t.key
          ? (e || s.show(), void s._selectMenuItem(t))
          : void ((e && 'Space' !== t.key) || pt.clearMenus());
      s.hide();
    }
  }
  H.on(
    document,
    'keydown.bs.dropdown.data-api',
    '[data-bs-toggle="dropdown"]',
    pt.dataApiKeydownHandler
  ),
    H.on(document, 'keydown.bs.dropdown.data-api', '.dropdown-menu', pt.dataApiKeydownHandler),
    H.on(document, 'click.bs.dropdown.data-api', pt.clearMenus),
    H.on(document, 'keyup.bs.dropdown.data-api', pt.clearMenus),
    H.on(document, 'click.bs.dropdown.data-api', '[data-bs-toggle="dropdown"]', function (t) {
      t.preventDefault(), pt.getOrCreateInstance(this).toggle();
    }),
    b(pt);
  class ft {
    constructor() {
      this._element = document.body;
    }
    getWidth() {
      const t = document.documentElement.clientWidth;
      return Math.abs(window.innerWidth - t);
    }
    hide() {
      const t = this.getWidth();
      this._disableOverFlow(),
        this._setElementAttributes(this._element, 'paddingRight', (e) => e + t),
        this._setElementAttributes(
          '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
          'paddingRight',
          (e) => e + t
        ),
        this._setElementAttributes('.sticky-top', 'marginRight', (e) => e - t);
    }
    _disableOverFlow() {
      this._saveInitialAttribute(this._element, 'overflow'),
        (this._element.style.overflow = 'hidden');
    }
    _setElementAttributes(t, e, i) {
      const s = this.getWidth();
      this._applyManipulationCallback(t, (t) => {
        if (t !== this._element && window.innerWidth > t.clientWidth + s) return;
        this._saveInitialAttribute(t, e);
        const n = window.getComputedStyle(t)[e];
        t.style[e] = i(Number.parseFloat(n)) + 'px';
      });
    }
    reset() {
      this._resetElementAttributes(this._element, 'overflow'),
        this._resetElementAttributes(this._element, 'paddingRight'),
        this._resetElementAttributes(
          '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
          'paddingRight'
        ),
        this._resetElementAttributes('.sticky-top', 'marginRight');
    }
    _saveInitialAttribute(t, e) {
      const i = t.style[e];
      i && K.setDataAttribute(t, e, i);
    }
    _resetElementAttributes(t, e) {
      this._applyManipulationCallback(t, (t) => {
        const i = K.getDataAttribute(t, e);
        void 0 === i ? t.style.removeProperty(e) : (K.removeDataAttribute(t, e), (t.style[e] = i));
      });
    }
    _applyManipulationCallback(t, e) {
      a(t) ? e(t) : V.find(t, this._element).forEach(e);
    }
    isOverflowing() {
      return this.getWidth() > 0;
    }
  }
  const _t = {
      className: 'modal-backdrop',
      isVisible: !0,
      isAnimated: !1,
      rootElement: 'body',
      clickCallback: null,
    },
    mt = {
      className: 'string',
      isVisible: 'boolean',
      isAnimated: 'boolean',
      rootElement: '(element|string)',
      clickCallback: '(function|null)',
    };
  class bt {
    constructor(t) {
      (this._config = this._getConfig(t)), (this._isAppended = !1), (this._element = null);
    }
    show(t) {
      this._config.isVisible
        ? (this._append(),
          this._config.isAnimated && p(this._getElement()),
          this._getElement().classList.add('show'),
          this._emulateAnimation(() => {
            v(t);
          }))
        : v(t);
    }
    hide(t) {
      this._config.isVisible
        ? (this._getElement().classList.remove('show'),
          this._emulateAnimation(() => {
            this.dispose(), v(t);
          }))
        : v(t);
    }
    _getElement() {
      if (!this._element) {
        const t = document.createElement('div');
        (t.className = this._config.className),
          this._config.isAnimated && t.classList.add('fade'),
          (this._element = t);
      }
      return this._element;
    }
    _getConfig(t) {
      return (
        ((t = { ..._t, ...('object' == typeof t ? t : {}) }).rootElement = l(t.rootElement)),
        c('backdrop', t, mt),
        t
      );
    }
    _append() {
      this._isAppended ||
        (this._config.rootElement.append(this._getElement()),
        H.on(this._getElement(), 'mousedown.bs.backdrop', () => {
          v(this._config.clickCallback);
        }),
        (this._isAppended = !0));
    }
    dispose() {
      this._isAppended &&
        (H.off(this._element, 'mousedown.bs.backdrop'),
        this._element.remove(),
        (this._isAppended = !1));
    }
    _emulateAnimation(t) {
      w(t, this._getElement(), this._config.isAnimated);
    }
  }
  const vt = { trapElement: null, autofocus: !0 },
    wt = { trapElement: 'element', autofocus: 'boolean' };
  class yt {
    constructor(t) {
      (this._config = this._getConfig(t)),
        (this._isActive = !1),
        (this._lastTabNavDirection = null);
    }
    activate() {
      const { trapElement: t, autofocus: e } = this._config;
      this._isActive ||
        (e && t.focus(),
        H.off(document, '.bs.focustrap'),
        H.on(document, 'focusin.bs.focustrap', (t) => this._handleFocusin(t)),
        H.on(document, 'keydown.tab.bs.focustrap', (t) => this._handleKeydown(t)),
        (this._isActive = !0));
    }
    deactivate() {
      this._isActive && ((this._isActive = !1), H.off(document, '.bs.focustrap'));
    }
    _handleFocusin(t) {
      const { target: e } = t,
        { trapElement: i } = this._config;
      if (e === document || e === i || i.contains(e)) return;
      const s = V.focusableChildren(i);
      0 === s.length
        ? i.focus()
        : 'backward' === this._lastTabNavDirection
        ? s[s.length - 1].focus()
        : s[0].focus();
    }
    _handleKeydown(t) {
      'Tab' === t.key && (this._lastTabNavDirection = t.shiftKey ? 'backward' : 'forward');
    }
    _getConfig(t) {
      return (t = { ...vt, ...('object' == typeof t ? t : {}) }), c('focustrap', t, wt), t;
    }
  }
  const Et = { backdrop: !0, keyboard: !0, focus: !0 },
    At = { backdrop: '(boolean|string)', keyboard: 'boolean', focus: 'boolean' };
  class Tt extends R {
    constructor(t, e) {
      super(t),
        (this._config = this._getConfig(e)),
        (this._dialog = V.findOne('.modal-dialog', this._element)),
        (this._backdrop = this._initializeBackDrop()),
        (this._focustrap = this._initializeFocusTrap()),
        (this._isShown = !1),
        (this._ignoreBackdropClick = !1),
        (this._isTransitioning = !1),
        (this._scrollBar = new ft());
    }
    static get Default() {
      return Et;
    }
    static get NAME() {
      return 'modal';
    }
    toggle(t) {
      return this._isShown ? this.hide() : this.show(t);
    }
    show(t) {
      this._isShown ||
        this._isTransitioning ||
        H.trigger(this._element, 'show.bs.modal', { relatedTarget: t }).defaultPrevented ||
        ((this._isShown = !0),
        this._isAnimated() && (this._isTransitioning = !0),
        this._scrollBar.hide(),
        document.body.classList.add('modal-open'),
        this._adjustDialog(),
        this._setEscapeEvent(),
        this._setResizeEvent(),
        H.on(this._dialog, 'mousedown.dismiss.bs.modal', () => {
          H.one(this._element, 'mouseup.dismiss.bs.modal', (t) => {
            t.target === this._element && (this._ignoreBackdropClick = !0);
          });
        }),
        this._showBackdrop(() => this._showElement(t)));
    }
    hide() {
      if (!this._isShown || this._isTransitioning) return;
      if (H.trigger(this._element, 'hide.bs.modal').defaultPrevented) return;
      this._isShown = !1;
      const t = this._isAnimated();
      t && (this._isTransitioning = !0),
        this._setEscapeEvent(),
        this._setResizeEvent(),
        this._focustrap.deactivate(),
        this._element.classList.remove('show'),
        H.off(this._element, 'click.dismiss.bs.modal'),
        H.off(this._dialog, 'mousedown.dismiss.bs.modal'),
        this._queueCallback(() => this._hideModal(), this._element, t);
    }
    dispose() {
      [window, this._dialog].forEach((t) => H.off(t, '.bs.modal')),
        this._backdrop.dispose(),
        this._focustrap.deactivate(),
        super.dispose();
    }
    handleUpdate() {
      this._adjustDialog();
    }
    _initializeBackDrop() {
      return new bt({ isVisible: Boolean(this._config.backdrop), isAnimated: this._isAnimated() });
    }
    _initializeFocusTrap() {
      return new yt({ trapElement: this._element });
    }
    _getConfig(t) {
      return (
        (t = { ...Et, ...K.getDataAttributes(this._element), ...('object' == typeof t ? t : {}) }),
        c('modal', t, At),
        t
      );
    }
    _showElement(t) {
      const e = this._isAnimated(),
        i = V.findOne('.modal-body', this._dialog);
      (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE) ||
        document.body.append(this._element),
        (this._element.style.display = 'block'),
        this._element.removeAttribute('aria-hidden'),
        this._element.setAttribute('aria-modal', !0),
        this._element.setAttribute('role', 'dialog'),
        (this._element.scrollTop = 0),
        i && (i.scrollTop = 0),
        e && p(this._element),
        this._element.classList.add('show'),
        this._queueCallback(
          () => {
            this._config.focus && this._focustrap.activate(),
              (this._isTransitioning = !1),
              H.trigger(this._element, 'shown.bs.modal', { relatedTarget: t });
          },
          this._dialog,
          e
        );
    }
    _setEscapeEvent() {
      this._isShown
        ? H.on(this._element, 'keydown.dismiss.bs.modal', (t) => {
            this._config.keyboard && 'Escape' === t.key
              ? (t.preventDefault(), this.hide())
              : this._config.keyboard || 'Escape' !== t.key || this._triggerBackdropTransition();
          })
        : H.off(this._element, 'keydown.dismiss.bs.modal');
    }
    _setResizeEvent() {
      this._isShown
        ? H.on(window, 'resize.bs.modal', () => this._adjustDialog())
        : H.off(window, 'resize.bs.modal');
    }
    _hideModal() {
      (this._element.style.display = 'none'),
        this._element.setAttribute('aria-hidden', !0),
        this._element.removeAttribute('aria-modal'),
        this._element.removeAttribute('role'),
        (this._isTransitioning = !1),
        this._backdrop.hide(() => {
          document.body.classList.remove('modal-open'),
            this._resetAdjustments(),
            this._scrollBar.reset(),
            H.trigger(this._element, 'hidden.bs.modal');
        });
    }
    _showBackdrop(t) {
      H.on(this._element, 'click.dismiss.bs.modal', (t) => {
        this._ignoreBackdropClick
          ? (this._ignoreBackdropClick = !1)
          : t.target === t.currentTarget &&
            (!0 === this._config.backdrop
              ? this.hide()
              : 'static' === this._config.backdrop && this._triggerBackdropTransition());
      }),
        this._backdrop.show(t);
    }
    _isAnimated() {
      return this._element.classList.contains('fade');
    }
    _triggerBackdropTransition() {
      if (H.trigger(this._element, 'hidePrevented.bs.modal').defaultPrevented) return;
      const { classList: t, scrollHeight: e, style: i } = this._element,
        s = e > document.documentElement.clientHeight;
      (!s && 'hidden' === i.overflowY) ||
        t.contains('modal-static') ||
        (s || (i.overflowY = 'hidden'),
        t.add('modal-static'),
        this._queueCallback(() => {
          t.remove('modal-static'),
            s ||
              this._queueCallback(() => {
                i.overflowY = '';
              }, this._dialog);
        }, this._dialog),
        this._element.focus());
    }
    _adjustDialog() {
      const t = this._element.scrollHeight > document.documentElement.clientHeight,
        e = this._scrollBar.getWidth(),
        i = e > 0;
      ((!i && t && !m()) || (i && !t && m())) && (this._element.style.paddingLeft = e + 'px'),
        ((i && !t && !m()) || (!i && t && m())) && (this._element.style.paddingRight = e + 'px');
    }
    _resetAdjustments() {
      (this._element.style.paddingLeft = ''), (this._element.style.paddingRight = '');
    }
    static jQueryInterface(t, e) {
      return this.each(function () {
        const i = Tt.getOrCreateInstance(this, t);
        if ('string' == typeof t) {
          if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);
          i[t](e);
        }
      });
    }
  }
  H.on(document, 'click.bs.modal.data-api', '[data-bs-toggle="modal"]', function (t) {
    const e = o(this);
    ['A', 'AREA'].includes(this.tagName) && t.preventDefault(),
      H.one(e, 'show.bs.modal', (t) => {
        t.defaultPrevented ||
          H.one(e, 'hidden.bs.modal', () => {
            h(this) && this.focus();
          });
      });
    const i = V.findOne('.modal.show');
    i && Tt.getInstance(i).hide(), Tt.getOrCreateInstance(e).toggle(this);
  }),
    F(Tt),
    b(Tt);
  const Ct = { backdrop: !0, keyboard: !0, scroll: !1 },
    kt = { backdrop: 'boolean', keyboard: 'boolean', scroll: 'boolean' };
  class Lt extends R {
    constructor(t, e) {
      super(t),
        (this._config = this._getConfig(e)),
        (this._isShown = !1),
        (this._backdrop = this._initializeBackDrop()),
        (this._focustrap = this._initializeFocusTrap()),
        this._addEventListeners();
    }
    static get NAME() {
      return 'offcanvas';
    }
    static get Default() {
      return Ct;
    }
    toggle(t) {
      return this._isShown ? this.hide() : this.show(t);
    }
    show(t) {
      this._isShown ||
        H.trigger(this._element, 'show.bs.offcanvas', { relatedTarget: t }).defaultPrevented ||
        ((this._isShown = !0),
        (this._element.style.visibility = 'visible'),
        this._backdrop.show(),
        this._config.scroll || new ft().hide(),
        this._element.removeAttribute('aria-hidden'),
        this._element.setAttribute('aria-modal', !0),
        this._element.setAttribute('role', 'dialog'),
        this._element.classList.add('show'),
        this._queueCallback(
          () => {
            this._config.scroll || this._focustrap.activate(),
              H.trigger(this._element, 'shown.bs.offcanvas', { relatedTarget: t });
          },
          this._element,
          !0
        ));
    }
    hide() {
      this._isShown &&
        (H.trigger(this._element, 'hide.bs.offcanvas').defaultPrevented ||
          (this._focustrap.deactivate(),
          this._element.blur(),
          (this._isShown = !1),
          this._element.classList.remove('show'),
          this._backdrop.hide(),
          this._queueCallback(
            () => {
              this._element.setAttribute('aria-hidden', !0),
                this._element.removeAttribute('aria-modal'),
                this._element.removeAttribute('role'),
                (this._element.style.visibility = 'hidden'),
                this._config.scroll || new ft().reset(),
                H.trigger(this._element, 'hidden.bs.offcanvas');
            },
            this._element,
            !0
          )));
    }
    dispose() {
      this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();
    }
    _getConfig(t) {
      return (
        (t = { ...Ct, ...K.getDataAttributes(this._element), ...('object' == typeof t ? t : {}) }),
        c('offcanvas', t, kt),
        t
      );
    }
    _initializeBackDrop() {
      return new bt({
        className: 'offcanvas-backdrop',
        isVisible: this._config.backdrop,
        isAnimated: !0,
        rootElement: this._element.parentNode,
        clickCallback: () => this.hide(),
      });
    }
    _initializeFocusTrap() {
      return new yt({ trapElement: this._element });
    }
    _addEventListeners() {
      H.on(this._element, 'keydown.dismiss.bs.offcanvas', (t) => {
        this._config.keyboard && 'Escape' === t.key && this.hide();
      });
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = Lt.getOrCreateInstance(this, t);
        if ('string' == typeof t) {
          if (void 0 === e[t] || t.startsWith('_') || 'constructor' === t)
            throw new TypeError(`No method named "${t}"`);
          e[t](this);
        }
      });
    }
  }
  H.on(document, 'click.bs.offcanvas.data-api', '[data-bs-toggle="offcanvas"]', function (t) {
    const e = o(this);
    if ((['A', 'AREA'].includes(this.tagName) && t.preventDefault(), d(this))) return;
    H.one(e, 'hidden.bs.offcanvas', () => {
      h(this) && this.focus();
    });
    const i = V.findOne('.offcanvas.show');
    i && i !== e && Lt.getInstance(i).hide(), Lt.getOrCreateInstance(e).toggle(this);
  }),
    H.on(window, 'load.bs.offcanvas.data-api', () =>
      V.find('.offcanvas.show').forEach((t) => Lt.getOrCreateInstance(t).show())
    ),
    F(Lt),
    b(Lt);
  const St = new Set([
      'background',
      'cite',
      'href',
      'itemtype',
      'longdesc',
      'poster',
      'src',
      'xlink:href',
    ]),
    Ot = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,
    Nt =
      /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,
    Dt = (t, e) => {
      const i = t.nodeName.toLowerCase();
      if (e.includes(i)) return !St.has(i) || Boolean(Ot.test(t.nodeValue) || Nt.test(t.nodeValue));
      const s = e.filter((t) => t instanceof RegExp);
      for (let t = 0, e = s.length; t < e; t++) if (s[t].test(i)) return !0;
      return !1;
    };
  function It(t, e, i) {
    if (!t.length) return t;
    if (i && 'function' == typeof i) return i(t);
    const s = new window.DOMParser().parseFromString(t, 'text/html'),
      n = Object.keys(e),
      o = [].concat(...s.body.querySelectorAll('*'));
    for (let t = 0, i = o.length; t < i; t++) {
      const i = o[t],
        s = i.nodeName.toLowerCase();
      if (!n.includes(s)) {
        i.remove();
        continue;
      }
      const r = [].concat(...i.attributes),
        a = [].concat(e['*'] || [], e[s] || []);
      r.forEach((t) => {
        Dt(t, a) || i.removeAttribute(t.nodeName);
      });
    }
    return s.body.innerHTML;
  }
  const Pt = new Set(['sanitize', 'allowList', 'sanitizeFn']),
    xt = {
      animation: 'boolean',
      template: 'string',
      title: '(string|element|function)',
      trigger: 'string',
      delay: '(number|object)',
      html: 'boolean',
      selector: '(string|boolean)',
      placement: '(string|function)',
      offset: '(array|string|function)',
      container: '(string|element|boolean)',
      fallbackPlacements: 'array',
      boundary: '(string|element)',
      customClass: '(string|function)',
      sanitize: 'boolean',
      sanitizeFn: '(null|function)',
      allowList: 'object',
      popperConfig: '(null|object|function)',
    },
    Mt = {
      AUTO: 'auto',
      TOP: 'top',
      RIGHT: m() ? 'left' : 'right',
      BOTTOM: 'bottom',
      LEFT: m() ? 'right' : 'left',
    },
    jt = {
      animation: !0,
      template:
        '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
      trigger: 'hover focus',
      title: '',
      delay: 0,
      html: !1,
      selector: !1,
      placement: 'top',
      offset: [0, 0],
      container: !1,
      fallbackPlacements: ['top', 'right', 'bottom', 'left'],
      boundary: 'clippingParents',
      customClass: '',
      sanitize: !0,
      sanitizeFn: null,
      allowList: {
        '*': ['class', 'dir', 'id', 'lang', 'role', /^aria-[\w-]*$/i],
        a: ['target', 'href', 'title', 'rel'],
        area: [],
        b: [],
        br: [],
        col: [],
        code: [],
        div: [],
        em: [],
        hr: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        i: [],
        img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
        li: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        small: [],
        span: [],
        sub: [],
        sup: [],
        strong: [],
        u: [],
        ul: [],
      },
      popperConfig: null,
    },
    Ht = {
      HIDE: 'hide.bs.tooltip',
      HIDDEN: 'hidden.bs.tooltip',
      SHOW: 'show.bs.tooltip',
      SHOWN: 'shown.bs.tooltip',
      INSERTED: 'inserted.bs.tooltip',
      CLICK: 'click.bs.tooltip',
      FOCUSIN: 'focusin.bs.tooltip',
      FOCUSOUT: 'focusout.bs.tooltip',
      MOUSEENTER: 'mouseenter.bs.tooltip',
      MOUSELEAVE: 'mouseleave.bs.tooltip',
    };
  class Bt extends R {
    constructor(t, e) {
      if (void 0 === i)
        throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
      super(t),
        (this._isEnabled = !0),
        (this._timeout = 0),
        (this._hoverState = ''),
        (this._activeTrigger = {}),
        (this._popper = null),
        (this._config = this._getConfig(e)),
        (this.tip = null),
        this._setListeners();
    }
    static get Default() {
      return jt;
    }
    static get NAME() {
      return 'tooltip';
    }
    static get Event() {
      return Ht;
    }
    static get DefaultType() {
      return xt;
    }
    enable() {
      this._isEnabled = !0;
    }
    disable() {
      this._isEnabled = !1;
    }
    toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }
    toggle(t) {
      if (this._isEnabled)
        if (t) {
          const e = this._initializeOnDelegatedTarget(t);
          (e._activeTrigger.click = !e._activeTrigger.click),
            e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);
        } else {
          if (this.getTipElement().classList.contains('show')) return void this._leave(null, this);
          this._enter(null, this);
        }
    }
    dispose() {
      clearTimeout(this._timeout),
        H.off(this._element.closest('.modal'), 'hide.bs.modal', this._hideModalHandler),
        this.tip && this.tip.remove(),
        this._disposePopper(),
        super.dispose();
    }
    show() {
      if ('none' === this._element.style.display)
        throw new Error('Please use show on visible elements');
      if (!this.isWithContent() || !this._isEnabled) return;
      const t = H.trigger(this._element, this.constructor.Event.SHOW),
        e = u(this._element),
        s =
          null === e
            ? this._element.ownerDocument.documentElement.contains(this._element)
            : e.contains(this._element);
      if (t.defaultPrevented || !s) return;
      'tooltip' === this.constructor.NAME &&
        this.tip &&
        this.getTitle() !== this.tip.querySelector('.tooltip-inner').innerHTML &&
        (this._disposePopper(), this.tip.remove(), (this.tip = null));
      const n = this.getTipElement(),
        o = ((t) => {
          do {
            t += Math.floor(1e6 * Math.random());
          } while (document.getElementById(t));
          return t;
        })(this.constructor.NAME);
      n.setAttribute('id', o),
        this._element.setAttribute('aria-describedby', o),
        this._config.animation && n.classList.add('fade');
      const r =
          'function' == typeof this._config.placement
            ? this._config.placement.call(this, n, this._element)
            : this._config.placement,
        a = this._getAttachment(r);
      this._addAttachmentClass(a);
      const { container: l } = this._config;
      z.set(n, this.constructor.DATA_KEY, this),
        this._element.ownerDocument.documentElement.contains(this.tip) ||
          (l.append(n), H.trigger(this._element, this.constructor.Event.INSERTED)),
        this._popper
          ? this._popper.update()
          : (this._popper = i.createPopper(this._element, n, this._getPopperConfig(a))),
        n.classList.add('show');
      const c = this._resolvePossibleFunction(this._config.customClass);
      c && n.classList.add(...c.split(' ')),
        'ontouchstart' in document.documentElement &&
          [].concat(...document.body.children).forEach((t) => {
            H.on(t, 'mouseover', g);
          });
      const h = this.tip.classList.contains('fade');
      this._queueCallback(
        () => {
          const t = this._hoverState;
          (this._hoverState = null),
            H.trigger(this._element, this.constructor.Event.SHOWN),
            'out' === t && this._leave(null, this);
        },
        this.tip,
        h
      );
    }
    hide() {
      if (!this._popper) return;
      const t = this.getTipElement();
      if (H.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;
      t.classList.remove('show'),
        'ontouchstart' in document.documentElement &&
          [].concat(...document.body.children).forEach((t) => H.off(t, 'mouseover', g)),
        (this._activeTrigger.click = !1),
        (this._activeTrigger.focus = !1),
        (this._activeTrigger.hover = !1);
      const e = this.tip.classList.contains('fade');
      this._queueCallback(
        () => {
          this._isWithActiveTrigger() ||
            ('show' !== this._hoverState && t.remove(),
            this._cleanTipClass(),
            this._element.removeAttribute('aria-describedby'),
            H.trigger(this._element, this.constructor.Event.HIDDEN),
            this._disposePopper());
        },
        this.tip,
        e
      ),
        (this._hoverState = '');
    }
    update() {
      null !== this._popper && this._popper.update();
    }
    isWithContent() {
      return Boolean(this.getTitle());
    }
    getTipElement() {
      if (this.tip) return this.tip;
      const t = document.createElement('div');
      t.innerHTML = this._config.template;
      const e = t.children[0];
      return this.setContent(e), e.classList.remove('fade', 'show'), (this.tip = e), this.tip;
    }
    setContent(t) {
      this._sanitizeAndSetContent(t, this.getTitle(), '.tooltip-inner');
    }
    _sanitizeAndSetContent(t, e, i) {
      const s = V.findOne(i, t);
      e || !s ? this.setElementContent(s, e) : s.remove();
    }
    setElementContent(t, e) {
      if (null !== t)
        return a(e)
          ? ((e = l(e)),
            void (this._config.html
              ? e.parentNode !== t && ((t.innerHTML = ''), t.append(e))
              : (t.textContent = e.textContent)))
          : void (this._config.html
              ? (this._config.sanitize &&
                  (e = It(e, this._config.allowList, this._config.sanitizeFn)),
                (t.innerHTML = e))
              : (t.textContent = e));
    }
    getTitle() {
      const t = this._element.getAttribute('data-bs-original-title') || this._config.title;
      return this._resolvePossibleFunction(t);
    }
    updateAttachment(t) {
      return 'right' === t ? 'end' : 'left' === t ? 'start' : t;
    }
    _initializeOnDelegatedTarget(t, e) {
      return e || this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig());
    }
    _getOffset() {
      const { offset: t } = this._config;
      return 'string' == typeof t
        ? t.split(',').map((t) => Number.parseInt(t, 10))
        : 'function' == typeof t
        ? (e) => t(e, this._element)
        : t;
    }
    _resolvePossibleFunction(t) {
      return 'function' == typeof t ? t.call(this._element) : t;
    }
    _getPopperConfig(t) {
      const e = {
        placement: t,
        modifiers: [
          { name: 'flip', options: { fallbackPlacements: this._config.fallbackPlacements } },
          { name: 'offset', options: { offset: this._getOffset() } },
          { name: 'preventOverflow', options: { boundary: this._config.boundary } },
          { name: 'arrow', options: { element: `.${this.constructor.NAME}-arrow` } },
          {
            name: 'onChange',
            enabled: !0,
            phase: 'afterWrite',
            fn: (t) => this._handlePopperPlacementChange(t),
          },
        ],
        onFirstUpdate: (t) => {
          t.options.placement !== t.placement && this._handlePopperPlacementChange(t);
        },
      };
      return {
        ...e,
        ...('function' == typeof this._config.popperConfig
          ? this._config.popperConfig(e)
          : this._config.popperConfig),
      };
    }
    _addAttachmentClass(t) {
      this.getTipElement().classList.add(
        `${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`
      );
    }
    _getAttachment(t) {
      return Mt[t.toUpperCase()];
    }
    _setListeners() {
      this._config.trigger.split(' ').forEach((t) => {
        if ('click' === t)
          H.on(this._element, this.constructor.Event.CLICK, this._config.selector, (t) =>
            this.toggle(t)
          );
        else if ('manual' !== t) {
          const e =
              'hover' === t ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN,
            i = 'hover' === t ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;
          H.on(this._element, e, this._config.selector, (t) => this._enter(t)),
            H.on(this._element, i, this._config.selector, (t) => this._leave(t));
        }
      }),
        (this._hideModalHandler = () => {
          this._element && this.hide();
        }),
        H.on(this._element.closest('.modal'), 'hide.bs.modal', this._hideModalHandler),
        this._config.selector
          ? (this._config = { ...this._config, trigger: 'manual', selector: '' })
          : this._fixTitle();
    }
    _fixTitle() {
      const t = this._element.getAttribute('title'),
        e = typeof this._element.getAttribute('data-bs-original-title');
      (t || 'string' !== e) &&
        (this._element.setAttribute('data-bs-original-title', t || ''),
        !t ||
          this._element.getAttribute('aria-label') ||
          this._element.textContent ||
          this._element.setAttribute('aria-label', t),
        this._element.setAttribute('title', ''));
    }
    _enter(t, e) {
      (e = this._initializeOnDelegatedTarget(t, e)),
        t && (e._activeTrigger['focusin' === t.type ? 'focus' : 'hover'] = !0),
        e.getTipElement().classList.contains('show') || 'show' === e._hoverState
          ? (e._hoverState = 'show')
          : (clearTimeout(e._timeout),
            (e._hoverState = 'show'),
            e._config.delay && e._config.delay.show
              ? (e._timeout = setTimeout(() => {
                  'show' === e._hoverState && e.show();
                }, e._config.delay.show))
              : e.show());
    }
    _leave(t, e) {
      (e = this._initializeOnDelegatedTarget(t, e)),
        t &&
          (e._activeTrigger['focusout' === t.type ? 'focus' : 'hover'] = e._element.contains(
            t.relatedTarget
          )),
        e._isWithActiveTrigger() ||
          (clearTimeout(e._timeout),
          (e._hoverState = 'out'),
          e._config.delay && e._config.delay.hide
            ? (e._timeout = setTimeout(() => {
                'out' === e._hoverState && e.hide();
              }, e._config.delay.hide))
            : e.hide());
    }
    _isWithActiveTrigger() {
      for (const t in this._activeTrigger) if (this._activeTrigger[t]) return !0;
      return !1;
    }
    _getConfig(t) {
      const e = K.getDataAttributes(this._element);
      return (
        Object.keys(e).forEach((t) => {
          Pt.has(t) && delete e[t];
        }),
        ((t = {
          ...this.constructor.Default,
          ...e,
          ...('object' == typeof t && t ? t : {}),
        }).container = !1 === t.container ? document.body : l(t.container)),
        'number' == typeof t.delay && (t.delay = { show: t.delay, hide: t.delay }),
        'number' == typeof t.title && (t.title = t.title.toString()),
        'number' == typeof t.content && (t.content = t.content.toString()),
        c('tooltip', t, this.constructor.DefaultType),
        t.sanitize && (t.template = It(t.template, t.allowList, t.sanitizeFn)),
        t
      );
    }
    _getDelegateConfig() {
      const t = {};
      for (const e in this._config)
        this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);
      return t;
    }
    _cleanTipClass() {
      const t = this.getTipElement(),
        e = new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`, 'g'),
        i = t.getAttribute('class').match(e);
      null !== i && i.length > 0 && i.map((t) => t.trim()).forEach((e) => t.classList.remove(e));
    }
    _getBasicClassPrefix() {
      return 'bs-tooltip';
    }
    _handlePopperPlacementChange(t) {
      const { state: e } = t;
      e &&
        ((this.tip = e.elements.popper),
        this._cleanTipClass(),
        this._addAttachmentClass(this._getAttachment(e.placement)));
    }
    _disposePopper() {
      this._popper && (this._popper.destroy(), (this._popper = null));
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = Bt.getOrCreateInstance(this, t);
        if ('string' == typeof t) {
          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
          e[t]();
        }
      });
    }
  }
  b(Bt);
  const zt = {
      ...Bt.Default,
      placement: 'right',
      offset: [0, 8],
      trigger: 'click',
      content: '',
      template:
        '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
    },
    Rt = { ...Bt.DefaultType, content: '(string|element|function)' },
    Ft = {
      HIDE: 'hide.bs.popover',
      HIDDEN: 'hidden.bs.popover',
      SHOW: 'show.bs.popover',
      SHOWN: 'shown.bs.popover',
      INSERTED: 'inserted.bs.popover',
      CLICK: 'click.bs.popover',
      FOCUSIN: 'focusin.bs.popover',
      FOCUSOUT: 'focusout.bs.popover',
      MOUSEENTER: 'mouseenter.bs.popover',
      MOUSELEAVE: 'mouseleave.bs.popover',
    };
  class qt extends Bt {
    static get Default() {
      return zt;
    }
    static get NAME() {
      return 'popover';
    }
    static get Event() {
      return Ft;
    }
    static get DefaultType() {
      return Rt;
    }
    isWithContent() {
      return this.getTitle() || this._getContent();
    }
    setContent(t) {
      this._sanitizeAndSetContent(t, this.getTitle(), '.popover-header'),
        this._sanitizeAndSetContent(t, this._getContent(), '.popover-body');
    }
    _getContent() {
      return this._resolvePossibleFunction(this._config.content);
    }
    _getBasicClassPrefix() {
      return 'bs-popover';
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = qt.getOrCreateInstance(this, t);
        if ('string' == typeof t) {
          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
          e[t]();
        }
      });
    }
  }
  b(qt);
  const Wt = { offset: 10, method: 'auto', target: '' },
    $t = { offset: 'number', method: 'string', target: '(string|element)' },
    Ut = '.nav-link, .list-group-item, .dropdown-item';
  class Kt extends R {
    constructor(t, e) {
      super(t),
        (this._scrollElement = 'BODY' === this._element.tagName ? window : this._element),
        (this._config = this._getConfig(e)),
        (this._offsets = []),
        (this._targets = []),
        (this._activeTarget = null),
        (this._scrollHeight = 0),
        H.on(this._scrollElement, 'scroll.bs.scrollspy', () => this._process()),
        this.refresh(),
        this._process();
    }
    static get Default() {
      return Wt;
    }
    static get NAME() {
      return 'scrollspy';
    }
    refresh() {
      const t = this._scrollElement === this._scrollElement.window ? 'offset' : 'position',
        e = 'auto' === this._config.method ? t : this._config.method,
        i = 'position' === e ? this._getScrollTop() : 0;
      (this._offsets = []),
        (this._targets = []),
        (this._scrollHeight = this._getScrollHeight()),
        V.find(Ut, this._config.target)
          .map((t) => {
            const s = n(t),
              o = s ? V.findOne(s) : null;
            if (o) {
              const t = o.getBoundingClientRect();
              if (t.width || t.height) return [K[e](o).top + i, s];
            }
            return null;
          })
          .filter((t) => t)
          .sort((t, e) => t[0] - e[0])
          .forEach((t) => {
            this._offsets.push(t[0]), this._targets.push(t[1]);
          });
    }
    dispose() {
      H.off(this._scrollElement, '.bs.scrollspy'), super.dispose();
    }
    _getConfig(t) {
      return (
        ((t = {
          ...Wt,
          ...K.getDataAttributes(this._element),
          ...('object' == typeof t && t ? t : {}),
        }).target = l(t.target) || document.documentElement),
        c('scrollspy', t, $t),
        t
      );
    }
    _getScrollTop() {
      return this._scrollElement === window
        ? this._scrollElement.pageYOffset
        : this._scrollElement.scrollTop;
    }
    _getScrollHeight() {
      return (
        this._scrollElement.scrollHeight ||
        Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
      );
    }
    _getOffsetHeight() {
      return this._scrollElement === window
        ? window.innerHeight
        : this._scrollElement.getBoundingClientRect().height;
    }
    _process() {
      const t = this._getScrollTop() + this._config.offset,
        e = this._getScrollHeight(),
        i = this._config.offset + e - this._getOffsetHeight();
      if ((this._scrollHeight !== e && this.refresh(), t >= i)) {
        const t = this._targets[this._targets.length - 1];
        this._activeTarget !== t && this._activate(t);
      } else {
        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0)
          return (this._activeTarget = null), void this._clear();
        for (let e = this._offsets.length; e--; )
          this._activeTarget !== this._targets[e] &&
            t >= this._offsets[e] &&
            (void 0 === this._offsets[e + 1] || t < this._offsets[e + 1]) &&
            this._activate(this._targets[e]);
      }
    }
    _activate(t) {
      (this._activeTarget = t), this._clear();
      const e = Ut.split(',').map((e) => `${e}[data-bs-target="${t}"],${e}[href="${t}"]`),
        i = V.findOne(e.join(','), this._config.target);
      i.classList.add('active'),
        i.classList.contains('dropdown-item')
          ? V.findOne('.dropdown-toggle', i.closest('.dropdown')).classList.add('active')
          : V.parents(i, '.nav, .list-group').forEach((t) => {
              V.prev(t, '.nav-link, .list-group-item').forEach((t) => t.classList.add('active')),
                V.prev(t, '.nav-item').forEach((t) => {
                  V.children(t, '.nav-link').forEach((t) => t.classList.add('active'));
                });
            }),
        H.trigger(this._scrollElement, 'activate.bs.scrollspy', { relatedTarget: t });
    }
    _clear() {
      V.find(Ut, this._config.target)
        .filter((t) => t.classList.contains('active'))
        .forEach((t) => t.classList.remove('active'));
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = Kt.getOrCreateInstance(this, t);
        if ('string' == typeof t) {
          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
          e[t]();
        }
      });
    }
  }
  H.on(window, 'load.bs.scrollspy.data-api', () => {
    V.find('[data-bs-spy="scroll"]').forEach((t) => new Kt(t));
  }),
    b(Kt);
  class Vt extends R {
    static get NAME() {
      return 'tab';
    }
    show() {
      if (
        this._element.parentNode &&
        this._element.parentNode.nodeType === Node.ELEMENT_NODE &&
        this._element.classList.contains('active')
      )
        return;
      let t;
      const e = o(this._element),
        i = this._element.closest('.nav, .list-group');
      if (i) {
        const e = 'UL' === i.nodeName || 'OL' === i.nodeName ? ':scope > li > .active' : '.active';
        (t = V.find(e, i)), (t = t[t.length - 1]);
      }
      const s = t ? H.trigger(t, 'hide.bs.tab', { relatedTarget: this._element }) : null;
      if (
        H.trigger(this._element, 'show.bs.tab', { relatedTarget: t }).defaultPrevented ||
        (null !== s && s.defaultPrevented)
      )
        return;
      this._activate(this._element, i);
      const n = () => {
        H.trigger(t, 'hidden.bs.tab', { relatedTarget: this._element }),
          H.trigger(this._element, 'shown.bs.tab', { relatedTarget: t });
      };
      e ? this._activate(e, e.parentNode, n) : n();
    }
    _activate(t, e, i) {
      const s = (
          !e || ('UL' !== e.nodeName && 'OL' !== e.nodeName)
            ? V.children(e, '.active')
            : V.find(':scope > li > .active', e)
        )[0],
        n = i && s && s.classList.contains('fade'),
        o = () => this._transitionComplete(t, s, i);
      s && n ? (s.classList.remove('show'), this._queueCallback(o, t, !0)) : o();
    }
    _transitionComplete(t, e, i) {
      if (e) {
        e.classList.remove('active');
        const t = V.findOne(':scope > .dropdown-menu .active', e.parentNode);
        t && t.classList.remove('active'),
          'tab' === e.getAttribute('role') && e.setAttribute('aria-selected', !1);
      }
      t.classList.add('active'),
        'tab' === t.getAttribute('role') && t.setAttribute('aria-selected', !0),
        p(t),
        t.classList.contains('fade') && t.classList.add('show');
      let s = t.parentNode;
      if (
        (s && 'LI' === s.nodeName && (s = s.parentNode), s && s.classList.contains('dropdown-menu'))
      ) {
        const e = t.closest('.dropdown');
        e && V.find('.dropdown-toggle', e).forEach((t) => t.classList.add('active')),
          t.setAttribute('aria-expanded', !0);
      }
      i && i();
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = Vt.getOrCreateInstance(this);
        if ('string' == typeof t) {
          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
          e[t]();
        }
      });
    }
  }
  H.on(
    document,
    'click.bs.tab.data-api',
    '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',
    function (t) {
      ['A', 'AREA'].includes(this.tagName) && t.preventDefault(),
        d(this) || Vt.getOrCreateInstance(this).show();
    }
  ),
    b(Vt);
  const Xt = { animation: 'boolean', autohide: 'boolean', delay: 'number' },
    Yt = { animation: !0, autohide: !0, delay: 5e3 };
  class Qt extends R {
    constructor(t, e) {
      super(t),
        (this._config = this._getConfig(e)),
        (this._timeout = null),
        (this._hasMouseInteraction = !1),
        (this._hasKeyboardInteraction = !1),
        this._setListeners();
    }
    static get DefaultType() {
      return Xt;
    }
    static get Default() {
      return Yt;
    }
    static get NAME() {
      return 'toast';
    }
    show() {
      H.trigger(this._element, 'show.bs.toast').defaultPrevented ||
        (this._clearTimeout(),
        this._config.animation && this._element.classList.add('fade'),
        this._element.classList.remove('hide'),
        p(this._element),
        this._element.classList.add('show'),
        this._element.classList.add('showing'),
        this._queueCallback(
          () => {
            this._element.classList.remove('showing'),
              H.trigger(this._element, 'shown.bs.toast'),
              this._maybeScheduleHide();
          },
          this._element,
          this._config.animation
        ));
    }
    hide() {
      this._element.classList.contains('show') &&
        (H.trigger(this._element, 'hide.bs.toast').defaultPrevented ||
          (this._element.classList.add('showing'),
          this._queueCallback(
            () => {
              this._element.classList.add('hide'),
                this._element.classList.remove('showing'),
                this._element.classList.remove('show'),
                H.trigger(this._element, 'hidden.bs.toast');
            },
            this._element,
            this._config.animation
          )));
    }
    dispose() {
      this._clearTimeout(),
        this._element.classList.contains('show') && this._element.classList.remove('show'),
        super.dispose();
    }
    _getConfig(t) {
      return (
        (t = {
          ...Yt,
          ...K.getDataAttributes(this._element),
          ...('object' == typeof t && t ? t : {}),
        }),
        c('toast', t, this.constructor.DefaultType),
        t
      );
    }
    _maybeScheduleHide() {
      this._config.autohide &&
        (this._hasMouseInteraction ||
          this._hasKeyboardInteraction ||
          (this._timeout = setTimeout(() => {
            this.hide();
          }, this._config.delay)));
    }
    _onInteraction(t, e) {
      switch (t.type) {
        case 'mouseover':
        case 'mouseout':
          this._hasMouseInteraction = e;
          break;
        case 'focusin':
        case 'focusout':
          this._hasKeyboardInteraction = e;
      }
      if (e) return void this._clearTimeout();
      const i = t.relatedTarget;
      this._element === i || this._element.contains(i) || this._maybeScheduleHide();
    }
    _setListeners() {
      H.on(this._element, 'mouseover.bs.toast', (t) => this._onInteraction(t, !0)),
        H.on(this._element, 'mouseout.bs.toast', (t) => this._onInteraction(t, !1)),
        H.on(this._element, 'focusin.bs.toast', (t) => this._onInteraction(t, !0)),
        H.on(this._element, 'focusout.bs.toast', (t) => this._onInteraction(t, !1));
    }
    _clearTimeout() {
      clearTimeout(this._timeout), (this._timeout = null);
    }
    static jQueryInterface(t) {
      return this.each(function () {
        const e = Qt.getOrCreateInstance(this, t);
        if ('string' == typeof t) {
          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
          e[t](this);
        }
      });
    }
  }
  return (
    F(Qt),
    b(Qt),
    {
      Alert: q,
      Button: W,
      Carousel: et,
      Collapse: nt,
      Dropdown: pt,
      Modal: Tt,
      Offcanvas: Lt,
      Popover: qt,
      ScrollSpy: Kt,
      Tab: Vt,
      Toast: Qt,
      Tooltip: Bt,
    }
  );
});
// #endregion

// #region / Moment with locales v2.29.1
//   __  __                            _              _ _   _       _                 _
//  |  \/  |                          | |            (_) | | |     | |               | |
//  | \  / | ___  _ __ ___   ___ _ __ | |_  __      ___| |_| |__   | | ___   ___ __ _| | ___  ___
//  | |\/| |/ _ \| '_ ` _ \ / _ \ '_ \| __| \ \ /\ / / | __| '_ \  | |/ _ \ / __/ _` | |/ _ \/ __|
//  | |  | | (_) | | | | | |  __/ | | | |_   \ V  V /| | |_| | | | | | (_) | (_| (_| | |  __/\__ \
//  |_|  |_|\___/|_| |_| |_|\___|_| |_|\__|   \_/\_/ |_|\__|_| |_| |_|\___/ \___\__,_|_|\___||___/
//
//                                                                                                  v2.29.1
/*!
 * Moment with locales v2.29.1 (https://momentjs.com/)
 * Licensed under MIT (https://github.com/moment/moment/blob/develop/LICENSE)
 */
!(function (e, a) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = a())
    : 'function' == typeof define && define.amd
    ? define(a)
    : (e.moment = a());
})(this, function () {
  'use strict';
  var e, n;
  function M() {
    return e.apply(null, arguments);
  }
  function i(e) {
    return e instanceof Array || '[object Array]' === Object.prototype.toString.call(e);
  }
  function _(e) {
    return null != e && '[object Object]' === Object.prototype.toString.call(e);
  }
  function h(e, a) {
    return Object.prototype.hasOwnProperty.call(e, a);
  }
  function o(e) {
    if (Object.getOwnPropertyNames) return 0 === Object.getOwnPropertyNames(e).length;
    for (var a in e) if (h(e, a)) return;
    return 1;
  }
  function r(e) {
    return void 0 === e;
  }
  function m(e) {
    return 'number' == typeof e || '[object Number]' === Object.prototype.toString.call(e);
  }
  function d(e) {
    return e instanceof Date || '[object Date]' === Object.prototype.toString.call(e);
  }
  function u(e, a) {
    for (var t = [], s = 0; s < e.length; ++s) t.push(a(e[s], s));
    return t;
  }
  function l(e, a) {
    for (var t in a) h(a, t) && (e[t] = a[t]);
    return (
      h(a, 'toString') && (e.toString = a.toString), h(a, 'valueOf') && (e.valueOf = a.valueOf), e
    );
  }
  function c(e, a, t, s) {
    return Sa(e, a, t, s, !0).utc();
  }
  function L(e) {
    return (
      null == e._pf &&
        (e._pf = {
          empty: !1,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: !1,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: !1,
          userInvalidated: !1,
          iso: !1,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: !1,
          weekdayMismatch: !1,
        }),
      e._pf
    );
  }
  function Y(e) {
    if (null == e._isValid) {
      var a = L(e),
        t = n.call(a.parsedDateParts, function (e) {
          return null != e;
        }),
        s =
          !isNaN(e._d.getTime()) &&
          a.overflow < 0 &&
          !a.empty &&
          !a.invalidEra &&
          !a.invalidMonth &&
          !a.invalidWeekday &&
          !a.weekdayMismatch &&
          !a.nullInput &&
          !a.invalidFormat &&
          !a.userInvalidated &&
          (!a.meridiem || (a.meridiem && t));
      if (
        (e._strict &&
          (s = s && 0 === a.charsLeftOver && 0 === a.unusedTokens.length && void 0 === a.bigHour),
        null != Object.isFrozen && Object.isFrozen(e))
      )
        return s;
      e._isValid = s;
    }
    return e._isValid;
  }
  function y(e) {
    var a = c(NaN);
    return null != e ? l(L(a), e) : (L(a).userInvalidated = !0), a;
  }
  n = Array.prototype.some
    ? Array.prototype.some
    : function (e) {
        for (var a = Object(this), t = a.length >>> 0, s = 0; s < t; s++)
          if (s in a && e.call(this, a[s], s, a)) return !0;
        return !1;
      };
  var f = (M.momentProperties = []),
    a = !1;
  function p(e, a) {
    var t, s, n;
    if (
      (r(a._isAMomentObject) || (e._isAMomentObject = a._isAMomentObject),
      r(a._i) || (e._i = a._i),
      r(a._f) || (e._f = a._f),
      r(a._l) || (e._l = a._l),
      r(a._strict) || (e._strict = a._strict),
      r(a._tzm) || (e._tzm = a._tzm),
      r(a._isUTC) || (e._isUTC = a._isUTC),
      r(a._offset) || (e._offset = a._offset),
      r(a._pf) || (e._pf = L(a)),
      r(a._locale) || (e._locale = a._locale),
      0 < f.length)
    )
      for (t = 0; t < f.length; t++) r((n = a[(s = f[t])])) || (e[s] = n);
    return e;
  }
  function k(e) {
    p(this, e),
      (this._d = new Date(null != e._d ? e._d.getTime() : NaN)),
      this.isValid() || (this._d = new Date(NaN)),
      !1 === a && ((a = !0), M.updateOffset(this), (a = !1));
  }
  function D(e) {
    return e instanceof k || (null != e && null != e._isAMomentObject);
  }
  function T(e) {
    !1 === M.suppressDeprecationWarnings &&
      'undefined' != typeof console &&
      console.warn &&
      console.warn('Deprecation warning: ' + e);
  }
  function t(n, r) {
    var d = !0;
    return l(function () {
      if ((null != M.deprecationHandler && M.deprecationHandler(null, n), d)) {
        for (var e, a, t = [], s = 0; s < arguments.length; s++) {
          if (((e = ''), 'object' == typeof arguments[s])) {
            for (a in ((e += '\n[' + s + '] '), arguments[0]))
              h(arguments[0], a) && (e += a + ': ' + arguments[0][a] + ', ');
            e = e.slice(0, -2);
          } else e = arguments[s];
          t.push(e);
        }
        T(n + '\nArguments: ' + Array.prototype.slice.call(t).join('') + '\n' + new Error().stack),
          (d = !1);
      }
      return r.apply(this, arguments);
    }, r);
  }
  var s,
    g = {};
  function w(e, a) {
    null != M.deprecationHandler && M.deprecationHandler(e, a), g[e] || (T(a), (g[e] = !0));
  }
  function v(e) {
    return (
      ('undefined' != typeof Function && e instanceof Function) ||
      '[object Function]' === Object.prototype.toString.call(e)
    );
  }
  function b(e, a) {
    var t,
      s = l({}, e);
    for (t in a)
      h(a, t) &&
        (_(e[t]) && _(a[t])
          ? ((s[t] = {}), l(s[t], e[t]), l(s[t], a[t]))
          : null != a[t]
          ? (s[t] = a[t])
          : delete s[t]);
    for (t in e) h(e, t) && !h(a, t) && _(e[t]) && (s[t] = l({}, s[t]));
    return s;
  }
  function S(e) {
    null != e && this.set(e);
  }
  (M.suppressDeprecationWarnings = !1),
    (M.deprecationHandler = null),
    (s = Object.keys
      ? Object.keys
      : function (e) {
          var a,
            t = [];
          for (a in e) h(e, a) && t.push(a);
          return t;
        });
  function H(e, a, t) {
    var s = '' + Math.abs(e),
      n = a - s.length;
    return (0 <= e ? (t ? '+' : '') : '-') + Math.pow(10, Math.max(0, n)).toString().substr(1) + s;
  }
  var j =
      /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
    x = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
    P = {},
    O = {};
  function W(e, a, t, s) {
    var n =
      'string' == typeof s
        ? function () {
            return this[s]();
          }
        : s;
    e && (O[e] = n),
      a &&
        (O[a[0]] = function () {
          return H(n.apply(this, arguments), a[1], a[2]);
        }),
      t &&
        (O[t] = function () {
          return this.localeData().ordinal(n.apply(this, arguments), e);
        });
  }
  function A(e, a) {
    return e.isValid()
      ? ((a = E(a, e.localeData())),
        (P[a] =
          P[a] ||
          (function (s) {
            for (var e, n = s.match(j), a = 0, r = n.length; a < r; a++)
              O[n[a]]
                ? (n[a] = O[n[a]])
                : (n[a] = (e = n[a]).match(/\[[\s\S]/)
                    ? e.replace(/^\[|\]$/g, '')
                    : e.replace(/\\/g, ''));
            return function (e) {
              for (var a = '', t = 0; t < r; t++) a += v(n[t]) ? n[t].call(e, s) : n[t];
              return a;
            };
          })(a)),
        P[a](e))
      : e.localeData().invalidDate();
  }
  function E(e, a) {
    var t = 5;
    function s(e) {
      return a.longDateFormat(e) || e;
    }
    for (x.lastIndex = 0; 0 <= t && x.test(e); ) (e = e.replace(x, s)), (x.lastIndex = 0), --t;
    return e;
  }
  var F = {};
  function z(e, a) {
    var t = e.toLowerCase();
    F[t] = F[t + 's'] = F[a] = e;
  }
  function N(e) {
    return 'string' == typeof e ? F[e] || F[e.toLowerCase()] : void 0;
  }
  function J(e) {
    var a,
      t,
      s = {};
    for (t in e) h(e, t) && (a = N(t)) && (s[a] = e[t]);
    return s;
  }
  var R = {};
  function C(e, a) {
    R[e] = a;
  }
  function I(e) {
    return (e % 4 == 0 && e % 100 != 0) || e % 400 == 0;
  }
  function U(e) {
    return e < 0 ? Math.ceil(e) || 0 : Math.floor(e);
  }
  function G(e) {
    var a = +e,
      t = 0;
    return 0 != a && isFinite(a) && (t = U(a)), t;
  }
  function V(a, t) {
    return function (e) {
      return null != e ? (K(this, a, e), M.updateOffset(this, t), this) : B(this, a);
    };
  }
  function B(e, a) {
    return e.isValid() ? e._d['get' + (e._isUTC ? 'UTC' : '') + a]() : NaN;
  }
  function K(e, a, t) {
    e.isValid() &&
      !isNaN(t) &&
      ('FullYear' === a && I(e.year()) && 1 === e.month() && 29 === e.date()
        ? ((t = G(t)), e._d['set' + (e._isUTC ? 'UTC' : '') + a](t, e.month(), Se(t, e.month())))
        : e._d['set' + (e._isUTC ? 'UTC' : '') + a](t));
  }
  var q,
    Z = /\d/,
    $ = /\d\d/,
    Q = /\d{3}/,
    X = /\d{4}/,
    ee = /[+-]?\d{6}/,
    ae = /\d\d?/,
    te = /\d\d\d\d?/,
    se = /\d\d\d\d\d\d?/,
    ne = /\d{1,3}/,
    re = /\d{1,4}/,
    de = /[+-]?\d{1,6}/,
    ie = /\d+/,
    _e = /[+-]?\d+/,
    oe = /Z|[+-]\d\d:?\d\d/gi,
    me = /Z|[+-]\d\d(?::?\d\d)?/gi,
    ue =
      /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
  function le(e, t, s) {
    q[e] = v(t)
      ? t
      : function (e, a) {
          return e && s ? s : t;
        };
  }
  function Me(e, a) {
    return h(q, e)
      ? q[e](a._strict, a._locale)
      : new RegExp(
          he(
            e
              .replace('\\', '')
              .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (e, a, t, s, n) {
                return a || t || s || n;
              })
          )
        );
  }
  function he(e) {
    return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }
  q = {};
  var ce = {};
  function Le(e, t) {
    var a,
      s = t;
    for (
      'string' == typeof e && (e = [e]),
        m(t) &&
          (s = function (e, a) {
            a[t] = G(e);
          }),
        a = 0;
      a < e.length;
      a++
    )
      ce[e[a]] = s;
  }
  function Ye(e, n) {
    Le(e, function (e, a, t, s) {
      (t._w = t._w || {}), n(e, t._w, t, s);
    });
  }
  var ye,
    fe = 0,
    pe = 1,
    ke = 2,
    De = 3,
    Te = 4,
    ge = 5,
    we = 6,
    ve = 7,
    be = 8;
  function Se(e, a) {
    if (isNaN(e) || isNaN(a)) return NaN;
    var t,
      s = ((a % (t = 12)) + t) % t;
    return (e += (a - s) / 12), 1 == s ? (I(e) ? 29 : 28) : 31 - ((s % 7) % 2);
  }
  (ye = Array.prototype.indexOf
    ? Array.prototype.indexOf
    : function (e) {
        for (var a = 0; a < this.length; ++a) if (this[a] === e) return a;
        return -1;
      }),
    W('M', ['MM', 2], 'Mo', function () {
      return this.month() + 1;
    }),
    W('MMM', 0, 0, function (e) {
      return this.localeData().monthsShort(this, e);
    }),
    W('MMMM', 0, 0, function (e) {
      return this.localeData().months(this, e);
    }),
    z('month', 'M'),
    C('month', 8),
    le('M', ae),
    le('MM', ae, $),
    le('MMM', function (e, a) {
      return a.monthsShortRegex(e);
    }),
    le('MMMM', function (e, a) {
      return a.monthsRegex(e);
    }),
    Le(['M', 'MM'], function (e, a) {
      a[pe] = G(e) - 1;
    }),
    Le(['MMM', 'MMMM'], function (e, a, t, s) {
      var n = t._locale.monthsParse(e, s, t._strict);
      null != n ? (a[pe] = n) : (L(t).invalidMonth = e);
    });
  var He =
      'January_February_March_April_May_June_July_August_September_October_November_December'.split(
        '_'
      ),
    je = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    xe = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
    Pe = ue,
    Oe = ue;
  function We(e, a) {
    var t;
    if (!e.isValid()) return e;
    if ('string' == typeof a)
      if (/^\d+$/.test(a)) a = G(a);
      else if (!m((a = e.localeData().monthsParse(a)))) return e;
    return (
      (t = Math.min(e.date(), Se(e.year(), a))),
      e._d['set' + (e._isUTC ? 'UTC' : '') + 'Month'](a, t),
      e
    );
  }
  function Ae(e) {
    return null != e ? (We(this, e), M.updateOffset(this, !0), this) : B(this, 'Month');
  }
  function Ee() {
    function e(e, a) {
      return a.length - e.length;
    }
    for (var a, t = [], s = [], n = [], r = 0; r < 12; r++)
      (a = c([2e3, r])),
        t.push(this.monthsShort(a, '')),
        s.push(this.months(a, '')),
        n.push(this.months(a, '')),
        n.push(this.monthsShort(a, ''));
    for (t.sort(e), s.sort(e), n.sort(e), r = 0; r < 12; r++) (t[r] = he(t[r])), (s[r] = he(s[r]));
    for (r = 0; r < 24; r++) n[r] = he(n[r]);
    (this._monthsRegex = new RegExp('^(' + n.join('|') + ')', 'i')),
      (this._monthsShortRegex = this._monthsRegex),
      (this._monthsStrictRegex = new RegExp('^(' + s.join('|') + ')', 'i')),
      (this._monthsShortStrictRegex = new RegExp('^(' + t.join('|') + ')', 'i'));
  }
  function Fe(e) {
    return I(e) ? 366 : 365;
  }
  W('Y', 0, 0, function () {
    var e = this.year();
    return e <= 9999 ? H(e, 4) : '+' + e;
  }),
    W(0, ['YY', 2], 0, function () {
      return this.year() % 100;
    }),
    W(0, ['YYYY', 4], 0, 'year'),
    W(0, ['YYYYY', 5], 0, 'year'),
    W(0, ['YYYYYY', 6, !0], 0, 'year'),
    z('year', 'y'),
    C('year', 1),
    le('Y', _e),
    le('YY', ae, $),
    le('YYYY', re, X),
    le('YYYYY', de, ee),
    le('YYYYYY', de, ee),
    Le(['YYYYY', 'YYYYYY'], fe),
    Le('YYYY', function (e, a) {
      a[fe] = 2 === e.length ? M.parseTwoDigitYear(e) : G(e);
    }),
    Le('YY', function (e, a) {
      a[fe] = M.parseTwoDigitYear(e);
    }),
    Le('Y', function (e, a) {
      a[fe] = parseInt(e, 10);
    }),
    (M.parseTwoDigitYear = function (e) {
      return G(e) + (68 < G(e) ? 1900 : 2e3);
    });
  var ze = V('FullYear', !0);
  function Ne(e) {
    var a, t;
    return (
      e < 100 && 0 <= e
        ? (((t = Array.prototype.slice.call(arguments))[0] = e + 400),
          (a = new Date(Date.UTC.apply(null, t))),
          isFinite(a.getUTCFullYear()) && a.setUTCFullYear(e))
        : (a = new Date(Date.UTC.apply(null, arguments))),
      a
    );
  }
  function Je(e, a, t) {
    var s = 7 + a - t;
    return s - ((7 + Ne(e, 0, s).getUTCDay() - a) % 7) - 1;
  }
  function Re(e, a, t, s, n) {
    var r,
      d = 1 + 7 * (a - 1) + ((7 + t - s) % 7) + Je(e, s, n),
      i = d <= 0 ? Fe((r = e - 1)) + d : d > Fe(e) ? ((r = e + 1), d - Fe(e)) : ((r = e), d);
    return { year: r, dayOfYear: i };
  }
  function Ce(e, a, t) {
    var s,
      n,
      r = Je(e.year(), a, t),
      d = Math.floor((e.dayOfYear() - r - 1) / 7) + 1;
    return (
      d < 1
        ? (s = d + Ie((n = e.year() - 1), a, t))
        : d > Ie(e.year(), a, t)
        ? ((s = d - Ie(e.year(), a, t)), (n = e.year() + 1))
        : ((n = e.year()), (s = d)),
      { week: s, year: n }
    );
  }
  function Ie(e, a, t) {
    var s = Je(e, a, t),
      n = Je(e + 1, a, t);
    return (Fe(e) - s + n) / 7;
  }
  W('w', ['ww', 2], 'wo', 'week'),
    W('W', ['WW', 2], 'Wo', 'isoWeek'),
    z('week', 'w'),
    z('isoWeek', 'W'),
    C('week', 5),
    C('isoWeek', 5),
    le('w', ae),
    le('ww', ae, $),
    le('W', ae),
    le('WW', ae, $),
    Ye(['w', 'ww', 'W', 'WW'], function (e, a, t, s) {
      a[s.substr(0, 1)] = G(e);
    });
  function Ue(e, a) {
    return e.slice(a, 7).concat(e.slice(0, a));
  }
  W('d', 0, 'do', 'day'),
    W('dd', 0, 0, function (e) {
      return this.localeData().weekdaysMin(this, e);
    }),
    W('ddd', 0, 0, function (e) {
      return this.localeData().weekdaysShort(this, e);
    }),
    W('dddd', 0, 0, function (e) {
      return this.localeData().weekdays(this, e);
    }),
    W('e', 0, 0, 'weekday'),
    W('E', 0, 0, 'isoWeekday'),
    z('day', 'd'),
    z('weekday', 'e'),
    z('isoWeekday', 'E'),
    C('day', 11),
    C('weekday', 11),
    C('isoWeekday', 11),
    le('d', ae),
    le('e', ae),
    le('E', ae),
    le('dd', function (e, a) {
      return a.weekdaysMinRegex(e);
    }),
    le('ddd', function (e, a) {
      return a.weekdaysShortRegex(e);
    }),
    le('dddd', function (e, a) {
      return a.weekdaysRegex(e);
    }),
    Ye(['dd', 'ddd', 'dddd'], function (e, a, t, s) {
      var n = t._locale.weekdaysParse(e, s, t._strict);
      null != n ? (a.d = n) : (L(t).invalidWeekday = e);
    }),
    Ye(['d', 'e', 'E'], function (e, a, t, s) {
      a[s] = G(e);
    });
  var Ge = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    Ve = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    Be = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    Ke = ue,
    qe = ue,
    Ze = ue;
  function $e() {
    function e(e, a) {
      return a.length - e.length;
    }
    for (var a, t, s, n, r = [], d = [], i = [], _ = [], o = 0; o < 7; o++)
      (a = c([2e3, 1]).day(o)),
        (t = he(this.weekdaysMin(a, ''))),
        (s = he(this.weekdaysShort(a, ''))),
        (n = he(this.weekdays(a, ''))),
        r.push(t),
        d.push(s),
        i.push(n),
        _.push(t),
        _.push(s),
        _.push(n);
    r.sort(e),
      d.sort(e),
      i.sort(e),
      _.sort(e),
      (this._weekdaysRegex = new RegExp('^(' + _.join('|') + ')', 'i')),
      (this._weekdaysShortRegex = this._weekdaysRegex),
      (this._weekdaysMinRegex = this._weekdaysRegex),
      (this._weekdaysStrictRegex = new RegExp('^(' + i.join('|') + ')', 'i')),
      (this._weekdaysShortStrictRegex = new RegExp('^(' + d.join('|') + ')', 'i')),
      (this._weekdaysMinStrictRegex = new RegExp('^(' + r.join('|') + ')', 'i'));
  }
  function Qe() {
    return this.hours() % 12 || 12;
  }
  function Xe(e, a) {
    W(e, 0, 0, function () {
      return this.localeData().meridiem(this.hours(), this.minutes(), a);
    });
  }
  function ea(e, a) {
    return a._meridiemParse;
  }
  W('H', ['HH', 2], 0, 'hour'),
    W('h', ['hh', 2], 0, Qe),
    W('k', ['kk', 2], 0, function () {
      return this.hours() || 24;
    }),
    W('hmm', 0, 0, function () {
      return '' + Qe.apply(this) + H(this.minutes(), 2);
    }),
    W('hmmss', 0, 0, function () {
      return '' + Qe.apply(this) + H(this.minutes(), 2) + H(this.seconds(), 2);
    }),
    W('Hmm', 0, 0, function () {
      return '' + this.hours() + H(this.minutes(), 2);
    }),
    W('Hmmss', 0, 0, function () {
      return '' + this.hours() + H(this.minutes(), 2) + H(this.seconds(), 2);
    }),
    Xe('a', !0),
    Xe('A', !1),
    z('hour', 'h'),
    C('hour', 13),
    le('a', ea),
    le('A', ea),
    le('H', ae),
    le('h', ae),
    le('k', ae),
    le('HH', ae, $),
    le('hh', ae, $),
    le('kk', ae, $),
    le('hmm', te),
    le('hmmss', se),
    le('Hmm', te),
    le('Hmmss', se),
    Le(['H', 'HH'], De),
    Le(['k', 'kk'], function (e, a, t) {
      var s = G(e);
      a[De] = 24 === s ? 0 : s;
    }),
    Le(['a', 'A'], function (e, a, t) {
      (t._isPm = t._locale.isPM(e)), (t._meridiem = e);
    }),
    Le(['h', 'hh'], function (e, a, t) {
      (a[De] = G(e)), (L(t).bigHour = !0);
    }),
    Le('hmm', function (e, a, t) {
      var s = e.length - 2;
      (a[De] = G(e.substr(0, s))), (a[Te] = G(e.substr(s))), (L(t).bigHour = !0);
    }),
    Le('hmmss', function (e, a, t) {
      var s = e.length - 4,
        n = e.length - 2;
      (a[De] = G(e.substr(0, s))),
        (a[Te] = G(e.substr(s, 2))),
        (a[ge] = G(e.substr(n))),
        (L(t).bigHour = !0);
    }),
    Le('Hmm', function (e, a, t) {
      var s = e.length - 2;
      (a[De] = G(e.substr(0, s))), (a[Te] = G(e.substr(s)));
    }),
    Le('Hmmss', function (e, a, t) {
      var s = e.length - 4,
        n = e.length - 2;
      (a[De] = G(e.substr(0, s))), (a[Te] = G(e.substr(s, 2))), (a[ge] = G(e.substr(n)));
    });
  var aa = V('Hours', !0);
  var ta,
    sa = {
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      longDateFormat: {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
      },
      invalidDate: 'Invalid date',
      ordinal: '%d',
      dayOfMonthOrdinalParse: /\d{1,2}/,
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      months: He,
      monthsShort: je,
      week: { dow: 0, doy: 6 },
      weekdays: Ge,
      weekdaysMin: Be,
      weekdaysShort: Ve,
      meridiemParse: /[ap]\.?m?\.?/i,
    },
    na = {},
    ra = {};
  function da(e) {
    return e ? e.toLowerCase().replace('_', '-') : e;
  }
  function ia(e) {
    for (var a, t, s, n, r = 0; r < e.length; ) {
      for (
        a = (n = da(e[r]).split('-')).length, t = (t = da(e[r + 1])) ? t.split('-') : null;
        0 < a;

      ) {
        if ((s = _a(n.slice(0, a).join('-')))) return s;
        if (
          t &&
          t.length >= a &&
          (function (e, a) {
            for (var t = Math.min(e.length, a.length), s = 0; s < t; s += 1)
              if (e[s] !== a[s]) return s;
            return t;
          })(n, t) >=
            a - 1
        )
          break;
        a--;
      }
      r++;
    }
    return ta;
  }
  function _a(a) {
    var e;
    if (void 0 === na[a] && 'undefined' != typeof module && module && module.exports)
      try {
        (e = ta._abbr), require('./locale/' + a), oa(e);
      } catch (e) {
        na[a] = null;
      }
    return na[a];
  }
  function oa(e, a) {
    var t;
    return (
      e &&
        ((t = r(a) ? ua(e) : ma(e, a))
          ? (ta = t)
          : 'undefined' != typeof console &&
            console.warn &&
            console.warn('Locale ' + e + ' not found. Did you forget to load it?')),
      ta._abbr
    );
  }
  function ma(e, a) {
    if (null === a) return delete na[e], null;
    var t,
      s = sa;
    if (((a.abbr = e), null != na[e]))
      w(
        'defineLocaleOverride',
        'use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
      ),
        (s = na[e]._config);
    else if (null != a.parentLocale)
      if (null != na[a.parentLocale]) s = na[a.parentLocale]._config;
      else {
        if (null == (t = _a(a.parentLocale)))
          return (
            ra[a.parentLocale] || (ra[a.parentLocale] = []),
            ra[a.parentLocale].push({ name: e, config: a }),
            null
          );
        s = t._config;
      }
    return (
      (na[e] = new S(b(s, a))),
      ra[e] &&
        ra[e].forEach(function (e) {
          ma(e.name, e.config);
        }),
      oa(e),
      na[e]
    );
  }
  function ua(e) {
    var a;
    if ((e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e)) return ta;
    if (!i(e)) {
      if ((a = _a(e))) return a;
      e = [e];
    }
    return ia(e);
  }
  function la(e) {
    var a,
      t = e._a;
    return (
      t &&
        -2 === L(e).overflow &&
        ((a =
          t[pe] < 0 || 11 < t[pe]
            ? pe
            : t[ke] < 1 || t[ke] > Se(t[fe], t[pe])
            ? ke
            : t[De] < 0 ||
              24 < t[De] ||
              (24 === t[De] && (0 !== t[Te] || 0 !== t[ge] || 0 !== t[we]))
            ? De
            : t[Te] < 0 || 59 < t[Te]
            ? Te
            : t[ge] < 0 || 59 < t[ge]
            ? ge
            : t[we] < 0 || 999 < t[we]
            ? we
            : -1),
        L(e)._overflowDayOfYear && (a < fe || ke < a) && (a = ke),
        L(e)._overflowWeeks && -1 === a && (a = ve),
        L(e)._overflowWeekday && -1 === a && (a = be),
        (L(e).overflow = a)),
      e
    );
  }
  var Ma =
      /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
    ha =
      /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
    ca = /Z|[+-]\d\d(?::?\d\d)?/,
    La = [
      ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
      ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
      ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
      ['GGGG-[W]WW', /\d{4}-W\d\d/, !1],
      ['YYYY-DDD', /\d{4}-\d{3}/],
      ['YYYY-MM', /\d{4}-\d\d/, !1],
      ['YYYYYYMMDD', /[+-]\d{10}/],
      ['YYYYMMDD', /\d{8}/],
      ['GGGG[W]WWE', /\d{4}W\d{3}/],
      ['GGGG[W]WW', /\d{4}W\d{2}/, !1],
      ['YYYYDDD', /\d{7}/],
      ['YYYYMM', /\d{6}/, !1],
      ['YYYY', /\d{4}/, !1],
    ],
    Ya = [
      ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
      ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
      ['HH:mm:ss', /\d\d:\d\d:\d\d/],
      ['HH:mm', /\d\d:\d\d/],
      ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
      ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
      ['HHmmss', /\d\d\d\d\d\d/],
      ['HHmm', /\d\d\d\d/],
      ['HH', /\d\d/],
    ],
    ya = /^\/?Date\((-?\d+)/i,
    fa =
      /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
    pa = {
      UT: 0,
      GMT: 0,
      EDT: -240,
      EST: -300,
      CDT: -300,
      CST: -360,
      MDT: -360,
      MST: -420,
      PDT: -420,
      PST: -480,
    };
  function ka(e) {
    var a,
      t,
      s,
      n,
      r,
      d,
      i = e._i,
      _ = Ma.exec(i) || ha.exec(i);
    if (_) {
      for (L(e).iso = !0, a = 0, t = La.length; a < t; a++)
        if (La[a][1].exec(_[1])) {
          (n = La[a][0]), (s = !1 !== La[a][2]);
          break;
        }
      if (null == n) return void (e._isValid = !1);
      if (_[3]) {
        for (a = 0, t = Ya.length; a < t; a++)
          if (Ya[a][1].exec(_[3])) {
            r = (_[2] || ' ') + Ya[a][0];
            break;
          }
        if (null == r) return void (e._isValid = !1);
      }
      if (!s && null != r) return void (e._isValid = !1);
      if (_[4]) {
        if (!ca.exec(_[4])) return void (e._isValid = !1);
        d = 'Z';
      }
      (e._f = n + (r || '') + (d || '')), va(e);
    } else e._isValid = !1;
  }
  function Da(e, a, t, s, n, r) {
    var d = [
      (function (e) {
        var a = parseInt(e, 10);
        {
          if (a <= 49) return 2e3 + a;
          if (a <= 999) return 1900 + a;
        }
        return a;
      })(e),
      je.indexOf(a),
      parseInt(t, 10),
      parseInt(s, 10),
      parseInt(n, 10),
    ];
    return r && d.push(parseInt(r, 10)), d;
  }
  function Ta(e) {
    var a,
      t,
      s,
      n,
      r = fa.exec(
        e._i
          .replace(/\([^)]*\)|[\n\t]/g, ' ')
          .replace(/(\s\s+)/g, ' ')
          .replace(/^\s\s*/, '')
          .replace(/\s\s*$/, '')
      );
    if (r) {
      if (
        ((a = Da(r[4], r[3], r[2], r[5], r[6], r[7])),
        (t = r[1]),
        (s = a),
        (n = e),
        t &&
          Ve.indexOf(t) !== new Date(s[0], s[1], s[2]).getDay() &&
          ((L(n).weekdayMismatch = !0), !void (n._isValid = !1)))
      )
        return;
      (e._a = a),
        (e._tzm = (function (e, a, t) {
          if (e) return pa[e];
          if (a) return 0;
          var s = parseInt(t, 10),
            n = s % 100;
          return 60 * ((s - n) / 100) + n;
        })(r[8], r[9], r[10])),
        (e._d = Ne.apply(null, e._a)),
        e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm),
        (L(e).rfc2822 = !0);
    } else e._isValid = !1;
  }
  function ga(e, a, t) {
    return null != e ? e : null != a ? a : t;
  }
  function wa(e) {
    var a,
      t,
      s,
      n,
      r,
      d,
      i,
      _ = [];
    if (!e._d) {
      for (
        d = e,
          i = new Date(M.now()),
          s = d._useUTC
            ? [i.getUTCFullYear(), i.getUTCMonth(), i.getUTCDate()]
            : [i.getFullYear(), i.getMonth(), i.getDate()],
          e._w &&
            null == e._a[ke] &&
            null == e._a[pe] &&
            (function (e) {
              var a, t, s, n, r, d, i, _, o;
              null != (a = e._w).GG || null != a.W || null != a.E
                ? ((r = 1),
                  (d = 4),
                  (t = ga(a.GG, e._a[fe], Ce(Ha(), 1, 4).year)),
                  (s = ga(a.W, 1)),
                  ((n = ga(a.E, 1)) < 1 || 7 < n) && (_ = !0))
                : ((r = e._locale._week.dow),
                  (d = e._locale._week.doy),
                  (o = Ce(Ha(), r, d)),
                  (t = ga(a.gg, e._a[fe], o.year)),
                  (s = ga(a.w, o.week)),
                  null != a.d
                    ? ((n = a.d) < 0 || 6 < n) && (_ = !0)
                    : null != a.e
                    ? ((n = a.e + r), (a.e < 0 || 6 < a.e) && (_ = !0))
                    : (n = r));
              s < 1 || s > Ie(t, r, d)
                ? (L(e)._overflowWeeks = !0)
                : null != _
                ? (L(e)._overflowWeekday = !0)
                : ((i = Re(t, s, n, r, d)), (e._a[fe] = i.year), (e._dayOfYear = i.dayOfYear));
            })(e),
          null != e._dayOfYear &&
            ((r = ga(e._a[fe], s[fe])),
            (e._dayOfYear > Fe(r) || 0 === e._dayOfYear) && (L(e)._overflowDayOfYear = !0),
            (t = Ne(r, 0, e._dayOfYear)),
            (e._a[pe] = t.getUTCMonth()),
            (e._a[ke] = t.getUTCDate())),
          a = 0;
        a < 3 && null == e._a[a];
        ++a
      )
        e._a[a] = _[a] = s[a];
      for (; a < 7; a++) e._a[a] = _[a] = null == e._a[a] ? (2 === a ? 1 : 0) : e._a[a];
      24 === e._a[De] &&
        0 === e._a[Te] &&
        0 === e._a[ge] &&
        0 === e._a[we] &&
        ((e._nextDay = !0), (e._a[De] = 0)),
        (e._d = (
          e._useUTC
            ? Ne
            : function (e, a, t, s, n, r, d) {
                var i;
                return (
                  e < 100 && 0 <= e
                    ? ((i = new Date(e + 400, a, t, s, n, r, d)),
                      isFinite(i.getFullYear()) && i.setFullYear(e))
                    : (i = new Date(e, a, t, s, n, r, d)),
                  i
                );
              }
        ).apply(null, _)),
        (n = e._useUTC ? e._d.getUTCDay() : e._d.getDay()),
        null != e._tzm && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm),
        e._nextDay && (e._a[De] = 24),
        e._w && void 0 !== e._w.d && e._w.d !== n && (L(e).weekdayMismatch = !0);
    }
  }
  function va(e) {
    if (e._f !== M.ISO_8601)
      if (e._f !== M.RFC_2822) {
        (e._a = []), (L(e).empty = !0);
        for (
          var a,
            t,
            s,
            n,
            r,
            d,
            i,
            _ = '' + e._i,
            o = _.length,
            m = 0,
            u = E(e._f, e._locale).match(j) || [],
            l = 0;
          l < u.length;
          l++
        )
          (t = u[l]),
            (a = (_.match(Me(t, e)) || [])[0]) &&
              (0 < (s = _.substr(0, _.indexOf(a))).length && L(e).unusedInput.push(s),
              (_ = _.slice(_.indexOf(a) + a.length)),
              (m += a.length)),
            O[t]
              ? (a ? (L(e).empty = !1) : L(e).unusedTokens.push(t),
                (r = t),
                (i = e),
                null != (d = a) && h(ce, r) && ce[r](d, i._a, i, r))
              : e._strict && !a && L(e).unusedTokens.push(t);
        (L(e).charsLeftOver = o - m),
          0 < _.length && L(e).unusedInput.push(_),
          e._a[De] <= 12 && !0 === L(e).bigHour && 0 < e._a[De] && (L(e).bigHour = void 0),
          (L(e).parsedDateParts = e._a.slice(0)),
          (L(e).meridiem = e._meridiem),
          (e._a[De] = (function (e, a, t) {
            var s;
            if (null == t) return a;
            return null != e.meridiemHour
              ? e.meridiemHour(a, t)
              : (null != e.isPM &&
                  ((s = e.isPM(t)) && a < 12 && (a += 12), s || 12 !== a || (a = 0)),
                a);
          })(e._locale, e._a[De], e._meridiem)),
          null !== (n = L(e).era) && (e._a[fe] = e._locale.erasConvertYear(n, e._a[fe])),
          wa(e),
          la(e);
      } else Ta(e);
    else ka(e);
  }
  function ba(e) {
    var a,
      t,
      s = e._i,
      n = e._f;
    return (
      (e._locale = e._locale || ua(e._l)),
      null === s || (void 0 === n && '' === s)
        ? y({ nullInput: !0 })
        : ('string' == typeof s && (e._i = s = e._locale.preparse(s)),
          D(s)
            ? new k(la(s))
            : (d(s)
                ? (e._d = s)
                : i(n)
                ? (function (e) {
                    var a,
                      t,
                      s,
                      n,
                      r,
                      d,
                      i = !1;
                    if (0 === e._f.length) return (L(e).invalidFormat = !0), (e._d = new Date(NaN));
                    for (n = 0; n < e._f.length; n++)
                      (r = 0),
                        (d = !1),
                        (a = p({}, e)),
                        null != e._useUTC && (a._useUTC = e._useUTC),
                        (a._f = e._f[n]),
                        va(a),
                        Y(a) && (d = !0),
                        (r += L(a).charsLeftOver),
                        (r += 10 * L(a).unusedTokens.length),
                        (L(a).score = r),
                        i
                          ? r < s && ((s = r), (t = a))
                          : (null == s || r < s || d) && ((s = r), (t = a), d && (i = !0));
                    l(e, t || a);
                  })(e)
                : n
                ? va(e)
                : r((t = (a = e)._i))
                ? (a._d = new Date(M.now()))
                : d(t)
                ? (a._d = new Date(t.valueOf()))
                : 'string' == typeof t
                ? (function (e) {
                    var a = ya.exec(e._i);
                    null === a
                      ? (ka(e),
                        !1 === e._isValid &&
                          (delete e._isValid,
                          Ta(e),
                          !1 === e._isValid &&
                            (delete e._isValid,
                            e._strict ? (e._isValid = !1) : M.createFromInputFallback(e))))
                      : (e._d = new Date(+a[1]));
                  })(a)
                : i(t)
                ? ((a._a = u(t.slice(0), function (e) {
                    return parseInt(e, 10);
                  })),
                  wa(a))
                : _(t)
                ? (function (e) {
                    var a, t;
                    e._d ||
                      ((t = void 0 === (a = J(e._i)).day ? a.date : a.day),
                      (e._a = u(
                        [a.year, a.month, t, a.hour, a.minute, a.second, a.millisecond],
                        function (e) {
                          return e && parseInt(e, 10);
                        }
                      )),
                      wa(e));
                  })(a)
                : m(t)
                ? (a._d = new Date(t))
                : M.createFromInputFallback(a),
              Y(e) || (e._d = null),
              e))
    );
  }
  function Sa(e, a, t, s, n) {
    var r,
      d = {};
    return (
      (!0 !== a && !1 !== a) || ((s = a), (a = void 0)),
      (!0 !== t && !1 !== t) || ((s = t), (t = void 0)),
      ((_(e) && o(e)) || (i(e) && 0 === e.length)) && (e = void 0),
      (d._isAMomentObject = !0),
      (d._useUTC = d._isUTC = n),
      (d._l = t),
      (d._i = e),
      (d._f = a),
      (d._strict = s),
      (r = new k(la(ba(d))))._nextDay && (r.add(1, 'd'), (r._nextDay = void 0)),
      r
    );
  }
  function Ha(e, a, t, s) {
    return Sa(e, a, t, s, !1);
  }
  (M.createFromInputFallback = t(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (e) {
      e._d = new Date(e._i + (e._useUTC ? ' UTC' : ''));
    }
  )),
    (M.ISO_8601 = function () {}),
    (M.RFC_2822 = function () {});
  var ja = t(
      'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
      function () {
        var e = Ha.apply(null, arguments);
        return this.isValid() && e.isValid() ? (e < this ? this : e) : y();
      }
    ),
    xa = t(
      'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
      function () {
        var e = Ha.apply(null, arguments);
        return this.isValid() && e.isValid() ? (this < e ? this : e) : y();
      }
    );
  function Pa(e, a) {
    var t, s;
    if ((1 === a.length && i(a[0]) && (a = a[0]), !a.length)) return Ha();
    for (t = a[0], s = 1; s < a.length; ++s) (a[s].isValid() && !a[s][e](t)) || (t = a[s]);
    return t;
  }
  var Oa = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
  function Wa(e) {
    var a = J(e),
      t = a.year || 0,
      s = a.quarter || 0,
      n = a.month || 0,
      r = a.week || a.isoWeek || 0,
      d = a.day || 0,
      i = a.hour || 0,
      _ = a.minute || 0,
      o = a.second || 0,
      m = a.millisecond || 0;
    (this._isValid = (function (e) {
      var a,
        t,
        s = !1;
      for (a in e)
        if (h(e, a) && (-1 === ye.call(Oa, a) || (null != e[a] && isNaN(e[a])))) return !1;
      for (t = 0; t < Oa.length; ++t)
        if (e[Oa[t]]) {
          if (s) return !1;
          parseFloat(e[Oa[t]]) !== G(e[Oa[t]]) && (s = !0);
        }
      return !0;
    })(a)),
      (this._milliseconds = +m + 1e3 * o + 6e4 * _ + 1e3 * i * 60 * 60),
      (this._days = +d + 7 * r),
      (this._months = +n + 3 * s + 12 * t),
      (this._data = {}),
      (this._locale = ua()),
      this._bubble();
  }
  function Aa(e) {
    return e instanceof Wa;
  }
  function Ea(e) {
    return e < 0 ? -1 * Math.round(-1 * e) : Math.round(e);
  }
  function Fa(e, t) {
    W(e, 0, 0, function () {
      var e = this.utcOffset(),
        a = '+';
      return e < 0 && ((e = -e), (a = '-')), a + H(~~(e / 60), 2) + t + H(~~e % 60, 2);
    });
  }
  Fa('Z', ':'),
    Fa('ZZ', ''),
    le('Z', me),
    le('ZZ', me),
    Le(['Z', 'ZZ'], function (e, a, t) {
      (t._useUTC = !0), (t._tzm = Na(me, e));
    });
  var za = /([\+\-]|\d\d)/gi;
  function Na(e, a) {
    var t,
      s,
      n = (a || '').match(e);
    return null === n
      ? null
      : 0 === (s = 60 * (t = ((n[n.length - 1] || []) + '').match(za) || ['-', 0, 0])[1] + G(t[2]))
      ? 0
      : '+' === t[0]
      ? s
      : -s;
  }
  function Ja(e, a) {
    var t, s;
    return a._isUTC
      ? ((t = a.clone()),
        (s = (D(e) || d(e) ? e.valueOf() : Ha(e).valueOf()) - t.valueOf()),
        t._d.setTime(t._d.valueOf() + s),
        M.updateOffset(t, !1),
        t)
      : Ha(e).local();
  }
  function Ra(e) {
    return -Math.round(e._d.getTimezoneOffset());
  }
  function Ca() {
    return !!this.isValid() && this._isUTC && 0 === this._offset;
  }
  M.updateOffset = function () {};
  var Ia = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
    Ua =
      /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
  function Ga(e, a) {
    var t,
      s,
      n,
      r = e,
      d = null;
    return (
      Aa(e)
        ? (r = { ms: e._milliseconds, d: e._days, M: e._months })
        : m(e) || !isNaN(+e)
        ? ((r = {}), a ? (r[a] = +e) : (r.milliseconds = +e))
        : (d = Ia.exec(e))
        ? ((t = '-' === d[1] ? -1 : 1),
          (r = {
            y: 0,
            d: G(d[ke]) * t,
            h: G(d[De]) * t,
            m: G(d[Te]) * t,
            s: G(d[ge]) * t,
            ms: G(Ea(1e3 * d[we])) * t,
          }))
        : (d = Ua.exec(e))
        ? ((t = '-' === d[1] ? -1 : 1),
          (r = {
            y: Va(d[2], t),
            M: Va(d[3], t),
            w: Va(d[4], t),
            d: Va(d[5], t),
            h: Va(d[6], t),
            m: Va(d[7], t),
            s: Va(d[8], t),
          }))
        : null == r
        ? (r = {})
        : 'object' == typeof r &&
          ('from' in r || 'to' in r) &&
          ((n = (function (e, a) {
            var t;
            if (!e.isValid() || !a.isValid()) return { milliseconds: 0, months: 0 };
            (a = Ja(a, e)),
              e.isBefore(a)
                ? (t = Ba(e, a))
                : (((t = Ba(a, e)).milliseconds = -t.milliseconds), (t.months = -t.months));
            return t;
          })(Ha(r.from), Ha(r.to))),
          ((r = {}).ms = n.milliseconds),
          (r.M = n.months)),
      (s = new Wa(r)),
      Aa(e) && h(e, '_locale') && (s._locale = e._locale),
      Aa(e) && h(e, '_isValid') && (s._isValid = e._isValid),
      s
    );
  }
  function Va(e, a) {
    var t = e && parseFloat(e.replace(',', '.'));
    return (isNaN(t) ? 0 : t) * a;
  }
  function Ba(e, a) {
    var t = {};
    return (
      (t.months = a.month() - e.month() + 12 * (a.year() - e.year())),
      e.clone().add(t.months, 'M').isAfter(a) && --t.months,
      (t.milliseconds = a - e.clone().add(t.months, 'M')),
      t
    );
  }
  function Ka(s, n) {
    return function (e, a) {
      var t;
      return (
        null === a ||
          isNaN(+a) ||
          (w(
            n,
            'moment().' +
              n +
              '(period, number) is deprecated. Please use moment().' +
              n +
              '(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
          ),
          (t = e),
          (e = a),
          (a = t)),
        qa(this, Ga(e, a), s),
        this
      );
    };
  }
  function qa(e, a, t, s) {
    var n = a._milliseconds,
      r = Ea(a._days),
      d = Ea(a._months);
    e.isValid() &&
      ((s = null == s || s),
      d && We(e, B(e, 'Month') + d * t),
      r && K(e, 'Date', B(e, 'Date') + r * t),
      n && e._d.setTime(e._d.valueOf() + n * t),
      s && M.updateOffset(e, r || d));
  }
  (Ga.fn = Wa.prototype),
    (Ga.invalid = function () {
      return Ga(NaN);
    });
  var Za = Ka(1, 'add'),
    $a = Ka(-1, 'subtract');
  function Qa(e) {
    return 'string' == typeof e || e instanceof String;
  }
  function Xa(e) {
    return (
      D(e) ||
      d(e) ||
      Qa(e) ||
      m(e) ||
      (function (a) {
        var e = i(a),
          t = !1;
        e &&
          (t =
            0 ===
            a.filter(function (e) {
              return !m(e) && Qa(a);
            }).length);
        return e && t;
      })(e) ||
      (function (e) {
        var a,
          t,
          s = _(e) && !o(e),
          n = !1,
          r = [
            'years',
            'year',
            'y',
            'months',
            'month',
            'M',
            'days',
            'day',
            'd',
            'dates',
            'date',
            'D',
            'hours',
            'hour',
            'h',
            'minutes',
            'minute',
            'm',
            'seconds',
            'second',
            's',
            'milliseconds',
            'millisecond',
            'ms',
          ];
        for (a = 0; a < r.length; a += 1) (t = r[a]), (n = n || h(e, t));
        return s && n;
      })(e) ||
      null == e
    );
  }
  function et(e, a) {
    if (e.date() < a.date()) return -et(a, e);
    var t = 12 * (a.year() - e.year()) + (a.month() - e.month()),
      s = e.clone().add(t, 'months'),
      n =
        a - s < 0
          ? (a - s) / (s - e.clone().add(t - 1, 'months'))
          : (a - s) / (e.clone().add(1 + t, 'months') - s);
    return -(t + n) || 0;
  }
  function at(e) {
    var a;
    return void 0 === e ? this._locale._abbr : (null != (a = ua(e)) && (this._locale = a), this);
  }
  (M.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ'), (M.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]');
  var tt = t(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (e) {
      return void 0 === e ? this.localeData() : this.locale(e);
    }
  );
  function st() {
    return this._locale;
  }
  var nt = 126227808e5;
  function rt(e, a) {
    return ((e % a) + a) % a;
  }
  function dt(e, a, t) {
    return e < 100 && 0 <= e ? new Date(e + 400, a, t) - nt : new Date(e, a, t).valueOf();
  }
  function it(e, a, t) {
    return e < 100 && 0 <= e ? Date.UTC(e + 400, a, t) - nt : Date.UTC(e, a, t);
  }
  function _t(e, a) {
    return a.erasAbbrRegex(e);
  }
  function ot() {
    for (var e = [], a = [], t = [], s = [], n = this.eras(), r = 0, d = n.length; r < d; ++r)
      a.push(he(n[r].name)),
        e.push(he(n[r].abbr)),
        t.push(he(n[r].narrow)),
        s.push(he(n[r].name)),
        s.push(he(n[r].abbr)),
        s.push(he(n[r].narrow));
    (this._erasRegex = new RegExp('^(' + s.join('|') + ')', 'i')),
      (this._erasNameRegex = new RegExp('^(' + a.join('|') + ')', 'i')),
      (this._erasAbbrRegex = new RegExp('^(' + e.join('|') + ')', 'i')),
      (this._erasNarrowRegex = new RegExp('^(' + t.join('|') + ')', 'i'));
  }
  function mt(e, a) {
    W(0, [e, e.length], 0, a);
  }
  function ut(e, a, t, s, n) {
    var r;
    return null == e
      ? Ce(this, s, n).year
      : ((r = Ie(e, s, n)) < a && (a = r),
        function (e, a, t, s, n) {
          var r = Re(e, a, t, s, n),
            d = Ne(r.year, 0, r.dayOfYear);
          return (
            this.year(d.getUTCFullYear()),
            this.month(d.getUTCMonth()),
            this.date(d.getUTCDate()),
            this
          );
        }.call(this, e, a, t, s, n));
  }
  W('N', 0, 0, 'eraAbbr'),
    W('NN', 0, 0, 'eraAbbr'),
    W('NNN', 0, 0, 'eraAbbr'),
    W('NNNN', 0, 0, 'eraName'),
    W('NNNNN', 0, 0, 'eraNarrow'),
    W('y', ['y', 1], 'yo', 'eraYear'),
    W('y', ['yy', 2], 0, 'eraYear'),
    W('y', ['yyy', 3], 0, 'eraYear'),
    W('y', ['yyyy', 4], 0, 'eraYear'),
    le('N', _t),
    le('NN', _t),
    le('NNN', _t),
    le('NNNN', function (e, a) {
      return a.erasNameRegex(e);
    }),
    le('NNNNN', function (e, a) {
      return a.erasNarrowRegex(e);
    }),
    Le(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (e, a, t, s) {
      var n = t._locale.erasParse(e, s, t._strict);
      n ? (L(t).era = n) : (L(t).invalidEra = e);
    }),
    le('y', ie),
    le('yy', ie),
    le('yyy', ie),
    le('yyyy', ie),
    le('yo', function (e, a) {
      return a._eraYearOrdinalRegex || ie;
    }),
    Le(['y', 'yy', 'yyy', 'yyyy'], fe),
    Le(['yo'], function (e, a, t, s) {
      var n;
      t._locale._eraYearOrdinalRegex && (n = e.match(t._locale._eraYearOrdinalRegex)),
        t._locale.eraYearOrdinalParse
          ? (a[fe] = t._locale.eraYearOrdinalParse(e, n))
          : (a[fe] = parseInt(e, 10));
    }),
    W(0, ['gg', 2], 0, function () {
      return this.weekYear() % 100;
    }),
    W(0, ['GG', 2], 0, function () {
      return this.isoWeekYear() % 100;
    }),
    mt('gggg', 'weekYear'),
    mt('ggggg', 'weekYear'),
    mt('GGGG', 'isoWeekYear'),
    mt('GGGGG', 'isoWeekYear'),
    z('weekYear', 'gg'),
    z('isoWeekYear', 'GG'),
    C('weekYear', 1),
    C('isoWeekYear', 1),
    le('G', _e),
    le('g', _e),
    le('GG', ae, $),
    le('gg', ae, $),
    le('GGGG', re, X),
    le('gggg', re, X),
    le('GGGGG', de, ee),
    le('ggggg', de, ee),
    Ye(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (e, a, t, s) {
      a[s.substr(0, 2)] = G(e);
    }),
    Ye(['gg', 'GG'], function (e, a, t, s) {
      a[s] = M.parseTwoDigitYear(e);
    }),
    W('Q', 0, 'Qo', 'quarter'),
    z('quarter', 'Q'),
    C('quarter', 7),
    le('Q', Z),
    Le('Q', function (e, a) {
      a[pe] = 3 * (G(e) - 1);
    }),
    W('D', ['DD', 2], 'Do', 'date'),
    z('date', 'D'),
    C('date', 9),
    le('D', ae),
    le('DD', ae, $),
    le('Do', function (e, a) {
      return e ? a._dayOfMonthOrdinalParse || a._ordinalParse : a._dayOfMonthOrdinalParseLenient;
    }),
    Le(['D', 'DD'], ke),
    Le('Do', function (e, a) {
      a[ke] = G(e.match(ae)[0]);
    });
  var lt = V('Date', !0);
  W('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'),
    z('dayOfYear', 'DDD'),
    C('dayOfYear', 4),
    le('DDD', ne),
    le('DDDD', Q),
    Le(['DDD', 'DDDD'], function (e, a, t) {
      t._dayOfYear = G(e);
    }),
    W('m', ['mm', 2], 0, 'minute'),
    z('minute', 'm'),
    C('minute', 14),
    le('m', ae),
    le('mm', ae, $),
    Le(['m', 'mm'], Te);
  var Mt = V('Minutes', !1);
  W('s', ['ss', 2], 0, 'second'),
    z('second', 's'),
    C('second', 15),
    le('s', ae),
    le('ss', ae, $),
    Le(['s', 'ss'], ge);
  var ht,
    ct,
    Lt = V('Seconds', !1);
  for (
    W('S', 0, 0, function () {
      return ~~(this.millisecond() / 100);
    }),
      W(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      }),
      W(0, ['SSS', 3], 0, 'millisecond'),
      W(0, ['SSSS', 4], 0, function () {
        return 10 * this.millisecond();
      }),
      W(0, ['SSSSS', 5], 0, function () {
        return 100 * this.millisecond();
      }),
      W(0, ['SSSSSS', 6], 0, function () {
        return 1e3 * this.millisecond();
      }),
      W(0, ['SSSSSSS', 7], 0, function () {
        return 1e4 * this.millisecond();
      }),
      W(0, ['SSSSSSSS', 8], 0, function () {
        return 1e5 * this.millisecond();
      }),
      W(0, ['SSSSSSSSS', 9], 0, function () {
        return 1e6 * this.millisecond();
      }),
      z('millisecond', 'ms'),
      C('millisecond', 16),
      le('S', ne, Z),
      le('SS', ne, $),
      le('SSS', ne, Q),
      ht = 'SSSS';
    ht.length <= 9;
    ht += 'S'
  )
    le(ht, ie);
  function Yt(e, a) {
    a[we] = G(1e3 * ('0.' + e));
  }
  for (ht = 'S'; ht.length <= 9; ht += 'S') Le(ht, Yt);
  (ct = V('Milliseconds', !1)), W('z', 0, 0, 'zoneAbbr'), W('zz', 0, 0, 'zoneName');
  var yt = k.prototype;
  function ft(e) {
    return e;
  }
  (yt.add = Za),
    (yt.calendar = function (e, a) {
      1 === arguments.length &&
        (arguments[0]
          ? Xa(arguments[0])
            ? ((e = arguments[0]), (a = void 0))
            : (function (e) {
                for (
                  var a = _(e) && !o(e),
                    t = !1,
                    s = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
                    n = 0;
                  n < s.length;
                  n += 1
                )
                  t = t || h(e, s[n]);
                return a && t;
              })(arguments[0]) && ((a = arguments[0]), (e = void 0))
          : (a = e = void 0));
      var t = e || Ha(),
        s = Ja(t, this).startOf('day'),
        n = M.calendarFormat(this, s) || 'sameElse',
        r = a && (v(a[n]) ? a[n].call(this, t) : a[n]);
      return this.format(r || this.localeData().calendar(n, this, Ha(t)));
    }),
    (yt.clone = function () {
      return new k(this);
    }),
    (yt.diff = function (e, a, t) {
      var s, n, r;
      if (!this.isValid()) return NaN;
      if (!(s = Ja(e, this)).isValid()) return NaN;
      switch (((n = 6e4 * (s.utcOffset() - this.utcOffset())), (a = N(a)))) {
        case 'year':
          r = et(this, s) / 12;
          break;
        case 'month':
          r = et(this, s);
          break;
        case 'quarter':
          r = et(this, s) / 3;
          break;
        case 'second':
          r = (this - s) / 1e3;
          break;
        case 'minute':
          r = (this - s) / 6e4;
          break;
        case 'hour':
          r = (this - s) / 36e5;
          break;
        case 'day':
          r = (this - s - n) / 864e5;
          break;
        case 'week':
          r = (this - s - n) / 6048e5;
          break;
        default:
          r = this - s;
      }
      return t ? r : U(r);
    }),
    (yt.endOf = function (e) {
      var a, t;
      if (void 0 === (e = N(e)) || 'millisecond' === e || !this.isValid()) return this;
      switch (((t = this._isUTC ? it : dt), e)) {
        case 'year':
          a = t(this.year() + 1, 0, 1) - 1;
          break;
        case 'quarter':
          a = t(this.year(), this.month() - (this.month() % 3) + 3, 1) - 1;
          break;
        case 'month':
          a = t(this.year(), this.month() + 1, 1) - 1;
          break;
        case 'week':
          a = t(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
          break;
        case 'isoWeek':
          a = t(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
          break;
        case 'day':
        case 'date':
          a = t(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case 'hour':
          (a = this._d.valueOf()),
            (a += 36e5 - rt(a + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5) - 1);
          break;
        case 'minute':
          (a = this._d.valueOf()), (a += 6e4 - rt(a, 6e4) - 1);
          break;
        case 'second':
          (a = this._d.valueOf()), (a += 1e3 - rt(a, 1e3) - 1);
          break;
      }
      return this._d.setTime(a), M.updateOffset(this, !0), this;
    }),
    (yt.format = function (e) {
      e = e || (this.isUtc() ? M.defaultFormatUtc : M.defaultFormat);
      var a = A(this, e);
      return this.localeData().postformat(a);
    }),
    (yt.from = function (e, a) {
      return this.isValid() && ((D(e) && e.isValid()) || Ha(e).isValid())
        ? Ga({ to: this, from: e }).locale(this.locale()).humanize(!a)
        : this.localeData().invalidDate();
    }),
    (yt.fromNow = function (e) {
      return this.from(Ha(), e);
    }),
    (yt.to = function (e, a) {
      return this.isValid() && ((D(e) && e.isValid()) || Ha(e).isValid())
        ? Ga({ from: this, to: e }).locale(this.locale()).humanize(!a)
        : this.localeData().invalidDate();
    }),
    (yt.toNow = function (e) {
      return this.to(Ha(), e);
    }),
    (yt.get = function (e) {
      return v(this[(e = N(e))]) ? this[e]() : this;
    }),
    (yt.invalidAt = function () {
      return L(this).overflow;
    }),
    (yt.isAfter = function (e, a) {
      var t = D(e) ? e : Ha(e);
      return (
        !(!this.isValid() || !t.isValid()) &&
        ('millisecond' === (a = N(a) || 'millisecond')
          ? this.valueOf() > t.valueOf()
          : t.valueOf() < this.clone().startOf(a).valueOf())
      );
    }),
    (yt.isBefore = function (e, a) {
      var t = D(e) ? e : Ha(e);
      return (
        !(!this.isValid() || !t.isValid()) &&
        ('millisecond' === (a = N(a) || 'millisecond')
          ? this.valueOf() < t.valueOf()
          : this.clone().endOf(a).valueOf() < t.valueOf())
      );
    }),
    (yt.isBetween = function (e, a, t, s) {
      var n = D(e) ? e : Ha(e),
        r = D(a) ? a : Ha(a);
      return (
        !!(this.isValid() && n.isValid() && r.isValid()) &&
        ('(' === (s = s || '()')[0] ? this.isAfter(n, t) : !this.isBefore(n, t)) &&
        (')' === s[1] ? this.isBefore(r, t) : !this.isAfter(r, t))
      );
    }),
    (yt.isSame = function (e, a) {
      var t,
        s = D(e) ? e : Ha(e);
      return (
        !(!this.isValid() || !s.isValid()) &&
        ('millisecond' === (a = N(a) || 'millisecond')
          ? this.valueOf() === s.valueOf()
          : ((t = s.valueOf()),
            this.clone().startOf(a).valueOf() <= t && t <= this.clone().endOf(a).valueOf()))
      );
    }),
    (yt.isSameOrAfter = function (e, a) {
      return this.isSame(e, a) || this.isAfter(e, a);
    }),
    (yt.isSameOrBefore = function (e, a) {
      return this.isSame(e, a) || this.isBefore(e, a);
    }),
    (yt.isValid = function () {
      return Y(this);
    }),
    (yt.lang = tt),
    (yt.locale = at),
    (yt.localeData = st),
    (yt.max = xa),
    (yt.min = ja),
    (yt.parsingFlags = function () {
      return l({}, L(this));
    }),
    (yt.set = function (e, a) {
      if ('object' == typeof e)
        for (
          var t = (function (e) {
              var a,
                t = [];
              for (a in e) h(e, a) && t.push({ unit: a, priority: R[a] });
              return (
                t.sort(function (e, a) {
                  return e.priority - a.priority;
                }),
                t
              );
            })((e = J(e))),
            s = 0;
          s < t.length;
          s++
        )
          this[t[s].unit](e[t[s].unit]);
      else if (v(this[(e = N(e))])) return this[e](a);
      return this;
    }),
    (yt.startOf = function (e) {
      var a, t;
      if (void 0 === (e = N(e)) || 'millisecond' === e || !this.isValid()) return this;
      switch (((t = this._isUTC ? it : dt), e)) {
        case 'year':
          a = t(this.year(), 0, 1);
          break;
        case 'quarter':
          a = t(this.year(), this.month() - (this.month() % 3), 1);
          break;
        case 'month':
          a = t(this.year(), this.month(), 1);
          break;
        case 'week':
          a = t(this.year(), this.month(), this.date() - this.weekday());
          break;
        case 'isoWeek':
          a = t(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
          break;
        case 'day':
        case 'date':
          a = t(this.year(), this.month(), this.date());
          break;
        case 'hour':
          (a = this._d.valueOf()), (a -= rt(a + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5));
          break;
        case 'minute':
          (a = this._d.valueOf()), (a -= rt(a, 6e4));
          break;
        case 'second':
          (a = this._d.valueOf()), (a -= rt(a, 1e3));
          break;
      }
      return this._d.setTime(a), M.updateOffset(this, !0), this;
    }),
    (yt.subtract = $a),
    (yt.toArray = function () {
      var e = this;
      return [e.year(), e.month(), e.date(), e.hour(), e.minute(), e.second(), e.millisecond()];
    }),
    (yt.toObject = function () {
      var e = this;
      return {
        years: e.year(),
        months: e.month(),
        date: e.date(),
        hours: e.hours(),
        minutes: e.minutes(),
        seconds: e.seconds(),
        milliseconds: e.milliseconds(),
      };
    }),
    (yt.toDate = function () {
      return new Date(this.valueOf());
    }),
    (yt.toISOString = function (e) {
      if (!this.isValid()) return null;
      var a = !0 !== e,
        t = a ? this.clone().utc() : this;
      return t.year() < 0 || 9999 < t.year()
        ? A(t, a ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ')
        : v(Date.prototype.toISOString)
        ? a
          ? this.toDate().toISOString()
          : new Date(this.valueOf() + 60 * this.utcOffset() * 1e3)
              .toISOString()
              .replace('Z', A(t, 'Z'))
        : A(t, a ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }),
    (yt.inspect = function () {
      if (!this.isValid()) return 'moment.invalid(/* ' + this._i + ' */)';
      var e,
        a,
        t,
        s = 'moment',
        n = '';
      return (
        this.isLocal() ||
          ((s = 0 === this.utcOffset() ? 'moment.utc' : 'moment.parseZone'), (n = 'Z')),
        (e = '[' + s + '("]'),
        (a = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY'),
        (t = n + '[")]'),
        this.format(e + a + '-MM-DD[T]HH:mm:ss.SSS' + t)
      );
    }),
    'undefined' != typeof Symbol &&
      null != Symbol.for &&
      (yt[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return 'Moment<' + this.format() + '>';
      }),
    (yt.toJSON = function () {
      return this.isValid() ? this.toISOString() : null;
    }),
    (yt.toString = function () {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }),
    (yt.unix = function () {
      return Math.floor(this.valueOf() / 1e3);
    }),
    (yt.valueOf = function () {
      return this._d.valueOf() - 6e4 * (this._offset || 0);
    }),
    (yt.creationData = function () {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict,
      };
    }),
    (yt.eraName = function () {
      for (var e, a = this.localeData().eras(), t = 0, s = a.length; t < s; ++t) {
        if (((e = this.clone().startOf('day').valueOf()), a[t].since <= e && e <= a[t].until))
          return a[t].name;
        if (a[t].until <= e && e <= a[t].since) return a[t].name;
      }
      return '';
    }),
    (yt.eraNarrow = function () {
      for (var e, a = this.localeData().eras(), t = 0, s = a.length; t < s; ++t) {
        if (((e = this.clone().startOf('day').valueOf()), a[t].since <= e && e <= a[t].until))
          return a[t].narrow;
        if (a[t].until <= e && e <= a[t].since) return a[t].narrow;
      }
      return '';
    }),
    (yt.eraAbbr = function () {
      for (var e, a = this.localeData().eras(), t = 0, s = a.length; t < s; ++t) {
        if (((e = this.clone().startOf('day').valueOf()), a[t].since <= e && e <= a[t].until))
          return a[t].abbr;
        if (a[t].until <= e && e <= a[t].since) return a[t].abbr;
      }
      return '';
    }),
    (yt.eraYear = function () {
      for (var e, a, t = this.localeData().eras(), s = 0, n = t.length; s < n; ++s)
        if (
          ((e = t[s].since <= t[s].until ? 1 : -1),
          (a = this.clone().startOf('day').valueOf()),
          (t[s].since <= a && a <= t[s].until) || (t[s].until <= a && a <= t[s].since))
        )
          return (this.year() - M(t[s].since).year()) * e + t[s].offset;
      return this.year();
    }),
    (yt.year = ze),
    (yt.isLeapYear = function () {
      return I(this.year());
    }),
    (yt.weekYear = function (e) {
      return ut.call(
        this,
        e,
        this.week(),
        this.weekday(),
        this.localeData()._week.dow,
        this.localeData()._week.doy
      );
    }),
    (yt.isoWeekYear = function (e) {
      return ut.call(this, e, this.isoWeek(), this.isoWeekday(), 1, 4);
    }),
    (yt.quarter = yt.quarters =
      function (e) {
        return null == e
          ? Math.ceil((this.month() + 1) / 3)
          : this.month(3 * (e - 1) + (this.month() % 3));
      }),
    (yt.month = Ae),
    (yt.daysInMonth = function () {
      return Se(this.year(), this.month());
    }),
    (yt.week = yt.weeks =
      function (e) {
        var a = this.localeData().week(this);
        return null == e ? a : this.add(7 * (e - a), 'd');
      }),
    (yt.isoWeek = yt.isoWeeks =
      function (e) {
        var a = Ce(this, 1, 4).week;
        return null == e ? a : this.add(7 * (e - a), 'd');
      }),
    (yt.weeksInYear = function () {
      var e = this.localeData()._week;
      return Ie(this.year(), e.dow, e.doy);
    }),
    (yt.weeksInWeekYear = function () {
      var e = this.localeData()._week;
      return Ie(this.weekYear(), e.dow, e.doy);
    }),
    (yt.isoWeeksInYear = function () {
      return Ie(this.year(), 1, 4);
    }),
    (yt.isoWeeksInISOWeekYear = function () {
      return Ie(this.isoWeekYear(), 1, 4);
    }),
    (yt.date = lt),
    (yt.day = yt.days =
      function (e) {
        if (!this.isValid()) return null != e ? this : NaN;
        var a,
          t,
          s = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        return null != e
          ? ((a = e),
            (t = this.localeData()),
            (e =
              'string' != typeof a
                ? a
                : isNaN(a)
                ? 'number' == typeof (a = t.weekdaysParse(a))
                  ? a
                  : null
                : parseInt(a, 10)),
            this.add(e - s, 'd'))
          : s;
      }),
    (yt.weekday = function (e) {
      if (!this.isValid()) return null != e ? this : NaN;
      var a = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return null == e ? a : this.add(e - a, 'd');
    }),
    (yt.isoWeekday = function (e) {
      if (!this.isValid()) return null != e ? this : NaN;
      if (null == e) return this.day() || 7;
      var a,
        t,
        s =
          ((a = e),
          (t = this.localeData()),
          'string' == typeof a ? t.weekdaysParse(a) % 7 || 7 : isNaN(a) ? null : a);
      return this.day(this.day() % 7 ? s : s - 7);
    }),
    (yt.dayOfYear = function (e) {
      var a = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
      return null == e ? a : this.add(e - a, 'd');
    }),
    (yt.hour = yt.hours = aa),
    (yt.minute = yt.minutes = Mt),
    (yt.second = yt.seconds = Lt),
    (yt.millisecond = yt.milliseconds = ct),
    (yt.utcOffset = function (e, a, t) {
      var s,
        n = this._offset || 0;
      if (!this.isValid()) return null != e ? this : NaN;
      if (null == e) return this._isUTC ? n : Ra(this);
      if ('string' == typeof e) {
        if (null === (e = Na(me, e))) return this;
      } else Math.abs(e) < 16 && !t && (e *= 60);
      return (
        !this._isUTC && a && (s = Ra(this)),
        (this._offset = e),
        (this._isUTC = !0),
        null != s && this.add(s, 'm'),
        n !== e &&
          (!a || this._changeInProgress
            ? qa(this, Ga(e - n, 'm'), 1, !1)
            : this._changeInProgress ||
              ((this._changeInProgress = !0),
              M.updateOffset(this, !0),
              (this._changeInProgress = null))),
        this
      );
    }),
    (yt.utc = function (e) {
      return this.utcOffset(0, e);
    }),
    (yt.local = function (e) {
      return (
        this._isUTC &&
          (this.utcOffset(0, e), (this._isUTC = !1), e && this.subtract(Ra(this), 'm')),
        this
      );
    }),
    (yt.parseZone = function () {
      var e;
      return (
        null != this._tzm
          ? this.utcOffset(this._tzm, !1, !0)
          : 'string' == typeof this._i &&
            (null != (e = Na(oe, this._i)) ? this.utcOffset(e) : this.utcOffset(0, !0)),
        this
      );
    }),
    (yt.hasAlignedHourOffset = function (e) {
      return (
        !!this.isValid() && ((e = e ? Ha(e).utcOffset() : 0), (this.utcOffset() - e) % 60 == 0)
      );
    }),
    (yt.isDST = function () {
      return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
      );
    }),
    (yt.isLocal = function () {
      return !!this.isValid() && !this._isUTC;
    }),
    (yt.isUtcOffset = function () {
      return !!this.isValid() && this._isUTC;
    }),
    (yt.isUtc = Ca),
    (yt.isUTC = Ca),
    (yt.zoneAbbr = function () {
      return this._isUTC ? 'UTC' : '';
    }),
    (yt.zoneName = function () {
      return this._isUTC ? 'Coordinated Universal Time' : '';
    }),
    (yt.dates = t('dates accessor is deprecated. Use date instead.', lt)),
    (yt.months = t('months accessor is deprecated. Use month instead', Ae)),
    (yt.years = t('years accessor is deprecated. Use year instead', ze)),
    (yt.zone = t(
      'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
      function (e, a) {
        return null != e
          ? ('string' != typeof e && (e = -e), this.utcOffset(e, a), this)
          : -this.utcOffset();
      }
    )),
    (yt.isDSTShifted = t(
      'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
      function () {
        if (!r(this._isDSTShifted)) return this._isDSTShifted;
        var e,
          a = {};
        return (
          p(a, this),
          (a = ba(a))._a
            ? ((e = (a._isUTC ? c : Ha)(a._a)),
              (this._isDSTShifted =
                this.isValid() &&
                0 <
                  (function (e, a, t) {
                    for (
                      var s = Math.min(e.length, a.length),
                        n = Math.abs(e.length - a.length),
                        r = 0,
                        d = 0;
                      d < s;
                      d++
                    )
                      ((t && e[d] !== a[d]) || (!t && G(e[d]) !== G(a[d]))) && r++;
                    return r + n;
                  })(a._a, e.toArray())))
            : (this._isDSTShifted = !1),
          this._isDSTShifted
        );
      }
    ));
  var pt = S.prototype;
  function kt(e, a, t, s) {
    var n = ua(),
      r = c().set(s, a);
    return n[t](r, e);
  }
  function Dt(e, a, t) {
    if ((m(e) && ((a = e), (e = void 0)), (e = e || ''), null != a)) return kt(e, a, t, 'month');
    for (var s = [], n = 0; n < 12; n++) s[n] = kt(e, n, t, 'month');
    return s;
  }
  function Tt(e, a, t, s) {
    a =
      ('boolean' == typeof e
        ? m(a) && ((t = a), (a = void 0))
        : ((a = e), (e = !1), m((t = a)) && ((t = a), (a = void 0))),
      a || '');
    var n,
      r = ua(),
      d = e ? r._week.dow : 0,
      i = [];
    if (null != t) return kt(a, (t + d) % 7, s, 'day');
    for (n = 0; n < 7; n++) i[n] = kt(a, (n + d) % 7, s, 'day');
    return i;
  }
  (pt.calendar = function (e, a, t) {
    var s = this._calendar[e] || this._calendar.sameElse;
    return v(s) ? s.call(a, t) : s;
  }),
    (pt.longDateFormat = function (e) {
      var a = this._longDateFormat[e],
        t = this._longDateFormat[e.toUpperCase()];
      return a || !t
        ? a
        : ((this._longDateFormat[e] = t
            .match(j)
            .map(function (e) {
              return 'MMMM' === e || 'MM' === e || 'DD' === e || 'dddd' === e ? e.slice(1) : e;
            })
            .join('')),
          this._longDateFormat[e]);
    }),
    (pt.invalidDate = function () {
      return this._invalidDate;
    }),
    (pt.ordinal = function (e) {
      return this._ordinal.replace('%d', e);
    }),
    (pt.preparse = ft),
    (pt.postformat = ft),
    (pt.relativeTime = function (e, a, t, s) {
      var n = this._relativeTime[t];
      return v(n) ? n(e, a, t, s) : n.replace(/%d/i, e);
    }),
    (pt.pastFuture = function (e, a) {
      var t = this._relativeTime[0 < e ? 'future' : 'past'];
      return v(t) ? t(a) : t.replace(/%s/i, a);
    }),
    (pt.set = function (e) {
      var a, t;
      for (t in e) h(e, t) && (v((a = e[t])) ? (this[t] = a) : (this['_' + t] = a));
      (this._config = e),
        (this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' +
            /\d{1,2}/.source
        ));
    }),
    (pt.eras = function (e, a) {
      for (var t, s = this._eras || ua('en')._eras, n = 0, r = s.length; n < r; ++n) {
        switch (typeof s[n].since) {
          case 'string':
            (t = M(s[n].since).startOf('day')), (s[n].since = t.valueOf());
            break;
        }
        switch (typeof s[n].until) {
          case 'undefined':
            s[n].until = 1 / 0;
            break;
          case 'string':
            (t = M(s[n].until).startOf('day').valueOf()), (s[n].until = t.valueOf());
            break;
        }
      }
      return s;
    }),
    (pt.erasParse = function (e, a, t) {
      var s,
        n,
        r,
        d,
        i,
        _ = this.eras();
      for (e = e.toUpperCase(), s = 0, n = _.length; s < n; ++s)
        if (
          ((r = _[s].name.toUpperCase()),
          (d = _[s].abbr.toUpperCase()),
          (i = _[s].narrow.toUpperCase()),
          t)
        )
          switch (a) {
            case 'N':
            case 'NN':
            case 'NNN':
              if (d === e) return _[s];
              break;
            case 'NNNN':
              if (r === e) return _[s];
              break;
            case 'NNNNN':
              if (i === e) return _[s];
              break;
          }
        else if (0 <= [r, d, i].indexOf(e)) return _[s];
    }),
    (pt.erasConvertYear = function (e, a) {
      var t = e.since <= e.until ? 1 : -1;
      return void 0 === a ? M(e.since).year() : M(e.since).year() + (a - e.offset) * t;
    }),
    (pt.erasAbbrRegex = function (e) {
      return h(this, '_erasAbbrRegex') || ot.call(this), e ? this._erasAbbrRegex : this._erasRegex;
    }),
    (pt.erasNameRegex = function (e) {
      return h(this, '_erasNameRegex') || ot.call(this), e ? this._erasNameRegex : this._erasRegex;
    }),
    (pt.erasNarrowRegex = function (e) {
      return (
        h(this, '_erasNarrowRegex') || ot.call(this), e ? this._erasNarrowRegex : this._erasRegex
      );
    }),
    (pt.months = function (e, a) {
      return e
        ? i(this._months)
          ? this._months[e.month()]
          : this._months[(this._months.isFormat || xe).test(a) ? 'format' : 'standalone'][e.month()]
        : i(this._months)
        ? this._months
        : this._months.standalone;
    }),
    (pt.monthsShort = function (e, a) {
      return e
        ? i(this._monthsShort)
          ? this._monthsShort[e.month()]
          : this._monthsShort[xe.test(a) ? 'format' : 'standalone'][e.month()]
        : i(this._monthsShort)
        ? this._monthsShort
        : this._monthsShort.standalone;
    }),
    (pt.monthsParse = function (e, a, t) {
      var s, n, r;
      if (this._monthsParseExact)
        return function (e, a, t) {
          var s,
            n,
            r,
            d = e.toLocaleLowerCase();
          if (!this._monthsParse)
            for (
              this._monthsParse = [],
                this._longMonthsParse = [],
                this._shortMonthsParse = [],
                s = 0;
              s < 12;
              ++s
            )
              (r = c([2e3, s])),
                (this._shortMonthsParse[s] = this.monthsShort(r, '').toLocaleLowerCase()),
                (this._longMonthsParse[s] = this.months(r, '').toLocaleLowerCase());
          return t
            ? 'MMM' === a
              ? -1 !== (n = ye.call(this._shortMonthsParse, d))
                ? n
                : null
              : -1 !== (n = ye.call(this._longMonthsParse, d))
              ? n
              : null
            : 'MMM' === a
            ? -1 !== (n = ye.call(this._shortMonthsParse, d)) ||
              -1 !== (n = ye.call(this._longMonthsParse, d))
              ? n
              : null
            : -1 !== (n = ye.call(this._longMonthsParse, d)) ||
              -1 !== (n = ye.call(this._shortMonthsParse, d))
            ? n
            : null;
        }.call(this, e, a, t);
      for (
        this._monthsParse ||
          ((this._monthsParse = []), (this._longMonthsParse = []), (this._shortMonthsParse = [])),
          s = 0;
        s < 12;
        s++
      ) {
        if (
          ((n = c([2e3, s])),
          t &&
            !this._longMonthsParse[s] &&
            ((this._longMonthsParse[s] = new RegExp(
              '^' + this.months(n, '').replace('.', '') + '$',
              'i'
            )),
            (this._shortMonthsParse[s] = new RegExp(
              '^' + this.monthsShort(n, '').replace('.', '') + '$',
              'i'
            ))),
          t ||
            this._monthsParse[s] ||
            ((r = '^' + this.months(n, '') + '|^' + this.monthsShort(n, '')),
            (this._monthsParse[s] = new RegExp(r.replace('.', ''), 'i'))),
          t && 'MMMM' === a && this._longMonthsParse[s].test(e))
        )
          return s;
        if (t && 'MMM' === a && this._shortMonthsParse[s].test(e)) return s;
        if (!t && this._monthsParse[s].test(e)) return s;
      }
    }),
    (pt.monthsRegex = function (e) {
      return this._monthsParseExact
        ? (h(this, '_monthsRegex') || Ee.call(this),
          e ? this._monthsStrictRegex : this._monthsRegex)
        : (h(this, '_monthsRegex') || (this._monthsRegex = Oe),
          this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex);
    }),
    (pt.monthsShortRegex = function (e) {
      return this._monthsParseExact
        ? (h(this, '_monthsRegex') || Ee.call(this),
          e ? this._monthsShortStrictRegex : this._monthsShortRegex)
        : (h(this, '_monthsShortRegex') || (this._monthsShortRegex = Pe),
          this._monthsShortStrictRegex && e
            ? this._monthsShortStrictRegex
            : this._monthsShortRegex);
    }),
    (pt.week = function (e) {
      return Ce(e, this._week.dow, this._week.doy).week;
    }),
    (pt.firstDayOfYear = function () {
      return this._week.doy;
    }),
    (pt.firstDayOfWeek = function () {
      return this._week.dow;
    }),
    (pt.weekdays = function (e, a) {
      var t = i(this._weekdays)
        ? this._weekdays
        : this._weekdays[
            e && !0 !== e && this._weekdays.isFormat.test(a) ? 'format' : 'standalone'
          ];
      return !0 === e ? Ue(t, this._week.dow) : e ? t[e.day()] : t;
    }),
    (pt.weekdaysMin = function (e) {
      return !0 === e
        ? Ue(this._weekdaysMin, this._week.dow)
        : e
        ? this._weekdaysMin[e.day()]
        : this._weekdaysMin;
    }),
    (pt.weekdaysShort = function (e) {
      return !0 === e
        ? Ue(this._weekdaysShort, this._week.dow)
        : e
        ? this._weekdaysShort[e.day()]
        : this._weekdaysShort;
    }),
    (pt.weekdaysParse = function (e, a, t) {
      var s, n, r;
      if (this._weekdaysParseExact)
        return function (e, a, t) {
          var s,
            n,
            r,
            d = e.toLocaleLowerCase();
          if (!this._weekdaysParse)
            for (
              this._weekdaysParse = [],
                this._shortWeekdaysParse = [],
                this._minWeekdaysParse = [],
                s = 0;
              s < 7;
              ++s
            )
              (r = c([2e3, 1]).day(s)),
                (this._minWeekdaysParse[s] = this.weekdaysMin(r, '').toLocaleLowerCase()),
                (this._shortWeekdaysParse[s] = this.weekdaysShort(r, '').toLocaleLowerCase()),
                (this._weekdaysParse[s] = this.weekdays(r, '').toLocaleLowerCase());
          return t
            ? 'dddd' === a
              ? -1 !== (n = ye.call(this._weekdaysParse, d))
                ? n
                : null
              : 'ddd' === a
              ? -1 !== (n = ye.call(this._shortWeekdaysParse, d))
                ? n
                : null
              : -1 !== (n = ye.call(this._minWeekdaysParse, d))
              ? n
              : null
            : 'dddd' === a
            ? -1 !== (n = ye.call(this._weekdaysParse, d)) ||
              -1 !== (n = ye.call(this._shortWeekdaysParse, d)) ||
              -1 !== (n = ye.call(this._minWeekdaysParse, d))
              ? n
              : null
            : 'ddd' === a
            ? -1 !== (n = ye.call(this._shortWeekdaysParse, d)) ||
              -1 !== (n = ye.call(this._weekdaysParse, d)) ||
              -1 !== (n = ye.call(this._minWeekdaysParse, d))
              ? n
              : null
            : -1 !== (n = ye.call(this._minWeekdaysParse, d)) ||
              -1 !== (n = ye.call(this._weekdaysParse, d)) ||
              -1 !== (n = ye.call(this._shortWeekdaysParse, d))
            ? n
            : null;
        }.call(this, e, a, t);
      for (
        this._weekdaysParse ||
          ((this._weekdaysParse = []),
          (this._minWeekdaysParse = []),
          (this._shortWeekdaysParse = []),
          (this._fullWeekdaysParse = [])),
          s = 0;
        s < 7;
        s++
      ) {
        if (
          ((n = c([2e3, 1]).day(s)),
          t &&
            !this._fullWeekdaysParse[s] &&
            ((this._fullWeekdaysParse[s] = new RegExp(
              '^' + this.weekdays(n, '').replace('.', '\\.?') + '$',
              'i'
            )),
            (this._shortWeekdaysParse[s] = new RegExp(
              '^' + this.weekdaysShort(n, '').replace('.', '\\.?') + '$',
              'i'
            )),
            (this._minWeekdaysParse[s] = new RegExp(
              '^' + this.weekdaysMin(n, '').replace('.', '\\.?') + '$',
              'i'
            ))),
          this._weekdaysParse[s] ||
            ((r =
              '^' +
              this.weekdays(n, '') +
              '|^' +
              this.weekdaysShort(n, '') +
              '|^' +
              this.weekdaysMin(n, '')),
            (this._weekdaysParse[s] = new RegExp(r.replace('.', ''), 'i'))),
          t && 'dddd' === a && this._fullWeekdaysParse[s].test(e))
        )
          return s;
        if (t && 'ddd' === a && this._shortWeekdaysParse[s].test(e)) return s;
        if (t && 'dd' === a && this._minWeekdaysParse[s].test(e)) return s;
        if (!t && this._weekdaysParse[s].test(e)) return s;
      }
    }),
    (pt.weekdaysRegex = function (e) {
      return this._weekdaysParseExact
        ? (h(this, '_weekdaysRegex') || $e.call(this),
          e ? this._weekdaysStrictRegex : this._weekdaysRegex)
        : (h(this, '_weekdaysRegex') || (this._weekdaysRegex = Ke),
          this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex);
    }),
    (pt.weekdaysShortRegex = function (e) {
      return this._weekdaysParseExact
        ? (h(this, '_weekdaysRegex') || $e.call(this),
          e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex)
        : (h(this, '_weekdaysShortRegex') || (this._weekdaysShortRegex = qe),
          this._weekdaysShortStrictRegex && e
            ? this._weekdaysShortStrictRegex
            : this._weekdaysShortRegex);
    }),
    (pt.weekdaysMinRegex = function (e) {
      return this._weekdaysParseExact
        ? (h(this, '_weekdaysRegex') || $e.call(this),
          e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex)
        : (h(this, '_weekdaysMinRegex') || (this._weekdaysMinRegex = Ze),
          this._weekdaysMinStrictRegex && e
            ? this._weekdaysMinStrictRegex
            : this._weekdaysMinRegex);
    }),
    (pt.isPM = function (e) {
      return 'p' === (e + '').toLowerCase().charAt(0);
    }),
    (pt.meridiem = function (e, a, t) {
      return 11 < e ? (t ? 'pm' : 'PM') : t ? 'am' : 'AM';
    }),
    oa('en', {
      eras: [
        {
          since: '0001-01-01',
          until: 1 / 0,
          offset: 1,
          name: 'Anno Domini',
          narrow: 'AD',
          abbr: 'AD',
        },
        {
          since: '0000-12-31',
          until: -1 / 0,
          offset: 1,
          name: 'Before Christ',
          narrow: 'BC',
          abbr: 'BC',
        },
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 === G((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
    }),
    (M.lang = t('moment.lang is deprecated. Use moment.locale instead.', oa)),
    (M.langData = t('moment.langData is deprecated. Use moment.localeData instead.', ua));
  var gt = Math.abs;
  function wt(e, a, t, s) {
    var n = Ga(a, t);
    return (
      (e._milliseconds += s * n._milliseconds),
      (e._days += s * n._days),
      (e._months += s * n._months),
      e._bubble()
    );
  }
  function vt(e) {
    return e < 0 ? Math.floor(e) : Math.ceil(e);
  }
  function bt(e) {
    return (4800 * e) / 146097;
  }
  function St(e) {
    return (146097 * e) / 4800;
  }
  function Ht(e) {
    return function () {
      return this.as(e);
    };
  }
  var jt = Ht('ms'),
    xt = Ht('s'),
    Pt = Ht('m'),
    Ot = Ht('h'),
    Wt = Ht('d'),
    At = Ht('w'),
    Et = Ht('M'),
    Ft = Ht('Q'),
    zt = Ht('y');
  function Nt(e) {
    return function () {
      return this.isValid() ? this._data[e] : NaN;
    };
  }
  var Jt = Nt('milliseconds'),
    Rt = Nt('seconds'),
    Ct = Nt('minutes'),
    It = Nt('hours'),
    Ut = Nt('days'),
    Gt = Nt('months'),
    Vt = Nt('years');
  var Bt = Math.round,
    Kt = { ss: 44, s: 45, m: 45, h: 22, d: 26, w: null, M: 11 };
  function qt(e, a, t, s) {
    var n = Ga(e).abs(),
      r = Bt(n.as('s')),
      d = Bt(n.as('m')),
      i = Bt(n.as('h')),
      _ = Bt(n.as('d')),
      o = Bt(n.as('M')),
      m = Bt(n.as('w')),
      u = Bt(n.as('y')),
      l =
        (r <= t.ss ? ['s', r] : r < t.s && ['ss', r]) ||
        (d <= 1 && ['m']) ||
        (d < t.m && ['mm', d]) ||
        (i <= 1 && ['h']) ||
        (i < t.h && ['hh', i]) ||
        (_ <= 1 && ['d']) ||
        (_ < t.d && ['dd', _]);
    return (
      null != t.w && (l = l || (m <= 1 && ['w']) || (m < t.w && ['ww', m])),
      ((l = l || (o <= 1 && ['M']) || (o < t.M && ['MM', o]) || (u <= 1 && ['y']) || ['yy', u])[2] =
        a),
      (l[3] = 0 < +e),
      (l[4] = s),
      function (e, a, t, s, n) {
        return n.relativeTime(a || 1, !!t, e, s);
      }.apply(null, l)
    );
  }
  var Zt = Math.abs;
  function $t(e) {
    return (0 < e) - (e < 0) || +e;
  }
  function Qt() {
    if (!this.isValid()) return this.localeData().invalidDate();
    var e,
      a,
      t,
      s,
      n,
      r,
      d,
      i,
      _ = Zt(this._milliseconds) / 1e3,
      o = Zt(this._days),
      m = Zt(this._months),
      u = this.asSeconds();
    return u
      ? ((e = U(_ / 60)),
        (a = U(e / 60)),
        (_ %= 60),
        (e %= 60),
        (t = U(m / 12)),
        (m %= 12),
        (s = _ ? _.toFixed(3).replace(/\.?0+$/, '') : ''),
        (n = u < 0 ? '-' : ''),
        (r = $t(this._months) !== $t(u) ? '-' : ''),
        (d = $t(this._days) !== $t(u) ? '-' : ''),
        (i = $t(this._milliseconds) !== $t(u) ? '-' : ''),
        n +
          'P' +
          (t ? r + t + 'Y' : '') +
          (m ? r + m + 'M' : '') +
          (o ? d + o + 'D' : '') +
          (a || e || _ ? 'T' : '') +
          (a ? i + a + 'H' : '') +
          (e ? i + e + 'M' : '') +
          (_ ? i + s + 'S' : ''))
      : 'P0D';
  }
  var Xt = Wa.prototype;
  (Xt.isValid = function () {
    return this._isValid;
  }),
    (Xt.abs = function () {
      var e = this._data;
      return (
        (this._milliseconds = gt(this._milliseconds)),
        (this._days = gt(this._days)),
        (this._months = gt(this._months)),
        (e.milliseconds = gt(e.milliseconds)),
        (e.seconds = gt(e.seconds)),
        (e.minutes = gt(e.minutes)),
        (e.hours = gt(e.hours)),
        (e.months = gt(e.months)),
        (e.years = gt(e.years)),
        this
      );
    }),
    (Xt.add = function (e, a) {
      return wt(this, e, a, 1);
    }),
    (Xt.subtract = function (e, a) {
      return wt(this, e, a, -1);
    }),
    (Xt.as = function (e) {
      if (!this.isValid()) return NaN;
      var a,
        t,
        s = this._milliseconds;
      if ('month' === (e = N(e)) || 'quarter' === e || 'year' === e)
        switch (((a = this._days + s / 864e5), (t = this._months + bt(a)), e)) {
          case 'month':
            return t;
          case 'quarter':
            return t / 3;
          case 'year':
            return t / 12;
        }
      else
        switch (((a = this._days + Math.round(St(this._months))), e)) {
          case 'week':
            return a / 7 + s / 6048e5;
          case 'day':
            return a + s / 864e5;
          case 'hour':
            return 24 * a + s / 36e5;
          case 'minute':
            return 1440 * a + s / 6e4;
          case 'second':
            return 86400 * a + s / 1e3;
          case 'millisecond':
            return Math.floor(864e5 * a) + s;
          default:
            throw new Error('Unknown unit ' + e);
        }
    }),
    (Xt.asMilliseconds = jt),
    (Xt.asSeconds = xt),
    (Xt.asMinutes = Pt),
    (Xt.asHours = Ot),
    (Xt.asDays = Wt),
    (Xt.asWeeks = At),
    (Xt.asMonths = Et),
    (Xt.asQuarters = Ft),
    (Xt.asYears = zt),
    (Xt.valueOf = function () {
      return this.isValid()
        ? this._milliseconds +
            864e5 * this._days +
            (this._months % 12) * 2592e6 +
            31536e6 * G(this._months / 12)
        : NaN;
    }),
    (Xt._bubble = function () {
      var e,
        a,
        t,
        s,
        n,
        r = this._milliseconds,
        d = this._days,
        i = this._months,
        _ = this._data;
      return (
        (0 <= r && 0 <= d && 0 <= i) ||
          (r <= 0 && d <= 0 && i <= 0) ||
          ((r += 864e5 * vt(St(i) + d)), (i = d = 0)),
        (_.milliseconds = r % 1e3),
        (e = U(r / 1e3)),
        (_.seconds = e % 60),
        (a = U(e / 60)),
        (_.minutes = a % 60),
        (t = U(a / 60)),
        (_.hours = t % 24),
        (d += U(t / 24)),
        (i += n = U(bt(d))),
        (d -= vt(St(n))),
        (s = U(i / 12)),
        (i %= 12),
        (_.days = d),
        (_.months = i),
        (_.years = s),
        this
      );
    }),
    (Xt.clone = function () {
      return Ga(this);
    }),
    (Xt.get = function (e) {
      return (e = N(e)), this.isValid() ? this[e + 's']() : NaN;
    }),
    (Xt.milliseconds = Jt),
    (Xt.seconds = Rt),
    (Xt.minutes = Ct),
    (Xt.hours = It),
    (Xt.days = Ut),
    (Xt.weeks = function () {
      return U(this.days() / 7);
    }),
    (Xt.months = Gt),
    (Xt.years = Vt),
    (Xt.humanize = function (e, a) {
      if (!this.isValid()) return this.localeData().invalidDate();
      var t,
        s,
        n = !1,
        r = Kt;
      return (
        'object' == typeof e && ((a = e), (e = !1)),
        'boolean' == typeof e && (n = e),
        'object' == typeof a &&
          ((r = Object.assign({}, Kt, a)), null != a.s && null == a.ss && (r.ss = a.s - 1)),
        (t = this.localeData()),
        (s = qt(this, !n, r, t)),
        n && (s = t.pastFuture(+this, s)),
        t.postformat(s)
      );
    }),
    (Xt.toISOString = Qt),
    (Xt.toString = Qt),
    (Xt.toJSON = Qt),
    (Xt.locale = at),
    (Xt.localeData = st),
    (Xt.toIsoString = t(
      'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
      Qt
    )),
    (Xt.lang = tt),
    W('X', 0, 0, 'unix'),
    W('x', 0, 0, 'valueOf'),
    le('x', _e),
    le('X', /[+-]?\d+(\.\d{1,3})?/),
    Le('X', function (e, a, t) {
      t._d = new Date(1e3 * parseFloat(e));
    }),
    Le('x', function (e, a, t) {
      t._d = new Date(G(e));
    }),
    (M.version = '2.29.1'),
    (e = Ha),
    (M.fn = yt),
    (M.min = function () {
      return Pa('isBefore', [].slice.call(arguments, 0));
    }),
    (M.max = function () {
      return Pa('isAfter', [].slice.call(arguments, 0));
    }),
    (M.now = function () {
      return Date.now ? Date.now() : +new Date();
    }),
    (M.utc = c),
    (M.unix = function (e) {
      return Ha(1e3 * e);
    }),
    (M.months = function (e, a) {
      return Dt(e, a, 'months');
    }),
    (M.isDate = d),
    (M.locale = oa),
    (M.invalid = y),
    (M.duration = Ga),
    (M.isMoment = D),
    (M.weekdays = function (e, a, t) {
      return Tt(e, a, t, 'weekdays');
    }),
    (M.parseZone = function () {
      return Ha.apply(null, arguments).parseZone();
    }),
    (M.localeData = ua),
    (M.isDuration = Aa),
    (M.monthsShort = function (e, a) {
      return Dt(e, a, 'monthsShort');
    }),
    (M.weekdaysMin = function (e, a, t) {
      return Tt(e, a, t, 'weekdaysMin');
    }),
    (M.defineLocale = ma),
    (M.updateLocale = function (e, a) {
      var t, s, n;
      return (
        null != a
          ? ((n = sa),
            null != na[e] && null != na[e].parentLocale
              ? na[e].set(b(na[e]._config, a))
              : (null != (s = _a(e)) && (n = s._config),
                (a = b(n, a)),
                null == s && (a.abbr = e),
                ((t = new S(a)).parentLocale = na[e]),
                (na[e] = t)),
            oa(e))
          : null != na[e] &&
            (null != na[e].parentLocale
              ? ((na[e] = na[e].parentLocale), e === oa() && oa(e))
              : null != na[e] && delete na[e]),
        na[e]
      );
    }),
    (M.locales = function () {
      return s(na);
    }),
    (M.weekdaysShort = function (e, a, t) {
      return Tt(e, a, t, 'weekdaysShort');
    }),
    (M.normalizeUnits = N),
    (M.relativeTimeRounding = function (e) {
      return void 0 === e ? Bt : 'function' == typeof e && ((Bt = e), !0);
    }),
    (M.relativeTimeThreshold = function (e, a) {
      return (
        void 0 !== Kt[e] && (void 0 === a ? Kt[e] : ((Kt[e] = a), 's' === e && (Kt.ss = a - 1), !0))
      );
    }),
    (M.calendarFormat = function (e, a) {
      var t = e.diff(a, 'days', !0);
      return t < -6
        ? 'sameElse'
        : t < -1
        ? 'lastWeek'
        : t < 0
        ? 'lastDay'
        : t < 1
        ? 'sameDay'
        : t < 2
        ? 'nextDay'
        : t < 7
        ? 'nextWeek'
        : 'sameElse';
    }),
    (M.prototype = yt),
    (M.HTML5_FMT = {
      DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
      DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
      DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
      DATE: 'YYYY-MM-DD',
      TIME: 'HH:mm',
      TIME_SECONDS: 'HH:mm:ss',
      TIME_MS: 'HH:mm:ss.SSS',
      WEEK: 'GGGG-[W]WW',
      MONTH: 'YYYY-MM',
    }),
    M.defineLocale('af', {
      months:
        'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
      weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
      weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
      weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
      meridiemParse: /vm|nm/i,
      isPM: function (e) {
        return /^nm$/i.test(e);
      },
      meridiem: function (e, a, t) {
        return e < 12 ? (t ? 'vm' : 'VM') : t ? 'nm' : 'NM';
      },
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Vandag om] LT',
        nextDay: '[M\xf4re om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[Gister om] LT',
        lastWeek: '[Laas] dddd [om] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'oor %s',
        past: '%s gelede',
        s: "'n paar sekondes",
        ss: '%d sekondes',
        m: "'n minuut",
        mm: '%d minute',
        h: "'n uur",
        hh: '%d ure',
        d: "'n dag",
        dd: '%d dae',
        M: "'n maand",
        MM: '%d maande',
        y: "'n jaar",
        yy: '%d jaar',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
      ordinal: function (e) {
        return e + (1 === e || 8 === e || 20 <= e ? 'ste' : 'de');
      },
      week: { dow: 1, doy: 4 },
    });
  function es(e) {
    return 0 === e
      ? 0
      : 1 === e
      ? 1
      : 2 === e
      ? 2
      : 3 <= e % 100 && e % 100 <= 10
      ? 3
      : 11 <= e % 100
      ? 4
      : 5;
  }
  function as(d) {
    return function (e, a, t, s) {
      var n = es(e),
        r = ts[d][es(e)];
      return 2 === n && (r = r[a ? 0 : 1]), r.replace(/%d/i, e);
    };
  }
  var ts = {
      s: [
        '\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629',
        '\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629',
        [
          '\u062b\u0627\u0646\u064a\u062a\u0627\u0646',
          '\u062b\u0627\u0646\u064a\u062a\u064a\u0646',
        ],
        '%d \u062b\u0648\u0627\u0646',
        '%d \u062b\u0627\u0646\u064a\u0629',
        '%d \u062b\u0627\u0646\u064a\u0629',
      ],
      m: [
        '\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629',
        '\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629',
        [
          '\u062f\u0642\u064a\u0642\u062a\u0627\u0646',
          '\u062f\u0642\u064a\u0642\u062a\u064a\u0646',
        ],
        '%d \u062f\u0642\u0627\u0626\u0642',
        '%d \u062f\u0642\u064a\u0642\u0629',
        '%d \u062f\u0642\u064a\u0642\u0629',
      ],
      h: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629',
        '\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629',
        ['\u0633\u0627\u0639\u062a\u0627\u0646', '\u0633\u0627\u0639\u062a\u064a\u0646'],
        '%d \u0633\u0627\u0639\u0627\u062a',
        '%d \u0633\u0627\u0639\u0629',
        '%d \u0633\u0627\u0639\u0629',
      ],
      d: [
        '\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645',
        '\u064a\u0648\u0645 \u0648\u0627\u062d\u062f',
        ['\u064a\u0648\u0645\u0627\u0646', '\u064a\u0648\u0645\u064a\u0646'],
        '%d \u0623\u064a\u0627\u0645',
        '%d \u064a\u0648\u0645\u064b\u0627',
        '%d \u064a\u0648\u0645',
      ],
      M: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631',
        '\u0634\u0647\u0631 \u0648\u0627\u062d\u062f',
        ['\u0634\u0647\u0631\u0627\u0646', '\u0634\u0647\u0631\u064a\u0646'],
        '%d \u0623\u0634\u0647\u0631',
        '%d \u0634\u0647\u0631\u0627',
        '%d \u0634\u0647\u0631',
      ],
      y: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645',
        '\u0639\u0627\u0645 \u0648\u0627\u062d\u062f',
        ['\u0639\u0627\u0645\u0627\u0646', '\u0639\u0627\u0645\u064a\u0646'],
        '%d \u0623\u0639\u0648\u0627\u0645',
        '%d \u0639\u0627\u0645\u064b\u0627',
        '%d \u0639\u0627\u0645',
      ],
    },
    ss = [
      '\u062c\u0627\u0646\u0641\u064a',
      '\u0641\u064a\u0641\u0631\u064a',
      '\u0645\u0627\u0631\u0633',
      '\u0623\u0641\u0631\u064a\u0644',
      '\u0645\u0627\u064a',
      '\u062c\u0648\u0627\u0646',
      '\u062c\u0648\u064a\u0644\u064a\u0629',
      '\u0623\u0648\u062a',
      '\u0633\u0628\u062a\u0645\u0628\u0631',
      '\u0623\u0643\u062a\u0648\u0628\u0631',
      '\u0646\u0648\u0641\u0645\u0628\u0631',
      '\u062f\u064a\u0633\u0645\u0628\u0631',
    ];
  M.defineLocale('ar-dz', {
    months: ss,
    monthsShort: ss,
    weekdays:
      '\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a'.split(
        '_'
      ),
    weekdaysShort:
      '\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a'.split(
        '_'
      ),
    weekdaysMin: '\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'D/\u200fM/\u200fYYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    meridiemParse: /\u0635|\u0645/,
    isPM: function (e) {
      return '\u0645' === e;
    },
    meridiem: function (e, a, t) {
      return e < 12 ? '\u0635' : '\u0645';
    },
    calendar: {
      sameDay:
        '[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      nextDay:
        '[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      nextWeek: 'dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      lastDay: '[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      lastWeek: 'dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u0628\u0639\u062f %s',
      past: '\u0645\u0646\u0630 %s',
      s: as('s'),
      ss: as('s'),
      m: as('m'),
      mm: as('m'),
      h: as('h'),
      hh: as('h'),
      d: as('d'),
      dd: as('d'),
      M: as('M'),
      MM: as('M'),
      y: as('y'),
      yy: as('y'),
    },
    postformat: function (e) {
      return e.replace(/,/g, '\u060c');
    },
    week: { dow: 0, doy: 4 },
  }),
    M.defineLocale('ar-kw', {
      months:
        '\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631'.split(
          '_'
        ),
      monthsShort:
        '\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631'.split(
          '_'
        ),
      weekdays:
        '\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062a\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a'.split(
          '_'
        ),
      weekdaysShort:
        '\u0627\u062d\u062f_\u0627\u062a\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a'.split(
          '_'
        ),
      weekdaysMin: '\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay:
          '[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        nextDay: '[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u0641\u064a %s',
        past: '\u0645\u0646\u0630 %s',
        s: '\u062b\u0648\u0627\u0646',
        ss: '%d \u062b\u0627\u0646\u064a\u0629',
        m: '\u062f\u0642\u064a\u0642\u0629',
        mm: '%d \u062f\u0642\u0627\u0626\u0642',
        h: '\u0633\u0627\u0639\u0629',
        hh: '%d \u0633\u0627\u0639\u0627\u062a',
        d: '\u064a\u0648\u0645',
        dd: '%d \u0623\u064a\u0627\u0645',
        M: '\u0634\u0647\u0631',
        MM: '%d \u0623\u0634\u0647\u0631',
        y: '\u0633\u0646\u0629',
        yy: '%d \u0633\u0646\u0648\u0627\u062a',
      },
      week: { dow: 0, doy: 12 },
    });
  function ns(e) {
    return 0 === e
      ? 0
      : 1 === e
      ? 1
      : 2 === e
      ? 2
      : 3 <= e % 100 && e % 100 <= 10
      ? 3
      : 11 <= e % 100
      ? 4
      : 5;
  }
  function rs(d) {
    return function (e, a, t, s) {
      var n = ns(e),
        r = is[d][ns(e)];
      return 2 === n && (r = r[a ? 0 : 1]), r.replace(/%d/i, e);
    };
  }
  var ds = { 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 0: '0' },
    is = {
      s: [
        '\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629',
        '\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629',
        [
          '\u062b\u0627\u0646\u064a\u062a\u0627\u0646',
          '\u062b\u0627\u0646\u064a\u062a\u064a\u0646',
        ],
        '%d \u062b\u0648\u0627\u0646',
        '%d \u062b\u0627\u0646\u064a\u0629',
        '%d \u062b\u0627\u0646\u064a\u0629',
      ],
      m: [
        '\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629',
        '\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629',
        [
          '\u062f\u0642\u064a\u0642\u062a\u0627\u0646',
          '\u062f\u0642\u064a\u0642\u062a\u064a\u0646',
        ],
        '%d \u062f\u0642\u0627\u0626\u0642',
        '%d \u062f\u0642\u064a\u0642\u0629',
        '%d \u062f\u0642\u064a\u0642\u0629',
      ],
      h: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629',
        '\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629',
        ['\u0633\u0627\u0639\u062a\u0627\u0646', '\u0633\u0627\u0639\u062a\u064a\u0646'],
        '%d \u0633\u0627\u0639\u0627\u062a',
        '%d \u0633\u0627\u0639\u0629',
        '%d \u0633\u0627\u0639\u0629',
      ],
      d: [
        '\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645',
        '\u064a\u0648\u0645 \u0648\u0627\u062d\u062f',
        ['\u064a\u0648\u0645\u0627\u0646', '\u064a\u0648\u0645\u064a\u0646'],
        '%d \u0623\u064a\u0627\u0645',
        '%d \u064a\u0648\u0645\u064b\u0627',
        '%d \u064a\u0648\u0645',
      ],
      M: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631',
        '\u0634\u0647\u0631 \u0648\u0627\u062d\u062f',
        ['\u0634\u0647\u0631\u0627\u0646', '\u0634\u0647\u0631\u064a\u0646'],
        '%d \u0623\u0634\u0647\u0631',
        '%d \u0634\u0647\u0631\u0627',
        '%d \u0634\u0647\u0631',
      ],
      y: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645',
        '\u0639\u0627\u0645 \u0648\u0627\u062d\u062f',
        ['\u0639\u0627\u0645\u0627\u0646', '\u0639\u0627\u0645\u064a\u0646'],
        '%d \u0623\u0639\u0648\u0627\u0645',
        '%d \u0639\u0627\u0645\u064b\u0627',
        '%d \u0639\u0627\u0645',
      ],
    },
    _s = [
      '\u064a\u0646\u0627\u064a\u0631',
      '\u0641\u0628\u0631\u0627\u064a\u0631',
      '\u0645\u0627\u0631\u0633',
      '\u0623\u0628\u0631\u064a\u0644',
      '\u0645\u0627\u064a\u0648',
      '\u064a\u0648\u0646\u064a\u0648',
      '\u064a\u0648\u0644\u064a\u0648',
      '\u0623\u063a\u0633\u0637\u0633',
      '\u0633\u0628\u062a\u0645\u0628\u0631',
      '\u0623\u0643\u062a\u0648\u0628\u0631',
      '\u0646\u0648\u0641\u0645\u0628\u0631',
      '\u062f\u064a\u0633\u0645\u0628\u0631',
    ];
  M.defineLocale('ar-ly', {
    months: _s,
    monthsShort: _s,
    weekdays:
      '\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a'.split(
        '_'
      ),
    weekdaysShort:
      '\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a'.split(
        '_'
      ),
    weekdaysMin: '\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'D/\u200fM/\u200fYYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    meridiemParse: /\u0635|\u0645/,
    isPM: function (e) {
      return '\u0645' === e;
    },
    meridiem: function (e, a, t) {
      return e < 12 ? '\u0635' : '\u0645';
    },
    calendar: {
      sameDay:
        '[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      nextDay:
        '[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      nextWeek: 'dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      lastDay: '[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      lastWeek: 'dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u0628\u0639\u062f %s',
      past: '\u0645\u0646\u0630 %s',
      s: rs('s'),
      ss: rs('s'),
      m: rs('m'),
      mm: rs('m'),
      h: rs('h'),
      hh: rs('h'),
      d: rs('d'),
      dd: rs('d'),
      M: rs('M'),
      MM: rs('M'),
      y: rs('y'),
      yy: rs('y'),
    },
    preparse: function (e) {
      return e.replace(/\u060c/g, ',');
    },
    postformat: function (e) {
      return e
        .replace(/\d/g, function (e) {
          return ds[e];
        })
        .replace(/,/g, '\u060c');
    },
    week: { dow: 6, doy: 12 },
  }),
    M.defineLocale('ar-ma', {
      months:
        '\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631'.split(
          '_'
        ),
      monthsShort:
        '\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631'.split(
          '_'
        ),
      weekdays:
        '\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a'.split(
          '_'
        ),
      weekdaysShort:
        '\u0627\u062d\u062f_\u0627\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a'.split(
          '_'
        ),
      weekdaysMin: '\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay:
          '[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        nextDay: '[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u0641\u064a %s',
        past: '\u0645\u0646\u0630 %s',
        s: '\u062b\u0648\u0627\u0646',
        ss: '%d \u062b\u0627\u0646\u064a\u0629',
        m: '\u062f\u0642\u064a\u0642\u0629',
        mm: '%d \u062f\u0642\u0627\u0626\u0642',
        h: '\u0633\u0627\u0639\u0629',
        hh: '%d \u0633\u0627\u0639\u0627\u062a',
        d: '\u064a\u0648\u0645',
        dd: '%d \u0623\u064a\u0627\u0645',
        M: '\u0634\u0647\u0631',
        MM: '%d \u0623\u0634\u0647\u0631',
        y: '\u0633\u0646\u0629',
        yy: '%d \u0633\u0646\u0648\u0627\u062a',
      },
      week: { dow: 1, doy: 4 },
    });
  var os = {
      1: '\u0661',
      2: '\u0662',
      3: '\u0663',
      4: '\u0664',
      5: '\u0665',
      6: '\u0666',
      7: '\u0667',
      8: '\u0668',
      9: '\u0669',
      0: '\u0660',
    },
    ms = {
      '\u0661': '1',
      '\u0662': '2',
      '\u0663': '3',
      '\u0664': '4',
      '\u0665': '5',
      '\u0666': '6',
      '\u0667': '7',
      '\u0668': '8',
      '\u0669': '9',
      '\u0660': '0',
    };
  M.defineLocale('ar-sa', {
    months:
      '\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a\u0648_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648_\u0623\u063a\u0633\u0637\u0633_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631'.split(
        '_'
      ),
    monthsShort:
      '\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a\u0648_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648_\u0623\u063a\u0633\u0637\u0633_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631'.split(
        '_'
      ),
    weekdays:
      '\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a'.split(
        '_'
      ),
    weekdaysShort:
      '\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a'.split(
        '_'
      ),
    weekdaysMin: '\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    meridiemParse: /\u0635|\u0645/,
    isPM: function (e) {
      return '\u0645' === e;
    },
    meridiem: function (e, a, t) {
      return e < 12 ? '\u0635' : '\u0645';
    },
    calendar: {
      sameDay:
        '[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      nextDay: '[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u0641\u064a %s',
      past: '\u0645\u0646\u0630 %s',
      s: '\u062b\u0648\u0627\u0646',
      ss: '%d \u062b\u0627\u0646\u064a\u0629',
      m: '\u062f\u0642\u064a\u0642\u0629',
      mm: '%d \u062f\u0642\u0627\u0626\u0642',
      h: '\u0633\u0627\u0639\u0629',
      hh: '%d \u0633\u0627\u0639\u0627\u062a',
      d: '\u064a\u0648\u0645',
      dd: '%d \u0623\u064a\u0627\u0645',
      M: '\u0634\u0647\u0631',
      MM: '%d \u0623\u0634\u0647\u0631',
      y: '\u0633\u0646\u0629',
      yy: '%d \u0633\u0646\u0648\u0627\u062a',
    },
    preparse: function (e) {
      return e
        .replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function (e) {
          return ms[e];
        })
        .replace(/\u060c/g, ',');
    },
    postformat: function (e) {
      return e
        .replace(/\d/g, function (e) {
          return os[e];
        })
        .replace(/,/g, '\u060c');
    },
    week: { dow: 0, doy: 6 },
  }),
    M.defineLocale('ar-tn', {
      months:
        '\u062c\u0627\u0646\u0641\u064a_\u0641\u064a\u0641\u0631\u064a_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064a\u0644_\u0645\u0627\u064a_\u062c\u0648\u0627\u0646_\u062c\u0648\u064a\u0644\u064a\u0629_\u0623\u0648\u062a_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631'.split(
          '_'
        ),
      monthsShort:
        '\u062c\u0627\u0646\u0641\u064a_\u0641\u064a\u0641\u0631\u064a_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064a\u0644_\u0645\u0627\u064a_\u062c\u0648\u0627\u0646_\u062c\u0648\u064a\u0644\u064a\u0629_\u0623\u0648\u062a_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631'.split(
          '_'
        ),
      weekdays:
        '\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a'.split(
          '_'
        ),
      weekdaysShort:
        '\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a'.split(
          '_'
        ),
      weekdaysMin: '\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay:
          '[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        nextDay: '[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u0641\u064a %s',
        past: '\u0645\u0646\u0630 %s',
        s: '\u062b\u0648\u0627\u0646',
        ss: '%d \u062b\u0627\u0646\u064a\u0629',
        m: '\u062f\u0642\u064a\u0642\u0629',
        mm: '%d \u062f\u0642\u0627\u0626\u0642',
        h: '\u0633\u0627\u0639\u0629',
        hh: '%d \u0633\u0627\u0639\u0627\u062a',
        d: '\u064a\u0648\u0645',
        dd: '%d \u0623\u064a\u0627\u0645',
        M: '\u0634\u0647\u0631',
        MM: '%d \u0623\u0634\u0647\u0631',
        y: '\u0633\u0646\u0629',
        yy: '%d \u0633\u0646\u0648\u0627\u062a',
      },
      week: { dow: 1, doy: 4 },
    });
  function us(e) {
    return 0 === e
      ? 0
      : 1 === e
      ? 1
      : 2 === e
      ? 2
      : 3 <= e % 100 && e % 100 <= 10
      ? 3
      : 11 <= e % 100
      ? 4
      : 5;
  }
  function ls(d) {
    return function (e, a, t, s) {
      var n = us(e),
        r = cs[d][us(e)];
      return 2 === n && (r = r[a ? 0 : 1]), r.replace(/%d/i, e);
    };
  }
  var Ms = {
      1: '\u0661',
      2: '\u0662',
      3: '\u0663',
      4: '\u0664',
      5: '\u0665',
      6: '\u0666',
      7: '\u0667',
      8: '\u0668',
      9: '\u0669',
      0: '\u0660',
    },
    hs = {
      '\u0661': '1',
      '\u0662': '2',
      '\u0663': '3',
      '\u0664': '4',
      '\u0665': '5',
      '\u0666': '6',
      '\u0667': '7',
      '\u0668': '8',
      '\u0669': '9',
      '\u0660': '0',
    },
    cs = {
      s: [
        '\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629',
        '\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629',
        [
          '\u062b\u0627\u0646\u064a\u062a\u0627\u0646',
          '\u062b\u0627\u0646\u064a\u062a\u064a\u0646',
        ],
        '%d \u062b\u0648\u0627\u0646',
        '%d \u062b\u0627\u0646\u064a\u0629',
        '%d \u062b\u0627\u0646\u064a\u0629',
      ],
      m: [
        '\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629',
        '\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629',
        [
          '\u062f\u0642\u064a\u0642\u062a\u0627\u0646',
          '\u062f\u0642\u064a\u0642\u062a\u064a\u0646',
        ],
        '%d \u062f\u0642\u0627\u0626\u0642',
        '%d \u062f\u0642\u064a\u0642\u0629',
        '%d \u062f\u0642\u064a\u0642\u0629',
      ],
      h: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629',
        '\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629',
        ['\u0633\u0627\u0639\u062a\u0627\u0646', '\u0633\u0627\u0639\u062a\u064a\u0646'],
        '%d \u0633\u0627\u0639\u0627\u062a',
        '%d \u0633\u0627\u0639\u0629',
        '%d \u0633\u0627\u0639\u0629',
      ],
      d: [
        '\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645',
        '\u064a\u0648\u0645 \u0648\u0627\u062d\u062f',
        ['\u064a\u0648\u0645\u0627\u0646', '\u064a\u0648\u0645\u064a\u0646'],
        '%d \u0623\u064a\u0627\u0645',
        '%d \u064a\u0648\u0645\u064b\u0627',
        '%d \u064a\u0648\u0645',
      ],
      M: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631',
        '\u0634\u0647\u0631 \u0648\u0627\u062d\u062f',
        ['\u0634\u0647\u0631\u0627\u0646', '\u0634\u0647\u0631\u064a\u0646'],
        '%d \u0623\u0634\u0647\u0631',
        '%d \u0634\u0647\u0631\u0627',
        '%d \u0634\u0647\u0631',
      ],
      y: [
        '\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645',
        '\u0639\u0627\u0645 \u0648\u0627\u062d\u062f',
        ['\u0639\u0627\u0645\u0627\u0646', '\u0639\u0627\u0645\u064a\u0646'],
        '%d \u0623\u0639\u0648\u0627\u0645',
        '%d \u0639\u0627\u0645\u064b\u0627',
        '%d \u0639\u0627\u0645',
      ],
    },
    Ls = [
      '\u064a\u0646\u0627\u064a\u0631',
      '\u0641\u0628\u0631\u0627\u064a\u0631',
      '\u0645\u0627\u0631\u0633',
      '\u0623\u0628\u0631\u064a\u0644',
      '\u0645\u0627\u064a\u0648',
      '\u064a\u0648\u0646\u064a\u0648',
      '\u064a\u0648\u0644\u064a\u0648',
      '\u0623\u063a\u0633\u0637\u0633',
      '\u0633\u0628\u062a\u0645\u0628\u0631',
      '\u0623\u0643\u062a\u0648\u0628\u0631',
      '\u0646\u0648\u0641\u0645\u0628\u0631',
      '\u062f\u064a\u0633\u0645\u0628\u0631',
    ];
  M.defineLocale('ar', {
    months: Ls,
    monthsShort: Ls,
    weekdays:
      '\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a'.split(
        '_'
      ),
    weekdaysShort:
      '\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a'.split(
        '_'
      ),
    weekdaysMin: '\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'D/\u200fM/\u200fYYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    meridiemParse: /\u0635|\u0645/,
    isPM: function (e) {
      return '\u0645' === e;
    },
    meridiem: function (e, a, t) {
      return e < 12 ? '\u0635' : '\u0645';
    },
    calendar: {
      sameDay:
        '[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      nextDay:
        '[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      nextWeek: 'dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      lastDay: '[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      lastWeek: 'dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u0628\u0639\u062f %s',
      past: '\u0645\u0646\u0630 %s',
      s: ls('s'),
      ss: ls('s'),
      m: ls('m'),
      mm: ls('m'),
      h: ls('h'),
      hh: ls('h'),
      d: ls('d'),
      dd: ls('d'),
      M: ls('M'),
      MM: ls('M'),
      y: ls('y'),
      yy: ls('y'),
    },
    preparse: function (e) {
      return e
        .replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function (e) {
          return hs[e];
        })
        .replace(/\u060c/g, ',');
    },
    postformat: function (e) {
      return e
        .replace(/\d/g, function (e) {
          return Ms[e];
        })
        .replace(/,/g, '\u060c');
    },
    week: { dow: 6, doy: 12 },
  });
  var Ys = {
    1: '-inci',
    5: '-inci',
    8: '-inci',
    70: '-inci',
    80: '-inci',
    2: '-nci',
    7: '-nci',
    20: '-nci',
    50: '-nci',
    3: '-\xfcnc\xfc',
    4: '-\xfcnc\xfc',
    100: '-\xfcnc\xfc',
    6: '-nc\u0131',
    9: '-uncu',
    10: '-uncu',
    30: '-uncu',
    60: '-\u0131nc\u0131',
    90: '-\u0131nc\u0131',
  };
  function ys(e, a, t) {
    var s, n;
    return 'm' === t
      ? a
        ? '\u0445\u0432\u0456\u043b\u0456\u043d\u0430'
        : '\u0445\u0432\u0456\u043b\u0456\u043d\u0443'
      : 'h' === t
      ? a
        ? '\u0433\u0430\u0434\u0437\u0456\u043d\u0430'
        : '\u0433\u0430\u0434\u0437\u0456\u043d\u0443'
      : e +
        ' ' +
        ((s = +e),
        (n = {
          ss: a
            ? '\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434'
            : '\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434',
          mm: a
            ? '\u0445\u0432\u0456\u043b\u0456\u043d\u0430_\u0445\u0432\u0456\u043b\u0456\u043d\u044b_\u0445\u0432\u0456\u043b\u0456\u043d'
            : '\u0445\u0432\u0456\u043b\u0456\u043d\u0443_\u0445\u0432\u0456\u043b\u0456\u043d\u044b_\u0445\u0432\u0456\u043b\u0456\u043d',
          hh: a
            ? '\u0433\u0430\u0434\u0437\u0456\u043d\u0430_\u0433\u0430\u0434\u0437\u0456\u043d\u044b_\u0433\u0430\u0434\u0437\u0456\u043d'
            : '\u0433\u0430\u0434\u0437\u0456\u043d\u0443_\u0433\u0430\u0434\u0437\u0456\u043d\u044b_\u0433\u0430\u0434\u0437\u0456\u043d',
          dd: '\u0434\u0437\u0435\u043d\u044c_\u0434\u043d\u0456_\u0434\u0437\u0451\u043d',
          MM: '\u043c\u0435\u0441\u044f\u0446_\u043c\u0435\u0441\u044f\u0446\u044b_\u043c\u0435\u0441\u044f\u0446\u0430\u045e',
          yy: '\u0433\u043e\u0434_\u0433\u0430\u0434\u044b_\u0433\u0430\u0434\u043e\u045e',
        }[t].split('_')),
        s % 10 == 1 && s % 100 != 11
          ? n[0]
          : 2 <= s % 10 && s % 10 <= 4 && (s % 100 < 10 || 20 <= s % 100)
          ? n[1]
          : n[2]);
  }
  M.defineLocale('az', {
    months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
      '_'
    ),
    monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
    weekdays:
      'Bazar_Bazar ert\u0259si_\xc7\u0259r\u015f\u0259nb\u0259 ax\u015fam\u0131_\xc7\u0259r\u015f\u0259nb\u0259_C\xfcm\u0259 ax\u015fam\u0131_C\xfcm\u0259_\u015e\u0259nb\u0259'.split(
        '_'
      ),
    weekdaysShort: 'Baz_BzE_\xc7Ax_\xc7\u0259r_CAx_C\xfcm_\u015e\u0259n'.split('_'),
    weekdaysMin: 'Bz_BE_\xc7A_\xc7\u0259_CA_C\xfc_\u015e\u0259'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[bug\xfcn saat] LT',
      nextDay: '[sabah saat] LT',
      nextWeek: '[g\u0259l\u0259n h\u0259ft\u0259] dddd [saat] LT',
      lastDay: '[d\xfcn\u0259n] LT',
      lastWeek: '[ke\xe7\u0259n h\u0259ft\u0259] dddd [saat] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s sonra',
      past: '%s \u0259vv\u0259l',
      s: 'bir ne\xe7\u0259 saniy\u0259',
      ss: '%d saniy\u0259',
      m: 'bir d\u0259qiq\u0259',
      mm: '%d d\u0259qiq\u0259',
      h: 'bir saat',
      hh: '%d saat',
      d: 'bir g\xfcn',
      dd: '%d g\xfcn',
      M: 'bir ay',
      MM: '%d ay',
      y: 'bir il',
      yy: '%d il',
    },
    meridiemParse: /gec\u0259|s\u0259h\u0259r|g\xfcnd\xfcz|ax\u015fam/,
    isPM: function (e) {
      return /^(g\xfcnd\xfcz|ax\u015fam)$/.test(e);
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? 'gec\u0259'
        : e < 12
        ? 's\u0259h\u0259r'
        : e < 17
        ? 'g\xfcnd\xfcz'
        : 'ax\u015fam';
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(\u0131nc\u0131|inci|nci|\xfcnc\xfc|nc\u0131|uncu)/,
    ordinal: function (e) {
      if (0 === e) return e + '-\u0131nc\u0131';
      var a = e % 10;
      return e + (Ys[a] || Ys[(e % 100) - a] || Ys[100 <= e ? 100 : null]);
    },
    week: { dow: 1, doy: 7 },
  }),
    M.defineLocale('be', {
      months: {
        format:
          '\u0441\u0442\u0443\u0434\u0437\u0435\u043d\u044f_\u043b\u044e\u0442\u0430\u0433\u0430_\u0441\u0430\u043a\u0430\u0432\u0456\u043a\u0430_\u043a\u0440\u0430\u0441\u0430\u0432\u0456\u043a\u0430_\u0442\u0440\u0430\u045e\u043d\u044f_\u0447\u044d\u0440\u0432\u0435\u043d\u044f_\u043b\u0456\u043f\u0435\u043d\u044f_\u0436\u043d\u0456\u045e\u043d\u044f_\u0432\u0435\u0440\u0430\u0441\u043d\u044f_\u043a\u0430\u0441\u0442\u0440\u044b\u0447\u043d\u0456\u043a\u0430_\u043b\u0456\u0441\u0442\u0430\u043f\u0430\u0434\u0430_\u0441\u043d\u0435\u0436\u043d\u044f'.split(
            '_'
          ),
        standalone:
          '\u0441\u0442\u0443\u0434\u0437\u0435\u043d\u044c_\u043b\u044e\u0442\u044b_\u0441\u0430\u043a\u0430\u0432\u0456\u043a_\u043a\u0440\u0430\u0441\u0430\u0432\u0456\u043a_\u0442\u0440\u0430\u0432\u0435\u043d\u044c_\u0447\u044d\u0440\u0432\u0435\u043d\u044c_\u043b\u0456\u043f\u0435\u043d\u044c_\u0436\u043d\u0456\u0432\u0435\u043d\u044c_\u0432\u0435\u0440\u0430\u0441\u0435\u043d\u044c_\u043a\u0430\u0441\u0442\u0440\u044b\u0447\u043d\u0456\u043a_\u043b\u0456\u0441\u0442\u0430\u043f\u0430\u0434_\u0441\u043d\u0435\u0436\u0430\u043d\u044c'.split(
            '_'
          ),
      },
      monthsShort:
        '\u0441\u0442\u0443\u0434_\u043b\u044e\u0442_\u0441\u0430\u043a_\u043a\u0440\u0430\u0441_\u0442\u0440\u0430\u0432_\u0447\u044d\u0440\u0432_\u043b\u0456\u043f_\u0436\u043d\u0456\u0432_\u0432\u0435\u0440_\u043a\u0430\u0441\u0442_\u043b\u0456\u0441\u0442_\u0441\u043d\u0435\u0436'.split(
          '_'
        ),
      weekdays: {
        format:
          '\u043d\u044f\u0434\u0437\u0435\u043b\u044e_\u043f\u0430\u043d\u044f\u0434\u0437\u0435\u043b\u0430\u043a_\u0430\u045e\u0442\u043e\u0440\u0430\u043a_\u0441\u0435\u0440\u0430\u0434\u0443_\u0447\u0430\u0446\u0432\u0435\u0440_\u043f\u044f\u0442\u043d\u0456\u0446\u0443_\u0441\u0443\u0431\u043e\u0442\u0443'.split(
            '_'
          ),
        standalone:
          '\u043d\u044f\u0434\u0437\u0435\u043b\u044f_\u043f\u0430\u043d\u044f\u0434\u0437\u0435\u043b\u0430\u043a_\u0430\u045e\u0442\u043e\u0440\u0430\u043a_\u0441\u0435\u0440\u0430\u0434\u0430_\u0447\u0430\u0446\u0432\u0435\u0440_\u043f\u044f\u0442\u043d\u0456\u0446\u0430_\u0441\u0443\u0431\u043e\u0442\u0430'.split(
            '_'
          ),
        isFormat:
          /\[ ?[\u0423\u0443\u045e] ?(?:\u043c\u0456\u043d\u0443\u043b\u0443\u044e|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0443\u044e)? ?\] ?dddd/,
      },
      weekdaysShort:
        '\u043d\u0434_\u043f\u043d_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043f\u0442_\u0441\u0431'.split(
          '_'
        ),
      weekdaysMin:
        '\u043d\u0434_\u043f\u043d_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043f\u0442_\u0441\u0431'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY \u0433.',
        LLL: 'D MMMM YYYY \u0433., HH:mm',
        LLLL: 'dddd, D MMMM YYYY \u0433., HH:mm',
      },
      calendar: {
        sameDay: '[\u0421\u0451\u043d\u043d\u044f \u045e] LT',
        nextDay: '[\u0417\u0430\u045e\u0442\u0440\u0430 \u045e] LT',
        lastDay: '[\u0423\u0447\u043e\u0440\u0430 \u045e] LT',
        nextWeek: function () {
          return '[\u0423] dddd [\u045e] LT';
        },
        lastWeek: function () {
          switch (this.day()) {
            case 0:
            case 3:
            case 5:
            case 6:
              return '[\u0423 \u043c\u0456\u043d\u0443\u043b\u0443\u044e] dddd [\u045e] LT';
            case 1:
            case 2:
            case 4:
              return '[\u0423 \u043c\u0456\u043d\u0443\u043b\u044b] dddd [\u045e] LT';
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u043f\u0440\u0430\u0437 %s',
        past: '%s \u0442\u0430\u043c\u0443',
        s: '\u043d\u0435\u043a\u0430\u043b\u044c\u043a\u0456 \u0441\u0435\u043a\u0443\u043d\u0434',
        m: ys,
        mm: ys,
        h: ys,
        hh: ys,
        d: '\u0434\u0437\u0435\u043d\u044c',
        dd: ys,
        M: '\u043c\u0435\u0441\u044f\u0446',
        MM: ys,
        y: '\u0433\u043e\u0434',
        yy: ys,
      },
      meridiemParse:
        /\u043d\u043e\u0447\u044b|\u0440\u0430\u043d\u0456\u0446\u044b|\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430/,
      isPM: function (e) {
        return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430)$/.test(e);
      },
      meridiem: function (e, a, t) {
        return e < 4
          ? '\u043d\u043e\u0447\u044b'
          : e < 12
          ? '\u0440\u0430\u043d\u0456\u0446\u044b'
          : e < 17
          ? '\u0434\u043d\u044f'
          : '\u0432\u0435\u0447\u0430\u0440\u0430';
      },
      dayOfMonthOrdinalParse: /\d{1,2}-(\u0456|\u044b|\u0433\u0430)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'M':
          case 'd':
          case 'DDD':
          case 'w':
          case 'W':
            return (e % 10 != 2 && e % 10 != 3) || e % 100 == 12 || e % 100 == 13
              ? e + '-\u044b'
              : e + '-\u0456';
          case 'D':
            return e + '-\u0433\u0430';
          default:
            return e;
        }
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('bg', {
      months:
        '\u044f\u043d\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0439_\u044e\u043d\u0438_\u044e\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438_\u043e\u043a\u0442\u043e\u043c\u0432\u0440\u0438_\u043d\u043e\u0435\u043c\u0432\u0440\u0438_\u0434\u0435\u043a\u0435\u043c\u0432\u0440\u0438'.split(
          '_'
        ),
      monthsShort:
        '\u044f\u043d\u0443_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u044e\u043d\u0438_\u044e\u043b\u0438_\u0430\u0432\u0433_\u0441\u0435\u043f_\u043e\u043a\u0442_\u043d\u043e\u0435_\u0434\u0435\u043a'.split(
          '_'
        ),
      weekdays:
        '\u043d\u0435\u0434\u0435\u043b\u044f_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u044f\u0434\u0430_\u0447\u0435\u0442\u0432\u044a\u0440\u0442\u044a\u043a_\u043f\u0435\u0442\u044a\u043a_\u0441\u044a\u0431\u043e\u0442\u0430'.split(
          '_'
        ),
      weekdaysShort:
        '\u043d\u0435\u0434_\u043f\u043e\u043d_\u0432\u0442\u043e_\u0441\u0440\u044f_\u0447\u0435\u0442_\u043f\u0435\u0442_\u0441\u044a\u0431'.split(
          '_'
        ),
      weekdaysMin:
        '\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'D.MM.YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY H:mm',
        LLLL: 'dddd, D MMMM YYYY H:mm',
      },
      calendar: {
        sameDay: '[\u0414\u043d\u0435\u0441 \u0432] LT',
        nextDay: '[\u0423\u0442\u0440\u0435 \u0432] LT',
        nextWeek: 'dddd [\u0432] LT',
        lastDay: '[\u0412\u0447\u0435\u0440\u0430 \u0432] LT',
        lastWeek: function () {
          switch (this.day()) {
            case 0:
            case 3:
            case 6:
              return '[\u041c\u0438\u043d\u0430\u043b\u0430\u0442\u0430] dddd [\u0432] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[\u041c\u0438\u043d\u0430\u043b\u0438\u044f] dddd [\u0432] LT';
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u0441\u043b\u0435\u0434 %s',
        past: '\u043f\u0440\u0435\u0434\u0438 %s',
        s: '\u043d\u044f\u043a\u043e\u043b\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434\u0438',
        ss: '%d \u0441\u0435\u043a\u0443\u043d\u0434\u0438',
        m: '\u043c\u0438\u043d\u0443\u0442\u0430',
        mm: '%d \u043c\u0438\u043d\u0443\u0442\u0438',
        h: '\u0447\u0430\u0441',
        hh: '%d \u0447\u0430\u0441\u0430',
        d: '\u0434\u0435\u043d',
        dd: '%d \u0434\u0435\u043d\u0430',
        w: '\u0441\u0435\u0434\u043c\u0438\u0446\u0430',
        ww: '%d \u0441\u0435\u0434\u043c\u0438\u0446\u0438',
        M: '\u043c\u0435\u0441\u0435\u0446',
        MM: '%d \u043c\u0435\u0441\u0435\u0446\u0430',
        y: '\u0433\u043e\u0434\u0438\u043d\u0430',
        yy: '%d \u0433\u043e\u0434\u0438\u043d\u0438',
      },
      dayOfMonthOrdinalParse:
        /\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/,
      ordinal: function (e) {
        var a = e % 10,
          t = e % 100;
        return 0 === e
          ? e + '-\u0435\u0432'
          : 0 == t
          ? e + '-\u0435\u043d'
          : 10 < t && t < 20
          ? e + '-\u0442\u0438'
          : 1 == a
          ? e + '-\u0432\u0438'
          : 2 == a
          ? e + '-\u0440\u0438'
          : 7 == a || 8 == a
          ? e + '-\u043c\u0438'
          : e + '-\u0442\u0438';
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('bm', {
      months:
        'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_M\u025bkalo_Zuw\u025bnkalo_Zuluyekalo_Utikalo_S\u025btanburukalo_\u0254kut\u0254burukalo_Nowanburukalo_Desanburukalo'.split(
          '_'
        ),
      monthsShort: 'Zan_Few_Mar_Awi_M\u025b_Zuw_Zul_Uti_S\u025bt_\u0254ku_Now_Des'.split('_'),
      weekdays: 'Kari_Nt\u025bn\u025bn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
      weekdaysShort: 'Kar_Nt\u025b_Tar_Ara_Ala_Jum_Sib'.split('_'),
      weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'MMMM [tile] D [san] YYYY',
        LLL: 'MMMM [tile] D [san] YYYY [l\u025br\u025b] HH:mm',
        LLLL: 'dddd MMMM [tile] D [san] YYYY [l\u025br\u025b] HH:mm',
      },
      calendar: {
        sameDay: '[Bi l\u025br\u025b] LT',
        nextDay: '[Sini l\u025br\u025b] LT',
        nextWeek: 'dddd [don l\u025br\u025b] LT',
        lastDay: '[Kunu l\u025br\u025b] LT',
        lastWeek: 'dddd [t\u025bm\u025bnen l\u025br\u025b] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s k\u0254n\u0254',
        past: 'a b\u025b %s b\u0254',
        s: 'sanga dama dama',
        ss: 'sekondi %d',
        m: 'miniti kelen',
        mm: 'miniti %d',
        h: 'l\u025br\u025b kelen',
        hh: 'l\u025br\u025b %d',
        d: 'tile kelen',
        dd: 'tile %d',
        M: 'kalo kelen',
        MM: 'kalo %d',
        y: 'san kelen',
        yy: 'san %d',
      },
      week: { dow: 1, doy: 4 },
    });
  var fs = {
      1: '\u09e7',
      2: '\u09e8',
      3: '\u09e9',
      4: '\u09ea',
      5: '\u09eb',
      6: '\u09ec',
      7: '\u09ed',
      8: '\u09ee',
      9: '\u09ef',
      0: '\u09e6',
    },
    ps = {
      '\u09e7': '1',
      '\u09e8': '2',
      '\u09e9': '3',
      '\u09ea': '4',
      '\u09eb': '5',
      '\u09ec': '6',
      '\u09ed': '7',
      '\u09ee': '8',
      '\u09ef': '9',
      '\u09e6': '0',
    };
  M.defineLocale('bn-bd', {
    months:
      '\u099c\u09be\u09a8\u09c1\u09df\u09be\u09b0\u09bf_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09df\u09be\u09b0\u09bf_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0_\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0_\u09a8\u09ad\u09c7\u09ae\u09cd\u09ac\u09b0_\u09a1\u09bf\u09b8\u09c7\u09ae\u09cd\u09ac\u09b0'.split(
        '_'
      ),
    monthsShort:
      '\u099c\u09be\u09a8\u09c1_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f_\u0985\u0995\u09cd\u099f\u09cb_\u09a8\u09ad\u09c7_\u09a1\u09bf\u09b8\u09c7'.split(
        '_'
      ),
    weekdays:
      '\u09b0\u09ac\u09bf\u09ac\u09be\u09b0_\u09b8\u09cb\u09ae\u09ac\u09be\u09b0_\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09b0_\u09ac\u09c1\u09a7\u09ac\u09be\u09b0_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09b0_\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09b0_\u09b6\u09a8\u09bf\u09ac\u09be\u09b0'.split(
        '_'
      ),
    weekdaysShort:
      '\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf'.split(
        '_'
      ),
    weekdaysMin:
      '\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'A h:mm \u09b8\u09ae\u09df',
      LTS: 'A h:mm:ss \u09b8\u09ae\u09df',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A h:mm \u09b8\u09ae\u09df',
      LLLL: 'dddd, D MMMM YYYY, A h:mm \u09b8\u09ae\u09df',
    },
    calendar: {
      sameDay: '[\u0986\u099c] LT',
      nextDay: '[\u0986\u0997\u09be\u09ae\u09c0\u0995\u09be\u09b2] LT',
      nextWeek: 'dddd, LT',
      lastDay: '[\u0997\u09a4\u0995\u09be\u09b2] LT',
      lastWeek: '[\u0997\u09a4] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u09aa\u09b0\u09c7',
      past: '%s \u0986\u0997\u09c7',
      s: '\u0995\u09df\u09c7\u0995 \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1',
      ss: '%d \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1',
      m: '\u098f\u0995 \u09ae\u09bf\u09a8\u09bf\u099f',
      mm: '%d \u09ae\u09bf\u09a8\u09bf\u099f',
      h: '\u098f\u0995 \u0998\u09a8\u09cd\u099f\u09be',
      hh: '%d \u0998\u09a8\u09cd\u099f\u09be',
      d: '\u098f\u0995 \u09a6\u09bf\u09a8',
      dd: '%d \u09a6\u09bf\u09a8',
      M: '\u098f\u0995 \u09ae\u09be\u09b8',
      MM: '%d \u09ae\u09be\u09b8',
      y: '\u098f\u0995 \u09ac\u099b\u09b0',
      yy: '%d \u09ac\u099b\u09b0',
    },
    preparse: function (e) {
      return e.replace(
        /[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g,
        function (e) {
          return ps[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return fs[e];
      });
    },
    meridiemParse:
      /\u09b0\u09be\u09a4|\u09ad\u09cb\u09b0|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be|\u09b0\u09be\u09a4/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u09b0\u09be\u09a4' === a
          ? e < 4
            ? e
            : e + 12
          : '\u09ad\u09cb\u09b0' === a || '\u09b8\u0995\u09be\u09b2' === a
          ? e
          : '\u09a6\u09c1\u09aa\u09c1\u09b0' === a
          ? 3 <= e
            ? e
            : e + 12
          : '\u09ac\u09bf\u0995\u09be\u09b2' === a ||
            '\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be' === a
          ? e + 12
          : void 0
      );
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u09b0\u09be\u09a4'
        : e < 6
        ? '\u09ad\u09cb\u09b0'
        : e < 12
        ? '\u09b8\u0995\u09be\u09b2'
        : e < 15
        ? '\u09a6\u09c1\u09aa\u09c1\u09b0'
        : e < 18
        ? '\u09ac\u09bf\u0995\u09be\u09b2'
        : e < 20
        ? '\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be'
        : '\u09b0\u09be\u09a4';
    },
    week: { dow: 0, doy: 6 },
  });
  var ks = {
      1: '\u09e7',
      2: '\u09e8',
      3: '\u09e9',
      4: '\u09ea',
      5: '\u09eb',
      6: '\u09ec',
      7: '\u09ed',
      8: '\u09ee',
      9: '\u09ef',
      0: '\u09e6',
    },
    Ds = {
      '\u09e7': '1',
      '\u09e8': '2',
      '\u09e9': '3',
      '\u09ea': '4',
      '\u09eb': '5',
      '\u09ec': '6',
      '\u09ed': '7',
      '\u09ee': '8',
      '\u09ef': '9',
      '\u09e6': '0',
    };
  M.defineLocale('bn', {
    months:
      '\u099c\u09be\u09a8\u09c1\u09df\u09be\u09b0\u09bf_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09df\u09be\u09b0\u09bf_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0_\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0_\u09a8\u09ad\u09c7\u09ae\u09cd\u09ac\u09b0_\u09a1\u09bf\u09b8\u09c7\u09ae\u09cd\u09ac\u09b0'.split(
        '_'
      ),
    monthsShort:
      '\u099c\u09be\u09a8\u09c1_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f_\u0985\u0995\u09cd\u099f\u09cb_\u09a8\u09ad\u09c7_\u09a1\u09bf\u09b8\u09c7'.split(
        '_'
      ),
    weekdays:
      '\u09b0\u09ac\u09bf\u09ac\u09be\u09b0_\u09b8\u09cb\u09ae\u09ac\u09be\u09b0_\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09b0_\u09ac\u09c1\u09a7\u09ac\u09be\u09b0_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09b0_\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09b0_\u09b6\u09a8\u09bf\u09ac\u09be\u09b0'.split(
        '_'
      ),
    weekdaysShort:
      '\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf'.split(
        '_'
      ),
    weekdaysMin:
      '\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'A h:mm \u09b8\u09ae\u09df',
      LTS: 'A h:mm:ss \u09b8\u09ae\u09df',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A h:mm \u09b8\u09ae\u09df',
      LLLL: 'dddd, D MMMM YYYY, A h:mm \u09b8\u09ae\u09df',
    },
    calendar: {
      sameDay: '[\u0986\u099c] LT',
      nextDay: '[\u0986\u0997\u09be\u09ae\u09c0\u0995\u09be\u09b2] LT',
      nextWeek: 'dddd, LT',
      lastDay: '[\u0997\u09a4\u0995\u09be\u09b2] LT',
      lastWeek: '[\u0997\u09a4] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u09aa\u09b0\u09c7',
      past: '%s \u0986\u0997\u09c7',
      s: '\u0995\u09df\u09c7\u0995 \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1',
      ss: '%d \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1',
      m: '\u098f\u0995 \u09ae\u09bf\u09a8\u09bf\u099f',
      mm: '%d \u09ae\u09bf\u09a8\u09bf\u099f',
      h: '\u098f\u0995 \u0998\u09a8\u09cd\u099f\u09be',
      hh: '%d \u0998\u09a8\u09cd\u099f\u09be',
      d: '\u098f\u0995 \u09a6\u09bf\u09a8',
      dd: '%d \u09a6\u09bf\u09a8',
      M: '\u098f\u0995 \u09ae\u09be\u09b8',
      MM: '%d \u09ae\u09be\u09b8',
      y: '\u098f\u0995 \u09ac\u099b\u09b0',
      yy: '%d \u09ac\u099b\u09b0',
    },
    preparse: function (e) {
      return e.replace(
        /[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g,
        function (e) {
          return Ds[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return ks[e];
      });
    },
    meridiemParse:
      /\u09b0\u09be\u09a4|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b0\u09be\u09a4/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        ('\u09b0\u09be\u09a4' === a && 4 <= e) ||
        ('\u09a6\u09c1\u09aa\u09c1\u09b0' === a && e < 5) ||
        '\u09ac\u09bf\u0995\u09be\u09b2' === a
          ? e + 12
          : e
      );
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u09b0\u09be\u09a4'
        : e < 10
        ? '\u09b8\u0995\u09be\u09b2'
        : e < 17
        ? '\u09a6\u09c1\u09aa\u09c1\u09b0'
        : e < 20
        ? '\u09ac\u09bf\u0995\u09be\u09b2'
        : '\u09b0\u09be\u09a4';
    },
    week: { dow: 0, doy: 6 },
  });
  var Ts = {
      1: '\u0f21',
      2: '\u0f22',
      3: '\u0f23',
      4: '\u0f24',
      5: '\u0f25',
      6: '\u0f26',
      7: '\u0f27',
      8: '\u0f28',
      9: '\u0f29',
      0: '\u0f20',
    },
    gs = {
      '\u0f21': '1',
      '\u0f22': '2',
      '\u0f23': '3',
      '\u0f24': '4',
      '\u0f25': '5',
      '\u0f26': '6',
      '\u0f27': '7',
      '\u0f28': '8',
      '\u0f29': '9',
      '\u0f20': '0',
    };
  function ws(e, a, t) {
    var s;
    return (
      e +
      ' ' +
      ((s = { mm: 'munutenn', MM: 'miz', dd: 'devezh' }[t]),
      2 !== e
        ? s
        : (function (e) {
            var a = { m: 'v', b: 'v', d: 'z' };
            return void 0 !== a[e.charAt(0)] ? a[e.charAt(0)] + e.substring(1) : e;
          })(s))
    );
  }
  M.defineLocale('bo', {
    months:
      '\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0f44\u0f0b\u0f54\u0f7c_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f49\u0f72\u0f66\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f66\u0f74\u0f58\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f5e\u0f72\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f63\u0f94\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0fb2\u0f74\u0f42\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f62\u0f92\u0fb1\u0f51\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0f42\u0f74\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f42\u0f45\u0f72\u0f42\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f42\u0f49\u0f72\u0f66\u0f0b\u0f54'.split(
        '_'
      ),
    monthsShort:
      '\u0f5f\u0fb3\u0f0b1_\u0f5f\u0fb3\u0f0b2_\u0f5f\u0fb3\u0f0b3_\u0f5f\u0fb3\u0f0b4_\u0f5f\u0fb3\u0f0b5_\u0f5f\u0fb3\u0f0b6_\u0f5f\u0fb3\u0f0b7_\u0f5f\u0fb3\u0f0b8_\u0f5f\u0fb3\u0f0b9_\u0f5f\u0fb3\u0f0b10_\u0f5f\u0fb3\u0f0b11_\u0f5f\u0fb3\u0f0b12'.split(
        '_'
      ),
    monthsShortRegex: /^(\u0f5f\u0fb3\u0f0b\d{1,2})/,
    monthsParseExact: !0,
    weekdays:
      '\u0f42\u0f5f\u0f60\u0f0b\u0f49\u0f72\u0f0b\u0f58\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f5f\u0fb3\u0f0b\u0f56\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f58\u0f72\u0f42\u0f0b\u0f51\u0f58\u0f62\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f63\u0fb7\u0f42\u0f0b\u0f54\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f55\u0f74\u0f62\u0f0b\u0f56\u0f74_\u0f42\u0f5f\u0f60\u0f0b\u0f54\u0f0b\u0f66\u0f44\u0f66\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f66\u0fa4\u0f7a\u0f53\u0f0b\u0f54\u0f0b'.split(
        '_'
      ),
    weekdaysShort:
      '\u0f49\u0f72\u0f0b\u0f58\u0f0b_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b_\u0f58\u0f72\u0f42\u0f0b\u0f51\u0f58\u0f62\u0f0b_\u0f63\u0fb7\u0f42\u0f0b\u0f54\u0f0b_\u0f55\u0f74\u0f62\u0f0b\u0f56\u0f74_\u0f54\u0f0b\u0f66\u0f44\u0f66\u0f0b_\u0f66\u0fa4\u0f7a\u0f53\u0f0b\u0f54\u0f0b'.split(
        '_'
      ),
    weekdaysMin:
      '\u0f49\u0f72_\u0f5f\u0fb3_\u0f58\u0f72\u0f42_\u0f63\u0fb7\u0f42_\u0f55\u0f74\u0f62_\u0f66\u0f44\u0f66_\u0f66\u0fa4\u0f7a\u0f53'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'A h:mm',
      LTS: 'A h:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A h:mm',
      LLLL: 'dddd, D MMMM YYYY, A h:mm',
    },
    calendar: {
      sameDay: '[\u0f51\u0f72\u0f0b\u0f62\u0f72\u0f44] LT',
      nextDay: '[\u0f66\u0f44\u0f0b\u0f49\u0f72\u0f53] LT',
      nextWeek:
        '[\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f55\u0fb2\u0f42\u0f0b\u0f62\u0f97\u0f7a\u0f66\u0f0b\u0f58], LT',
      lastDay: '[\u0f41\u0f0b\u0f66\u0f44] LT',
      lastWeek:
        '[\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f55\u0fb2\u0f42\u0f0b\u0f58\u0f50\u0f60\u0f0b\u0f58] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u0f63\u0f0b',
      past: '%s \u0f66\u0f94\u0f53\u0f0b\u0f63',
      s: '\u0f63\u0f58\u0f0b\u0f66\u0f44',
      ss: '%d \u0f66\u0f90\u0f62\u0f0b\u0f46\u0f0d',
      m: '\u0f66\u0f90\u0f62\u0f0b\u0f58\u0f0b\u0f42\u0f45\u0f72\u0f42',
      mm: '%d \u0f66\u0f90\u0f62\u0f0b\u0f58',
      h: '\u0f46\u0f74\u0f0b\u0f5a\u0f7c\u0f51\u0f0b\u0f42\u0f45\u0f72\u0f42',
      hh: '%d \u0f46\u0f74\u0f0b\u0f5a\u0f7c\u0f51',
      d: '\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f45\u0f72\u0f42',
      dd: '%d \u0f49\u0f72\u0f53\u0f0b',
      M: '\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f45\u0f72\u0f42',
      MM: '%d \u0f5f\u0fb3\u0f0b\u0f56',
      y: '\u0f63\u0f7c\u0f0b\u0f42\u0f45\u0f72\u0f42',
      yy: '%d \u0f63\u0f7c',
    },
    preparse: function (e) {
      return e.replace(
        /[\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f20]/g,
        function (e) {
          return gs[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return Ts[e];
      });
    },
    meridiemParse:
      /\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c|\u0f5e\u0f7c\u0f42\u0f66\u0f0b\u0f40\u0f66|\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44|\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42|\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        ('\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c' === a && 4 <= e) ||
        ('\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44' === a && e < 5) ||
        '\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42' === a
          ? e + 12
          : e
      );
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c'
        : e < 10
        ? '\u0f5e\u0f7c\u0f42\u0f66\u0f0b\u0f40\u0f66'
        : e < 17
        ? '\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44'
        : e < 20
        ? '\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42'
        : '\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c';
    },
    week: { dow: 0, doy: 6 },
  });
  var vs = [
      /^gen/i,
      /^c[\u02bc\']hwe/i,
      /^meu/i,
      /^ebr/i,
      /^mae/i,
      /^(mez|eve)/i,
      /^gou/i,
      /^eos/i,
      /^gwe/i,
      /^her/i,
      /^du/i,
      /^ker/i,
    ],
    bs =
      /^(genver|c[\u02bc\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[\u02bc\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
    Ss = [/^Su/i, /^Lu/i, /^Me([^r]|$)/i, /^Mer/i, /^Ya/i, /^Gw/i, /^Sa/i];
  function Hs(e, a, t) {
    var s = e + ' ';
    switch (t) {
      case 'ss':
        return (s += 1 === e ? 'sekunda' : 2 === e || 3 === e || 4 === e ? 'sekunde' : 'sekundi');
      case 'm':
        return a ? 'jedna minuta' : 'jedne minute';
      case 'mm':
        return (s += 1 !== e && (2 === e || 3 === e || 4 === e) ? 'minute' : 'minuta');
      case 'h':
        return a ? 'jedan sat' : 'jednog sata';
      case 'hh':
        return (s += 1 === e ? 'sat' : 2 === e || 3 === e || 4 === e ? 'sata' : 'sati');
      case 'dd':
        return (s += 1 === e ? 'dan' : 'dana');
      case 'MM':
        return (s += 1 === e ? 'mjesec' : 2 === e || 3 === e || 4 === e ? 'mjeseca' : 'mjeseci');
      case 'yy':
        return (s += 1 !== e && (2 === e || 3 === e || 4 === e) ? 'godine' : 'godina');
    }
  }
  M.defineLocale('br', {
    months:
      'Genver_C\u02bchwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(
        '_'
      ),
    monthsShort: 'Gen_C\u02bchwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
    weekdays: 'Sul_Lun_Meurzh_Merc\u02bcher_Yaou_Gwener_Sadorn'.split('_'),
    weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
    weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
    weekdaysParse: Ss,
    fullWeekdaysParse: [
      /^sul/i,
      /^lun/i,
      /^meurzh/i,
      /^merc[\u02bc\']her/i,
      /^yaou/i,
      /^gwener/i,
      /^sadorn/i,
    ],
    shortWeekdaysParse: [/^Sul/i, /^Lun/i, /^Meu/i, /^Mer/i, /^Yao/i, /^Gwe/i, /^Sad/i],
    minWeekdaysParse: Ss,
    monthsRegex: bs,
    monthsShortRegex: bs,
    monthsStrictRegex:
      /^(genver|c[\u02bc\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
    monthsShortStrictRegex: /^(gen|c[\u02bc\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
    monthsParse: vs,
    longMonthsParse: vs,
    shortMonthsParse: vs,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D [a viz] MMMM YYYY',
      LLL: 'D [a viz] MMMM YYYY HH:mm',
      LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[Hiziv da] LT',
      nextDay: '[Warc\u02bchoazh da] LT',
      nextWeek: 'dddd [da] LT',
      lastDay: '[Dec\u02bch da] LT',
      lastWeek: 'dddd [paset da] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'a-benn %s',
      past: '%s \u02bczo',
      s: 'un nebeud segondenno\xf9',
      ss: '%d eilenn',
      m: 'ur vunutenn',
      mm: ws,
      h: 'un eur',
      hh: '%d eur',
      d: 'un devezh',
      dd: ws,
      M: 'ur miz',
      MM: ws,
      y: 'ur bloaz',
      yy: function (e) {
        switch (
          (function e(a) {
            if (9 < a) return e(a % 10);
            return a;
          })(e)
        ) {
          case 1:
          case 3:
          case 4:
          case 5:
          case 9:
            return e + ' bloaz';
          default:
            return e + ' vloaz';
        }
      },
    },
    dayOfMonthOrdinalParse: /\d{1,2}(a\xf1|vet)/,
    ordinal: function (e) {
      return e + (1 === e ? 'a\xf1' : 'vet');
    },
    week: { dow: 1, doy: 4 },
    meridiemParse: /a.m.|g.m./,
    isPM: function (e) {
      return 'g.m.' === e;
    },
    meridiem: function (e, a, t) {
      return e < 12 ? 'a.m.' : 'g.m.';
    },
  }),
    M.defineLocale('bs', {
      months:
        'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
          '_'
        ),
      monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota'.split('_'),
      weekdaysShort: 'ned._pon._uto._sri._\u010det._pet._sub.'.split('_'),
      weekdaysMin: 'ne_po_ut_sr_\u010de_pe_su'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm',
      },
      calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sutra u] LT',
        nextWeek: function () {
          switch (this.day()) {
            case 0:
              return '[u] [nedjelju] [u] LT';
            case 3:
              return '[u] [srijedu] [u] LT';
            case 6:
              return '[u] [subotu] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[u] dddd [u] LT';
          }
        },
        lastDay: '[ju\u010der u] LT',
        lastWeek: function () {
          switch (this.day()) {
            case 0:
            case 3:
              return '[pro\u0161lu] dddd [u] LT';
            case 6:
              return '[pro\u0161le] [subote] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[pro\u0161li] dddd [u] LT';
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: 'za %s',
        past: 'prije %s',
        s: 'par sekundi',
        ss: Hs,
        m: Hs,
        mm: Hs,
        h: Hs,
        hh: Hs,
        d: 'dan',
        dd: Hs,
        M: 'mjesec',
        MM: Hs,
        y: 'godinu',
        yy: Hs,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('ca', {
      months: {
        standalone:
          'gener_febrer_mar\xe7_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
            '_'
          ),
        format:
          "de gener_de febrer_de mar\xe7_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
            '_'
          ),
        isFormat: /D[oD]?(\s)+MMMM/,
      },
      monthsShort: 'gen._febr._mar\xe7_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
      weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
      weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM [de] YYYY',
        ll: 'D MMM YYYY',
        LLL: 'D MMMM [de] YYYY [a les] H:mm',
        lll: 'D MMM YYYY, H:mm',
        LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
        llll: 'ddd D MMM YYYY, H:mm',
      },
      calendar: {
        sameDay: function () {
          return '[avui a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
        },
        nextDay: function () {
          return '[dem\xe0 a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
        },
        nextWeek: function () {
          return 'dddd [a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
        },
        lastDay: function () {
          return '[ahir a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
        },
        lastWeek: function () {
          return '[el] dddd [passat a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: "d'aqu\xed %s",
        past: 'fa %s',
        s: 'uns segons',
        ss: '%d segons',
        m: 'un minut',
        mm: '%d minuts',
        h: 'una hora',
        hh: '%d hores',
        d: 'un dia',
        dd: '%d dies',
        M: 'un mes',
        MM: '%d mesos',
        y: 'un any',
        yy: '%d anys',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|\xe8|a)/,
      ordinal: function (e, a) {
        return (
          e +
          ('w' !== a && 'W' !== a
            ? 1 === e
              ? 'r'
              : 2 === e
              ? 'n'
              : 3 === e
              ? 'r'
              : 4 === e
              ? 't'
              : '\xe8'
            : 'a')
        );
      },
      week: { dow: 1, doy: 4 },
    });
  var js =
      'leden_\xfanor_b\u0159ezen_duben_kv\u011bten_\u010derven_\u010dervenec_srpen_z\xe1\u0159\xed_\u0159\xedjen_listopad_prosinec'.split(
        '_'
      ),
    xs =
      'led_\xfano_b\u0159e_dub_kv\u011b_\u010dvn_\u010dvc_srp_z\xe1\u0159_\u0159\xedj_lis_pro'.split(
        '_'
      ),
    Ps = [
      /^led/i,
      /^\xfano/i,
      /^b\u0159e/i,
      /^dub/i,
      /^kv\u011b/i,
      /^(\u010dvn|\u010derven$|\u010dervna)/i,
      /^(\u010dvc|\u010dervenec|\u010dervence)/i,
      /^srp/i,
      /^z\xe1\u0159/i,
      /^\u0159\xedj/i,
      /^lis/i,
      /^pro/i,
    ],
    Os =
      /^(leden|\xfanor|b\u0159ezen|duben|kv\u011bten|\u010dervenec|\u010dervence|\u010derven|\u010dervna|srpen|z\xe1\u0159\xed|\u0159\xedjen|listopad|prosinec|led|\xfano|b\u0159e|dub|kv\u011b|\u010dvn|\u010dvc|srp|z\xe1\u0159|\u0159\xedj|lis|pro)/i;
  function Ws(e) {
    return 1 < e && e < 5 && 1 != ~~(e / 10);
  }
  function As(e, a, t, s) {
    var n = e + ' ';
    switch (t) {
      case 's':
        return a || s ? 'p\xe1r sekund' : 'p\xe1r sekundami';
      case 'ss':
        return a || s ? n + (Ws(e) ? 'sekundy' : 'sekund') : n + 'sekundami';
      case 'm':
        return a ? 'minuta' : s ? 'minutu' : 'minutou';
      case 'mm':
        return a || s ? n + (Ws(e) ? 'minuty' : 'minut') : n + 'minutami';
      case 'h':
        return a ? 'hodina' : s ? 'hodinu' : 'hodinou';
      case 'hh':
        return a || s ? n + (Ws(e) ? 'hodiny' : 'hodin') : n + 'hodinami';
      case 'd':
        return a || s ? 'den' : 'dnem';
      case 'dd':
        return a || s ? n + (Ws(e) ? 'dny' : 'dn\xed') : n + 'dny';
      case 'M':
        return a || s ? 'm\u011bs\xedc' : 'm\u011bs\xedcem';
      case 'MM':
        return a || s
          ? n + (Ws(e) ? 'm\u011bs\xedce' : 'm\u011bs\xedc\u016f')
          : n + 'm\u011bs\xedci';
      case 'y':
        return a || s ? 'rok' : 'rokem';
      case 'yy':
        return a || s ? n + (Ws(e) ? 'roky' : 'let') : n + 'lety';
    }
  }
  function Es(e, a, t, s) {
    var n = {
      m: ['eine Minute', 'einer Minute'],
      h: ['eine Stunde', 'einer Stunde'],
      d: ['ein Tag', 'einem Tag'],
      dd: [e + ' Tage', e + ' Tagen'],
      w: ['eine Woche', 'einer Woche'],
      M: ['ein Monat', 'einem Monat'],
      MM: [e + ' Monate', e + ' Monaten'],
      y: ['ein Jahr', 'einem Jahr'],
      yy: [e + ' Jahre', e + ' Jahren'],
    };
    return a ? n[t][0] : n[t][1];
  }
  function Fs(e, a, t, s) {
    var n = {
      m: ['eine Minute', 'einer Minute'],
      h: ['eine Stunde', 'einer Stunde'],
      d: ['ein Tag', 'einem Tag'],
      dd: [e + ' Tage', e + ' Tagen'],
      w: ['eine Woche', 'einer Woche'],
      M: ['ein Monat', 'einem Monat'],
      MM: [e + ' Monate', e + ' Monaten'],
      y: ['ein Jahr', 'einem Jahr'],
      yy: [e + ' Jahre', e + ' Jahren'],
    };
    return a ? n[t][0] : n[t][1];
  }
  function zs(e, a, t, s) {
    var n = {
      m: ['eine Minute', 'einer Minute'],
      h: ['eine Stunde', 'einer Stunde'],
      d: ['ein Tag', 'einem Tag'],
      dd: [e + ' Tage', e + ' Tagen'],
      w: ['eine Woche', 'einer Woche'],
      M: ['ein Monat', 'einem Monat'],
      MM: [e + ' Monate', e + ' Monaten'],
      y: ['ein Jahr', 'einem Jahr'],
      yy: [e + ' Jahre', e + ' Jahren'],
    };
    return a ? n[t][0] : n[t][1];
  }
  M.defineLocale('cs', {
    months: js,
    monthsShort: xs,
    monthsRegex: Os,
    monthsShortRegex: Os,
    monthsStrictRegex:
      /^(leden|ledna|\xfanora|\xfanor|b\u0159ezen|b\u0159ezna|duben|dubna|kv\u011bten|kv\u011btna|\u010dervenec|\u010dervence|\u010derven|\u010dervna|srpen|srpna|z\xe1\u0159\xed|\u0159\xedjen|\u0159\xedjna|listopadu|listopad|prosinec|prosince)/i,
    monthsShortStrictRegex:
      /^(led|\xfano|b\u0159e|dub|kv\u011b|\u010dvn|\u010dvc|srp|z\xe1\u0159|\u0159\xedj|lis|pro)/i,
    monthsParse: Ps,
    longMonthsParse: Ps,
    shortMonthsParse: Ps,
    weekdays:
      'ned\u011ble_pond\u011bl\xed_\xfater\xfd_st\u0159eda_\u010dtvrtek_p\xe1tek_sobota'.split('_'),
    weekdaysShort: 'ne_po_\xfat_st_\u010dt_p\xe1_so'.split('_'),
    weekdaysMin: 'ne_po_\xfat_st_\u010dt_p\xe1_so'.split('_'),
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D. MMMM YYYY',
      LLL: 'D. MMMM YYYY H:mm',
      LLLL: 'dddd D. MMMM YYYY H:mm',
      l: 'D. M. YYYY',
    },
    calendar: {
      sameDay: '[dnes v] LT',
      nextDay: '[z\xedtra v] LT',
      nextWeek: function () {
        switch (this.day()) {
          case 0:
            return '[v ned\u011bli v] LT';
          case 1:
          case 2:
            return '[v] dddd [v] LT';
          case 3:
            return '[ve st\u0159edu v] LT';
          case 4:
            return '[ve \u010dtvrtek v] LT';
          case 5:
            return '[v p\xe1tek v] LT';
          case 6:
            return '[v sobotu v] LT';
        }
      },
      lastDay: '[v\u010dera v] LT',
      lastWeek: function () {
        switch (this.day()) {
          case 0:
            return '[minulou ned\u011bli v] LT';
          case 1:
          case 2:
            return '[minul\xe9] dddd [v] LT';
          case 3:
            return '[minulou st\u0159edu v] LT';
          case 4:
          case 5:
            return '[minul\xfd] dddd [v] LT';
          case 6:
            return '[minulou sobotu v] LT';
        }
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'za %s',
      past: 'p\u0159ed %s',
      s: As,
      ss: As,
      m: As,
      mm: As,
      h: As,
      hh: As,
      d: As,
      dd: As,
      M: As,
      MM: As,
      y: As,
      yy: As,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('cv', {
      months:
        '\u043a\u04d1\u0440\u043b\u0430\u0447_\u043d\u0430\u0440\u04d1\u0441_\u043f\u0443\u0448_\u0430\u043a\u0430_\u043c\u0430\u0439_\u04ab\u04d7\u0440\u0442\u043c\u0435_\u0443\u0442\u04d1_\u04ab\u0443\u0440\u043b\u0430_\u0430\u0432\u04d1\u043d_\u044e\u043f\u0430_\u0447\u04f3\u043a_\u0440\u0430\u0448\u0442\u0430\u0432'.split(
          '_'
        ),
      monthsShort:
        '\u043a\u04d1\u0440_\u043d\u0430\u0440_\u043f\u0443\u0448_\u0430\u043a\u0430_\u043c\u0430\u0439_\u04ab\u04d7\u0440_\u0443\u0442\u04d1_\u04ab\u0443\u0440_\u0430\u0432\u043d_\u044e\u043f\u0430_\u0447\u04f3\u043a_\u0440\u0430\u0448'.split(
          '_'
        ),
      weekdays:
        '\u0432\u044b\u0440\u0441\u0430\u0440\u043d\u0438\u043a\u0443\u043d_\u0442\u0443\u043d\u0442\u0438\u043a\u0443\u043d_\u044b\u0442\u043b\u0430\u0440\u0438\u043a\u0443\u043d_\u044e\u043d\u043a\u0443\u043d_\u043a\u04d7\u04ab\u043d\u0435\u0440\u043d\u0438\u043a\u0443\u043d_\u044d\u0440\u043d\u0435\u043a\u0443\u043d_\u0448\u04d1\u043c\u0430\u0442\u043a\u0443\u043d'.split(
          '_'
        ),
      weekdaysShort:
        '\u0432\u044b\u0440_\u0442\u0443\u043d_\u044b\u0442\u043b_\u044e\u043d_\u043a\u04d7\u04ab_\u044d\u0440\u043d_\u0448\u04d1\u043c'.split(
          '_'
        ),
      weekdaysMin:
        '\u0432\u0440_\u0442\u043d_\u044b\u0442_\u044e\u043d_\u043a\u04ab_\u044d\u0440_\u0448\u043c'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD-MM-YYYY',
        LL: 'YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7]',
        LLL: 'YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7], HH:mm',
        LLLL: 'dddd, YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7], HH:mm',
      },
      calendar: {
        sameDay: '[\u041f\u0430\u044f\u043d] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
        nextDay: '[\u042b\u0440\u0430\u043d] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
        lastDay: '[\u04d6\u043d\u0435\u0440] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
        nextWeek:
          '[\u04aa\u0438\u0442\u0435\u0441] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
        lastWeek:
          '[\u0418\u0440\u0442\u043d\u04d7] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
        sameElse: 'L',
      },
      relativeTime: {
        future: function (e) {
          return (
            e +
            (/\u0441\u0435\u0445\u0435\u0442$/i.exec(e)
              ? '\u0440\u0435\u043d'
              : /\u04ab\u0443\u043b$/i.exec(e)
              ? '\u0442\u0430\u043d'
              : '\u0440\u0430\u043d')
          );
        },
        past: '%s \u043a\u0430\u044f\u043b\u043b\u0430',
        s: '\u043f\u04d7\u0440-\u0438\u043a \u04ab\u0435\u043a\u043a\u0443\u043d\u0442',
        ss: '%d \u04ab\u0435\u043a\u043a\u0443\u043d\u0442',
        m: '\u043f\u04d7\u0440 \u043c\u0438\u043d\u0443\u0442',
        mm: '%d \u043c\u0438\u043d\u0443\u0442',
        h: '\u043f\u04d7\u0440 \u0441\u0435\u0445\u0435\u0442',
        hh: '%d \u0441\u0435\u0445\u0435\u0442',
        d: '\u043f\u04d7\u0440 \u043a\u0443\u043d',
        dd: '%d \u043a\u0443\u043d',
        M: '\u043f\u04d7\u0440 \u0443\u0439\u04d1\u0445',
        MM: '%d \u0443\u0439\u04d1\u0445',
        y: '\u043f\u04d7\u0440 \u04ab\u0443\u043b',
        yy: '%d \u04ab\u0443\u043b',
      },
      dayOfMonthOrdinalParse: /\d{1,2}-\u043c\u04d7\u0448/,
      ordinal: '%d-\u043c\u04d7\u0448',
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('cy', {
      months:
        'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
          '_'
        ),
      monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
      weekdays:
        'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
      weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
      weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Heddiw am] LT',
        nextDay: '[Yfory am] LT',
        nextWeek: 'dddd [am] LT',
        lastDay: '[Ddoe am] LT',
        lastWeek: 'dddd [diwethaf am] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'mewn %s',
        past: '%s yn \xf4l',
        s: 'ychydig eiliadau',
        ss: '%d eiliad',
        m: 'munud',
        mm: '%d munud',
        h: 'awr',
        hh: '%d awr',
        d: 'diwrnod',
        dd: '%d diwrnod',
        M: 'mis',
        MM: '%d mis',
        y: 'blwyddyn',
        yy: '%d flynedd',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
      ordinal: function (e) {
        var a = '';
        return (
          20 < e
            ? (a = 40 === e || 50 === e || 60 === e || 80 === e || 100 === e ? 'fed' : 'ain')
            : 0 < e &&
              (a = [
                '',
                'af',
                'il',
                'ydd',
                'ydd',
                'ed',
                'ed',
                'ed',
                'fed',
                'fed',
                'fed',
                'eg',
                'fed',
                'eg',
                'eg',
                'fed',
                'eg',
                'eg',
                'fed',
                'eg',
                'fed',
              ][e]),
          e + a
        );
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('da', {
      months:
        'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
          '_'
        ),
      monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
      weekdays: 's\xf8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xf8rdag'.split('_'),
      weekdaysShort: 's\xf8n_man_tir_ons_tor_fre_l\xf8r'.split('_'),
      weekdaysMin: 's\xf8_ma_ti_on_to_fr_l\xf8'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY HH:mm',
        LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm',
      },
      calendar: {
        sameDay: '[i dag kl.] LT',
        nextDay: '[i morgen kl.] LT',
        nextWeek: 'p\xe5 dddd [kl.] LT',
        lastDay: '[i g\xe5r kl.] LT',
        lastWeek: '[i] dddd[s kl.] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'om %s',
        past: '%s siden',
        s: 'f\xe5 sekunder',
        ss: '%d sekunder',
        m: 'et minut',
        mm: '%d minutter',
        h: 'en time',
        hh: '%d timer',
        d: 'en dag',
        dd: '%d dage',
        M: 'en m\xe5ned',
        MM: '%d m\xe5neder',
        y: 'et \xe5r',
        yy: '%d \xe5r',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('de-at', {
      months:
        'J\xe4nner_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
          '_'
        ),
      monthsShort: 'J\xe4n._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
      weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
      weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY HH:mm',
        LLLL: 'dddd, D. MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]',
      },
      relativeTime: {
        future: 'in %s',
        past: 'vor %s',
        s: 'ein paar Sekunden',
        ss: '%d Sekunden',
        m: Es,
        mm: '%d Minuten',
        h: Es,
        hh: '%d Stunden',
        d: Es,
        dd: Es,
        w: Es,
        ww: '%d Wochen',
        M: Es,
        MM: Es,
        y: Es,
        yy: Es,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('de-ch', {
      months:
        'Januar_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
          '_'
        ),
      monthsShort: 'Jan._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
      weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
      weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY HH:mm',
        LLLL: 'dddd, D. MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]',
      },
      relativeTime: {
        future: 'in %s',
        past: 'vor %s',
        s: 'ein paar Sekunden',
        ss: '%d Sekunden',
        m: Fs,
        mm: '%d Minuten',
        h: Fs,
        hh: '%d Stunden',
        d: Fs,
        dd: Fs,
        w: Fs,
        ww: '%d Wochen',
        M: Fs,
        MM: Fs,
        y: Fs,
        yy: Fs,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('de', {
      months:
        'Januar_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
          '_'
        ),
      monthsShort: 'Jan._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
      weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
      weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY HH:mm',
        LLLL: 'dddd, D. MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]',
      },
      relativeTime: {
        future: 'in %s',
        past: 'vor %s',
        s: 'ein paar Sekunden',
        ss: '%d Sekunden',
        m: zs,
        mm: '%d Minuten',
        h: zs,
        hh: '%d Stunden',
        d: zs,
        dd: zs,
        w: zs,
        ww: '%d Wochen',
        M: zs,
        MM: zs,
        y: zs,
        yy: zs,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    });
  var Ns = [
      '\u0796\u07ac\u0782\u07aa\u0787\u07a6\u0783\u07a9',
      '\u078a\u07ac\u0784\u07b0\u0783\u07aa\u0787\u07a6\u0783\u07a9',
      '\u0789\u07a7\u0783\u07a8\u0797\u07aa',
      '\u0787\u07ad\u0795\u07b0\u0783\u07a9\u078d\u07aa',
      '\u0789\u07ad',
      '\u0796\u07ab\u0782\u07b0',
      '\u0796\u07aa\u078d\u07a6\u0787\u07a8',
      '\u0787\u07af\u078e\u07a6\u0790\u07b0\u0793\u07aa',
      '\u0790\u07ac\u0795\u07b0\u0793\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa',
      '\u0787\u07ae\u0786\u07b0\u0793\u07af\u0784\u07a6\u0783\u07aa',
      '\u0782\u07ae\u0788\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa',
      '\u0791\u07a8\u0790\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa',
    ],
    Js = [
      '\u0787\u07a7\u078b\u07a8\u0787\u07b0\u078c\u07a6',
      '\u0780\u07af\u0789\u07a6',
      '\u0787\u07a6\u0782\u07b0\u078e\u07a7\u0783\u07a6',
      '\u0784\u07aa\u078b\u07a6',
      '\u0784\u07aa\u0783\u07a7\u0790\u07b0\u078a\u07a6\u078c\u07a8',
      '\u0780\u07aa\u0786\u07aa\u0783\u07aa',
      '\u0780\u07ae\u0782\u07a8\u0780\u07a8\u0783\u07aa',
    ];
  M.defineLocale('dv', {
    months: Ns,
    monthsShort: Ns,
    weekdays: Js,
    weekdaysShort: Js,
    weekdaysMin:
      '\u0787\u07a7\u078b\u07a8_\u0780\u07af\u0789\u07a6_\u0787\u07a6\u0782\u07b0_\u0784\u07aa\u078b\u07a6_\u0784\u07aa\u0783\u07a7_\u0780\u07aa\u0786\u07aa_\u0780\u07ae\u0782\u07a8'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'D/M/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    meridiemParse: /\u0789\u0786|\u0789\u078a/,
    isPM: function (e) {
      return '\u0789\u078a' === e;
    },
    meridiem: function (e, a, t) {
      return e < 12 ? '\u0789\u0786' : '\u0789\u078a';
    },
    calendar: {
      sameDay: '[\u0789\u07a8\u0787\u07a6\u078b\u07aa] LT',
      nextDay: '[\u0789\u07a7\u078b\u07a6\u0789\u07a7] LT',
      nextWeek: 'dddd LT',
      lastDay: '[\u0787\u07a8\u0787\u07b0\u0794\u07ac] LT',
      lastWeek: '[\u078a\u07a7\u0787\u07a8\u078c\u07aa\u0788\u07a8] dddd LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u078c\u07ac\u0783\u07ad\u078e\u07a6\u0787\u07a8 %s',
      past: '\u0786\u07aa\u0783\u07a8\u0782\u07b0 %s',
      s: '\u0790\u07a8\u0786\u07aa\u0782\u07b0\u078c\u07aa\u0786\u07ae\u0785\u07ac\u0787\u07b0',
      ss: 'd% \u0790\u07a8\u0786\u07aa\u0782\u07b0\u078c\u07aa',
      m: '\u0789\u07a8\u0782\u07a8\u0793\u07ac\u0787\u07b0',
      mm: '\u0789\u07a8\u0782\u07a8\u0793\u07aa %d',
      h: '\u078e\u07a6\u0791\u07a8\u0787\u07a8\u0783\u07ac\u0787\u07b0',
      hh: '\u078e\u07a6\u0791\u07a8\u0787\u07a8\u0783\u07aa %d',
      d: '\u078b\u07aa\u0788\u07a6\u0780\u07ac\u0787\u07b0',
      dd: '\u078b\u07aa\u0788\u07a6\u0790\u07b0 %d',
      M: '\u0789\u07a6\u0780\u07ac\u0787\u07b0',
      MM: '\u0789\u07a6\u0790\u07b0 %d',
      y: '\u0787\u07a6\u0780\u07a6\u0783\u07ac\u0787\u07b0',
      yy: '\u0787\u07a6\u0780\u07a6\u0783\u07aa %d',
    },
    preparse: function (e) {
      return e.replace(/\u060c/g, ',');
    },
    postformat: function (e) {
      return e.replace(/,/g, '\u060c');
    },
    week: { dow: 7, doy: 12 },
  }),
    M.defineLocale('el', {
      monthsNominativeEl:
        '\u0399\u03b1\u03bd\u03bf\u03c5\u03ac\u03c1\u03b9\u03bf\u03c2_\u03a6\u03b5\u03b2\u03c1\u03bf\u03c5\u03ac\u03c1\u03b9\u03bf\u03c2_\u039c\u03ac\u03c1\u03c4\u03b9\u03bf\u03c2_\u0391\u03c0\u03c1\u03af\u03bb\u03b9\u03bf\u03c2_\u039c\u03ac\u03b9\u03bf\u03c2_\u0399\u03bf\u03cd\u03bd\u03b9\u03bf\u03c2_\u0399\u03bf\u03cd\u03bb\u03b9\u03bf\u03c2_\u0391\u03cd\u03b3\u03bf\u03c5\u03c3\u03c4\u03bf\u03c2_\u03a3\u03b5\u03c0\u03c4\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2_\u039f\u03ba\u03c4\u03ce\u03b2\u03c1\u03b9\u03bf\u03c2_\u039d\u03bf\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2_\u0394\u03b5\u03ba\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2'.split(
          '_'
        ),
      monthsGenitiveEl:
        '\u0399\u03b1\u03bd\u03bf\u03c5\u03b1\u03c1\u03af\u03bf\u03c5_\u03a6\u03b5\u03b2\u03c1\u03bf\u03c5\u03b1\u03c1\u03af\u03bf\u03c5_\u039c\u03b1\u03c1\u03c4\u03af\u03bf\u03c5_\u0391\u03c0\u03c1\u03b9\u03bb\u03af\u03bf\u03c5_\u039c\u03b1\u0390\u03bf\u03c5_\u0399\u03bf\u03c5\u03bd\u03af\u03bf\u03c5_\u0399\u03bf\u03c5\u03bb\u03af\u03bf\u03c5_\u0391\u03c5\u03b3\u03bf\u03cd\u03c3\u03c4\u03bf\u03c5_\u03a3\u03b5\u03c0\u03c4\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5_\u039f\u03ba\u03c4\u03c9\u03b2\u03c1\u03af\u03bf\u03c5_\u039d\u03bf\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5_\u0394\u03b5\u03ba\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5'.split(
          '_'
        ),
      months: function (e, a) {
        return e
          ? 'string' == typeof a && /D/.test(a.substring(0, a.indexOf('MMMM')))
            ? this._monthsGenitiveEl[e.month()]
            : this._monthsNominativeEl[e.month()]
          : this._monthsNominativeEl;
      },
      monthsShort:
        '\u0399\u03b1\u03bd_\u03a6\u03b5\u03b2_\u039c\u03b1\u03c1_\u0391\u03c0\u03c1_\u039c\u03b1\u03ca_\u0399\u03bf\u03c5\u03bd_\u0399\u03bf\u03c5\u03bb_\u0391\u03c5\u03b3_\u03a3\u03b5\u03c0_\u039f\u03ba\u03c4_\u039d\u03bf\u03b5_\u0394\u03b5\u03ba'.split(
          '_'
        ),
      weekdays:
        '\u039a\u03c5\u03c1\u03b9\u03b1\u03ba\u03ae_\u0394\u03b5\u03c5\u03c4\u03ad\u03c1\u03b1_\u03a4\u03c1\u03af\u03c4\u03b7_\u03a4\u03b5\u03c4\u03ac\u03c1\u03c4\u03b7_\u03a0\u03ad\u03bc\u03c0\u03c4\u03b7_\u03a0\u03b1\u03c1\u03b1\u03c3\u03ba\u03b5\u03c5\u03ae_\u03a3\u03ac\u03b2\u03b2\u03b1\u03c4\u03bf'.split(
          '_'
        ),
      weekdaysShort:
        '\u039a\u03c5\u03c1_\u0394\u03b5\u03c5_\u03a4\u03c1\u03b9_\u03a4\u03b5\u03c4_\u03a0\u03b5\u03bc_\u03a0\u03b1\u03c1_\u03a3\u03b1\u03b2'.split(
          '_'
        ),
      weekdaysMin:
        '\u039a\u03c5_\u0394\u03b5_\u03a4\u03c1_\u03a4\u03b5_\u03a0\u03b5_\u03a0\u03b1_\u03a3\u03b1'.split(
          '_'
        ),
      meridiem: function (e, a, t) {
        return 11 < e ? (t ? '\u03bc\u03bc' : '\u039c\u039c') : t ? '\u03c0\u03bc' : '\u03a0\u039c';
      },
      isPM: function (e) {
        return '\u03bc' === (e + '').toLowerCase()[0];
      },
      meridiemParse: /[\u03a0\u039c]\.?\u039c?\.?/i,
      longDateFormat: {
        LT: 'h:mm A',
        LTS: 'h:mm:ss A',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY h:mm A',
        LLLL: 'dddd, D MMMM YYYY h:mm A',
      },
      calendarEl: {
        sameDay: '[\u03a3\u03ae\u03bc\u03b5\u03c1\u03b1 {}] LT',
        nextDay: '[\u0391\u03cd\u03c1\u03b9\u03bf {}] LT',
        nextWeek: 'dddd [{}] LT',
        lastDay: '[\u03a7\u03b8\u03b5\u03c2 {}] LT',
        lastWeek: function () {
          switch (this.day()) {
            case 6:
              return '[\u03c4\u03bf \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03bf] dddd [{}] LT';
            default:
              return '[\u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03b7] dddd [{}] LT';
          }
        },
        sameElse: 'L',
      },
      calendar: function (e, a) {
        var t,
          s = this._calendarEl[e],
          n = a && a.hours();
        return (
          (t = s),
          (('undefined' != typeof Function && t instanceof Function) ||
            '[object Function]' === Object.prototype.toString.call(t)) &&
            (s = s.apply(a)),
          s.replace('{}', n % 12 == 1 ? '\u03c3\u03c4\u03b7' : '\u03c3\u03c4\u03b9\u03c2')
        );
      },
      relativeTime: {
        future: '\u03c3\u03b5 %s',
        past: '%s \u03c0\u03c1\u03b9\u03bd',
        s: '\u03bb\u03af\u03b3\u03b1 \u03b4\u03b5\u03c5\u03c4\u03b5\u03c1\u03cc\u03bb\u03b5\u03c0\u03c4\u03b1',
        ss: '%d \u03b4\u03b5\u03c5\u03c4\u03b5\u03c1\u03cc\u03bb\u03b5\u03c0\u03c4\u03b1',
        m: '\u03ad\u03bd\u03b1 \u03bb\u03b5\u03c0\u03c4\u03cc',
        mm: '%d \u03bb\u03b5\u03c0\u03c4\u03ac',
        h: '\u03bc\u03af\u03b1 \u03ce\u03c1\u03b1',
        hh: '%d \u03ce\u03c1\u03b5\u03c2',
        d: '\u03bc\u03af\u03b1 \u03bc\u03ad\u03c1\u03b1',
        dd: '%d \u03bc\u03ad\u03c1\u03b5\u03c2',
        M: '\u03ad\u03bd\u03b1\u03c2 \u03bc\u03ae\u03bd\u03b1\u03c2',
        MM: '%d \u03bc\u03ae\u03bd\u03b5\u03c2',
        y: '\u03ad\u03bd\u03b1\u03c2 \u03c7\u03c1\u03cc\u03bd\u03bf\u03c2',
        yy: '%d \u03c7\u03c1\u03cc\u03bd\u03b9\u03b1',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\u03b7/,
      ordinal: '%d\u03b7',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('en-au', {
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      longDateFormat: {
        LT: 'h:mm A',
        LTS: 'h:mm:ss A',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY h:mm A',
        LLLL: 'dddd, D MMMM YYYY h:mm A',
      },
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
      week: { dow: 0, doy: 4 },
    }),
    M.defineLocale('en-ca', {
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      longDateFormat: {
        LT: 'h:mm A',
        LTS: 'h:mm:ss A',
        L: 'YYYY-MM-DD',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
      },
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
    }),
    M.defineLocale('en-gb', {
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('en-ie', {
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('en-il', {
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
    }),
    M.defineLocale('en-in', {
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      longDateFormat: {
        LT: 'h:mm A',
        LTS: 'h:mm:ss A',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY h:mm A',
        LLLL: 'dddd, D MMMM YYYY h:mm A',
      },
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
      week: { dow: 0, doy: 6 },
    }),
    M.defineLocale('en-nz', {
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      longDateFormat: {
        LT: 'h:mm A',
        LTS: 'h:mm:ss A',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY h:mm A',
        LLLL: 'dddd, D MMMM YYYY h:mm A',
      },
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('en-sg', {
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('eo', {
      months:
        'januaro_februaro_marto_aprilo_majo_junio_julio_a\u016dgusto_septembro_oktobro_novembro_decembro'.split(
          '_'
        ),
      monthsShort: 'jan_feb_mart_apr_maj_jun_jul_a\u016dg_sept_okt_nov_dec'.split('_'),
      weekdays: 'diman\u0109o_lundo_mardo_merkredo_\u0135a\u016ddo_vendredo_sabato'.split('_'),
      weekdaysShort: 'dim_lun_mard_merk_\u0135a\u016d_ven_sab'.split('_'),
      weekdaysMin: 'di_lu_ma_me_\u0135a_ve_sa'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY-MM-DD',
        LL: '[la] D[-an de] MMMM, YYYY',
        LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
        LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
        llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm',
      },
      meridiemParse: /[ap]\.t\.m/i,
      isPM: function (e) {
        return 'p' === e.charAt(0).toLowerCase();
      },
      meridiem: function (e, a, t) {
        return 11 < e ? (t ? 'p.t.m.' : 'P.T.M.') : t ? 'a.t.m.' : 'A.T.M.';
      },
      calendar: {
        sameDay: '[Hodia\u016d je] LT',
        nextDay: '[Morga\u016d je] LT',
        nextWeek: 'dddd[n je] LT',
        lastDay: '[Hiera\u016d je] LT',
        lastWeek: '[pasintan] dddd[n je] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'post %s',
        past: 'anta\u016d %s',
        s: 'kelkaj sekundoj',
        ss: '%d sekundoj',
        m: 'unu minuto',
        mm: '%d minutoj',
        h: 'unu horo',
        hh: '%d horoj',
        d: 'unu tago',
        dd: '%d tagoj',
        M: 'unu monato',
        MM: '%d monatoj',
        y: 'unu jaro',
        yy: '%d jaroj',
      },
      dayOfMonthOrdinalParse: /\d{1,2}a/,
      ordinal: '%da',
      week: { dow: 1, doy: 7 },
    });
  var Rs = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
    Cs = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
    Is = [
      /^ene/i,
      /^feb/i,
      /^mar/i,
      /^abr/i,
      /^may/i,
      /^jun/i,
      /^jul/i,
      /^ago/i,
      /^sep/i,
      /^oct/i,
      /^nov/i,
      /^dic/i,
    ],
    Us =
      /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
  M.defineLocale('es-do', {
    months:
      'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
        '_'
      ),
    monthsShort: function (e, a) {
      return e ? (/-MMM-/.test(a) ? Cs[e.month()] : Rs[e.month()]) : Rs;
    },
    monthsRegex: Us,
    monthsShortRegex: Us,
    monthsStrictRegex:
      /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
    monthsShortStrictRegex:
      /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
    monthsParse: Is,
    longMonthsParse: Is,
    shortMonthsParse: Is,
    weekdays: 'domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado'.split('_'),
    weekdaysShort: 'dom._lun._mar._mi\xe9._jue._vie._s\xe1b.'.split('_'),
    weekdaysMin: 'do_lu_ma_mi_ju_vi_s\xe1'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'h:mm A',
      LTS: 'h:mm:ss A',
      L: 'DD/MM/YYYY',
      LL: 'D [de] MMMM [de] YYYY',
      LLL: 'D [de] MMMM [de] YYYY h:mm A',
      LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
    },
    calendar: {
      sameDay: function () {
        return '[hoy a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      nextDay: function () {
        return '[ma\xf1ana a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      nextWeek: function () {
        return 'dddd [a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      lastDay: function () {
        return '[ayer a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      lastWeek: function () {
        return '[el] dddd [pasado a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'en %s',
      past: 'hace %s',
      s: 'unos segundos',
      ss: '%d segundos',
      m: 'un minuto',
      mm: '%d minutos',
      h: 'una hora',
      hh: '%d horas',
      d: 'un d\xeda',
      dd: '%d d\xedas',
      w: 'una semana',
      ww: '%d semanas',
      M: 'un mes',
      MM: '%d meses',
      y: 'un a\xf1o',
      yy: '%d a\xf1os',
    },
    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
    ordinal: '%d\xba',
    week: { dow: 1, doy: 4 },
  });
  var Gs = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
    Vs = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
    Bs = [
      /^ene/i,
      /^feb/i,
      /^mar/i,
      /^abr/i,
      /^may/i,
      /^jun/i,
      /^jul/i,
      /^ago/i,
      /^sep/i,
      /^oct/i,
      /^nov/i,
      /^dic/i,
    ],
    Ks =
      /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
  M.defineLocale('es-mx', {
    months:
      'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
        '_'
      ),
    monthsShort: function (e, a) {
      return e ? (/-MMM-/.test(a) ? Vs[e.month()] : Gs[e.month()]) : Gs;
    },
    monthsRegex: Ks,
    monthsShortRegex: Ks,
    monthsStrictRegex:
      /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
    monthsShortStrictRegex:
      /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
    monthsParse: Bs,
    longMonthsParse: Bs,
    shortMonthsParse: Bs,
    weekdays: 'domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado'.split('_'),
    weekdaysShort: 'dom._lun._mar._mi\xe9._jue._vie._s\xe1b.'.split('_'),
    weekdaysMin: 'do_lu_ma_mi_ju_vi_s\xe1'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D [de] MMMM [de] YYYY',
      LLL: 'D [de] MMMM [de] YYYY H:mm',
      LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
    },
    calendar: {
      sameDay: function () {
        return '[hoy a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      nextDay: function () {
        return '[ma\xf1ana a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      nextWeek: function () {
        return 'dddd [a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      lastDay: function () {
        return '[ayer a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      lastWeek: function () {
        return '[el] dddd [pasado a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'en %s',
      past: 'hace %s',
      s: 'unos segundos',
      ss: '%d segundos',
      m: 'un minuto',
      mm: '%d minutos',
      h: 'una hora',
      hh: '%d horas',
      d: 'un d\xeda',
      dd: '%d d\xedas',
      w: 'una semana',
      ww: '%d semanas',
      M: 'un mes',
      MM: '%d meses',
      y: 'un a\xf1o',
      yy: '%d a\xf1os',
    },
    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
    ordinal: '%d\xba',
    week: { dow: 0, doy: 4 },
    invalidDate: 'Fecha inv\xe1lida',
  });
  var qs = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
    Zs = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
    $s = [
      /^ene/i,
      /^feb/i,
      /^mar/i,
      /^abr/i,
      /^may/i,
      /^jun/i,
      /^jul/i,
      /^ago/i,
      /^sep/i,
      /^oct/i,
      /^nov/i,
      /^dic/i,
    ],
    Qs =
      /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
  M.defineLocale('es-us', {
    months:
      'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
        '_'
      ),
    monthsShort: function (e, a) {
      return e ? (/-MMM-/.test(a) ? Zs[e.month()] : qs[e.month()]) : qs;
    },
    monthsRegex: Qs,
    monthsShortRegex: Qs,
    monthsStrictRegex:
      /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
    monthsShortStrictRegex:
      /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
    monthsParse: $s,
    longMonthsParse: $s,
    shortMonthsParse: $s,
    weekdays: 'domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado'.split('_'),
    weekdaysShort: 'dom._lun._mar._mi\xe9._jue._vie._s\xe1b.'.split('_'),
    weekdaysMin: 'do_lu_ma_mi_ju_vi_s\xe1'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'h:mm A',
      LTS: 'h:mm:ss A',
      L: 'MM/DD/YYYY',
      LL: 'D [de] MMMM [de] YYYY',
      LLL: 'D [de] MMMM [de] YYYY h:mm A',
      LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
    },
    calendar: {
      sameDay: function () {
        return '[hoy a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      nextDay: function () {
        return '[ma\xf1ana a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      nextWeek: function () {
        return 'dddd [a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      lastDay: function () {
        return '[ayer a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      lastWeek: function () {
        return '[el] dddd [pasado a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'en %s',
      past: 'hace %s',
      s: 'unos segundos',
      ss: '%d segundos',
      m: 'un minuto',
      mm: '%d minutos',
      h: 'una hora',
      hh: '%d horas',
      d: 'un d\xeda',
      dd: '%d d\xedas',
      w: 'una semana',
      ww: '%d semanas',
      M: 'un mes',
      MM: '%d meses',
      y: 'un a\xf1o',
      yy: '%d a\xf1os',
    },
    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
    ordinal: '%d\xba',
    week: { dow: 0, doy: 6 },
  });
  var Xs = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
    en = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
    an = [
      /^ene/i,
      /^feb/i,
      /^mar/i,
      /^abr/i,
      /^may/i,
      /^jun/i,
      /^jul/i,
      /^ago/i,
      /^sep/i,
      /^oct/i,
      /^nov/i,
      /^dic/i,
    ],
    tn =
      /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
  function sn(e, a, t, s) {
    var n = {
      s: ['m\xf5ne sekundi', 'm\xf5ni sekund', 'paar sekundit'],
      ss: [e + 'sekundi', e + 'sekundit'],
      m: ['\xfche minuti', '\xfcks minut'],
      mm: [e + ' minuti', e + ' minutit'],
      h: ['\xfche tunni', 'tund aega', '\xfcks tund'],
      hh: [e + ' tunni', e + ' tundi'],
      d: ['\xfche p\xe4eva', '\xfcks p\xe4ev'],
      M: ['kuu aja', 'kuu aega', '\xfcks kuu'],
      MM: [e + ' kuu', e + ' kuud'],
      y: ['\xfche aasta', 'aasta', '\xfcks aasta'],
      yy: [e + ' aasta', e + ' aastat'],
    };
    return a ? (n[t][2] ? n[t][2] : n[t][1]) : s ? n[t][0] : n[t][1];
  }
  M.defineLocale('es', {
    months:
      'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
        '_'
      ),
    monthsShort: function (e, a) {
      return e ? (/-MMM-/.test(a) ? en[e.month()] : Xs[e.month()]) : Xs;
    },
    monthsRegex: tn,
    monthsShortRegex: tn,
    monthsStrictRegex:
      /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
    monthsShortStrictRegex:
      /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
    monthsParse: an,
    longMonthsParse: an,
    shortMonthsParse: an,
    weekdays: 'domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado'.split('_'),
    weekdaysShort: 'dom._lun._mar._mi\xe9._jue._vie._s\xe1b.'.split('_'),
    weekdaysMin: 'do_lu_ma_mi_ju_vi_s\xe1'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D [de] MMMM [de] YYYY',
      LLL: 'D [de] MMMM [de] YYYY H:mm',
      LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
    },
    calendar: {
      sameDay: function () {
        return '[hoy a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      nextDay: function () {
        return '[ma\xf1ana a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      nextWeek: function () {
        return 'dddd [a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      lastDay: function () {
        return '[ayer a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      lastWeek: function () {
        return '[el] dddd [pasado a la' + (1 !== this.hours() ? 's' : '') + '] LT';
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'en %s',
      past: 'hace %s',
      s: 'unos segundos',
      ss: '%d segundos',
      m: 'un minuto',
      mm: '%d minutos',
      h: 'una hora',
      hh: '%d horas',
      d: 'un d\xeda',
      dd: '%d d\xedas',
      w: 'una semana',
      ww: '%d semanas',
      M: 'un mes',
      MM: '%d meses',
      y: 'un a\xf1o',
      yy: '%d a\xf1os',
    },
    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
    ordinal: '%d\xba',
    week: { dow: 1, doy: 4 },
    invalidDate: 'Fecha inv\xe1lida',
  }),
    M.defineLocale('et', {
      months:
        'jaanuar_veebruar_m\xe4rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
          '_'
        ),
      monthsShort: 'jaan_veebr_m\xe4rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
      weekdays:
        'p\xfchap\xe4ev_esmasp\xe4ev_teisip\xe4ev_kolmap\xe4ev_neljap\xe4ev_reede_laup\xe4ev'.split(
          '_'
        ),
      weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
      weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm',
      },
      calendar: {
        sameDay: '[T\xe4na,] LT',
        nextDay: '[Homme,] LT',
        nextWeek: '[J\xe4rgmine] dddd LT',
        lastDay: '[Eile,] LT',
        lastWeek: '[Eelmine] dddd LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s p\xe4rast',
        past: '%s tagasi',
        s: sn,
        ss: sn,
        m: sn,
        mm: sn,
        h: sn,
        hh: sn,
        d: sn,
        dd: '%d p\xe4eva',
        M: sn,
        MM: sn,
        y: sn,
        yy: sn,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('eu', {
      months:
        'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
          '_'
        ),
      monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
      weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
      weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY-MM-DD',
        LL: 'YYYY[ko] MMMM[ren] D[a]',
        LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
        LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
        l: 'YYYY-M-D',
        ll: 'YYYY[ko] MMM D[a]',
        lll: 'YYYY[ko] MMM D[a] HH:mm',
        llll: 'ddd, YYYY[ko] MMM D[a] HH:mm',
      },
      calendar: {
        sameDay: '[gaur] LT[etan]',
        nextDay: '[bihar] LT[etan]',
        nextWeek: 'dddd LT[etan]',
        lastDay: '[atzo] LT[etan]',
        lastWeek: '[aurreko] dddd LT[etan]',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s barru',
        past: 'duela %s',
        s: 'segundo batzuk',
        ss: '%d segundo',
        m: 'minutu bat',
        mm: '%d minutu',
        h: 'ordu bat',
        hh: '%d ordu',
        d: 'egun bat',
        dd: '%d egun',
        M: 'hilabete bat',
        MM: '%d hilabete',
        y: 'urte bat',
        yy: '%d urte',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 7 },
    });
  var nn = {
      1: '\u06f1',
      2: '\u06f2',
      3: '\u06f3',
      4: '\u06f4',
      5: '\u06f5',
      6: '\u06f6',
      7: '\u06f7',
      8: '\u06f8',
      9: '\u06f9',
      0: '\u06f0',
    },
    rn = {
      '\u06f1': '1',
      '\u06f2': '2',
      '\u06f3': '3',
      '\u06f4': '4',
      '\u06f5': '5',
      '\u06f6': '6',
      '\u06f7': '7',
      '\u06f8': '8',
      '\u06f9': '9',
      '\u06f0': '0',
    };
  M.defineLocale('fa', {
    months:
      '\u0698\u0627\u0646\u0648\u06cc\u0647_\u0641\u0648\u0631\u06cc\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06cc\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06cc\u0647_\u0627\u0648\u062a_\u0633\u067e\u062a\u0627\u0645\u0628\u0631_\u0627\u06a9\u062a\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062f\u0633\u0627\u0645\u0628\u0631'.split(
        '_'
      ),
    monthsShort:
      '\u0698\u0627\u0646\u0648\u06cc\u0647_\u0641\u0648\u0631\u06cc\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06cc\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06cc\u0647_\u0627\u0648\u062a_\u0633\u067e\u062a\u0627\u0645\u0628\u0631_\u0627\u06a9\u062a\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062f\u0633\u0627\u0645\u0628\u0631'.split(
        '_'
      ),
    weekdays:
      '\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647_\u062f\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200c\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647_\u062c\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split(
        '_'
      ),
    weekdaysShort:
      '\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647_\u062f\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200c\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647_\u062c\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split(
        '_'
      ),
    weekdaysMin: '\u06cc_\u062f_\u0633_\u0686_\u067e_\u062c_\u0634'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    meridiemParse:
      /\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631|\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/,
    isPM: function (e) {
      return /\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/.test(e);
    },
    meridiem: function (e, a, t) {
      return e < 12
        ? '\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631'
        : '\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631';
    },
    calendar: {
      sameDay: '[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062a] LT',
      nextDay: '[\u0641\u0631\u062f\u0627 \u0633\u0627\u0639\u062a] LT',
      nextWeek: 'dddd [\u0633\u0627\u0639\u062a] LT',
      lastDay: '[\u062f\u06cc\u0631\u0648\u0632 \u0633\u0627\u0639\u062a] LT',
      lastWeek: 'dddd [\u067e\u06cc\u0634] [\u0633\u0627\u0639\u062a] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u062f\u0631 %s',
      past: '%s \u067e\u06cc\u0634',
      s: '\u0686\u0646\u062f \u062b\u0627\u0646\u06cc\u0647',
      ss: '%d \u062b\u0627\u0646\u06cc\u0647',
      m: '\u06cc\u06a9 \u062f\u0642\u06cc\u0642\u0647',
      mm: '%d \u062f\u0642\u06cc\u0642\u0647',
      h: '\u06cc\u06a9 \u0633\u0627\u0639\u062a',
      hh: '%d \u0633\u0627\u0639\u062a',
      d: '\u06cc\u06a9 \u0631\u0648\u0632',
      dd: '%d \u0631\u0648\u0632',
      M: '\u06cc\u06a9 \u0645\u0627\u0647',
      MM: '%d \u0645\u0627\u0647',
      y: '\u06cc\u06a9 \u0633\u0627\u0644',
      yy: '%d \u0633\u0627\u0644',
    },
    preparse: function (e) {
      return e
        .replace(/[\u06f0-\u06f9]/g, function (e) {
          return rn[e];
        })
        .replace(/\u060c/g, ',');
    },
    postformat: function (e) {
      return e
        .replace(/\d/g, function (e) {
          return nn[e];
        })
        .replace(/,/g, '\u060c');
    },
    dayOfMonthOrdinalParse: /\d{1,2}\u0645/,
    ordinal: '%d\u0645',
    week: { dow: 6, doy: 12 },
  });
  var dn = 'nolla yksi kaksi kolme nelj\xe4 viisi kuusi seitsem\xe4n kahdeksan yhdeks\xe4n'.split(
      ' '
    ),
    _n = [
      'nolla',
      'yhden',
      'kahden',
      'kolmen',
      'nelj\xe4n',
      'viiden',
      'kuuden',
      dn[7],
      dn[8],
      dn[9],
    ];
  function on(e, a, t, s) {
    var n,
      r,
      d = '';
    switch (t) {
      case 's':
        return s ? 'muutaman sekunnin' : 'muutama sekunti';
      case 'ss':
        d = s ? 'sekunnin' : 'sekuntia';
        break;
      case 'm':
        return s ? 'minuutin' : 'minuutti';
      case 'mm':
        d = s ? 'minuutin' : 'minuuttia';
        break;
      case 'h':
        return s ? 'tunnin' : 'tunti';
      case 'hh':
        d = s ? 'tunnin' : 'tuntia';
        break;
      case 'd':
        return s ? 'p\xe4iv\xe4n' : 'p\xe4iv\xe4';
      case 'dd':
        d = s ? 'p\xe4iv\xe4n' : 'p\xe4iv\xe4\xe4';
        break;
      case 'M':
        return s ? 'kuukauden' : 'kuukausi';
      case 'MM':
        d = s ? 'kuukauden' : 'kuukautta';
        break;
      case 'y':
        return s ? 'vuoden' : 'vuosi';
      case 'yy':
        d = s ? 'vuoden' : 'vuotta';
        break;
    }
    return (r = s), (d = ((n = e) < 10 ? (r ? _n[n] : dn[n]) : n) + ' ' + d);
  }
  M.defineLocale('fi', {
    months:
      'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kes\xe4kuu_hein\xe4kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
        '_'
      ),
    monthsShort: 'tammi_helmi_maalis_huhti_touko_kes\xe4_hein\xe4_elo_syys_loka_marras_joulu'.split(
      '_'
    ),
    weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
    weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
    weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
    longDateFormat: {
      LT: 'HH.mm',
      LTS: 'HH.mm.ss',
      L: 'DD.MM.YYYY',
      LL: 'Do MMMM[ta] YYYY',
      LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
      LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
      l: 'D.M.YYYY',
      ll: 'Do MMM YYYY',
      lll: 'Do MMM YYYY, [klo] HH.mm',
      llll: 'ddd, Do MMM YYYY, [klo] HH.mm',
    },
    calendar: {
      sameDay: '[t\xe4n\xe4\xe4n] [klo] LT',
      nextDay: '[huomenna] [klo] LT',
      nextWeek: 'dddd [klo] LT',
      lastDay: '[eilen] [klo] LT',
      lastWeek: '[viime] dddd[na] [klo] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s p\xe4\xe4st\xe4',
      past: '%s sitten',
      s: on,
      ss: on,
      m: on,
      mm: on,
      h: on,
      hh: on,
      d: on,
      dd: on,
      M: on,
      MM: on,
      y: on,
      yy: on,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('fil', {
      months:
        'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
          '_'
        ),
      monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
      weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
      weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
      weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'MM/D/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY HH:mm',
        LLLL: 'dddd, MMMM DD, YYYY HH:mm',
      },
      calendar: {
        sameDay: 'LT [ngayong araw]',
        nextDay: '[Bukas ng] LT',
        nextWeek: 'LT [sa susunod na] dddd',
        lastDay: 'LT [kahapon]',
        lastWeek: 'LT [noong nakaraang] dddd',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'sa loob ng %s',
        past: '%s ang nakalipas',
        s: 'ilang segundo',
        ss: '%d segundo',
        m: 'isang minuto',
        mm: '%d minuto',
        h: 'isang oras',
        hh: '%d oras',
        d: 'isang araw',
        dd: '%d araw',
        M: 'isang buwan',
        MM: '%d buwan',
        y: 'isang taon',
        yy: '%d taon',
      },
      dayOfMonthOrdinalParse: /\d{1,2}/,
      ordinal: function (e) {
        return e;
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('fo', {
      months:
        'januar_februar_mars_apr\xedl_mai_juni_juli_august_september_oktober_november_desember'.split(
          '_'
        ),
      monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
      weekdays:
        'sunnudagur_m\xe1nadagur_t\xfdsdagur_mikudagur_h\xf3sdagur_fr\xedggjadagur_leygardagur'.split(
          '_'
        ),
      weekdaysShort: 'sun_m\xe1n_t\xfds_mik_h\xf3s_fr\xed_ley'.split('_'),
      weekdaysMin: 'su_m\xe1_t\xfd_mi_h\xf3_fr_le'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D. MMMM, YYYY HH:mm',
      },
      calendar: {
        sameDay: '[\xcd dag kl.] LT',
        nextDay: '[\xcd morgin kl.] LT',
        nextWeek: 'dddd [kl.] LT',
        lastDay: '[\xcd gj\xe1r kl.] LT',
        lastWeek: '[s\xed\xf0stu] dddd [kl] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'um %s',
        past: '%s s\xed\xf0ani',
        s: 'f\xe1 sekund',
        ss: '%d sekundir',
        m: 'ein minuttur',
        mm: '%d minuttir',
        h: 'ein t\xedmi',
        hh: '%d t\xedmar',
        d: 'ein dagur',
        dd: '%d dagar',
        M: 'ein m\xe1na\xf0ur',
        MM: '%d m\xe1na\xf0ir',
        y: 'eitt \xe1r',
        yy: '%d \xe1r',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('fr-ca', {
      months:
        'janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre'.split(
          '_'
        ),
      monthsShort: 'janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.'.split(
        '_'
      ),
      monthsParseExact: !0,
      weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
      weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
      weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY-MM-DD',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Aujourd\u2019hui \xe0] LT',
        nextDay: '[Demain \xe0] LT',
        nextWeek: 'dddd [\xe0] LT',
        lastDay: '[Hier \xe0] LT',
        lastWeek: 'dddd [dernier \xe0] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'dans %s',
        past: 'il y a %s',
        s: 'quelques secondes',
        ss: '%d secondes',
        m: 'une minute',
        mm: '%d minutes',
        h: 'une heure',
        hh: '%d heures',
        d: 'un jour',
        dd: '%d jours',
        M: 'un mois',
        MM: '%d mois',
        y: 'un an',
        yy: '%d ans',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
      ordinal: function (e, a) {
        switch (a) {
          default:
          case 'M':
          case 'Q':
          case 'D':
          case 'DDD':
          case 'd':
            return e + (1 === e ? 'er' : 'e');
          case 'w':
          case 'W':
            return e + (1 === e ? 're' : 'e');
        }
      },
    }),
    M.defineLocale('fr-ch', {
      months:
        'janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre'.split(
          '_'
        ),
      monthsShort: 'janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.'.split(
        '_'
      ),
      monthsParseExact: !0,
      weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
      weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
      weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Aujourd\u2019hui \xe0] LT',
        nextDay: '[Demain \xe0] LT',
        nextWeek: 'dddd [\xe0] LT',
        lastDay: '[Hier \xe0] LT',
        lastWeek: 'dddd [dernier \xe0] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'dans %s',
        past: 'il y a %s',
        s: 'quelques secondes',
        ss: '%d secondes',
        m: 'une minute',
        mm: '%d minutes',
        h: 'une heure',
        hh: '%d heures',
        d: 'un jour',
        dd: '%d jours',
        M: 'un mois',
        MM: '%d mois',
        y: 'un an',
        yy: '%d ans',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
      ordinal: function (e, a) {
        switch (a) {
          default:
          case 'M':
          case 'Q':
          case 'D':
          case 'DDD':
          case 'd':
            return e + (1 === e ? 'er' : 'e');
          case 'w':
          case 'W':
            return e + (1 === e ? 're' : 'e');
        }
      },
      week: { dow: 1, doy: 4 },
    });
  var mn =
      /(janv\.?|f\xe9vr\.?|mars|avr\.?|mai|juin|juil\.?|ao\xfbt|sept\.?|oct\.?|nov\.?|d\xe9c\.?|janvier|f\xe9vrier|mars|avril|mai|juin|juillet|ao\xfbt|septembre|octobre|novembre|d\xe9cembre)/i,
    un = [
      /^janv/i,
      /^f\xe9vr/i,
      /^mars/i,
      /^avr/i,
      /^mai/i,
      /^juin/i,
      /^juil/i,
      /^ao\xfbt/i,
      /^sept/i,
      /^oct/i,
      /^nov/i,
      /^d\xe9c/i,
    ];
  M.defineLocale('fr', {
    months:
      'janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre'.split(
        '_'
      ),
    monthsShort: 'janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.'.split(
      '_'
    ),
    monthsRegex: mn,
    monthsShortRegex: mn,
    monthsStrictRegex:
      /^(janvier|f\xe9vrier|mars|avril|mai|juin|juillet|ao\xfbt|septembre|octobre|novembre|d\xe9cembre)/i,
    monthsShortStrictRegex:
      /(janv\.?|f\xe9vr\.?|mars|avr\.?|mai|juin|juil\.?|ao\xfbt|sept\.?|oct\.?|nov\.?|d\xe9c\.?)/i,
    monthsParse: un,
    longMonthsParse: un,
    shortMonthsParse: un,
    weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[Aujourd\u2019hui \xe0] LT',
      nextDay: '[Demain \xe0] LT',
      nextWeek: 'dddd [\xe0] LT',
      lastDay: '[Hier \xe0] LT',
      lastWeek: 'dddd [dernier \xe0] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'dans %s',
      past: 'il y a %s',
      s: 'quelques secondes',
      ss: '%d secondes',
      m: 'une minute',
      mm: '%d minutes',
      h: 'une heure',
      hh: '%d heures',
      d: 'un jour',
      dd: '%d jours',
      w: 'une semaine',
      ww: '%d semaines',
      M: 'un mois',
      MM: '%d mois',
      y: 'un an',
      yy: '%d ans',
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
    ordinal: function (e, a) {
      switch (a) {
        case 'D':
          return e + (1 === e ? 'er' : '');
        default:
        case 'M':
        case 'Q':
        case 'DDD':
        case 'd':
          return e + (1 === e ? 'er' : 'e');
        case 'w':
        case 'W':
          return e + (1 === e ? 're' : 'e');
      }
    },
    week: { dow: 1, doy: 4 },
  });
  var ln = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
    Mn = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
  M.defineLocale('fy', {
    months:
      'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
        '_'
      ),
    monthsShort: function (e, a) {
      return e ? (/-MMM-/.test(a) ? Mn[e.month()] : ln[e.month()]) : ln;
    },
    monthsParseExact: !0,
    weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
    weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
    weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD-MM-YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[hjoed om] LT',
      nextDay: '[moarn om] LT',
      nextWeek: 'dddd [om] LT',
      lastDay: '[juster om] LT',
      lastWeek: '[\xf4fr\xfbne] dddd [om] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'oer %s',
      past: '%s lyn',
      s: 'in pear sekonden',
      ss: '%d sekonden',
      m: 'ien min\xfat',
      mm: '%d minuten',
      h: 'ien oere',
      hh: '%d oeren',
      d: 'ien dei',
      dd: '%d dagen',
      M: 'ien moanne',
      MM: '%d moannen',
      y: 'ien jier',
      yy: '%d jierren',
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal: function (e) {
      return e + (1 === e || 8 === e || 20 <= e ? 'ste' : 'de');
    },
    week: { dow: 1, doy: 4 },
  });
  M.defineLocale('ga', {
    months: [
      'Ean\xe1ir',
      'Feabhra',
      'M\xe1rta',
      'Aibre\xe1n',
      'Bealtaine',
      'Meitheamh',
      'I\xfail',
      'L\xfanasa',
      'Me\xe1n F\xf3mhair',
      'Deireadh F\xf3mhair',
      'Samhain',
      'Nollaig',
    ],
    monthsShort: [
      'Ean',
      'Feabh',
      'M\xe1rt',
      'Aib',
      'Beal',
      'Meith',
      'I\xfail',
      'L\xfan',
      'M.F.',
      'D.F.',
      'Samh',
      'Noll',
    ],
    monthsParseExact: !0,
    weekdays: [
      'D\xe9 Domhnaigh',
      'D\xe9 Luain',
      'D\xe9 M\xe1irt',
      'D\xe9 C\xe9adaoin',
      'D\xe9ardaoin',
      'D\xe9 hAoine',
      'D\xe9 Sathairn',
    ],
    weekdaysShort: ['Domh', 'Luan', 'M\xe1irt', 'C\xe9ad', 'D\xe9ar', 'Aoine', 'Sath'],
    weekdaysMin: ['Do', 'Lu', 'M\xe1', 'C\xe9', 'D\xe9', 'A', 'Sa'],
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[Inniu ag] LT',
      nextDay: '[Am\xe1rach ag] LT',
      nextWeek: 'dddd [ag] LT',
      lastDay: '[Inn\xe9 ag] LT',
      lastWeek: 'dddd [seo caite] [ag] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'i %s',
      past: '%s \xf3 shin',
      s: 'c\xfapla soicind',
      ss: '%d soicind',
      m: 'n\xf3im\xe9ad',
      mm: '%d n\xf3im\xe9ad',
      h: 'uair an chloig',
      hh: '%d uair an chloig',
      d: 'l\xe1',
      dd: '%d l\xe1',
      M: 'm\xed',
      MM: '%d m\xedonna',
      y: 'bliain',
      yy: '%d bliain',
    },
    dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
    ordinal: function (e) {
      return e + (1 === e ? 'd' : e % 10 == 2 ? 'na' : 'mh');
    },
    week: { dow: 1, doy: 4 },
  });
  function hn(e, a, t, s) {
    var n = {
      s: [
        '\u0925\u094b\u0921\u092f\u093e \u0938\u0945\u0915\u0902\u0921\u093e\u0902\u0928\u0940',
        '\u0925\u094b\u0921\u0947 \u0938\u0945\u0915\u0902\u0921',
      ],
      ss: [
        e + ' \u0938\u0945\u0915\u0902\u0921\u093e\u0902\u0928\u0940',
        e + ' \u0938\u0945\u0915\u0902\u0921',
      ],
      m: [
        '\u090f\u0915\u093e \u092e\u093f\u0923\u091f\u093e\u0928',
        '\u090f\u0915 \u092e\u093f\u0928\u0942\u091f',
      ],
      mm: [
        e + ' \u092e\u093f\u0923\u091f\u093e\u0902\u0928\u0940',
        e + ' \u092e\u093f\u0923\u091f\u093e\u0902',
      ],
      h: ['\u090f\u0915\u093e \u0935\u0930\u093e\u0928', '\u090f\u0915 \u0935\u0930'],
      hh: [e + ' \u0935\u0930\u093e\u0902\u0928\u0940', e + ' \u0935\u0930\u093e\u0902'],
      d: ['\u090f\u0915\u093e \u0926\u093f\u0938\u093e\u0928', '\u090f\u0915 \u0926\u0940\u0938'],
      dd: [e + ' \u0926\u093f\u0938\u093e\u0902\u0928\u0940', e + ' \u0926\u0940\u0938'],
      M: [
        '\u090f\u0915\u093e \u092e\u094d\u0939\u092f\u0928\u094d\u092f\u093e\u0928',
        '\u090f\u0915 \u092e\u094d\u0939\u092f\u0928\u094b',
      ],
      MM: [
        e + ' \u092e\u094d\u0939\u092f\u0928\u094d\u092f\u093e\u0928\u0940',
        e + ' \u092e\u094d\u0939\u092f\u0928\u0947',
      ],
      y: [
        '\u090f\u0915\u093e \u0935\u0930\u094d\u0938\u093e\u0928',
        '\u090f\u0915 \u0935\u0930\u094d\u0938',
      ],
      yy: [
        e + ' \u0935\u0930\u094d\u0938\u093e\u0902\u0928\u0940',
        e + ' \u0935\u0930\u094d\u0938\u093e\u0902',
      ],
    };
    return s ? n[t][0] : n[t][1];
  }
  function cn(e, a, t, s) {
    var n = {
      s: ['thoddea sekondamni', 'thodde sekond'],
      ss: [e + ' sekondamni', e + ' sekond'],
      m: ['eka mintan', 'ek minut'],
      mm: [e + ' mintamni', e + ' mintam'],
      h: ['eka voran', 'ek vor'],
      hh: [e + ' voramni', e + ' voram'],
      d: ['eka disan', 'ek dis'],
      dd: [e + ' disamni', e + ' dis'],
      M: ['eka mhoinean', 'ek mhoino'],
      MM: [e + ' mhoineamni', e + ' mhoine'],
      y: ['eka vorsan', 'ek voros'],
      yy: [e + ' vorsamni', e + ' vorsam'],
    };
    return s ? n[t][0] : n[t][1];
  }
  M.defineLocale('gd', {
    months: [
      'Am Faoilleach',
      'An Gearran',
      'Am M\xe0rt',
      'An Giblean',
      'An C\xe8itean',
      'An t-\xd2gmhios',
      'An t-Iuchar',
      'An L\xf9nastal',
      'An t-Sultain',
      'An D\xe0mhair',
      'An t-Samhain',
      'An D\xf9bhlachd',
    ],
    monthsShort: [
      'Faoi',
      'Gear',
      'M\xe0rt',
      'Gibl',
      'C\xe8it',
      '\xd2gmh',
      'Iuch',
      'L\xf9n',
      'Sult',
      'D\xe0mh',
      'Samh',
      'D\xf9bh',
    ],
    monthsParseExact: !0,
    weekdays: [
      'Did\xf2mhnaich',
      'Diluain',
      'Dim\xe0irt',
      'Diciadain',
      'Diardaoin',
      'Dihaoine',
      'Disathairne',
    ],
    weekdaysShort: ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
    weekdaysMin: ['D\xf2', 'Lu', 'M\xe0', 'Ci', 'Ar', 'Ha', 'Sa'],
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[An-diugh aig] LT',
      nextDay: '[A-m\xe0ireach aig] LT',
      nextWeek: 'dddd [aig] LT',
      lastDay: '[An-d\xe8 aig] LT',
      lastWeek: 'dddd [seo chaidh] [aig] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'ann an %s',
      past: 'bho chionn %s',
      s: 'beagan diogan',
      ss: '%d diogan',
      m: 'mionaid',
      mm: '%d mionaidean',
      h: 'uair',
      hh: '%d uairean',
      d: 'latha',
      dd: '%d latha',
      M: 'm\xecos',
      MM: '%d m\xecosan',
      y: 'bliadhna',
      yy: '%d bliadhna',
    },
    dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
    ordinal: function (e) {
      return e + (1 === e ? 'd' : e % 10 == 2 ? 'na' : 'mh');
    },
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('gl', {
      months:
        'xaneiro_febreiro_marzo_abril_maio_xu\xf1o_xullo_agosto_setembro_outubro_novembro_decembro'.split(
          '_'
        ),
      monthsShort: 'xan._feb._mar._abr._mai._xu\xf1._xul._ago._set._out._nov._dec.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'domingo_luns_martes_m\xe9rcores_xoves_venres_s\xe1bado'.split('_'),
      weekdaysShort: 'dom._lun._mar._m\xe9r._xov._ven._s\xe1b.'.split('_'),
      weekdaysMin: 'do_lu_ma_m\xe9_xo_ve_s\xe1'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D [de] MMMM [de] YYYY',
        LLL: 'D [de] MMMM [de] YYYY H:mm',
        LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
      },
      calendar: {
        sameDay: function () {
          return '[hoxe ' + (1 !== this.hours() ? '\xe1s' : '\xe1') + '] LT';
        },
        nextDay: function () {
          return '[ma\xf1\xe1 ' + (1 !== this.hours() ? '\xe1s' : '\xe1') + '] LT';
        },
        nextWeek: function () {
          return 'dddd [' + (1 !== this.hours() ? '\xe1s' : 'a') + '] LT';
        },
        lastDay: function () {
          return '[onte ' + (1 !== this.hours() ? '\xe1' : 'a') + '] LT';
        },
        lastWeek: function () {
          return '[o] dddd [pasado ' + (1 !== this.hours() ? '\xe1s' : 'a') + '] LT';
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: function (e) {
          return 0 === e.indexOf('un') ? 'n' + e : 'en ' + e;
        },
        past: 'hai %s',
        s: 'uns segundos',
        ss: '%d segundos',
        m: 'un minuto',
        mm: '%d minutos',
        h: 'unha hora',
        hh: '%d horas',
        d: 'un d\xeda',
        dd: '%d d\xedas',
        M: 'un mes',
        MM: '%d meses',
        y: 'un ano',
        yy: '%d anos',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\xba/,
      ordinal: '%d\xba',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('gom-deva', {
      months: {
        standalone:
          '\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u0940\u0932_\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932\u092f_\u0911\u0917\u0938\u094d\u091f_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930_\u0911\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930_\u0921\u093f\u0938\u0947\u0902\u092c\u0930'.split(
            '_'
          ),
        format:
          '\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940\u091a\u094d\u092f\u093e_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940\u091a\u094d\u092f\u093e_\u092e\u093e\u0930\u094d\u091a\u093e\u091a\u094d\u092f\u093e_\u090f\u092a\u094d\u0930\u0940\u0932\u093e\u091a\u094d\u092f\u093e_\u092e\u0947\u092f\u093e\u091a\u094d\u092f\u093e_\u091c\u0942\u0928\u093e\u091a\u094d\u092f\u093e_\u091c\u0941\u0932\u092f\u093e\u091a\u094d\u092f\u093e_\u0911\u0917\u0938\u094d\u091f\u093e\u091a\u094d\u092f\u093e_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0911\u0915\u094d\u091f\u094b\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0921\u093f\u0938\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e'.split(
            '_'
          ),
        isFormat: /MMMM(\s)+D[oD]?/,
      },
      monthsShort:
        '\u091c\u093e\u0928\u0947._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u0940._\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932._\u0911\u0917._\u0938\u092a\u094d\u091f\u0947\u0902._\u0911\u0915\u094d\u091f\u094b._\u0928\u094b\u0935\u094d\u0939\u0947\u0902._\u0921\u093f\u0938\u0947\u0902.'.split(
          '_'
        ),
      monthsParseExact: !0,
      weekdays:
        '\u0906\u092f\u0924\u093e\u0930_\u0938\u094b\u092e\u093e\u0930_\u092e\u0902\u0917\u0933\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u092c\u093f\u0930\u0947\u0938\u094d\u0924\u093e\u0930_\u0938\u0941\u0915\u094d\u0930\u093e\u0930_\u0936\u0947\u0928\u0935\u093e\u0930'.split(
          '_'
        ),
      weekdaysShort:
        '\u0906\u092f\u0924._\u0938\u094b\u092e._\u092e\u0902\u0917\u0933._\u092c\u0941\u0927._\u092c\u094d\u0930\u0947\u0938\u094d\u0924._\u0938\u0941\u0915\u094d\u0930._\u0936\u0947\u0928.'.split(
          '_'
        ),
      weekdaysMin:
        '\u0906_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u092c\u094d\u0930\u0947_\u0938\u0941_\u0936\u0947'.split(
          '_'
        ),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]',
        LTS: 'A h:mm:ss [\u0935\u093e\u091c\u0924\u093e\u0902]',
        L: 'DD-MM-YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]',
        LLLL: 'dddd, MMMM Do, YYYY, A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]',
        llll: 'ddd, D MMM YYYY, A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]',
      },
      calendar: {
        sameDay: '[\u0906\u092f\u091c] LT',
        nextDay: '[\u092b\u093e\u0932\u094d\u092f\u093e\u0902] LT',
        nextWeek: '[\u092b\u0941\u0921\u0932\u094b] dddd[,] LT',
        lastDay: '[\u0915\u093e\u0932] LT',
        lastWeek: '[\u092b\u093e\u091f\u0932\u094b] dddd[,] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s',
        past: '%s \u0906\u0926\u0940\u0902',
        s: hn,
        ss: hn,
        m: hn,
        mm: hn,
        h: hn,
        hh: hn,
        d: hn,
        dd: hn,
        M: hn,
        MM: hn,
        y: hn,
        yy: hn,
      },
      dayOfMonthOrdinalParse: /\d{1,2}(\u0935\u0947\u0930)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'D':
            return e + '\u0935\u0947\u0930';
          default:
          case 'M':
          case 'Q':
          case 'DDD':
          case 'd':
          case 'w':
          case 'W':
            return e;
        }
      },
      week: { dow: 0, doy: 3 },
      meridiemParse:
        /\u0930\u093e\u0924\u0940|\u0938\u0915\u093e\u0933\u0940\u0902|\u0926\u0928\u092a\u093e\u0930\u093e\u0902|\u0938\u093e\u0902\u091c\u0947/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          '\u0930\u093e\u0924\u0940' === a
            ? e < 4
              ? e
              : e + 12
            : '\u0938\u0915\u093e\u0933\u0940\u0902' === a
            ? e
            : '\u0926\u0928\u092a\u093e\u0930\u093e\u0902' === a
            ? 12 < e
              ? e
              : e + 12
            : '\u0938\u093e\u0902\u091c\u0947' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        return e < 4
          ? '\u0930\u093e\u0924\u0940'
          : e < 12
          ? '\u0938\u0915\u093e\u0933\u0940\u0902'
          : e < 16
          ? '\u0926\u0928\u092a\u093e\u0930\u093e\u0902'
          : e < 20
          ? '\u0938\u093e\u0902\u091c\u0947'
          : '\u0930\u093e\u0924\u0940';
      },
    }),
    M.defineLocale('gom-latn', {
      months: {
        standalone:
          'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
        format:
          'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split(
            '_'
          ),
        isFormat: /MMMM(\s)+D[oD]?/,
      },
      monthsShort: 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
      monthsParseExact: !0,
      weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
      weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
      weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'A h:mm [vazta]',
        LTS: 'A h:mm:ss [vazta]',
        L: 'DD-MM-YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY A h:mm [vazta]',
        LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
        llll: 'ddd, D MMM YYYY, A h:mm [vazta]',
      },
      calendar: {
        sameDay: '[Aiz] LT',
        nextDay: '[Faleam] LT',
        nextWeek: '[Fuddlo] dddd[,] LT',
        lastDay: '[Kal] LT',
        lastWeek: '[Fattlo] dddd[,] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s',
        past: '%s adim',
        s: cn,
        ss: cn,
        m: cn,
        mm: cn,
        h: cn,
        hh: cn,
        d: cn,
        dd: cn,
        M: cn,
        MM: cn,
        y: cn,
        yy: cn,
      },
      dayOfMonthOrdinalParse: /\d{1,2}(er)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'D':
            return e + 'er';
          default:
          case 'M':
          case 'Q':
          case 'DDD':
          case 'd':
          case 'w':
          case 'W':
            return e;
        }
      },
      week: { dow: 0, doy: 3 },
      meridiemParse: /rati|sokallim|donparam|sanje/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          'rati' === a
            ? e < 4
              ? e
              : e + 12
            : 'sokallim' === a
            ? e
            : 'donparam' === a
            ? 12 < e
              ? e
              : e + 12
            : 'sanje' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        return e < 4
          ? 'rati'
          : e < 12
          ? 'sokallim'
          : e < 16
          ? 'donparam'
          : e < 20
          ? 'sanje'
          : 'rati';
      },
    });
  var Ln = {
      1: '\u0ae7',
      2: '\u0ae8',
      3: '\u0ae9',
      4: '\u0aea',
      5: '\u0aeb',
      6: '\u0aec',
      7: '\u0aed',
      8: '\u0aee',
      9: '\u0aef',
      0: '\u0ae6',
    },
    Yn = {
      '\u0ae7': '1',
      '\u0ae8': '2',
      '\u0ae9': '3',
      '\u0aea': '4',
      '\u0aeb': '5',
      '\u0aec': '6',
      '\u0aed': '7',
      '\u0aee': '8',
      '\u0aef': '9',
      '\u0ae6': '0',
    };
  M.defineLocale('gu', {
    months:
      '\u0a9c\u0abe\u0aa8\u0acd\u0aaf\u0ac1\u0a86\u0ab0\u0ac0_\u0aab\u0ac7\u0aac\u0acd\u0ab0\u0ac1\u0a86\u0ab0\u0ac0_\u0aae\u0abe\u0ab0\u0acd\u0a9a_\u0a8f\u0aaa\u0acd\u0ab0\u0abf\u0ab2_\u0aae\u0ac7_\u0a9c\u0ac2\u0aa8_\u0a9c\u0ac1\u0ab2\u0abe\u0a88_\u0a91\u0a97\u0ab8\u0acd\u0a9f_\u0ab8\u0aaa\u0acd\u0a9f\u0ac7\u0aae\u0acd\u0aac\u0ab0_\u0a91\u0a95\u0acd\u0a9f\u0acd\u0aac\u0ab0_\u0aa8\u0ab5\u0ac7\u0aae\u0acd\u0aac\u0ab0_\u0aa1\u0abf\u0ab8\u0ac7\u0aae\u0acd\u0aac\u0ab0'.split(
        '_'
      ),
    monthsShort:
      '\u0a9c\u0abe\u0aa8\u0acd\u0aaf\u0ac1._\u0aab\u0ac7\u0aac\u0acd\u0ab0\u0ac1._\u0aae\u0abe\u0ab0\u0acd\u0a9a_\u0a8f\u0aaa\u0acd\u0ab0\u0abf._\u0aae\u0ac7_\u0a9c\u0ac2\u0aa8_\u0a9c\u0ac1\u0ab2\u0abe._\u0a91\u0a97._\u0ab8\u0aaa\u0acd\u0a9f\u0ac7._\u0a91\u0a95\u0acd\u0a9f\u0acd._\u0aa8\u0ab5\u0ac7._\u0aa1\u0abf\u0ab8\u0ac7.'.split(
        '_'
      ),
    monthsParseExact: !0,
    weekdays:
      '\u0ab0\u0ab5\u0abf\u0ab5\u0abe\u0ab0_\u0ab8\u0acb\u0aae\u0ab5\u0abe\u0ab0_\u0aae\u0a82\u0a97\u0ab3\u0ab5\u0abe\u0ab0_\u0aac\u0ac1\u0aa7\u0acd\u0ab5\u0abe\u0ab0_\u0a97\u0ac1\u0ab0\u0ac1\u0ab5\u0abe\u0ab0_\u0ab6\u0ac1\u0a95\u0acd\u0ab0\u0ab5\u0abe\u0ab0_\u0ab6\u0aa8\u0abf\u0ab5\u0abe\u0ab0'.split(
        '_'
      ),
    weekdaysShort:
      '\u0ab0\u0ab5\u0abf_\u0ab8\u0acb\u0aae_\u0aae\u0a82\u0a97\u0ab3_\u0aac\u0ac1\u0aa7\u0acd_\u0a97\u0ac1\u0ab0\u0ac1_\u0ab6\u0ac1\u0a95\u0acd\u0ab0_\u0ab6\u0aa8\u0abf'.split(
        '_'
      ),
    weekdaysMin:
      '\u0ab0_\u0ab8\u0acb_\u0aae\u0a82_\u0aac\u0ac1_\u0a97\u0ac1_\u0ab6\u0ac1_\u0ab6'.split('_'),
    longDateFormat: {
      LT: 'A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7',
      LTS: 'A h:mm:ss \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7',
      LLLL: 'dddd, D MMMM YYYY, A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7',
    },
    calendar: {
      sameDay: '[\u0a86\u0a9c] LT',
      nextDay: '[\u0a95\u0abe\u0ab2\u0ac7] LT',
      nextWeek: 'dddd, LT',
      lastDay: '[\u0a97\u0a87\u0a95\u0abe\u0ab2\u0ac7] LT',
      lastWeek: '[\u0aaa\u0abe\u0a9b\u0ab2\u0abe] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u0aae\u0abe',
      past: '%s \u0aaa\u0ab9\u0ac7\u0ab2\u0abe',
      s: '\u0a85\u0aae\u0ac1\u0a95 \u0aaa\u0ab3\u0acb',
      ss: '%d \u0ab8\u0ac7\u0a95\u0a82\u0aa1',
      m: '\u0a8f\u0a95 \u0aae\u0abf\u0aa8\u0abf\u0a9f',
      mm: '%d \u0aae\u0abf\u0aa8\u0abf\u0a9f',
      h: '\u0a8f\u0a95 \u0a95\u0ab2\u0abe\u0a95',
      hh: '%d \u0a95\u0ab2\u0abe\u0a95',
      d: '\u0a8f\u0a95 \u0aa6\u0abf\u0ab5\u0ab8',
      dd: '%d \u0aa6\u0abf\u0ab5\u0ab8',
      M: '\u0a8f\u0a95 \u0aae\u0ab9\u0abf\u0aa8\u0acb',
      MM: '%d \u0aae\u0ab9\u0abf\u0aa8\u0acb',
      y: '\u0a8f\u0a95 \u0ab5\u0ab0\u0acd\u0ab7',
      yy: '%d \u0ab5\u0ab0\u0acd\u0ab7',
    },
    preparse: function (e) {
      return e.replace(
        /[\u0ae7\u0ae8\u0ae9\u0aea\u0aeb\u0aec\u0aed\u0aee\u0aef\u0ae6]/g,
        function (e) {
          return Yn[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return Ln[e];
      });
    },
    meridiemParse:
      /\u0ab0\u0abe\u0aa4|\u0aac\u0aaa\u0acb\u0ab0|\u0ab8\u0ab5\u0abe\u0ab0|\u0ab8\u0abe\u0a82\u0a9c/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u0ab0\u0abe\u0aa4' === a
          ? e < 4
            ? e
            : e + 12
          : '\u0ab8\u0ab5\u0abe\u0ab0' === a
          ? e
          : '\u0aac\u0aaa\u0acb\u0ab0' === a
          ? 10 <= e
            ? e
            : e + 12
          : '\u0ab8\u0abe\u0a82\u0a9c' === a
          ? e + 12
          : void 0
      );
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u0ab0\u0abe\u0aa4'
        : e < 10
        ? '\u0ab8\u0ab5\u0abe\u0ab0'
        : e < 17
        ? '\u0aac\u0aaa\u0acb\u0ab0'
        : e < 20
        ? '\u0ab8\u0abe\u0a82\u0a9c'
        : '\u0ab0\u0abe\u0aa4';
    },
    week: { dow: 0, doy: 6 },
  }),
    M.defineLocale('he', {
      months:
        '\u05d9\u05e0\u05d5\u05d0\u05e8_\u05e4\u05d1\u05e8\u05d5\u05d0\u05e8_\u05de\u05e8\u05e5_\u05d0\u05e4\u05e8\u05d9\u05dc_\u05de\u05d0\u05d9_\u05d9\u05d5\u05e0\u05d9_\u05d9\u05d5\u05dc\u05d9_\u05d0\u05d5\u05d2\u05d5\u05e1\u05d8_\u05e1\u05e4\u05d8\u05de\u05d1\u05e8_\u05d0\u05d5\u05e7\u05d8\u05d5\u05d1\u05e8_\u05e0\u05d5\u05d1\u05de\u05d1\u05e8_\u05d3\u05e6\u05de\u05d1\u05e8'.split(
          '_'
        ),
      monthsShort:
        '\u05d9\u05e0\u05d5\u05f3_\u05e4\u05d1\u05e8\u05f3_\u05de\u05e8\u05e5_\u05d0\u05e4\u05e8\u05f3_\u05de\u05d0\u05d9_\u05d9\u05d5\u05e0\u05d9_\u05d9\u05d5\u05dc\u05d9_\u05d0\u05d5\u05d2\u05f3_\u05e1\u05e4\u05d8\u05f3_\u05d0\u05d5\u05e7\u05f3_\u05e0\u05d5\u05d1\u05f3_\u05d3\u05e6\u05de\u05f3'.split(
          '_'
        ),
      weekdays:
        '\u05e8\u05d0\u05e9\u05d5\u05df_\u05e9\u05e0\u05d9_\u05e9\u05dc\u05d9\u05e9\u05d9_\u05e8\u05d1\u05d9\u05e2\u05d9_\u05d7\u05de\u05d9\u05e9\u05d9_\u05e9\u05d9\u05e9\u05d9_\u05e9\u05d1\u05ea'.split(
          '_'
        ),
      weekdaysShort:
        '\u05d0\u05f3_\u05d1\u05f3_\u05d2\u05f3_\u05d3\u05f3_\u05d4\u05f3_\u05d5\u05f3_\u05e9\u05f3'.split(
          '_'
        ),
      weekdaysMin: '\u05d0_\u05d1_\u05d2_\u05d3_\u05d4_\u05d5_\u05e9'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D [\u05d1]MMMM YYYY',
        LLL: 'D [\u05d1]MMMM YYYY HH:mm',
        LLLL: 'dddd, D [\u05d1]MMMM YYYY HH:mm',
        l: 'D/M/YYYY',
        ll: 'D MMM YYYY',
        lll: 'D MMM YYYY HH:mm',
        llll: 'ddd, D MMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[\u05d4\u05d9\u05d5\u05dd \u05d1\u05be]LT',
        nextDay: '[\u05de\u05d7\u05e8 \u05d1\u05be]LT',
        nextWeek: 'dddd [\u05d1\u05e9\u05e2\u05d4] LT',
        lastDay: '[\u05d0\u05ea\u05de\u05d5\u05dc \u05d1\u05be]LT',
        lastWeek:
          '[\u05d1\u05d9\u05d5\u05dd] dddd [\u05d4\u05d0\u05d7\u05e8\u05d5\u05df \u05d1\u05e9\u05e2\u05d4] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u05d1\u05e2\u05d5\u05d3 %s',
        past: '\u05dc\u05e4\u05e0\u05d9 %s',
        s: '\u05de\u05e1\u05e4\u05e8 \u05e9\u05e0\u05d9\u05d5\u05ea',
        ss: '%d \u05e9\u05e0\u05d9\u05d5\u05ea',
        m: '\u05d3\u05e7\u05d4',
        mm: '%d \u05d3\u05e7\u05d5\u05ea',
        h: '\u05e9\u05e2\u05d4',
        hh: function (e) {
          return 2 === e ? '\u05e9\u05e2\u05ea\u05d9\u05d9\u05dd' : e + ' \u05e9\u05e2\u05d5\u05ea';
        },
        d: '\u05d9\u05d5\u05dd',
        dd: function (e) {
          return 2 === e ? '\u05d9\u05d5\u05de\u05d9\u05d9\u05dd' : e + ' \u05d9\u05de\u05d9\u05dd';
        },
        M: '\u05d7\u05d5\u05d3\u05e9',
        MM: function (e) {
          return 2 === e
            ? '\u05d7\u05d5\u05d3\u05e9\u05d9\u05d9\u05dd'
            : e + ' \u05d7\u05d5\u05d3\u05e9\u05d9\u05dd';
        },
        y: '\u05e9\u05e0\u05d4',
        yy: function (e) {
          return 2 === e
            ? '\u05e9\u05e0\u05ea\u05d9\u05d9\u05dd'
            : e % 10 == 0 && 10 !== e
            ? e + ' \u05e9\u05e0\u05d4'
            : e + ' \u05e9\u05e0\u05d9\u05dd';
        },
      },
      meridiemParse:
        /\u05d0\u05d7\u05d4"\u05e6|\u05dc\u05e4\u05e0\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d5\u05ea \u05d1\u05d5\u05e7\u05e8|\u05d1\u05d1\u05d5\u05e7\u05e8|\u05d1\u05e2\u05e8\u05d1/i,
      isPM: function (e) {
        return /^(\u05d0\u05d7\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05d1\u05e2\u05e8\u05d1)$/.test(
          e
        );
      },
      meridiem: function (e, a, t) {
        return e < 5
          ? '\u05dc\u05e4\u05e0\u05d5\u05ea \u05d1\u05d5\u05e7\u05e8'
          : e < 10
          ? '\u05d1\u05d1\u05d5\u05e7\u05e8'
          : e < 12
          ? t
            ? '\u05dc\u05e4\u05e0\u05d4"\u05e6'
            : '\u05dc\u05e4\u05e0\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd'
          : e < 18
          ? t
            ? '\u05d0\u05d7\u05d4"\u05e6'
            : '\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd'
          : '\u05d1\u05e2\u05e8\u05d1';
      },
    });
  var yn = {
      1: '\u0967',
      2: '\u0968',
      3: '\u0969',
      4: '\u096a',
      5: '\u096b',
      6: '\u096c',
      7: '\u096d',
      8: '\u096e',
      9: '\u096f',
      0: '\u0966',
    },
    fn = {
      '\u0967': '1',
      '\u0968': '2',
      '\u0969': '3',
      '\u096a': '4',
      '\u096b': '5',
      '\u096c': '6',
      '\u096d': '7',
      '\u096e': '8',
      '\u096f': '9',
      '\u0966': '0',
    },
    pn = [
      /^\u091c\u0928/i,
      /^\u092b\u093c\u0930|\u092b\u0930/i,
      /^\u092e\u093e\u0930\u094d\u091a/i,
      /^\u0905\u092a\u094d\u0930\u0948/i,
      /^\u092e\u0908/i,
      /^\u091c\u0942\u0928/i,
      /^\u091c\u0941\u0932/i,
      /^\u0905\u0917/i,
      /^\u0938\u093f\u0924\u0902|\u0938\u093f\u0924/i,
      /^\u0905\u0915\u094d\u091f\u0942/i,
      /^\u0928\u0935|\u0928\u0935\u0902/i,
      /^\u0926\u093f\u0938\u0902|\u0926\u093f\u0938/i,
    ];
  function kn(e, a, t) {
    var s = e + ' ';
    switch (t) {
      case 'ss':
        return (s += 1 === e ? 'sekunda' : 2 === e || 3 === e || 4 === e ? 'sekunde' : 'sekundi');
      case 'm':
        return a ? 'jedna minuta' : 'jedne minute';
      case 'mm':
        return (s += 1 !== e && (2 === e || 3 === e || 4 === e) ? 'minute' : 'minuta');
      case 'h':
        return a ? 'jedan sat' : 'jednog sata';
      case 'hh':
        return (s += 1 === e ? 'sat' : 2 === e || 3 === e || 4 === e ? 'sata' : 'sati');
      case 'dd':
        return (s += 1 === e ? 'dan' : 'dana');
      case 'MM':
        return (s += 1 === e ? 'mjesec' : 2 === e || 3 === e || 4 === e ? 'mjeseca' : 'mjeseci');
      case 'yy':
        return (s += 1 !== e && (2 === e || 3 === e || 4 === e) ? 'godine' : 'godina');
    }
  }
  M.defineLocale('hi', {
    months: {
      format:
        '\u091c\u0928\u0935\u0930\u0940_\u092b\u093c\u0930\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948\u0932_\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0938\u094d\u0924_\u0938\u093f\u0924\u092e\u094d\u092c\u0930_\u0905\u0915\u094d\u091f\u0942\u092c\u0930_\u0928\u0935\u092e\u094d\u092c\u0930_\u0926\u093f\u0938\u092e\u094d\u092c\u0930'.split(
          '_'
        ),
      standalone:
        '\u091c\u0928\u0935\u0930\u0940_\u092b\u0930\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948\u0932_\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0938\u094d\u0924_\u0938\u093f\u0924\u0902\u092c\u0930_\u0905\u0915\u094d\u091f\u0942\u092c\u0930_\u0928\u0935\u0902\u092c\u0930_\u0926\u093f\u0938\u0902\u092c\u0930'.split(
          '_'
        ),
    },
    monthsShort:
      '\u091c\u0928._\u092b\u093c\u0930._\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948._\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932._\u0905\u0917._\u0938\u093f\u0924._\u0905\u0915\u094d\u091f\u0942._\u0928\u0935._\u0926\u093f\u0938.'.split(
        '_'
      ),
    weekdays:
      '\u0930\u0935\u093f\u0935\u093e\u0930_\u0938\u094b\u092e\u0935\u093e\u0930_\u092e\u0902\u0917\u0932\u0935\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u0917\u0941\u0930\u0942\u0935\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u0935\u093e\u0930_\u0936\u0928\u093f\u0935\u093e\u0930'.split(
        '_'
      ),
    weekdaysShort:
      '\u0930\u0935\u093f_\u0938\u094b\u092e_\u092e\u0902\u0917\u0932_\u092c\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094d\u0930_\u0936\u0928\u093f'.split(
        '_'
      ),
    weekdaysMin:
      '\u0930_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u0917\u0941_\u0936\u0941_\u0936'.split('_'),
    longDateFormat: {
      LT: 'A h:mm \u092c\u091c\u0947',
      LTS: 'A h:mm:ss \u092c\u091c\u0947',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A h:mm \u092c\u091c\u0947',
      LLLL: 'dddd, D MMMM YYYY, A h:mm \u092c\u091c\u0947',
    },
    monthsParse: pn,
    longMonthsParse: pn,
    shortMonthsParse: [
      /^\u091c\u0928/i,
      /^\u092b\u093c\u0930/i,
      /^\u092e\u093e\u0930\u094d\u091a/i,
      /^\u0905\u092a\u094d\u0930\u0948/i,
      /^\u092e\u0908/i,
      /^\u091c\u0942\u0928/i,
      /^\u091c\u0941\u0932/i,
      /^\u0905\u0917/i,
      /^\u0938\u093f\u0924/i,
      /^\u0905\u0915\u094d\u091f\u0942/i,
      /^\u0928\u0935/i,
      /^\u0926\u093f\u0938/i,
    ],
    monthsRegex:
      /^(\u091c\u0928\u0935\u0930\u0940|\u091c\u0928\.?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908|\u091c\u0941\u0932\.?|\u0905\u0917\u0938\u094d\u0924|\u0905\u0917\.?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930|\u0928\u0935\.?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930|\u0926\u093f\u0938\.?)/i,
    monthsShortRegex:
      /^(\u091c\u0928\u0935\u0930\u0940|\u091c\u0928\.?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908|\u091c\u0941\u0932\.?|\u0905\u0917\u0938\u094d\u0924|\u0905\u0917\.?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930|\u0928\u0935\.?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930|\u0926\u093f\u0938\.?)/i,
    monthsStrictRegex:
      /^(\u091c\u0928\u0935\u0930\u0940?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908?|\u0905\u0917\u0938\u094d\u0924?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924?\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930?)/i,
    monthsShortStrictRegex:
      /^(\u091c\u0928\.?|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\.?|\u0905\u0917\.?|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\.?|\u0926\u093f\u0938\.?)/i,
    calendar: {
      sameDay: '[\u0906\u091c] LT',
      nextDay: '[\u0915\u0932] LT',
      nextWeek: 'dddd, LT',
      lastDay: '[\u0915\u0932] LT',
      lastWeek: '[\u092a\u093f\u091b\u0932\u0947] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u092e\u0947\u0902',
      past: '%s \u092a\u0939\u0932\u0947',
      s: '\u0915\u0941\u091b \u0939\u0940 \u0915\u094d\u0937\u0923',
      ss: '%d \u0938\u0947\u0915\u0902\u0921',
      m: '\u090f\u0915 \u092e\u093f\u0928\u091f',
      mm: '%d \u092e\u093f\u0928\u091f',
      h: '\u090f\u0915 \u0918\u0902\u091f\u093e',
      hh: '%d \u0918\u0902\u091f\u0947',
      d: '\u090f\u0915 \u0926\u093f\u0928',
      dd: '%d \u0926\u093f\u0928',
      M: '\u090f\u0915 \u092e\u0939\u0940\u0928\u0947',
      MM: '%d \u092e\u0939\u0940\u0928\u0947',
      y: '\u090f\u0915 \u0935\u0930\u094d\u0937',
      yy: '%d \u0935\u0930\u094d\u0937',
    },
    preparse: function (e) {
      return e.replace(
        /[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g,
        function (e) {
          return fn[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return yn[e];
      });
    },
    meridiemParse:
      /\u0930\u093e\u0924|\u0938\u0941\u092c\u0939|\u0926\u094b\u092a\u0939\u0930|\u0936\u093e\u092e/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u0930\u093e\u0924' === a
          ? e < 4
            ? e
            : e + 12
          : '\u0938\u0941\u092c\u0939' === a
          ? e
          : '\u0926\u094b\u092a\u0939\u0930' === a
          ? 10 <= e
            ? e
            : e + 12
          : '\u0936\u093e\u092e' === a
          ? e + 12
          : void 0
      );
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u0930\u093e\u0924'
        : e < 10
        ? '\u0938\u0941\u092c\u0939'
        : e < 17
        ? '\u0926\u094b\u092a\u0939\u0930'
        : e < 20
        ? '\u0936\u093e\u092e'
        : '\u0930\u093e\u0924';
    },
    week: { dow: 0, doy: 6 },
  }),
    M.defineLocale('hr', {
      months: {
        format:
          'sije\u010dnja_velja\u010de_o\u017eujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split(
            '_'
          ),
        standalone:
          'sije\u010danj_velja\u010da_o\u017eujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
            '_'
          ),
      },
      monthsShort: 'sij._velj._o\u017eu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota'.split('_'),
      weekdaysShort: 'ned._pon._uto._sri._\u010det._pet._sub.'.split('_'),
      weekdaysMin: 'ne_po_ut_sr_\u010de_pe_su'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'Do MMMM YYYY',
        LLL: 'Do MMMM YYYY H:mm',
        LLLL: 'dddd, Do MMMM YYYY H:mm',
      },
      calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sutra u] LT',
        nextWeek: function () {
          switch (this.day()) {
            case 0:
              return '[u] [nedjelju] [u] LT';
            case 3:
              return '[u] [srijedu] [u] LT';
            case 6:
              return '[u] [subotu] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[u] dddd [u] LT';
          }
        },
        lastDay: '[ju\u010der u] LT',
        lastWeek: function () {
          switch (this.day()) {
            case 0:
              return '[pro\u0161lu] [nedjelju] [u] LT';
            case 3:
              return '[pro\u0161lu] [srijedu] [u] LT';
            case 6:
              return '[pro\u0161le] [subote] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[pro\u0161li] dddd [u] LT';
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: 'za %s',
        past: 'prije %s',
        s: 'par sekundi',
        ss: kn,
        m: kn,
        mm: kn,
        h: kn,
        hh: kn,
        d: 'dan',
        dd: kn,
        M: 'mjesec',
        MM: kn,
        y: 'godinu',
        yy: kn,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 7 },
    });
  var Dn =
    'vas\xe1rnap h\xe9tf\u0151n kedden szerd\xe1n cs\xfct\xf6rt\xf6k\xf6n p\xe9nteken szombaton'.split(
      ' '
    );
  function Tn(e, a, t, s) {
    var n = e;
    switch (t) {
      case 's':
        return s || a ? 'n\xe9h\xe1ny m\xe1sodperc' : 'n\xe9h\xe1ny m\xe1sodperce';
      case 'ss':
        return n + (s || a) ? ' m\xe1sodperc' : ' m\xe1sodperce';
      case 'm':
        return 'egy' + (s || a ? ' perc' : ' perce');
      case 'mm':
        return n + (s || a ? ' perc' : ' perce');
      case 'h':
        return 'egy' + (s || a ? ' \xf3ra' : ' \xf3r\xe1ja');
      case 'hh':
        return n + (s || a ? ' \xf3ra' : ' \xf3r\xe1ja');
      case 'd':
        return 'egy' + (s || a ? ' nap' : ' napja');
      case 'dd':
        return n + (s || a ? ' nap' : ' napja');
      case 'M':
        return 'egy' + (s || a ? ' h\xf3nap' : ' h\xf3napja');
      case 'MM':
        return n + (s || a ? ' h\xf3nap' : ' h\xf3napja');
      case 'y':
        return 'egy' + (s || a ? ' \xe9v' : ' \xe9ve');
      case 'yy':
        return n + (s || a ? ' \xe9v' : ' \xe9ve');
    }
    return '';
  }
  function gn(e) {
    return (e ? '' : '[m\xfalt] ') + '[' + Dn[this.day()] + '] LT[-kor]';
  }
  function wn(e) {
    return e % 100 == 11 || e % 10 != 1;
  }
  function vn(e, a, t, s) {
    var n = e + ' ';
    switch (t) {
      case 's':
        return a || s ? 'nokkrar sek\xfandur' : 'nokkrum sek\xfandum';
      case 'ss':
        return wn(e) ? n + (a || s ? 'sek\xfandur' : 'sek\xfandum') : n + 'sek\xfanda';
      case 'm':
        return a ? 'm\xedn\xfata' : 'm\xedn\xfatu';
      case 'mm':
        return wn(e)
          ? n + (a || s ? 'm\xedn\xfatur' : 'm\xedn\xfatum')
          : a
          ? n + 'm\xedn\xfata'
          : n + 'm\xedn\xfatu';
      case 'hh':
        return wn(e) ? n + (a || s ? 'klukkustundir' : 'klukkustundum') : n + 'klukkustund';
      case 'd':
        return a ? 'dagur' : s ? 'dag' : 'degi';
      case 'dd':
        return wn(e)
          ? a
            ? n + 'dagar'
            : n + (s ? 'daga' : 'd\xf6gum')
          : a
          ? n + 'dagur'
          : n + (s ? 'dag' : 'degi');
      case 'M':
        return a ? 'm\xe1nu\xf0ur' : s ? 'm\xe1nu\xf0' : 'm\xe1nu\xf0i';
      case 'MM':
        return wn(e)
          ? a
            ? n + 'm\xe1nu\xf0ir'
            : n + (s ? 'm\xe1nu\xf0i' : 'm\xe1nu\xf0um')
          : a
          ? n + 'm\xe1nu\xf0ur'
          : n + (s ? 'm\xe1nu\xf0' : 'm\xe1nu\xf0i');
      case 'y':
        return a || s ? '\xe1r' : '\xe1ri';
      case 'yy':
        return wn(e) ? n + (a || s ? '\xe1r' : '\xe1rum') : n + (a || s ? '\xe1r' : '\xe1ri');
    }
  }
  M.defineLocale('hu', {
    months:
      'janu\xe1r_febru\xe1r_m\xe1rcius_\xe1prilis_m\xe1jus_j\xfanius_j\xfalius_augusztus_szeptember_okt\xf3ber_november_december'.split(
        '_'
      ),
    monthsShort:
      'jan._feb._m\xe1rc._\xe1pr._m\xe1j._j\xfan._j\xfal._aug._szept._okt._nov._dec.'.split('_'),
    monthsParseExact: !0,
    weekdays: 'vas\xe1rnap_h\xe9tf\u0151_kedd_szerda_cs\xfct\xf6rt\xf6k_p\xe9ntek_szombat'.split(
      '_'
    ),
    weekdaysShort: 'vas_h\xe9t_kedd_sze_cs\xfct_p\xe9n_szo'.split('_'),
    weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'YYYY.MM.DD.',
      LL: 'YYYY. MMMM D.',
      LLL: 'YYYY. MMMM D. H:mm',
      LLLL: 'YYYY. MMMM D., dddd H:mm',
    },
    meridiemParse: /de|du/i,
    isPM: function (e) {
      return 'u' === e.charAt(1).toLowerCase();
    },
    meridiem: function (e, a, t) {
      return e < 12 ? (!0 === t ? 'de' : 'DE') : !0 === t ? 'du' : 'DU';
    },
    calendar: {
      sameDay: '[ma] LT[-kor]',
      nextDay: '[holnap] LT[-kor]',
      nextWeek: function () {
        return gn.call(this, !0);
      },
      lastDay: '[tegnap] LT[-kor]',
      lastWeek: function () {
        return gn.call(this, !1);
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s m\xfalva',
      past: '%s',
      s: Tn,
      ss: Tn,
      m: Tn,
      mm: Tn,
      h: Tn,
      hh: Tn,
      d: Tn,
      dd: Tn,
      M: Tn,
      MM: Tn,
      y: Tn,
      yy: Tn,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('hy-am', {
      months: {
        format:
          '\u0570\u0578\u0582\u0576\u057e\u0561\u0580\u056b_\u0583\u0565\u057f\u0580\u057e\u0561\u0580\u056b_\u0574\u0561\u0580\u057f\u056b_\u0561\u057a\u0580\u056b\u056c\u056b_\u0574\u0561\u0575\u056b\u057d\u056b_\u0570\u0578\u0582\u0576\u056b\u057d\u056b_\u0570\u0578\u0582\u056c\u056b\u057d\u056b_\u0585\u0563\u0578\u057d\u057f\u0578\u057d\u056b_\u057d\u0565\u057a\u057f\u0565\u0574\u0562\u0565\u0580\u056b_\u0570\u0578\u056f\u057f\u0565\u0574\u0562\u0565\u0580\u056b_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580\u056b_\u0564\u0565\u056f\u057f\u0565\u0574\u0562\u0565\u0580\u056b'.split(
            '_'
          ),
        standalone:
          '\u0570\u0578\u0582\u0576\u057e\u0561\u0580_\u0583\u0565\u057f\u0580\u057e\u0561\u0580_\u0574\u0561\u0580\u057f_\u0561\u057a\u0580\u056b\u056c_\u0574\u0561\u0575\u056b\u057d_\u0570\u0578\u0582\u0576\u056b\u057d_\u0570\u0578\u0582\u056c\u056b\u057d_\u0585\u0563\u0578\u057d\u057f\u0578\u057d_\u057d\u0565\u057a\u057f\u0565\u0574\u0562\u0565\u0580_\u0570\u0578\u056f\u057f\u0565\u0574\u0562\u0565\u0580_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580_\u0564\u0565\u056f\u057f\u0565\u0574\u0562\u0565\u0580'.split(
            '_'
          ),
      },
      monthsShort:
        '\u0570\u0576\u057e_\u0583\u057f\u0580_\u0574\u0580\u057f_\u0561\u057a\u0580_\u0574\u0575\u057d_\u0570\u0576\u057d_\u0570\u056c\u057d_\u0585\u0563\u057d_\u057d\u057a\u057f_\u0570\u056f\u057f_\u0576\u0574\u0562_\u0564\u056f\u057f'.split(
          '_'
        ),
      weekdays:
        '\u056f\u056b\u0580\u0561\u056f\u056b_\u0565\u0580\u056f\u0578\u0582\u0577\u0561\u0562\u0569\u056b_\u0565\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056b_\u0579\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056b_\u0570\u056b\u0576\u0563\u0577\u0561\u0562\u0569\u056b_\u0578\u0582\u0580\u0562\u0561\u0569_\u0577\u0561\u0562\u0561\u0569'.split(
          '_'
        ),
      weekdaysShort:
        '\u056f\u0580\u056f_\u0565\u0580\u056f_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569'.split(
          '_'
        ),
      weekdaysMin:
        '\u056f\u0580\u056f_\u0565\u0580\u056f_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY \u0569.',
        LLL: 'D MMMM YYYY \u0569., HH:mm',
        LLLL: 'dddd, D MMMM YYYY \u0569., HH:mm',
      },
      calendar: {
        sameDay: '[\u0561\u0575\u057d\u0585\u0580] LT',
        nextDay: '[\u057e\u0561\u0572\u0568] LT',
        lastDay: '[\u0565\u0580\u0565\u056f] LT',
        nextWeek: function () {
          return 'dddd [\u0585\u0580\u0568 \u056a\u0561\u0574\u0568] LT';
        },
        lastWeek: function () {
          return '[\u0561\u0576\u0581\u0561\u056e] dddd [\u0585\u0580\u0568 \u056a\u0561\u0574\u0568] LT';
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s \u0570\u0565\u057f\u0578',
        past: '%s \u0561\u057c\u0561\u057b',
        s: '\u0574\u056b \u0584\u0561\u0576\u056b \u057e\u0561\u0575\u0580\u056f\u0575\u0561\u0576',
        ss: '%d \u057e\u0561\u0575\u0580\u056f\u0575\u0561\u0576',
        m: '\u0580\u0578\u057a\u0565',
        mm: '%d \u0580\u0578\u057a\u0565',
        h: '\u056a\u0561\u0574',
        hh: '%d \u056a\u0561\u0574',
        d: '\u0585\u0580',
        dd: '%d \u0585\u0580',
        M: '\u0561\u0574\u056b\u057d',
        MM: '%d \u0561\u0574\u056b\u057d',
        y: '\u057f\u0561\u0580\u056b',
        yy: '%d \u057f\u0561\u0580\u056b',
      },
      meridiemParse:
        /\u0563\u056b\u0577\u0565\u0580\u057e\u0561|\u0561\u057c\u0561\u057e\u0578\u057f\u057e\u0561|\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576/,
      isPM: function (e) {
        return /^(\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576)$/.test(
          e
        );
      },
      meridiem: function (e) {
        return e < 4
          ? '\u0563\u056b\u0577\u0565\u0580\u057e\u0561'
          : e < 12
          ? '\u0561\u057c\u0561\u057e\u0578\u057f\u057e\u0561'
          : e < 17
          ? '\u0581\u0565\u0580\u0565\u056f\u057e\u0561'
          : '\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576';
      },
      dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(\u056b\u0576|\u0580\u0564)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'DDD':
          case 'w':
          case 'W':
          case 'DDDo':
            return 1 === e ? e + '-\u056b\u0576' : e + '-\u0580\u0564';
          default:
            return e;
        }
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('id', {
      months:
        'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
      weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
      weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
      weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
      longDateFormat: {
        LT: 'HH.mm',
        LTS: 'HH.mm.ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [pukul] HH.mm',
        LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
      },
      meridiemParse: /pagi|siang|sore|malam/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          'pagi' === a
            ? e
            : 'siang' === a
            ? 11 <= e
              ? e
              : e + 12
            : 'sore' === a || 'malam' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        return e < 11 ? 'pagi' : e < 15 ? 'siang' : e < 19 ? 'sore' : 'malam';
      },
      calendar: {
        sameDay: '[Hari ini pukul] LT',
        nextDay: '[Besok pukul] LT',
        nextWeek: 'dddd [pukul] LT',
        lastDay: '[Kemarin pukul] LT',
        lastWeek: 'dddd [lalu pukul] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'dalam %s',
        past: '%s yang lalu',
        s: 'beberapa detik',
        ss: '%d detik',
        m: 'semenit',
        mm: '%d menit',
        h: 'sejam',
        hh: '%d jam',
        d: 'sehari',
        dd: '%d hari',
        M: 'sebulan',
        MM: '%d bulan',
        y: 'setahun',
        yy: '%d tahun',
      },
      week: { dow: 0, doy: 6 },
    }),
    M.defineLocale('is', {
      months:
        'jan\xfaar_febr\xfaar_mars_apr\xedl_ma\xed_j\xfan\xed_j\xfal\xed_\xe1g\xfast_september_okt\xf3ber_n\xf3vember_desember'.split(
          '_'
        ),
      monthsShort: 'jan_feb_mar_apr_ma\xed_j\xfan_j\xfal_\xe1g\xfa_sep_okt_n\xf3v_des'.split('_'),
      weekdays:
        'sunnudagur_m\xe1nudagur_\xferi\xf0judagur_mi\xf0vikudagur_fimmtudagur_f\xf6studagur_laugardagur'.split(
          '_'
        ),
      weekdaysShort: 'sun_m\xe1n_\xferi_mi\xf0_fim_f\xf6s_lau'.split('_'),
      weekdaysMin: 'Su_M\xe1_\xder_Mi_Fi_F\xf6_La'.split('_'),
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY [kl.] H:mm',
        LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm',
      },
      calendar: {
        sameDay: '[\xed dag kl.] LT',
        nextDay: '[\xe1 morgun kl.] LT',
        nextWeek: 'dddd [kl.] LT',
        lastDay: '[\xed g\xe6r kl.] LT',
        lastWeek: '[s\xed\xf0asta] dddd [kl.] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'eftir %s',
        past: 'fyrir %s s\xed\xf0an',
        s: vn,
        ss: vn,
        m: vn,
        mm: vn,
        h: 'klukkustund',
        hh: vn,
        d: vn,
        dd: vn,
        M: vn,
        MM: vn,
        y: vn,
        yy: vn,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('it-ch', {
      months:
        'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
          '_'
        ),
      monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
      weekdays: 'domenica_luned\xec_marted\xec_mercoled\xec_gioved\xec_venerd\xec_sabato'.split(
        '_'
      ),
      weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
      weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Oggi alle] LT',
        nextDay: '[Domani alle] LT',
        nextWeek: 'dddd [alle] LT',
        lastDay: '[Ieri alle] LT',
        lastWeek: function () {
          switch (this.day()) {
            case 0:
              return '[la scorsa] dddd [alle] LT';
            default:
              return '[lo scorso] dddd [alle] LT';
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: function (e) {
          return (/^[0-9].+$/.test(e) ? 'tra' : 'in') + ' ' + e;
        },
        past: '%s fa',
        s: 'alcuni secondi',
        ss: '%d secondi',
        m: 'un minuto',
        mm: '%d minuti',
        h: "un'ora",
        hh: '%d ore',
        d: 'un giorno',
        dd: '%d giorni',
        M: 'un mese',
        MM: '%d mesi',
        y: 'un anno',
        yy: '%d anni',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\xba/,
      ordinal: '%d\xba',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('it', {
      months:
        'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
          '_'
        ),
      monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
      weekdays: 'domenica_luned\xec_marted\xec_mercoled\xec_gioved\xec_venerd\xec_sabato'.split(
        '_'
      ),
      weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
      weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: function () {
          return '[Oggi a' + (1 < this.hours() ? 'lle ' : 0 === this.hours() ? ' ' : "ll'") + ']LT';
        },
        nextDay: function () {
          return (
            '[Domani a' + (1 < this.hours() ? 'lle ' : 0 === this.hours() ? ' ' : "ll'") + ']LT'
          );
        },
        nextWeek: function () {
          return 'dddd [a' + (1 < this.hours() ? 'lle ' : 0 === this.hours() ? ' ' : "ll'") + ']LT';
        },
        lastDay: function () {
          return '[Ieri a' + (1 < this.hours() ? 'lle ' : 0 === this.hours() ? ' ' : "ll'") + ']LT';
        },
        lastWeek: function () {
          switch (this.day()) {
            case 0:
              return (
                '[La scorsa] dddd [a' +
                (1 < this.hours() ? 'lle ' : 0 === this.hours() ? ' ' : "ll'") +
                ']LT'
              );
            default:
              return (
                '[Lo scorso] dddd [a' +
                (1 < this.hours() ? 'lle ' : 0 === this.hours() ? ' ' : "ll'") +
                ']LT'
              );
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: 'tra %s',
        past: '%s fa',
        s: 'alcuni secondi',
        ss: '%d secondi',
        m: 'un minuto',
        mm: '%d minuti',
        h: "un'ora",
        hh: '%d ore',
        d: 'un giorno',
        dd: '%d giorni',
        w: 'una settimana',
        ww: '%d settimane',
        M: 'un mese',
        MM: '%d mesi',
        y: 'un anno',
        yy: '%d anni',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\xba/,
      ordinal: '%d\xba',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('ja', {
      eras: [
        { since: '2019-05-01', offset: 1, name: '\u4ee4\u548c', narrow: '\u32ff', abbr: 'R' },
        {
          since: '1989-01-08',
          until: '2019-04-30',
          offset: 1,
          name: '\u5e73\u6210',
          narrow: '\u337b',
          abbr: 'H',
        },
        {
          since: '1926-12-25',
          until: '1989-01-07',
          offset: 1,
          name: '\u662d\u548c',
          narrow: '\u337c',
          abbr: 'S',
        },
        {
          since: '1912-07-30',
          until: '1926-12-24',
          offset: 1,
          name: '\u5927\u6b63',
          narrow: '\u337d',
          abbr: 'T',
        },
        {
          since: '1873-01-01',
          until: '1912-07-29',
          offset: 6,
          name: '\u660e\u6cbb',
          narrow: '\u337e',
          abbr: 'M',
        },
        {
          since: '0001-01-01',
          until: '1873-12-31',
          offset: 1,
          name: '\u897f\u66a6',
          narrow: 'AD',
          abbr: 'AD',
        },
        {
          since: '0000-12-31',
          until: -1 / 0,
          offset: 1,
          name: '\u7d00\u5143\u524d',
          narrow: 'BC',
          abbr: 'BC',
        },
      ],
      eraYearOrdinalRegex: /(\u5143|\d+)\u5e74/,
      eraYearOrdinalParse: function (e, a) {
        return '\u5143' === a[1] ? 1 : parseInt(a[1] || e, 10);
      },
      months:
        '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split(
          '_'
        ),
      monthsShort:
        '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split(
          '_'
        ),
      weekdays:
        '\u65e5\u66dc\u65e5_\u6708\u66dc\u65e5_\u706b\u66dc\u65e5_\u6c34\u66dc\u65e5_\u6728\u66dc\u65e5_\u91d1\u66dc\u65e5_\u571f\u66dc\u65e5'.split(
          '_'
        ),
      weekdaysShort: '\u65e5_\u6708_\u706b_\u6c34_\u6728_\u91d1_\u571f'.split('_'),
      weekdaysMin: '\u65e5_\u6708_\u706b_\u6c34_\u6728_\u91d1_\u571f'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY/MM/DD',
        LL: 'YYYY\u5e74M\u6708D\u65e5',
        LLL: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        LLLL: 'YYYY\u5e74M\u6708D\u65e5 dddd HH:mm',
        l: 'YYYY/MM/DD',
        ll: 'YYYY\u5e74M\u6708D\u65e5',
        lll: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        llll: 'YYYY\u5e74M\u6708D\u65e5(ddd) HH:mm',
      },
      meridiemParse: /\u5348\u524d|\u5348\u5f8c/i,
      isPM: function (e) {
        return '\u5348\u5f8c' === e;
      },
      meridiem: function (e, a, t) {
        return e < 12 ? '\u5348\u524d' : '\u5348\u5f8c';
      },
      calendar: {
        sameDay: '[\u4eca\u65e5] LT',
        nextDay: '[\u660e\u65e5] LT',
        nextWeek: function (e) {
          return e.week() !== this.week() ? '[\u6765\u9031]dddd LT' : 'dddd LT';
        },
        lastDay: '[\u6628\u65e5] LT',
        lastWeek: function (e) {
          return this.week() !== e.week() ? '[\u5148\u9031]dddd LT' : 'dddd LT';
        },
        sameElse: 'L',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\u65e5/,
      ordinal: function (e, a) {
        switch (a) {
          case 'y':
            return 1 === e ? '\u5143\u5e74' : e + '\u5e74';
          case 'd':
          case 'D':
          case 'DDD':
            return e + '\u65e5';
          default:
            return e;
        }
      },
      relativeTime: {
        future: '%s\u5f8c',
        past: '%s\u524d',
        s: '\u6570\u79d2',
        ss: '%d\u79d2',
        m: '1\u5206',
        mm: '%d\u5206',
        h: '1\u6642\u9593',
        hh: '%d\u6642\u9593',
        d: '1\u65e5',
        dd: '%d\u65e5',
        M: '1\u30f6\u6708',
        MM: '%d\u30f6\u6708',
        y: '1\u5e74',
        yy: '%d\u5e74',
      },
    }),
    M.defineLocale('jv', {
      months:
        'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
      weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
      weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
      weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
      longDateFormat: {
        LT: 'HH.mm',
        LTS: 'HH.mm.ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [pukul] HH.mm',
        LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
      },
      meridiemParse: /enjing|siyang|sonten|ndalu/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          'enjing' === a
            ? e
            : 'siyang' === a
            ? 11 <= e
              ? e
              : e + 12
            : 'sonten' === a || 'ndalu' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        return e < 11 ? 'enjing' : e < 15 ? 'siyang' : e < 19 ? 'sonten' : 'ndalu';
      },
      calendar: {
        sameDay: '[Dinten puniko pukul] LT',
        nextDay: '[Mbenjang pukul] LT',
        nextWeek: 'dddd [pukul] LT',
        lastDay: '[Kala wingi pukul] LT',
        lastWeek: 'dddd [kepengker pukul] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'wonten ing %s',
        past: '%s ingkang kepengker',
        s: 'sawetawis detik',
        ss: '%d detik',
        m: 'setunggal menit',
        mm: '%d menit',
        h: 'setunggal jam',
        hh: '%d jam',
        d: 'sedinten',
        dd: '%d dinten',
        M: 'sewulan',
        MM: '%d wulan',
        y: 'setaun',
        yy: '%d taun',
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('ka', {
      months:
        '\u10d8\u10d0\u10dc\u10d5\u10d0\u10e0\u10d8_\u10d7\u10d4\u10d1\u10d4\u10e0\u10d5\u10d0\u10da\u10d8_\u10db\u10d0\u10e0\u10e2\u10d8_\u10d0\u10de\u10e0\u10d8\u10da\u10d8_\u10db\u10d0\u10d8\u10e1\u10d8_\u10d8\u10d5\u10dc\u10d8\u10e1\u10d8_\u10d8\u10d5\u10da\u10d8\u10e1\u10d8_\u10d0\u10d2\u10d5\u10d8\u10e1\u10e2\u10dd_\u10e1\u10d4\u10e5\u10e2\u10d4\u10db\u10d1\u10d4\u10e0\u10d8_\u10dd\u10e5\u10e2\u10dd\u10db\u10d1\u10d4\u10e0\u10d8_\u10dc\u10dd\u10d4\u10db\u10d1\u10d4\u10e0\u10d8_\u10d3\u10d4\u10d9\u10d4\u10db\u10d1\u10d4\u10e0\u10d8'.split(
          '_'
        ),
      monthsShort:
        '\u10d8\u10d0\u10dc_\u10d7\u10d4\u10d1_\u10db\u10d0\u10e0_\u10d0\u10de\u10e0_\u10db\u10d0\u10d8_\u10d8\u10d5\u10dc_\u10d8\u10d5\u10da_\u10d0\u10d2\u10d5_\u10e1\u10d4\u10e5_\u10dd\u10e5\u10e2_\u10dc\u10dd\u10d4_\u10d3\u10d4\u10d9'.split(
          '_'
        ),
      weekdays: {
        standalone:
          '\u10d9\u10d5\u10d8\u10e0\u10d0_\u10dd\u10e0\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10e1\u10d0\u10db\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10dd\u10d7\u10ee\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10ee\u10e3\u10d7\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10de\u10d0\u10e0\u10d0\u10e1\u10d9\u10d4\u10d5\u10d8_\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8'.split(
            '_'
          ),
        format:
          '\u10d9\u10d5\u10d8\u10e0\u10d0\u10e1_\u10dd\u10e0\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10e1\u10d0\u10db\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10dd\u10d7\u10ee\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10ee\u10e3\u10d7\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10de\u10d0\u10e0\u10d0\u10e1\u10d9\u10d4\u10d5\u10e1_\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1'.split(
            '_'
          ),
        isFormat: /(\u10ec\u10d8\u10dc\u10d0|\u10e8\u10d4\u10db\u10d3\u10d4\u10d2)/,
      },
      weekdaysShort:
        '\u10d9\u10d5\u10d8_\u10dd\u10e0\u10e8_\u10e1\u10d0\u10db_\u10dd\u10d7\u10ee_\u10ee\u10e3\u10d7_\u10de\u10d0\u10e0_\u10e8\u10d0\u10d1'.split(
          '_'
        ),
      weekdaysMin:
        '\u10d9\u10d5_\u10dd\u10e0_\u10e1\u10d0_\u10dd\u10d7_\u10ee\u10e3_\u10de\u10d0_\u10e8\u10d0'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[\u10d3\u10e6\u10d4\u10e1] LT[-\u10d6\u10d4]',
        nextDay: '[\u10ee\u10d5\u10d0\u10da] LT[-\u10d6\u10d4]',
        lastDay: '[\u10d2\u10e3\u10e8\u10d8\u10dc] LT[-\u10d6\u10d4]',
        nextWeek: '[\u10e8\u10d4\u10db\u10d3\u10d4\u10d2] dddd LT[-\u10d6\u10d4]',
        lastWeek: '[\u10ec\u10d8\u10dc\u10d0] dddd LT-\u10d6\u10d4',
        sameElse: 'L',
      },
      relativeTime: {
        future: function (e) {
          return e.replace(
            /(\u10ec\u10d0\u10db|\u10ec\u10e3\u10d7|\u10e1\u10d0\u10d0\u10d7|\u10ec\u10d4\u10da|\u10d3\u10e6|\u10d7\u10d5)(\u10d8|\u10d4)/,
            function (e, a, t) {
              return '\u10d8' === t ? a + '\u10e8\u10d8' : a + t + '\u10e8\u10d8';
            }
          );
        },
        past: function (e) {
          return /(\u10ec\u10d0\u10db\u10d8|\u10ec\u10e3\u10d7\u10d8|\u10e1\u10d0\u10d0\u10d7\u10d8|\u10d3\u10e6\u10d4|\u10d7\u10d5\u10d4)/.test(
            e
          )
            ? e.replace(/(\u10d8|\u10d4)$/, '\u10d8\u10e1 \u10ec\u10d8\u10dc')
            : /\u10ec\u10d4\u10da\u10d8/.test(e)
            ? e.replace(/\u10ec\u10d4\u10da\u10d8$/, '\u10ec\u10da\u10d8\u10e1 \u10ec\u10d8\u10dc')
            : e;
        },
        s: '\u10e0\u10d0\u10db\u10d3\u10d4\u10dc\u10d8\u10db\u10d4 \u10ec\u10d0\u10db\u10d8',
        ss: '%d \u10ec\u10d0\u10db\u10d8',
        m: '\u10ec\u10e3\u10d7\u10d8',
        mm: '%d \u10ec\u10e3\u10d7\u10d8',
        h: '\u10e1\u10d0\u10d0\u10d7\u10d8',
        hh: '%d \u10e1\u10d0\u10d0\u10d7\u10d8',
        d: '\u10d3\u10e6\u10d4',
        dd: '%d \u10d3\u10e6\u10d4',
        M: '\u10d7\u10d5\u10d4',
        MM: '%d \u10d7\u10d5\u10d4',
        y: '\u10ec\u10d4\u10da\u10d8',
        yy: '%d \u10ec\u10d4\u10da\u10d8',
      },
      dayOfMonthOrdinalParse: /0|1-\u10da\u10d8|\u10db\u10d4-\d{1,2}|\d{1,2}-\u10d4/,
      ordinal: function (e) {
        return 0 === e
          ? e
          : 1 === e
          ? e + '-\u10da\u10d8'
          : e < 20 || (e <= 100 && e % 20 == 0) || e % 100 == 0
          ? '\u10db\u10d4-' + e
          : e + '-\u10d4';
      },
      week: { dow: 1, doy: 7 },
    });
  var bn = {
    0: '-\u0448\u0456',
    1: '-\u0448\u0456',
    2: '-\u0448\u0456',
    3: '-\u0448\u0456',
    4: '-\u0448\u0456',
    5: '-\u0448\u0456',
    6: '-\u0448\u044b',
    7: '-\u0448\u0456',
    8: '-\u0448\u0456',
    9: '-\u0448\u044b',
    10: '-\u0448\u044b',
    20: '-\u0448\u044b',
    30: '-\u0448\u044b',
    40: '-\u0448\u044b',
    50: '-\u0448\u0456',
    60: '-\u0448\u044b',
    70: '-\u0448\u0456',
    80: '-\u0448\u0456',
    90: '-\u0448\u044b',
    100: '-\u0448\u0456',
  };
  M.defineLocale('kk', {
    months:
      '\u049b\u0430\u04a3\u0442\u0430\u0440_\u0430\u049b\u043f\u0430\u043d_\u043d\u0430\u0443\u0440\u044b\u0437_\u0441\u04d9\u0443\u0456\u0440_\u043c\u0430\u043c\u044b\u0440_\u043c\u0430\u0443\u0441\u044b\u043c_\u0448\u0456\u043b\u0434\u0435_\u0442\u0430\u043c\u044b\u0437_\u049b\u044b\u0440\u043a\u04af\u0439\u0435\u043a_\u049b\u0430\u0437\u0430\u043d_\u049b\u0430\u0440\u0430\u0448\u0430_\u0436\u0435\u043b\u0442\u043e\u049b\u0441\u0430\u043d'.split(
        '_'
      ),
    monthsShort:
      '\u049b\u0430\u04a3_\u0430\u049b\u043f_\u043d\u0430\u0443_\u0441\u04d9\u0443_\u043c\u0430\u043c_\u043c\u0430\u0443_\u0448\u0456\u043b_\u0442\u0430\u043c_\u049b\u044b\u0440_\u049b\u0430\u0437_\u049b\u0430\u0440_\u0436\u0435\u043b'.split(
        '_'
      ),
    weekdays:
      '\u0436\u0435\u043a\u0441\u0435\u043d\u0431\u0456_\u0434\u04af\u0439\u0441\u0435\u043d\u0431\u0456_\u0441\u0435\u0439\u0441\u0435\u043d\u0431\u0456_\u0441\u04d9\u0440\u0441\u0435\u043d\u0431\u0456_\u0431\u0435\u0439\u0441\u0435\u043d\u0431\u0456_\u0436\u04b1\u043c\u0430_\u0441\u0435\u043d\u0431\u0456'.split(
        '_'
      ),
    weekdaysShort:
      '\u0436\u0435\u043a_\u0434\u04af\u0439_\u0441\u0435\u0439_\u0441\u04d9\u0440_\u0431\u0435\u0439_\u0436\u04b1\u043c_\u0441\u0435\u043d'.split(
        '_'
      ),
    weekdaysMin:
      '\u0436\u043a_\u0434\u0439_\u0441\u0439_\u0441\u0440_\u0431\u0439_\u0436\u043c_\u0441\u043d'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[\u0411\u04af\u0433\u0456\u043d \u0441\u0430\u0493\u0430\u0442] LT',
      nextDay: '[\u0415\u0440\u0442\u0435\u04a3 \u0441\u0430\u0493\u0430\u0442] LT',
      nextWeek: 'dddd [\u0441\u0430\u0493\u0430\u0442] LT',
      lastDay: '[\u041a\u0435\u0448\u0435 \u0441\u0430\u0493\u0430\u0442] LT',
      lastWeek:
        '[\u04e8\u0442\u043a\u0435\u043d \u0430\u043f\u0442\u0430\u043d\u044b\u04a3] dddd [\u0441\u0430\u0493\u0430\u0442] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u0456\u0448\u0456\u043d\u0434\u0435',
      past: '%s \u0431\u04b1\u0440\u044b\u043d',
      s: '\u0431\u0456\u0440\u043d\u0435\u0448\u0435 \u0441\u0435\u043a\u0443\u043d\u0434',
      ss: '%d \u0441\u0435\u043a\u0443\u043d\u0434',
      m: '\u0431\u0456\u0440 \u043c\u0438\u043d\u0443\u0442',
      mm: '%d \u043c\u0438\u043d\u0443\u0442',
      h: '\u0431\u0456\u0440 \u0441\u0430\u0493\u0430\u0442',
      hh: '%d \u0441\u0430\u0493\u0430\u0442',
      d: '\u0431\u0456\u0440 \u043a\u04af\u043d',
      dd: '%d \u043a\u04af\u043d',
      M: '\u0431\u0456\u0440 \u0430\u0439',
      MM: '%d \u0430\u0439',
      y: '\u0431\u0456\u0440 \u0436\u044b\u043b',
      yy: '%d \u0436\u044b\u043b',
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(\u0448\u0456|\u0448\u044b)/,
    ordinal: function (e) {
      return e + (bn[e] || bn[e % 10] || bn[100 <= e ? 100 : null]);
    },
    week: { dow: 1, doy: 7 },
  });
  var Sn = {
      1: '\u17e1',
      2: '\u17e2',
      3: '\u17e3',
      4: '\u17e4',
      5: '\u17e5',
      6: '\u17e6',
      7: '\u17e7',
      8: '\u17e8',
      9: '\u17e9',
      0: '\u17e0',
    },
    Hn = {
      '\u17e1': '1',
      '\u17e2': '2',
      '\u17e3': '3',
      '\u17e4': '4',
      '\u17e5': '5',
      '\u17e6': '6',
      '\u17e7': '7',
      '\u17e8': '8',
      '\u17e9': '9',
      '\u17e0': '0',
    };
  M.defineLocale('km', {
    months:
      '\u1798\u1780\u179a\u17b6_\u1780\u17bb\u1798\u17d2\u1797\u17c8_\u1798\u17b8\u1793\u17b6_\u1798\u17c1\u179f\u17b6_\u17a7\u179f\u1797\u17b6_\u1798\u17b7\u1790\u17bb\u1793\u17b6_\u1780\u1780\u17d2\u1780\u178a\u17b6_\u179f\u17b8\u17a0\u17b6_\u1780\u1789\u17d2\u1789\u17b6_\u178f\u17bb\u179b\u17b6_\u179c\u17b7\u1785\u17d2\u1786\u17b7\u1780\u17b6_\u1792\u17d2\u1793\u17bc'.split(
        '_'
      ),
    monthsShort:
      '\u1798\u1780\u179a\u17b6_\u1780\u17bb\u1798\u17d2\u1797\u17c8_\u1798\u17b8\u1793\u17b6_\u1798\u17c1\u179f\u17b6_\u17a7\u179f\u1797\u17b6_\u1798\u17b7\u1790\u17bb\u1793\u17b6_\u1780\u1780\u17d2\u1780\u178a\u17b6_\u179f\u17b8\u17a0\u17b6_\u1780\u1789\u17d2\u1789\u17b6_\u178f\u17bb\u179b\u17b6_\u179c\u17b7\u1785\u17d2\u1786\u17b7\u1780\u17b6_\u1792\u17d2\u1793\u17bc'.split(
        '_'
      ),
    weekdays:
      '\u17a2\u17b6\u1791\u17b7\u178f\u17d2\u1799_\u1785\u17d0\u1793\u17d2\u1791_\u17a2\u1784\u17d2\u1782\u17b6\u179a_\u1796\u17bb\u1792_\u1796\u17d2\u179a\u17a0\u179f\u17d2\u1794\u178f\u17b7\u17cd_\u179f\u17bb\u1780\u17d2\u179a_\u179f\u17c5\u179a\u17cd'.split(
        '_'
      ),
    weekdaysShort: '\u17a2\u17b6_\u1785_\u17a2_\u1796_\u1796\u17d2\u179a_\u179f\u17bb_\u179f'.split(
      '_'
    ),
    weekdaysMin: '\u17a2\u17b6_\u1785_\u17a2_\u1796_\u1796\u17d2\u179a_\u179f\u17bb_\u179f'.split(
      '_'
    ),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    meridiemParse: /\u1796\u17d2\u179a\u17b9\u1780|\u179b\u17d2\u1784\u17b6\u1785/,
    isPM: function (e) {
      return '\u179b\u17d2\u1784\u17b6\u1785' === e;
    },
    meridiem: function (e, a, t) {
      return e < 12 ? '\u1796\u17d2\u179a\u17b9\u1780' : '\u179b\u17d2\u1784\u17b6\u1785';
    },
    calendar: {
      sameDay: '[\u1790\u17d2\u1784\u17c3\u1793\u17c1\u17c7 \u1798\u17c9\u17c4\u1784] LT',
      nextDay: '[\u179f\u17d2\u17a2\u17c2\u1780 \u1798\u17c9\u17c4\u1784] LT',
      nextWeek: 'dddd [\u1798\u17c9\u17c4\u1784] LT',
      lastDay: '[\u1798\u17d2\u179f\u17b7\u179b\u1798\u17b7\u1789 \u1798\u17c9\u17c4\u1784] LT',
      lastWeek:
        'dddd [\u179f\u1794\u17d2\u178f\u17b6\u17a0\u17cd\u1798\u17bb\u1793] [\u1798\u17c9\u17c4\u1784] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s\u1791\u17c0\u178f',
      past: '%s\u1798\u17bb\u1793',
      s: '\u1794\u17c9\u17bb\u1793\u17d2\u1798\u17b6\u1793\u179c\u17b7\u1793\u17b6\u1791\u17b8',
      ss: '%d \u179c\u17b7\u1793\u17b6\u1791\u17b8',
      m: '\u1798\u17bd\u1799\u1793\u17b6\u1791\u17b8',
      mm: '%d \u1793\u17b6\u1791\u17b8',
      h: '\u1798\u17bd\u1799\u1798\u17c9\u17c4\u1784',
      hh: '%d \u1798\u17c9\u17c4\u1784',
      d: '\u1798\u17bd\u1799\u1790\u17d2\u1784\u17c3',
      dd: '%d \u1790\u17d2\u1784\u17c3',
      M: '\u1798\u17bd\u1799\u1781\u17c2',
      MM: '%d \u1781\u17c2',
      y: '\u1798\u17bd\u1799\u1786\u17d2\u1793\u17b6\u17c6',
      yy: '%d \u1786\u17d2\u1793\u17b6\u17c6',
    },
    dayOfMonthOrdinalParse: /\u1791\u17b8\d{1,2}/,
    ordinal: '\u1791\u17b8%d',
    preparse: function (e) {
      return e.replace(
        /[\u17e1\u17e2\u17e3\u17e4\u17e5\u17e6\u17e7\u17e8\u17e9\u17e0]/g,
        function (e) {
          return Hn[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return Sn[e];
      });
    },
    week: { dow: 1, doy: 4 },
  });
  var jn = {
      1: '\u0ce7',
      2: '\u0ce8',
      3: '\u0ce9',
      4: '\u0cea',
      5: '\u0ceb',
      6: '\u0cec',
      7: '\u0ced',
      8: '\u0cee',
      9: '\u0cef',
      0: '\u0ce6',
    },
    xn = {
      '\u0ce7': '1',
      '\u0ce8': '2',
      '\u0ce9': '3',
      '\u0cea': '4',
      '\u0ceb': '5',
      '\u0cec': '6',
      '\u0ced': '7',
      '\u0cee': '8',
      '\u0cef': '9',
      '\u0ce6': '0',
    };
  M.defineLocale('kn', {
    months:
      '\u0c9c\u0ca8\u0cb5\u0cb0\u0cbf_\u0cab\u0cc6\u0cac\u0ccd\u0cb0\u0cb5\u0cb0\u0cbf_\u0cae\u0cbe\u0cb0\u0ccd\u0c9a\u0ccd_\u0c8f\u0caa\u0ccd\u0cb0\u0cbf\u0cb2\u0ccd_\u0cae\u0cc6\u0cd5_\u0c9c\u0cc2\u0ca8\u0ccd_\u0c9c\u0cc1\u0cb2\u0cc6\u0cd6_\u0c86\u0c97\u0cb8\u0ccd\u0c9f\u0ccd_\u0cb8\u0cc6\u0caa\u0ccd\u0c9f\u0cc6\u0c82\u0cac\u0cb0\u0ccd_\u0c85\u0c95\u0ccd\u0c9f\u0cc6\u0cc2\u0cd5\u0cac\u0cb0\u0ccd_\u0ca8\u0cb5\u0cc6\u0c82\u0cac\u0cb0\u0ccd_\u0ca1\u0cbf\u0cb8\u0cc6\u0c82\u0cac\u0cb0\u0ccd'.split(
        '_'
      ),
    monthsShort:
      '\u0c9c\u0ca8_\u0cab\u0cc6\u0cac\u0ccd\u0cb0_\u0cae\u0cbe\u0cb0\u0ccd\u0c9a\u0ccd_\u0c8f\u0caa\u0ccd\u0cb0\u0cbf\u0cb2\u0ccd_\u0cae\u0cc6\u0cd5_\u0c9c\u0cc2\u0ca8\u0ccd_\u0c9c\u0cc1\u0cb2\u0cc6\u0cd6_\u0c86\u0c97\u0cb8\u0ccd\u0c9f\u0ccd_\u0cb8\u0cc6\u0caa\u0ccd\u0c9f\u0cc6\u0c82_\u0c85\u0c95\u0ccd\u0c9f\u0cc6\u0cc2\u0cd5_\u0ca8\u0cb5\u0cc6\u0c82_\u0ca1\u0cbf\u0cb8\u0cc6\u0c82'.split(
        '_'
      ),
    monthsParseExact: !0,
    weekdays:
      '\u0cad\u0cbe\u0ca8\u0cc1\u0cb5\u0cbe\u0cb0_\u0cb8\u0cc6\u0cc2\u0cd5\u0cae\u0cb5\u0cbe\u0cb0_\u0cae\u0c82\u0c97\u0cb3\u0cb5\u0cbe\u0cb0_\u0cac\u0cc1\u0ca7\u0cb5\u0cbe\u0cb0_\u0c97\u0cc1\u0cb0\u0cc1\u0cb5\u0cbe\u0cb0_\u0cb6\u0cc1\u0c95\u0ccd\u0cb0\u0cb5\u0cbe\u0cb0_\u0cb6\u0ca8\u0cbf\u0cb5\u0cbe\u0cb0'.split(
        '_'
      ),
    weekdaysShort:
      '\u0cad\u0cbe\u0ca8\u0cc1_\u0cb8\u0cc6\u0cc2\u0cd5\u0cae_\u0cae\u0c82\u0c97\u0cb3_\u0cac\u0cc1\u0ca7_\u0c97\u0cc1\u0cb0\u0cc1_\u0cb6\u0cc1\u0c95\u0ccd\u0cb0_\u0cb6\u0ca8\u0cbf'.split(
        '_'
      ),
    weekdaysMin:
      '\u0cad\u0cbe_\u0cb8\u0cc6\u0cc2\u0cd5_\u0cae\u0c82_\u0cac\u0cc1_\u0c97\u0cc1_\u0cb6\u0cc1_\u0cb6'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'A h:mm',
      LTS: 'A h:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A h:mm',
      LLLL: 'dddd, D MMMM YYYY, A h:mm',
    },
    calendar: {
      sameDay: '[\u0c87\u0c82\u0ca6\u0cc1] LT',
      nextDay: '[\u0ca8\u0cbe\u0cb3\u0cc6] LT',
      nextWeek: 'dddd, LT',
      lastDay: '[\u0ca8\u0cbf\u0ca8\u0ccd\u0ca8\u0cc6] LT',
      lastWeek: '[\u0c95\u0cc6\u0cc2\u0ca8\u0cc6\u0caf] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u0ca8\u0c82\u0ca4\u0cb0',
      past: '%s \u0cb9\u0cbf\u0c82\u0ca6\u0cc6',
      s: '\u0c95\u0cc6\u0cb2\u0cb5\u0cc1 \u0c95\u0ccd\u0cb7\u0ca3\u0c97\u0cb3\u0cc1',
      ss: '%d \u0cb8\u0cc6\u0c95\u0cc6\u0c82\u0ca1\u0cc1\u0c97\u0cb3\u0cc1',
      m: '\u0c92\u0c82\u0ca6\u0cc1 \u0ca8\u0cbf\u0cae\u0cbf\u0cb7',
      mm: '%d \u0ca8\u0cbf\u0cae\u0cbf\u0cb7',
      h: '\u0c92\u0c82\u0ca6\u0cc1 \u0c97\u0c82\u0c9f\u0cc6',
      hh: '%d \u0c97\u0c82\u0c9f\u0cc6',
      d: '\u0c92\u0c82\u0ca6\u0cc1 \u0ca6\u0cbf\u0ca8',
      dd: '%d \u0ca6\u0cbf\u0ca8',
      M: '\u0c92\u0c82\u0ca6\u0cc1 \u0ca4\u0cbf\u0c82\u0c97\u0cb3\u0cc1',
      MM: '%d \u0ca4\u0cbf\u0c82\u0c97\u0cb3\u0cc1',
      y: '\u0c92\u0c82\u0ca6\u0cc1 \u0cb5\u0cb0\u0ccd\u0cb7',
      yy: '%d \u0cb5\u0cb0\u0ccd\u0cb7',
    },
    preparse: function (e) {
      return e.replace(
        /[\u0ce7\u0ce8\u0ce9\u0cea\u0ceb\u0cec\u0ced\u0cee\u0cef\u0ce6]/g,
        function (e) {
          return xn[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return jn[e];
      });
    },
    meridiemParse:
      /\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf|\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6|\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8|\u0cb8\u0c82\u0c9c\u0cc6/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf' === a
          ? e < 4
            ? e
            : e + 12
          : '\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6' === a
          ? e
          : '\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8' === a
          ? 10 <= e
            ? e
            : e + 12
          : '\u0cb8\u0c82\u0c9c\u0cc6' === a
          ? e + 12
          : void 0
      );
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf'
        : e < 10
        ? '\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6'
        : e < 17
        ? '\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8'
        : e < 20
        ? '\u0cb8\u0c82\u0c9c\u0cc6'
        : '\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf';
    },
    dayOfMonthOrdinalParse: /\d{1,2}(\u0ca8\u0cc6\u0cd5)/,
    ordinal: function (e) {
      return e + '\u0ca8\u0cc6\u0cd5';
    },
    week: { dow: 0, doy: 6 },
  }),
    M.defineLocale('ko', {
      months:
        '1\uc6d4_2\uc6d4_3\uc6d4_4\uc6d4_5\uc6d4_6\uc6d4_7\uc6d4_8\uc6d4_9\uc6d4_10\uc6d4_11\uc6d4_12\uc6d4'.split(
          '_'
        ),
      monthsShort:
        '1\uc6d4_2\uc6d4_3\uc6d4_4\uc6d4_5\uc6d4_6\uc6d4_7\uc6d4_8\uc6d4_9\uc6d4_10\uc6d4_11\uc6d4_12\uc6d4'.split(
          '_'
        ),
      weekdays:
        '\uc77c\uc694\uc77c_\uc6d4\uc694\uc77c_\ud654\uc694\uc77c_\uc218\uc694\uc77c_\ubaa9\uc694\uc77c_\uae08\uc694\uc77c_\ud1a0\uc694\uc77c'.split(
          '_'
        ),
      weekdaysShort: '\uc77c_\uc6d4_\ud654_\uc218_\ubaa9_\uae08_\ud1a0'.split('_'),
      weekdaysMin: '\uc77c_\uc6d4_\ud654_\uc218_\ubaa9_\uae08_\ud1a0'.split('_'),
      longDateFormat: {
        LT: 'A h:mm',
        LTS: 'A h:mm:ss',
        L: 'YYYY.MM.DD.',
        LL: 'YYYY\ub144 MMMM D\uc77c',
        LLL: 'YYYY\ub144 MMMM D\uc77c A h:mm',
        LLLL: 'YYYY\ub144 MMMM D\uc77c dddd A h:mm',
        l: 'YYYY.MM.DD.',
        ll: 'YYYY\ub144 MMMM D\uc77c',
        lll: 'YYYY\ub144 MMMM D\uc77c A h:mm',
        llll: 'YYYY\ub144 MMMM D\uc77c dddd A h:mm',
      },
      calendar: {
        sameDay: '\uc624\ub298 LT',
        nextDay: '\ub0b4\uc77c LT',
        nextWeek: 'dddd LT',
        lastDay: '\uc5b4\uc81c LT',
        lastWeek: '\uc9c0\ub09c\uc8fc dddd LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s \ud6c4',
        past: '%s \uc804',
        s: '\uba87 \ucd08',
        ss: '%d\ucd08',
        m: '1\ubd84',
        mm: '%d\ubd84',
        h: '\ud55c \uc2dc\uac04',
        hh: '%d\uc2dc\uac04',
        d: '\ud558\ub8e8',
        dd: '%d\uc77c',
        M: '\ud55c \ub2ec',
        MM: '%d\ub2ec',
        y: '\uc77c \ub144',
        yy: '%d\ub144',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(\uc77c|\uc6d4|\uc8fc)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'd':
          case 'D':
          case 'DDD':
            return e + '\uc77c';
          case 'M':
            return e + '\uc6d4';
          case 'w':
          case 'W':
            return e + '\uc8fc';
          default:
            return e;
        }
      },
      meridiemParse: /\uc624\uc804|\uc624\ud6c4/,
      isPM: function (e) {
        return '\uc624\ud6c4' === e;
      },
      meridiem: function (e, a, t) {
        return e < 12 ? '\uc624\uc804' : '\uc624\ud6c4';
      },
    });
  var Pn = {
      1: '\u0661',
      2: '\u0662',
      3: '\u0663',
      4: '\u0664',
      5: '\u0665',
      6: '\u0666',
      7: '\u0667',
      8: '\u0668',
      9: '\u0669',
      0: '\u0660',
    },
    On = {
      '\u0661': '1',
      '\u0662': '2',
      '\u0663': '3',
      '\u0664': '4',
      '\u0665': '5',
      '\u0666': '6',
      '\u0667': '7',
      '\u0668': '8',
      '\u0669': '9',
      '\u0660': '0',
    },
    Wn = [
      '\u06a9\u0627\u0646\u0648\u0646\u06cc \u062f\u0648\u0648\u06d5\u0645',
      '\u0634\u0648\u0628\u0627\u062a',
      '\u0626\u0627\u0632\u0627\u0631',
      '\u0646\u06cc\u0633\u0627\u0646',
      '\u0626\u0627\u06cc\u0627\u0631',
      '\u062d\u0648\u0632\u06d5\u06cc\u0631\u0627\u0646',
      '\u062a\u06d5\u0645\u0645\u0648\u0632',
      '\u0626\u0627\u0628',
      '\u0626\u06d5\u06cc\u0644\u0648\u0648\u0644',
      '\u062a\u0634\u0631\u06cc\u0646\u06cc \u06cc\u06d5\u0643\u06d5\u0645',
      '\u062a\u0634\u0631\u06cc\u0646\u06cc \u062f\u0648\u0648\u06d5\u0645',
      '\u0643\u0627\u0646\u0648\u0646\u06cc \u06cc\u06d5\u06a9\u06d5\u0645',
    ];
  M.defineLocale('ku', {
    months: Wn,
    monthsShort: Wn,
    weekdays:
      '\u06cc\u0647\u200c\u0643\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u062f\u0648\u0648\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0633\u06ce\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0686\u0648\u0627\u0631\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u067e\u06ce\u0646\u062c\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0647\u0647\u200c\u06cc\u0646\u06cc_\u0634\u0647\u200c\u0645\u0645\u0647\u200c'.split(
        '_'
      ),
    weekdaysShort:
      '\u06cc\u0647\u200c\u0643\u0634\u0647\u200c\u0645_\u062f\u0648\u0648\u0634\u0647\u200c\u0645_\u0633\u06ce\u0634\u0647\u200c\u0645_\u0686\u0648\u0627\u0631\u0634\u0647\u200c\u0645_\u067e\u06ce\u0646\u062c\u0634\u0647\u200c\u0645_\u0647\u0647\u200c\u06cc\u0646\u06cc_\u0634\u0647\u200c\u0645\u0645\u0647\u200c'.split(
        '_'
      ),
    weekdaysMin: '\u06cc_\u062f_\u0633_\u0686_\u067e_\u0647_\u0634'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    meridiemParse:
      /\u0626\u06ce\u0648\u0627\u0631\u0647\u200c|\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc/,
    isPM: function (e) {
      return /\u0626\u06ce\u0648\u0627\u0631\u0647\u200c/.test(e);
    },
    meridiem: function (e, a, t) {
      return e < 12
        ? '\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc'
        : '\u0626\u06ce\u0648\u0627\u0631\u0647\u200c';
    },
    calendar: {
      sameDay:
        '[\u0626\u0647\u200c\u0645\u0631\u06c6 \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT',
      nextDay:
        '[\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT',
      nextWeek: 'dddd [\u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT',
      lastDay: '[\u062f\u0648\u06ce\u0646\u06ce \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT',
      lastWeek: 'dddd [\u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u0644\u0647\u200c %s',
      past: '%s',
      s: '\u0686\u0647\u200c\u0646\u062f \u0686\u0631\u0643\u0647\u200c\u06cc\u0647\u200c\u0643',
      ss: '\u0686\u0631\u0643\u0647\u200c %d',
      m: '\u06cc\u0647\u200c\u0643 \u062e\u0648\u0644\u0647\u200c\u0643',
      mm: '%d \u062e\u0648\u0644\u0647\u200c\u0643',
      h: '\u06cc\u0647\u200c\u0643 \u0643\u0627\u062a\u0698\u0645\u06ce\u0631',
      hh: '%d \u0643\u0627\u062a\u0698\u0645\u06ce\u0631',
      d: '\u06cc\u0647\u200c\u0643 \u0695\u06c6\u0698',
      dd: '%d \u0695\u06c6\u0698',
      M: '\u06cc\u0647\u200c\u0643 \u0645\u0627\u0646\u06af',
      MM: '%d \u0645\u0627\u0646\u06af',
      y: '\u06cc\u0647\u200c\u0643 \u0633\u0627\u06b5',
      yy: '%d \u0633\u0627\u06b5',
    },
    preparse: function (e) {
      return e
        .replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function (e) {
          return On[e];
        })
        .replace(/\u060c/g, ',');
    },
    postformat: function (e) {
      return e
        .replace(/\d/g, function (e) {
          return Pn[e];
        })
        .replace(/,/g, '\u060c');
    },
    week: { dow: 6, doy: 12 },
  });
  var An = {
    0: '-\u0447\u04af',
    1: '-\u0447\u0438',
    2: '-\u0447\u0438',
    3: '-\u0447\u04af',
    4: '-\u0447\u04af',
    5: '-\u0447\u0438',
    6: '-\u0447\u044b',
    7: '-\u0447\u0438',
    8: '-\u0447\u0438',
    9: '-\u0447\u0443',
    10: '-\u0447\u0443',
    20: '-\u0447\u044b',
    30: '-\u0447\u0443',
    40: '-\u0447\u044b',
    50: '-\u0447\u04af',
    60: '-\u0447\u044b',
    70: '-\u0447\u0438',
    80: '-\u0447\u0438',
    90: '-\u0447\u0443',
    100: '-\u0447\u04af',
  };
  function En(e, a, t, s) {
    var n = {
      m: ['eng Minutt', 'enger Minutt'],
      h: ['eng Stonn', 'enger Stonn'],
      d: ['een Dag', 'engem Dag'],
      M: ['ee Mount', 'engem Mount'],
      y: ['ee Joer', 'engem Joer'],
    };
    return a ? n[t][0] : n[t][1];
  }
  function Fn(e) {
    if (((e = parseInt(e, 10)), isNaN(e))) return !1;
    if (e < 0) return !0;
    if (e < 10) return 4 <= e && e <= 7;
    if (e < 100) {
      var a = e % 10;
      return 0 == a ? Fn(e / 10) : Fn(a);
    }
    if (e < 1e4) {
      for (; 10 <= e; ) e /= 10;
      return Fn(e);
    }
    return Fn((e /= 1e3));
  }
  M.defineLocale('ky', {
    months:
      '\u044f\u043d\u0432\u0430\u0440\u044c_\u0444\u0435\u0432\u0440\u0430\u043b\u044c_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b\u044c_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c_\u043e\u043a\u0442\u044f\u0431\u0440\u044c_\u043d\u043e\u044f\u0431\u0440\u044c_\u0434\u0435\u043a\u0430\u0431\u0440\u044c'.split(
        '_'
      ),
    monthsShort:
      '\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a'.split(
        '_'
      ),
    weekdays:
      '\u0416\u0435\u043a\u0448\u0435\u043c\u0431\u0438_\u0414\u04af\u0439\u0448\u04e9\u043c\u0431\u04af_\u0428\u0435\u0439\u0448\u0435\u043c\u0431\u0438_\u0428\u0430\u0440\u0448\u0435\u043c\u0431\u0438_\u0411\u0435\u0439\u0448\u0435\u043c\u0431\u0438_\u0416\u0443\u043c\u0430_\u0418\u0448\u0435\u043c\u0431\u0438'.split(
        '_'
      ),
    weekdaysShort:
      '\u0416\u0435\u043a_\u0414\u04af\u0439_\u0428\u0435\u0439_\u0428\u0430\u0440_\u0411\u0435\u0439_\u0416\u0443\u043c_\u0418\u0448\u0435'.split(
        '_'
      ),
    weekdaysMin:
      '\u0416\u043a_\u0414\u0439_\u0428\u0439_\u0428\u0440_\u0411\u0439_\u0416\u043c_\u0418\u0448'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[\u0411\u04af\u0433\u04af\u043d \u0441\u0430\u0430\u0442] LT',
      nextDay: '[\u042d\u0440\u0442\u0435\u04a3 \u0441\u0430\u0430\u0442] LT',
      nextWeek: 'dddd [\u0441\u0430\u0430\u0442] LT',
      lastDay: '[\u041a\u0435\u0447\u044d\u044d \u0441\u0430\u0430\u0442] LT',
      lastWeek:
        '[\u04e8\u0442\u043a\u04e9\u043d \u0430\u043f\u0442\u0430\u043d\u044b\u043d] dddd [\u043a\u04af\u043d\u04af] [\u0441\u0430\u0430\u0442] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u0438\u0447\u0438\u043d\u0434\u0435',
      past: '%s \u043c\u0443\u0440\u0443\u043d',
      s: '\u0431\u0438\u0440\u043d\u0435\u0447\u0435 \u0441\u0435\u043a\u0443\u043d\u0434',
      ss: '%d \u0441\u0435\u043a\u0443\u043d\u0434',
      m: '\u0431\u0438\u0440 \u043c\u04af\u043d\u04e9\u0442',
      mm: '%d \u043c\u04af\u043d\u04e9\u0442',
      h: '\u0431\u0438\u0440 \u0441\u0430\u0430\u0442',
      hh: '%d \u0441\u0430\u0430\u0442',
      d: '\u0431\u0438\u0440 \u043a\u04af\u043d',
      dd: '%d \u043a\u04af\u043d',
      M: '\u0431\u0438\u0440 \u0430\u0439',
      MM: '%d \u0430\u0439',
      y: '\u0431\u0438\u0440 \u0436\u044b\u043b',
      yy: '%d \u0436\u044b\u043b',
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(\u0447\u0438|\u0447\u044b|\u0447\u04af|\u0447\u0443)/,
    ordinal: function (e) {
      return e + (An[e] || An[e % 10] || An[100 <= e ? 100 : null]);
    },
    week: { dow: 1, doy: 7 },
  }),
    M.defineLocale('lb', {
      months:
        'Januar_Februar_M\xe4erz_Abr\xebll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
          '_'
        ),
      monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'Sonndeg_M\xe9indeg_D\xebnschdeg_M\xebttwoch_Donneschdeg_Freideg_Samschdeg'.split(
        '_'
      ),
      weekdaysShort: 'So._M\xe9._D\xeb._M\xeb._Do._Fr._Sa.'.split('_'),
      weekdaysMin: 'So_M\xe9_D\xeb_M\xeb_Do_Fr_Sa'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'H:mm [Auer]',
        LTS: 'H:mm:ss [Auer]',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm [Auer]',
        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]',
      },
      calendar: {
        sameDay: '[Haut um] LT',
        sameElse: 'L',
        nextDay: '[Muer um] LT',
        nextWeek: 'dddd [um] LT',
        lastDay: '[G\xebschter um] LT',
        lastWeek: function () {
          switch (this.day()) {
            case 2:
            case 4:
              return '[Leschten] dddd [um] LT';
            default:
              return '[Leschte] dddd [um] LT';
          }
        },
      },
      relativeTime: {
        future: function (e) {
          return Fn(e.substr(0, e.indexOf(' '))) ? 'a ' + e : 'an ' + e;
        },
        past: function (e) {
          return Fn(e.substr(0, e.indexOf(' '))) ? 'viru ' + e : 'virun ' + e;
        },
        s: 'e puer Sekonnen',
        ss: '%d Sekonnen',
        m: En,
        mm: '%d Minutten',
        h: En,
        hh: '%d Stonnen',
        d: En,
        dd: '%d Deeg',
        M: En,
        MM: '%d M\xe9int',
        y: En,
        yy: '%d Joer',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('lo', {
      months:
        '\u0ea1\u0eb1\u0e87\u0e81\u0ead\u0e99_\u0e81\u0eb8\u0ea1\u0e9e\u0eb2_\u0ea1\u0eb5\u0e99\u0eb2_\u0ec0\u0ea1\u0eaa\u0eb2_\u0e9e\u0eb6\u0e94\u0eaa\u0eb0\u0e9e\u0eb2_\u0ea1\u0eb4\u0e96\u0eb8\u0e99\u0eb2_\u0e81\u0ecd\u0ea5\u0eb0\u0e81\u0ebb\u0e94_\u0eaa\u0eb4\u0e87\u0eab\u0eb2_\u0e81\u0eb1\u0e99\u0e8d\u0eb2_\u0e95\u0eb8\u0ea5\u0eb2_\u0e9e\u0eb0\u0e88\u0eb4\u0e81_\u0e97\u0eb1\u0e99\u0ea7\u0eb2'.split(
          '_'
        ),
      monthsShort:
        '\u0ea1\u0eb1\u0e87\u0e81\u0ead\u0e99_\u0e81\u0eb8\u0ea1\u0e9e\u0eb2_\u0ea1\u0eb5\u0e99\u0eb2_\u0ec0\u0ea1\u0eaa\u0eb2_\u0e9e\u0eb6\u0e94\u0eaa\u0eb0\u0e9e\u0eb2_\u0ea1\u0eb4\u0e96\u0eb8\u0e99\u0eb2_\u0e81\u0ecd\u0ea5\u0eb0\u0e81\u0ebb\u0e94_\u0eaa\u0eb4\u0e87\u0eab\u0eb2_\u0e81\u0eb1\u0e99\u0e8d\u0eb2_\u0e95\u0eb8\u0ea5\u0eb2_\u0e9e\u0eb0\u0e88\u0eb4\u0e81_\u0e97\u0eb1\u0e99\u0ea7\u0eb2'.split(
          '_'
        ),
      weekdays:
        '\u0ead\u0eb2\u0e97\u0eb4\u0e94_\u0e88\u0eb1\u0e99_\u0ead\u0eb1\u0e87\u0e84\u0eb2\u0e99_\u0e9e\u0eb8\u0e94_\u0e9e\u0eb0\u0eab\u0eb1\u0e94_\u0eaa\u0eb8\u0e81_\u0ec0\u0eaa\u0ebb\u0eb2'.split(
          '_'
        ),
      weekdaysShort:
        '\u0e97\u0eb4\u0e94_\u0e88\u0eb1\u0e99_\u0ead\u0eb1\u0e87\u0e84\u0eb2\u0e99_\u0e9e\u0eb8\u0e94_\u0e9e\u0eb0\u0eab\u0eb1\u0e94_\u0eaa\u0eb8\u0e81_\u0ec0\u0eaa\u0ebb\u0eb2'.split(
          '_'
        ),
      weekdaysMin: '\u0e97_\u0e88_\u0ead\u0e84_\u0e9e_\u0e9e\u0eab_\u0eaa\u0e81_\u0eaa'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: '\u0ea7\u0eb1\u0e99dddd D MMMM YYYY HH:mm',
      },
      meridiemParse:
        /\u0e95\u0ead\u0e99\u0ec0\u0e8a\u0ebb\u0ec9\u0eb2|\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87/,
      isPM: function (e) {
        return '\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87' === e;
      },
      meridiem: function (e, a, t) {
        return e < 12
          ? '\u0e95\u0ead\u0e99\u0ec0\u0e8a\u0ebb\u0ec9\u0eb2'
          : '\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87';
      },
      calendar: {
        sameDay: '[\u0ea1\u0eb7\u0ec9\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT',
        nextDay: '[\u0ea1\u0eb7\u0ec9\u0ead\u0eb7\u0ec8\u0e99\u0ec0\u0ea7\u0ea5\u0eb2] LT',
        nextWeek: '[\u0ea7\u0eb1\u0e99]dddd[\u0edc\u0ec9\u0eb2\u0ec0\u0ea7\u0ea5\u0eb2] LT',
        lastDay:
          '[\u0ea1\u0eb7\u0ec9\u0ea7\u0eb2\u0e99\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT',
        lastWeek:
          '[\u0ea7\u0eb1\u0e99]dddd[\u0ec1\u0ea5\u0ec9\u0ea7\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u0ead\u0eb5\u0e81 %s',
        past: '%s\u0e9c\u0ec8\u0eb2\u0e99\u0ea1\u0eb2',
        s: '\u0e9a\u0ecd\u0ec8\u0ec0\u0e97\u0ebb\u0ec8\u0eb2\u0ec3\u0e94\u0ea7\u0eb4\u0e99\u0eb2\u0e97\u0eb5',
        ss: '%d \u0ea7\u0eb4\u0e99\u0eb2\u0e97\u0eb5',
        m: '1 \u0e99\u0eb2\u0e97\u0eb5',
        mm: '%d \u0e99\u0eb2\u0e97\u0eb5',
        h: '1 \u0e8a\u0ebb\u0ec8\u0ea7\u0ec2\u0ea1\u0e87',
        hh: '%d \u0e8a\u0ebb\u0ec8\u0ea7\u0ec2\u0ea1\u0e87',
        d: '1 \u0ea1\u0eb7\u0ec9',
        dd: '%d \u0ea1\u0eb7\u0ec9',
        M: '1 \u0ec0\u0e94\u0eb7\u0ead\u0e99',
        MM: '%d \u0ec0\u0e94\u0eb7\u0ead\u0e99',
        y: '1 \u0e9b\u0eb5',
        yy: '%d \u0e9b\u0eb5',
      },
      dayOfMonthOrdinalParse: /(\u0e97\u0eb5\u0ec8)\d{1,2}/,
      ordinal: function (e) {
        return '\u0e97\u0eb5\u0ec8' + e;
      },
    });
  var zn = {
    ss: 'sekund\u0117_sekund\u017ei\u0173_sekundes',
    m: 'minut\u0117_minut\u0117s_minut\u0119',
    mm: 'minut\u0117s_minu\u010di\u0173_minutes',
    h: 'valanda_valandos_valand\u0105',
    hh: 'valandos_valand\u0173_valandas',
    d: 'diena_dienos_dien\u0105',
    dd: 'dienos_dien\u0173_dienas',
    M: 'm\u0117nuo_m\u0117nesio_m\u0117nes\u012f',
    MM: 'm\u0117nesiai_m\u0117nesi\u0173_m\u0117nesius',
    y: 'metai_met\u0173_metus',
    yy: 'metai_met\u0173_metus',
  };
  function Nn(e, a, t, s) {
    return a ? Rn(t)[0] : s ? Rn(t)[1] : Rn(t)[2];
  }
  function Jn(e) {
    return e % 10 == 0 || (10 < e && e < 20);
  }
  function Rn(e) {
    return zn[e].split('_');
  }
  function Cn(e, a, t, s) {
    var n = e + ' ';
    return 1 === e
      ? n + Nn(0, a, t[0], s)
      : a
      ? n + (Jn(e) ? Rn(t)[1] : Rn(t)[0])
      : s
      ? n + Rn(t)[1]
      : n + (Jn(e) ? Rn(t)[1] : Rn(t)[2]);
  }
  M.defineLocale('lt', {
    months: {
      format:
        'sausio_vasario_kovo_baland\u017eio_gegu\u017e\u0117s_bir\u017eelio_liepos_rugpj\u016b\u010dio_rugs\u0117jo_spalio_lapkri\u010dio_gruod\u017eio'.split(
          '_'
        ),
      standalone:
        'sausis_vasaris_kovas_balandis_gegu\u017e\u0117_bir\u017eelis_liepa_rugpj\u016btis_rugs\u0117jis_spalis_lapkritis_gruodis'.split(
          '_'
        ),
      isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
    },
    monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
    weekdays: {
      format:
        'sekmadien\u012f_pirmadien\u012f_antradien\u012f_tre\u010diadien\u012f_ketvirtadien\u012f_penktadien\u012f_\u0161e\u0161tadien\u012f'.split(
          '_'
        ),
      standalone:
        'sekmadienis_pirmadienis_antradienis_tre\u010diadienis_ketvirtadienis_penktadienis_\u0161e\u0161tadienis'.split(
          '_'
        ),
      isFormat: /dddd HH:mm/,
    },
    weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_\u0160e\u0161'.split('_'),
    weekdaysMin: 'S_P_A_T_K_Pn_\u0160'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'YYYY-MM-DD',
      LL: 'YYYY [m.] MMMM D [d.]',
      LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
      LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
      l: 'YYYY-MM-DD',
      ll: 'YYYY [m.] MMMM D [d.]',
      lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
      llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]',
    },
    calendar: {
      sameDay: '[\u0160iandien] LT',
      nextDay: '[Rytoj] LT',
      nextWeek: 'dddd LT',
      lastDay: '[Vakar] LT',
      lastWeek: '[Pra\u0117jus\u012f] dddd LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'po %s',
      past: 'prie\u0161 %s',
      s: function (e, a, t, s) {
        return a
          ? 'kelios sekund\u0117s'
          : s
          ? 'keli\u0173 sekund\u017ei\u0173'
          : 'kelias sekundes';
      },
      ss: Cn,
      m: Nn,
      mm: Cn,
      h: Nn,
      hh: Cn,
      d: Nn,
      dd: Cn,
      M: Nn,
      MM: Cn,
      y: Nn,
      yy: Cn,
    },
    dayOfMonthOrdinalParse: /\d{1,2}-oji/,
    ordinal: function (e) {
      return e + '-oji';
    },
    week: { dow: 1, doy: 4 },
  });
  var In = {
    ss: 'sekundes_sekund\u0113m_sekunde_sekundes'.split('_'),
    m: 'min\u016btes_min\u016bt\u0113m_min\u016bte_min\u016btes'.split('_'),
    mm: 'min\u016btes_min\u016bt\u0113m_min\u016bte_min\u016btes'.split('_'),
    h: 'stundas_stund\u0101m_stunda_stundas'.split('_'),
    hh: 'stundas_stund\u0101m_stunda_stundas'.split('_'),
    d: 'dienas_dien\u0101m_diena_dienas'.split('_'),
    dd: 'dienas_dien\u0101m_diena_dienas'.split('_'),
    M: 'm\u0113ne\u0161a_m\u0113ne\u0161iem_m\u0113nesis_m\u0113ne\u0161i'.split('_'),
    MM: 'm\u0113ne\u0161a_m\u0113ne\u0161iem_m\u0113nesis_m\u0113ne\u0161i'.split('_'),
    y: 'gada_gadiem_gads_gadi'.split('_'),
    yy: 'gada_gadiem_gads_gadi'.split('_'),
  };
  function Un(e, a, t) {
    return t
      ? a % 10 == 1 && a % 100 != 11
        ? e[2]
        : e[3]
      : a % 10 == 1 && a % 100 != 11
      ? e[0]
      : e[1];
  }
  function Gn(e, a, t) {
    return e + ' ' + Un(In[t], e, a);
  }
  function Vn(e, a, t) {
    return Un(In[t], e, a);
  }
  M.defineLocale('lv', {
    months:
      'janv\u0101ris_febru\u0101ris_marts_apr\u012blis_maijs_j\u016bnijs_j\u016blijs_augusts_septembris_oktobris_novembris_decembris'.split(
        '_'
      ),
    monthsShort: 'jan_feb_mar_apr_mai_j\u016bn_j\u016bl_aug_sep_okt_nov_dec'.split('_'),
    weekdays:
      'sv\u0113tdiena_pirmdiena_otrdiena_tre\u0161diena_ceturtdiena_piektdiena_sestdiena'.split(
        '_'
      ),
    weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY.',
      LL: 'YYYY. [gada] D. MMMM',
      LLL: 'YYYY. [gada] D. MMMM, HH:mm',
      LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm',
    },
    calendar: {
      sameDay: '[\u0160odien pulksten] LT',
      nextDay: '[R\u012bt pulksten] LT',
      nextWeek: 'dddd [pulksten] LT',
      lastDay: '[Vakar pulksten] LT',
      lastWeek: '[Pag\u0101ju\u0161\u0101] dddd [pulksten] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'p\u0113c %s',
      past: 'pirms %s',
      s: function (e, a) {
        return a ? 'da\u017eas sekundes' : 'da\u017e\u0101m sekund\u0113m';
      },
      ss: Gn,
      m: Vn,
      mm: Gn,
      h: Vn,
      hh: Gn,
      d: Vn,
      dd: Gn,
      M: Vn,
      MM: Gn,
      y: Vn,
      yy: Gn,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 4 },
  });
  var Bn = {
    words: {
      ss: ['sekund', 'sekunda', 'sekundi'],
      m: ['jedan minut', 'jednog minuta'],
      mm: ['minut', 'minuta', 'minuta'],
      h: ['jedan sat', 'jednog sata'],
      hh: ['sat', 'sata', 'sati'],
      dd: ['dan', 'dana', 'dana'],
      MM: ['mjesec', 'mjeseca', 'mjeseci'],
      yy: ['godina', 'godine', 'godina'],
    },
    correctGrammaticalCase: function (e, a) {
      return 1 === e ? a[0] : 2 <= e && e <= 4 ? a[1] : a[2];
    },
    translate: function (e, a, t) {
      var s = Bn.words[t];
      return 1 === t.length ? (a ? s[0] : s[1]) : e + ' ' + Bn.correctGrammaticalCase(e, s);
    },
  };
  function Kn(e, a, t, s) {
    switch (t) {
      case 's':
        return a
          ? '\u0445\u044d\u0434\u0445\u044d\u043d \u0441\u0435\u043a\u0443\u043d\u0434'
          : '\u0445\u044d\u0434\u0445\u044d\u043d \u0441\u0435\u043a\u0443\u043d\u0434\u044b\u043d';
      case 'ss':
        return (
          e +
          (a
            ? ' \u0441\u0435\u043a\u0443\u043d\u0434'
            : ' \u0441\u0435\u043a\u0443\u043d\u0434\u044b\u043d')
        );
      case 'm':
      case 'mm':
        return (
          e +
          (a ? ' \u043c\u0438\u043d\u0443\u0442' : ' \u043c\u0438\u043d\u0443\u0442\u044b\u043d')
        );
      case 'h':
      case 'hh':
        return e + (a ? ' \u0446\u0430\u0433' : ' \u0446\u0430\u0433\u0438\u0439\u043d');
      case 'd':
      case 'dd':
        return e + (a ? ' \u04e9\u0434\u04e9\u0440' : ' \u04e9\u0434\u0440\u0438\u0439\u043d');
      case 'M':
      case 'MM':
        return e + (a ? ' \u0441\u0430\u0440' : ' \u0441\u0430\u0440\u044b\u043d');
      case 'y':
      case 'yy':
        return e + (a ? ' \u0436\u0438\u043b' : ' \u0436\u0438\u043b\u0438\u0439\u043d');
      default:
        return e;
    }
  }
  M.defineLocale('me', {
    months:
      'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: !0,
    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sri._\u010det._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_\u010de_pe_su'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D. MMMM YYYY',
      LLL: 'D. MMMM YYYY H:mm',
      LLLL: 'dddd, D. MMMM YYYY H:mm',
    },
    calendar: {
      sameDay: '[danas u] LT',
      nextDay: '[sjutra u] LT',
      nextWeek: function () {
        switch (this.day()) {
          case 0:
            return '[u] [nedjelju] [u] LT';
          case 3:
            return '[u] [srijedu] [u] LT';
          case 6:
            return '[u] [subotu] [u] LT';
          case 1:
          case 2:
          case 4:
          case 5:
            return '[u] dddd [u] LT';
        }
      },
      lastDay: '[ju\u010de u] LT',
      lastWeek: function () {
        return [
          '[pro\u0161le] [nedjelje] [u] LT',
          '[pro\u0161log] [ponedjeljka] [u] LT',
          '[pro\u0161log] [utorka] [u] LT',
          '[pro\u0161le] [srijede] [u] LT',
          '[pro\u0161log] [\u010detvrtka] [u] LT',
          '[pro\u0161log] [petka] [u] LT',
          '[pro\u0161le] [subote] [u] LT',
        ][this.day()];
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'za %s',
      past: 'prije %s',
      s: 'nekoliko sekundi',
      ss: Bn.translate,
      m: Bn.translate,
      mm: Bn.translate,
      h: Bn.translate,
      hh: Bn.translate,
      d: 'dan',
      dd: Bn.translate,
      M: 'mjesec',
      MM: Bn.translate,
      y: 'godinu',
      yy: Bn.translate,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 7 },
  }),
    M.defineLocale('mi', {
      months:
        'Kohi-t\u0101te_Hui-tanguru_Pout\u016b-te-rangi_Paenga-wh\u0101wh\u0101_Haratua_Pipiri_H\u014dngoingoi_Here-turi-k\u014dk\u0101_Mahuru_Whiringa-\u0101-nuku_Whiringa-\u0101-rangi_Hakihea'.split(
          '_'
        ),
      monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_H\u014dngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
      monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
      monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
      monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
      monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
      weekdays: 'R\u0101tapu_Mane_T\u016brei_Wenerei_T\u0101ite_Paraire_H\u0101tarei'.split('_'),
      weekdaysShort: 'Ta_Ma_T\u016b_We_T\u0101i_Pa_H\u0101'.split('_'),
      weekdaysMin: 'Ta_Ma_T\u016b_We_T\u0101i_Pa_H\u0101'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [i] HH:mm',
        LLLL: 'dddd, D MMMM YYYY [i] HH:mm',
      },
      calendar: {
        sameDay: '[i teie mahana, i] LT',
        nextDay: '[apopo i] LT',
        nextWeek: 'dddd [i] LT',
        lastDay: '[inanahi i] LT',
        lastWeek: 'dddd [whakamutunga i] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'i roto i %s',
        past: '%s i mua',
        s: 'te h\u0113kona ruarua',
        ss: '%d h\u0113kona',
        m: 'he meneti',
        mm: '%d meneti',
        h: 'te haora',
        hh: '%d haora',
        d: 'he ra',
        dd: '%d ra',
        M: 'he marama',
        MM: '%d marama',
        y: 'he tau',
        yy: '%d tau',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\xba/,
      ordinal: '%d\xba',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('mk', {
      months:
        '\u0458\u0430\u043d\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0458_\u0458\u0443\u043d\u0438_\u0458\u0443\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438_\u043e\u043a\u0442\u043e\u043c\u0432\u0440\u0438_\u043d\u043e\u0435\u043c\u0432\u0440\u0438_\u0434\u0435\u043a\u0435\u043c\u0432\u0440\u0438'.split(
          '_'
        ),
      monthsShort:
        '\u0458\u0430\u043d_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433_\u0441\u0435\u043f_\u043e\u043a\u0442_\u043d\u043e\u0435_\u0434\u0435\u043a'.split(
          '_'
        ),
      weekdays:
        '\u043d\u0435\u0434\u0435\u043b\u0430_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u043e\u043a_\u043f\u0435\u0442\u043e\u043a_\u0441\u0430\u0431\u043e\u0442\u0430'.split(
          '_'
        ),
      weekdaysShort:
        '\u043d\u0435\u0434_\u043f\u043e\u043d_\u0432\u0442\u043e_\u0441\u0440\u0435_\u0447\u0435\u0442_\u043f\u0435\u0442_\u0441\u0430\u0431'.split(
          '_'
        ),
      weekdaysMin:
        '\u043de_\u043fo_\u0432\u0442_\u0441\u0440_\u0447\u0435_\u043f\u0435_\u0441a'.split('_'),
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'D.MM.YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY H:mm',
        LLLL: 'dddd, D MMMM YYYY H:mm',
      },
      calendar: {
        sameDay: '[\u0414\u0435\u043d\u0435\u0441 \u0432\u043e] LT',
        nextDay: '[\u0423\u0442\u0440\u0435 \u0432\u043e] LT',
        nextWeek: '[\u0412\u043e] dddd [\u0432\u043e] LT',
        lastDay: '[\u0412\u0447\u0435\u0440\u0430 \u0432\u043e] LT',
        lastWeek: function () {
          switch (this.day()) {
            case 0:
            case 3:
            case 6:
              return '[\u0418\u0437\u043c\u0438\u043d\u0430\u0442\u0430\u0442\u0430] dddd [\u0432\u043e] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[\u0418\u0437\u043c\u0438\u043d\u0430\u0442\u0438\u043e\u0442] dddd [\u0432\u043e] LT';
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u0437\u0430 %s',
        past: '\u043f\u0440\u0435\u0434 %s',
        s: '\u043d\u0435\u043a\u043e\u043b\u043a\u0443 \u0441\u0435\u043a\u0443\u043d\u0434\u0438',
        ss: '%d \u0441\u0435\u043a\u0443\u043d\u0434\u0438',
        m: '\u0435\u0434\u043d\u0430 \u043c\u0438\u043d\u0443\u0442\u0430',
        mm: '%d \u043c\u0438\u043d\u0443\u0442\u0438',
        h: '\u0435\u0434\u0435\u043d \u0447\u0430\u0441',
        hh: '%d \u0447\u0430\u0441\u0430',
        d: '\u0435\u0434\u0435\u043d \u0434\u0435\u043d',
        dd: '%d \u0434\u0435\u043d\u0430',
        M: '\u0435\u0434\u0435\u043d \u043c\u0435\u0441\u0435\u0446',
        MM: '%d \u043c\u0435\u0441\u0435\u0446\u0438',
        y: '\u0435\u0434\u043d\u0430 \u0433\u043e\u0434\u0438\u043d\u0430',
        yy: '%d \u0433\u043e\u0434\u0438\u043d\u0438',
      },
      dayOfMonthOrdinalParse:
        /\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/,
      ordinal: function (e) {
        var a = e % 10,
          t = e % 100;
        return 0 === e
          ? e + '-\u0435\u0432'
          : 0 == t
          ? e + '-\u0435\u043d'
          : 10 < t && t < 20
          ? e + '-\u0442\u0438'
          : 1 == a
          ? e + '-\u0432\u0438'
          : 2 == a
          ? e + '-\u0440\u0438'
          : 7 == a || 8 == a
          ? e + '-\u043c\u0438'
          : e + '-\u0442\u0438';
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('ml', {
      months:
        '\u0d1c\u0d28\u0d41\u0d35\u0d30\u0d3f_\u0d2b\u0d46\u0d2c\u0d4d\u0d30\u0d41\u0d35\u0d30\u0d3f_\u0d2e\u0d3e\u0d7c\u0d1a\u0d4d\u0d1a\u0d4d_\u0d0f\u0d2a\u0d4d\u0d30\u0d3f\u0d7d_\u0d2e\u0d47\u0d2f\u0d4d_\u0d1c\u0d42\u0d7a_\u0d1c\u0d42\u0d32\u0d48_\u0d13\u0d17\u0d38\u0d4d\u0d31\u0d4d\u0d31\u0d4d_\u0d38\u0d46\u0d2a\u0d4d\u0d31\u0d4d\u0d31\u0d02\u0d2c\u0d7c_\u0d12\u0d15\u0d4d\u0d1f\u0d4b\u0d2c\u0d7c_\u0d28\u0d35\u0d02\u0d2c\u0d7c_\u0d21\u0d3f\u0d38\u0d02\u0d2c\u0d7c'.split(
          '_'
        ),
      monthsShort:
        '\u0d1c\u0d28\u0d41._\u0d2b\u0d46\u0d2c\u0d4d\u0d30\u0d41._\u0d2e\u0d3e\u0d7c._\u0d0f\u0d2a\u0d4d\u0d30\u0d3f._\u0d2e\u0d47\u0d2f\u0d4d_\u0d1c\u0d42\u0d7a_\u0d1c\u0d42\u0d32\u0d48._\u0d13\u0d17._\u0d38\u0d46\u0d2a\u0d4d\u0d31\u0d4d\u0d31._\u0d12\u0d15\u0d4d\u0d1f\u0d4b._\u0d28\u0d35\u0d02._\u0d21\u0d3f\u0d38\u0d02.'.split(
          '_'
        ),
      monthsParseExact: !0,
      weekdays:
        '\u0d1e\u0d3e\u0d2f\u0d31\u0d3e\u0d34\u0d4d\u0d1a_\u0d24\u0d3f\u0d19\u0d4d\u0d15\u0d33\u0d3e\u0d34\u0d4d\u0d1a_\u0d1a\u0d4a\u0d35\u0d4d\u0d35\u0d3e\u0d34\u0d4d\u0d1a_\u0d2c\u0d41\u0d27\u0d28\u0d3e\u0d34\u0d4d\u0d1a_\u0d35\u0d4d\u0d2f\u0d3e\u0d34\u0d3e\u0d34\u0d4d\u0d1a_\u0d35\u0d46\u0d33\u0d4d\u0d33\u0d3f\u0d2f\u0d3e\u0d34\u0d4d\u0d1a_\u0d36\u0d28\u0d3f\u0d2f\u0d3e\u0d34\u0d4d\u0d1a'.split(
          '_'
        ),
      weekdaysShort:
        '\u0d1e\u0d3e\u0d2f\u0d7c_\u0d24\u0d3f\u0d19\u0d4d\u0d15\u0d7e_\u0d1a\u0d4a\u0d35\u0d4d\u0d35_\u0d2c\u0d41\u0d27\u0d7b_\u0d35\u0d4d\u0d2f\u0d3e\u0d34\u0d02_\u0d35\u0d46\u0d33\u0d4d\u0d33\u0d3f_\u0d36\u0d28\u0d3f'.split(
          '_'
        ),
      weekdaysMin:
        '\u0d1e\u0d3e_\u0d24\u0d3f_\u0d1a\u0d4a_\u0d2c\u0d41_\u0d35\u0d4d\u0d2f\u0d3e_\u0d35\u0d46_\u0d36'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'A h:mm -\u0d28\u0d41',
        LTS: 'A h:mm:ss -\u0d28\u0d41',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY, A h:mm -\u0d28\u0d41',
        LLLL: 'dddd, D MMMM YYYY, A h:mm -\u0d28\u0d41',
      },
      calendar: {
        sameDay: '[\u0d07\u0d28\u0d4d\u0d28\u0d4d] LT',
        nextDay: '[\u0d28\u0d3e\u0d33\u0d46] LT',
        nextWeek: 'dddd, LT',
        lastDay: '[\u0d07\u0d28\u0d4d\u0d28\u0d32\u0d46] LT',
        lastWeek: '[\u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e] dddd, LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d',
        past: '%s \u0d2e\u0d41\u0d7b\u0d2a\u0d4d',
        s: '\u0d05\u0d7d\u0d2a \u0d28\u0d3f\u0d2e\u0d3f\u0d37\u0d19\u0d4d\u0d19\u0d7e',
        ss: '%d \u0d38\u0d46\u0d15\u0d4d\u0d15\u0d7b\u0d21\u0d4d',
        m: '\u0d12\u0d30\u0d41 \u0d2e\u0d3f\u0d28\u0d3f\u0d31\u0d4d\u0d31\u0d4d',
        mm: '%d \u0d2e\u0d3f\u0d28\u0d3f\u0d31\u0d4d\u0d31\u0d4d',
        h: '\u0d12\u0d30\u0d41 \u0d2e\u0d23\u0d3f\u0d15\u0d4d\u0d15\u0d42\u0d7c',
        hh: '%d \u0d2e\u0d23\u0d3f\u0d15\u0d4d\u0d15\u0d42\u0d7c',
        d: '\u0d12\u0d30\u0d41 \u0d26\u0d3f\u0d35\u0d38\u0d02',
        dd: '%d \u0d26\u0d3f\u0d35\u0d38\u0d02',
        M: '\u0d12\u0d30\u0d41 \u0d2e\u0d3e\u0d38\u0d02',
        MM: '%d \u0d2e\u0d3e\u0d38\u0d02',
        y: '\u0d12\u0d30\u0d41 \u0d35\u0d7c\u0d37\u0d02',
        yy: '%d \u0d35\u0d7c\u0d37\u0d02',
      },
      meridiemParse:
        /\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f|\u0d30\u0d3e\u0d35\u0d3f\u0d32\u0d46|\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d|\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02|\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f/i,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          ('\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f' === a && 4 <= e) ||
          '\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d' === a ||
          '\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02' === a
            ? e + 12
            : e
        );
      },
      meridiem: function (e, a, t) {
        return e < 4
          ? '\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f'
          : e < 12
          ? '\u0d30\u0d3e\u0d35\u0d3f\u0d32\u0d46'
          : e < 17
          ? '\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d'
          : e < 20
          ? '\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02'
          : '\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f';
      },
    }),
    M.defineLocale('mn', {
      months:
        '\u041d\u044d\u0433\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0425\u043e\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0413\u0443\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0414\u04e9\u0440\u04e9\u0432\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0422\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0417\u0443\u0440\u0433\u0430\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0414\u043e\u043b\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u041d\u0430\u0439\u043c\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0415\u0441\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0410\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0410\u0440\u0432\u0430\u043d \u043d\u044d\u0433\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0410\u0440\u0432\u0430\u043d \u0445\u043e\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440'.split(
          '_'
        ),
      monthsShort:
        '1 \u0441\u0430\u0440_2 \u0441\u0430\u0440_3 \u0441\u0430\u0440_4 \u0441\u0430\u0440_5 \u0441\u0430\u0440_6 \u0441\u0430\u0440_7 \u0441\u0430\u0440_8 \u0441\u0430\u0440_9 \u0441\u0430\u0440_10 \u0441\u0430\u0440_11 \u0441\u0430\u0440_12 \u0441\u0430\u0440'.split(
          '_'
        ),
      monthsParseExact: !0,
      weekdays:
        '\u041d\u044f\u043c_\u0414\u0430\u0432\u0430\u0430_\u041c\u044f\u0433\u043c\u0430\u0440_\u041b\u0445\u0430\u0433\u0432\u0430_\u041f\u04af\u0440\u044d\u0432_\u0411\u0430\u0430\u0441\u0430\u043d_\u0411\u044f\u043c\u0431\u0430'.split(
          '_'
        ),
      weekdaysShort:
        '\u041d\u044f\u043c_\u0414\u0430\u0432_\u041c\u044f\u0433_\u041b\u0445\u0430_\u041f\u04af\u0440_\u0411\u0430\u0430_\u0411\u044f\u043c'.split(
          '_'
        ),
      weekdaysMin:
        '\u041d\u044f_\u0414\u0430_\u041c\u044f_\u041b\u0445_\u041f\u04af_\u0411\u0430_\u0411\u044f'.split(
          '_'
        ),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY-MM-DD',
        LL: 'YYYY \u043e\u043d\u044b MMMM\u044b\u043d D',
        LLL: 'YYYY \u043e\u043d\u044b MMMM\u044b\u043d D HH:mm',
        LLLL: 'dddd, YYYY \u043e\u043d\u044b MMMM\u044b\u043d D HH:mm',
      },
      meridiemParse: /\u04ae\u04e8|\u04ae\u0425/i,
      isPM: function (e) {
        return '\u04ae\u0425' === e;
      },
      meridiem: function (e, a, t) {
        return e < 12 ? '\u04ae\u04e8' : '\u04ae\u0425';
      },
      calendar: {
        sameDay: '[\u04e8\u043d\u04e9\u04e9\u0434\u04e9\u0440] LT',
        nextDay: '[\u041c\u0430\u0440\u0433\u0430\u0430\u0448] LT',
        nextWeek: '[\u0418\u0440\u044d\u0445] dddd LT',
        lastDay: '[\u04e8\u0447\u0438\u0433\u0434\u04e9\u0440] LT',
        lastWeek: '[\u04e8\u043d\u0433\u04e9\u0440\u0441\u04e9\u043d] dddd LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s \u0434\u0430\u0440\u0430\u0430',
        past: '%s \u04e9\u043c\u043d\u04e9',
        s: Kn,
        ss: Kn,
        m: Kn,
        mm: Kn,
        h: Kn,
        hh: Kn,
        d: Kn,
        dd: Kn,
        M: Kn,
        MM: Kn,
        y: Kn,
        yy: Kn,
      },
      dayOfMonthOrdinalParse: /\d{1,2} \u04e9\u0434\u04e9\u0440/,
      ordinal: function (e, a) {
        switch (a) {
          case 'd':
          case 'D':
          case 'DDD':
            return e + ' \u04e9\u0434\u04e9\u0440';
          default:
            return e;
        }
      },
    });
  var qn = {
      1: '\u0967',
      2: '\u0968',
      3: '\u0969',
      4: '\u096a',
      5: '\u096b',
      6: '\u096c',
      7: '\u096d',
      8: '\u096e',
      9: '\u096f',
      0: '\u0966',
    },
    Zn = {
      '\u0967': '1',
      '\u0968': '2',
      '\u0969': '3',
      '\u096a': '4',
      '\u096b': '5',
      '\u096c': '6',
      '\u096d': '7',
      '\u096e': '8',
      '\u096f': '9',
      '\u0966': '0',
    };
  function $n(e, a, t, s) {
    var n = '';
    if (a)
      switch (t) {
        case 's':
          n = '\u0915\u093e\u0939\u0940 \u0938\u0947\u0915\u0902\u0926';
          break;
        case 'ss':
          n = '%d \u0938\u0947\u0915\u0902\u0926';
          break;
        case 'm':
          n = '\u090f\u0915 \u092e\u093f\u0928\u093f\u091f';
          break;
        case 'mm':
          n = '%d \u092e\u093f\u0928\u093f\u091f\u0947';
          break;
        case 'h':
          n = '\u090f\u0915 \u0924\u093e\u0938';
          break;
        case 'hh':
          n = '%d \u0924\u093e\u0938';
          break;
        case 'd':
          n = '\u090f\u0915 \u0926\u093f\u0935\u0938';
          break;
        case 'dd':
          n = '%d \u0926\u093f\u0935\u0938';
          break;
        case 'M':
          n = '\u090f\u0915 \u092e\u0939\u093f\u0928\u093e';
          break;
        case 'MM':
          n = '%d \u092e\u0939\u093f\u0928\u0947';
          break;
        case 'y':
          n = '\u090f\u0915 \u0935\u0930\u094d\u0937';
          break;
        case 'yy':
          n = '%d \u0935\u0930\u094d\u0937\u0947';
          break;
      }
    else
      switch (t) {
        case 's':
          n = '\u0915\u093e\u0939\u0940 \u0938\u0947\u0915\u0902\u0926\u093e\u0902';
          break;
        case 'ss':
          n = '%d \u0938\u0947\u0915\u0902\u0926\u093e\u0902';
          break;
        case 'm':
          n = '\u090f\u0915\u093e \u092e\u093f\u0928\u093f\u091f\u093e';
          break;
        case 'mm':
          n = '%d \u092e\u093f\u0928\u093f\u091f\u093e\u0902';
          break;
        case 'h':
          n = '\u090f\u0915\u093e \u0924\u093e\u0938\u093e';
          break;
        case 'hh':
          n = '%d \u0924\u093e\u0938\u093e\u0902';
          break;
        case 'd':
          n = '\u090f\u0915\u093e \u0926\u093f\u0935\u0938\u093e';
          break;
        case 'dd':
          n = '%d \u0926\u093f\u0935\u0938\u093e\u0902';
          break;
        case 'M':
          n = '\u090f\u0915\u093e \u092e\u0939\u093f\u0928\u094d\u092f\u093e';
          break;
        case 'MM':
          n = '%d \u092e\u0939\u093f\u0928\u094d\u092f\u093e\u0902';
          break;
        case 'y':
          n = '\u090f\u0915\u093e \u0935\u0930\u094d\u0937\u093e';
          break;
        case 'yy':
          n = '%d \u0935\u0930\u094d\u0937\u093e\u0902';
          break;
      }
    return n.replace(/%d/i, e);
  }
  M.defineLocale('mr', {
    months:
      '\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u093f\u0932_\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932\u0948_\u0911\u0917\u0938\u094d\u091f_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930_\u0911\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930_\u0921\u093f\u0938\u0947\u0902\u092c\u0930'.split(
        '_'
      ),
    monthsShort:
      '\u091c\u093e\u0928\u0947._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a._\u090f\u092a\u094d\u0930\u093f._\u092e\u0947._\u091c\u0942\u0928._\u091c\u0941\u0932\u0948._\u0911\u0917._\u0938\u092a\u094d\u091f\u0947\u0902._\u0911\u0915\u094d\u091f\u094b._\u0928\u094b\u0935\u094d\u0939\u0947\u0902._\u0921\u093f\u0938\u0947\u0902.'.split(
        '_'
      ),
    monthsParseExact: !0,
    weekdays:
      '\u0930\u0935\u093f\u0935\u093e\u0930_\u0938\u094b\u092e\u0935\u093e\u0930_\u092e\u0902\u0917\u0933\u0935\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u0917\u0941\u0930\u0942\u0935\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u0935\u093e\u0930_\u0936\u0928\u093f\u0935\u093e\u0930'.split(
        '_'
      ),
    weekdaysShort:
      '\u0930\u0935\u093f_\u0938\u094b\u092e_\u092e\u0902\u0917\u0933_\u092c\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094d\u0930_\u0936\u0928\u093f'.split(
        '_'
      ),
    weekdaysMin:
      '\u0930_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u0917\u0941_\u0936\u0941_\u0936'.split('_'),
    longDateFormat: {
      LT: 'A h:mm \u0935\u093e\u091c\u0924\u093e',
      LTS: 'A h:mm:ss \u0935\u093e\u091c\u0924\u093e',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A h:mm \u0935\u093e\u091c\u0924\u093e',
      LLLL: 'dddd, D MMMM YYYY, A h:mm \u0935\u093e\u091c\u0924\u093e',
    },
    calendar: {
      sameDay: '[\u0906\u091c] LT',
      nextDay: '[\u0909\u0926\u094d\u092f\u093e] LT',
      nextWeek: 'dddd, LT',
      lastDay: '[\u0915\u093e\u0932] LT',
      lastWeek: '[\u092e\u093e\u0917\u0940\u0932] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s\u092e\u0927\u094d\u092f\u0947',
      past: '%s\u092a\u0942\u0930\u094d\u0935\u0940',
      s: $n,
      ss: $n,
      m: $n,
      mm: $n,
      h: $n,
      hh: $n,
      d: $n,
      dd: $n,
      M: $n,
      MM: $n,
      y: $n,
      yy: $n,
    },
    preparse: function (e) {
      return e.replace(
        /[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g,
        function (e) {
          return Zn[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return qn[e];
      });
    },
    meridiemParse:
      /\u092a\u0939\u093e\u091f\u0947|\u0938\u0915\u093e\u0933\u0940|\u0926\u0941\u092a\u093e\u0930\u0940|\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940|\u0930\u093e\u0924\u094d\u0930\u0940/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u092a\u0939\u093e\u091f\u0947' === a || '\u0938\u0915\u093e\u0933\u0940' === a
          ? e
          : '\u0926\u0941\u092a\u093e\u0930\u0940' === a ||
            '\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940' === a ||
            '\u0930\u093e\u0924\u094d\u0930\u0940' === a
          ? 12 <= e
            ? e
            : e + 12
          : void 0
      );
    },
    meridiem: function (e, a, t) {
      return 0 <= e && e < 6
        ? '\u092a\u0939\u093e\u091f\u0947'
        : e < 12
        ? '\u0938\u0915\u093e\u0933\u0940'
        : e < 17
        ? '\u0926\u0941\u092a\u093e\u0930\u0940'
        : e < 20
        ? '\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940'
        : '\u0930\u093e\u0924\u094d\u0930\u0940';
    },
    week: { dow: 0, doy: 6 },
  }),
    M.defineLocale('ms-my', {
      months:
        'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
      weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
      weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
      weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
      longDateFormat: {
        LT: 'HH.mm',
        LTS: 'HH.mm.ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [pukul] HH.mm',
        LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
      },
      meridiemParse: /pagi|tengahari|petang|malam/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          'pagi' === a
            ? e
            : 'tengahari' === a
            ? 11 <= e
              ? e
              : e + 12
            : 'petang' === a || 'malam' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        return e < 11 ? 'pagi' : e < 15 ? 'tengahari' : e < 19 ? 'petang' : 'malam';
      },
      calendar: {
        sameDay: '[Hari ini pukul] LT',
        nextDay: '[Esok pukul] LT',
        nextWeek: 'dddd [pukul] LT',
        lastDay: '[Kelmarin pukul] LT',
        lastWeek: 'dddd [lepas pukul] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'dalam %s',
        past: '%s yang lepas',
        s: 'beberapa saat',
        ss: '%d saat',
        m: 'seminit',
        mm: '%d minit',
        h: 'sejam',
        hh: '%d jam',
        d: 'sehari',
        dd: '%d hari',
        M: 'sebulan',
        MM: '%d bulan',
        y: 'setahun',
        yy: '%d tahun',
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('ms', {
      months:
        'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
      weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
      weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
      weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
      longDateFormat: {
        LT: 'HH.mm',
        LTS: 'HH.mm.ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [pukul] HH.mm',
        LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
      },
      meridiemParse: /pagi|tengahari|petang|malam/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          'pagi' === a
            ? e
            : 'tengahari' === a
            ? 11 <= e
              ? e
              : e + 12
            : 'petang' === a || 'malam' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        return e < 11 ? 'pagi' : e < 15 ? 'tengahari' : e < 19 ? 'petang' : 'malam';
      },
      calendar: {
        sameDay: '[Hari ini pukul] LT',
        nextDay: '[Esok pukul] LT',
        nextWeek: 'dddd [pukul] LT',
        lastDay: '[Kelmarin pukul] LT',
        lastWeek: 'dddd [lepas pukul] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'dalam %s',
        past: '%s yang lepas',
        s: 'beberapa saat',
        ss: '%d saat',
        m: 'seminit',
        mm: '%d minit',
        h: 'sejam',
        hh: '%d jam',
        d: 'sehari',
        dd: '%d hari',
        M: 'sebulan',
        MM: '%d bulan',
        y: 'setahun',
        yy: '%d tahun',
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('mt', {
      months:
        'Jannar_Frar_Marzu_April_Mejju_\u0120unju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Di\u010bembru'.split(
          '_'
        ),
      monthsShort: 'Jan_Fra_Mar_Apr_Mej_\u0120un_Lul_Aww_Set_Ott_Nov_Di\u010b'.split('_'),
      weekdays:
        'Il-\u0126add_It-Tnejn_It-Tlieta_L-Erbg\u0127a_Il-\u0126amis_Il-\u0120img\u0127a_Is-Sibt'.split(
          '_'
        ),
      weekdaysShort: '\u0126ad_Tne_Tli_Erb_\u0126am_\u0120im_Sib'.split('_'),
      weekdaysMin: '\u0126a_Tn_Tl_Er_\u0126a_\u0120i_Si'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Illum fil-]LT',
        nextDay: '[G\u0127ada fil-]LT',
        nextWeek: 'dddd [fil-]LT',
        lastDay: '[Il-biera\u0127 fil-]LT',
        lastWeek: 'dddd [li g\u0127adda] [fil-]LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'f\u2019 %s',
        past: '%s ilu',
        s: 'ftit sekondi',
        ss: '%d sekondi',
        m: 'minuta',
        mm: '%d minuti',
        h: 'sieg\u0127a',
        hh: '%d sieg\u0127at',
        d: '\u0121urnata',
        dd: '%d \u0121ranet',
        M: 'xahar',
        MM: '%d xhur',
        y: 'sena',
        yy: '%d sni',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\xba/,
      ordinal: '%d\xba',
      week: { dow: 1, doy: 4 },
    });
  var Qn = {
      1: '\u1041',
      2: '\u1042',
      3: '\u1043',
      4: '\u1044',
      5: '\u1045',
      6: '\u1046',
      7: '\u1047',
      8: '\u1048',
      9: '\u1049',
      0: '\u1040',
    },
    Xn = {
      '\u1041': '1',
      '\u1042': '2',
      '\u1043': '3',
      '\u1044': '4',
      '\u1045': '5',
      '\u1046': '6',
      '\u1047': '7',
      '\u1048': '8',
      '\u1049': '9',
      '\u1040': '0',
    };
  M.defineLocale('my', {
    months:
      '\u1007\u1014\u103a\u1014\u101d\u102b\u101b\u102e_\u1016\u1031\u1016\u1031\u102c\u103a\u101d\u102b\u101b\u102e_\u1019\u1010\u103a_\u1027\u1015\u103c\u102e_\u1019\u1031_\u1007\u103d\u1014\u103a_\u1007\u1030\u101c\u102d\u102f\u1004\u103a_\u101e\u103c\u1002\u102f\u1010\u103a_\u1005\u1000\u103a\u1010\u1004\u103a\u1018\u102c_\u1021\u1031\u102c\u1000\u103a\u1010\u102d\u102f\u1018\u102c_\u1014\u102d\u102f\u101d\u1004\u103a\u1018\u102c_\u1012\u102e\u1007\u1004\u103a\u1018\u102c'.split(
        '_'
      ),
    monthsShort:
      '\u1007\u1014\u103a_\u1016\u1031_\u1019\u1010\u103a_\u1015\u103c\u102e_\u1019\u1031_\u1007\u103d\u1014\u103a_\u101c\u102d\u102f\u1004\u103a_\u101e\u103c_\u1005\u1000\u103a_\u1021\u1031\u102c\u1000\u103a_\u1014\u102d\u102f_\u1012\u102e'.split(
        '_'
      ),
    weekdays:
      '\u1010\u1014\u1004\u103a\u1039\u1002\u1014\u103d\u1031_\u1010\u1014\u1004\u103a\u1039\u101c\u102c_\u1021\u1004\u103a\u1039\u1002\u102b_\u1017\u102f\u1012\u1039\u1013\u101f\u1030\u1038_\u1000\u103c\u102c\u101e\u1015\u1010\u1031\u1038_\u101e\u1031\u102c\u1000\u103c\u102c_\u1005\u1014\u1031'.split(
        '_'
      ),
    weekdaysShort:
      '\u1014\u103d\u1031_\u101c\u102c_\u1002\u102b_\u101f\u1030\u1038_\u1000\u103c\u102c_\u101e\u1031\u102c_\u1014\u1031'.split(
        '_'
      ),
    weekdaysMin:
      '\u1014\u103d\u1031_\u101c\u102c_\u1002\u102b_\u101f\u1030\u1038_\u1000\u103c\u102c_\u101e\u1031\u102c_\u1014\u1031'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[\u101a\u1014\u1031.] LT [\u1019\u103e\u102c]',
      nextDay: '[\u1019\u1014\u1000\u103a\u1016\u103c\u1014\u103a] LT [\u1019\u103e\u102c]',
      nextWeek: 'dddd LT [\u1019\u103e\u102c]',
      lastDay: '[\u1019\u1014\u1031.\u1000] LT [\u1019\u103e\u102c]',
      lastWeek:
        '[\u1015\u103c\u102e\u1038\u1001\u1032\u1037\u101e\u1031\u102c] dddd LT [\u1019\u103e\u102c]',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u101c\u102c\u1019\u100a\u103a\u1037 %s \u1019\u103e\u102c',
      past: '\u101c\u103d\u1014\u103a\u1001\u1032\u1037\u101e\u1031\u102c %s \u1000',
      s: '\u1005\u1000\u1039\u1000\u1014\u103a.\u1021\u1014\u100a\u103a\u1038\u1004\u101a\u103a',
      ss: '%d \u1005\u1000\u1039\u1000\u1014\u1037\u103a',
      m: '\u1010\u1005\u103a\u1019\u102d\u1014\u1005\u103a',
      mm: '%d \u1019\u102d\u1014\u1005\u103a',
      h: '\u1010\u1005\u103a\u1014\u102c\u101b\u102e',
      hh: '%d \u1014\u102c\u101b\u102e',
      d: '\u1010\u1005\u103a\u101b\u1000\u103a',
      dd: '%d \u101b\u1000\u103a',
      M: '\u1010\u1005\u103a\u101c',
      MM: '%d \u101c',
      y: '\u1010\u1005\u103a\u1014\u103e\u1005\u103a',
      yy: '%d \u1014\u103e\u1005\u103a',
    },
    preparse: function (e) {
      return e.replace(
        /[\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1040]/g,
        function (e) {
          return Xn[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return Qn[e];
      });
    },
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('nb', {
      months:
        'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
          '_'
        ),
      monthsShort: 'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
      monthsParseExact: !0,
      weekdays: 's\xf8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xf8rdag'.split('_'),
      weekdaysShort: 's\xf8._ma._ti._on._to._fr._l\xf8.'.split('_'),
      weekdaysMin: 's\xf8_ma_ti_on_to_fr_l\xf8'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY [kl.] HH:mm',
        LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
      },
      calendar: {
        sameDay: '[i dag kl.] LT',
        nextDay: '[i morgen kl.] LT',
        nextWeek: 'dddd [kl.] LT',
        lastDay: '[i g\xe5r kl.] LT',
        lastWeek: '[forrige] dddd [kl.] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'om %s',
        past: '%s siden',
        s: 'noen sekunder',
        ss: '%d sekunder',
        m: 'ett minutt',
        mm: '%d minutter',
        h: 'en time',
        hh: '%d timer',
        d: 'en dag',
        dd: '%d dager',
        w: 'en uke',
        ww: '%d uker',
        M: 'en m\xe5ned',
        MM: '%d m\xe5neder',
        y: 'ett \xe5r',
        yy: '%d \xe5r',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    });
  var er = {
      1: '\u0967',
      2: '\u0968',
      3: '\u0969',
      4: '\u096a',
      5: '\u096b',
      6: '\u096c',
      7: '\u096d',
      8: '\u096e',
      9: '\u096f',
      0: '\u0966',
    },
    ar = {
      '\u0967': '1',
      '\u0968': '2',
      '\u0969': '3',
      '\u096a': '4',
      '\u096b': '5',
      '\u096c': '6',
      '\u096d': '7',
      '\u096e': '8',
      '\u096f': '9',
      '\u0966': '0',
    };
  M.defineLocale('ne', {
    months:
      '\u091c\u0928\u0935\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u093f\u0932_\u092e\u0908_\u091c\u0941\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0937\u094d\u091f_\u0938\u0947\u092a\u094d\u091f\u0947\u092e\u094d\u092c\u0930_\u0905\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u092d\u0947\u092e\u094d\u092c\u0930_\u0921\u093f\u0938\u0947\u092e\u094d\u092c\u0930'.split(
        '_'
      ),
    monthsShort:
      '\u091c\u0928._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u093f._\u092e\u0908_\u091c\u0941\u0928_\u091c\u0941\u0932\u093e\u0908._\u0905\u0917._\u0938\u0947\u092a\u094d\u091f._\u0905\u0915\u094d\u091f\u094b._\u0928\u094b\u092d\u0947._\u0921\u093f\u0938\u0947.'.split(
        '_'
      ),
    monthsParseExact: !0,
    weekdays:
      '\u0906\u0907\u0924\u092c\u093e\u0930_\u0938\u094b\u092e\u092c\u093e\u0930_\u092e\u0919\u094d\u0917\u0932\u092c\u093e\u0930_\u092c\u0941\u0927\u092c\u093e\u0930_\u092c\u093f\u0939\u093f\u092c\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u092c\u093e\u0930_\u0936\u0928\u093f\u092c\u093e\u0930'.split(
        '_'
      ),
    weekdaysShort:
      '\u0906\u0907\u0924._\u0938\u094b\u092e._\u092e\u0919\u094d\u0917\u0932._\u092c\u0941\u0927._\u092c\u093f\u0939\u093f._\u0936\u0941\u0915\u094d\u0930._\u0936\u0928\u093f.'.split(
        '_'
      ),
    weekdaysMin:
      '\u0906._\u0938\u094b._\u092e\u0902._\u092c\u0941._\u092c\u093f._\u0936\u0941._\u0936.'.split(
        '_'
      ),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'A\u0915\u094b h:mm \u092c\u091c\u0947',
      LTS: 'A\u0915\u094b h:mm:ss \u092c\u091c\u0947',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A\u0915\u094b h:mm \u092c\u091c\u0947',
      LLLL: 'dddd, D MMMM YYYY, A\u0915\u094b h:mm \u092c\u091c\u0947',
    },
    preparse: function (e) {
      return e.replace(
        /[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g,
        function (e) {
          return ar[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return er[e];
      });
    },
    meridiemParse:
      /\u0930\u093e\u0924\u093f|\u092c\u093f\u0939\u093e\u0928|\u0926\u093f\u0909\u0901\u0938\u094b|\u0938\u093e\u0901\u091d/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u0930\u093e\u0924\u093f' === a
          ? e < 4
            ? e
            : e + 12
          : '\u092c\u093f\u0939\u093e\u0928' === a
          ? e
          : '\u0926\u093f\u0909\u0901\u0938\u094b' === a
          ? 10 <= e
            ? e
            : e + 12
          : '\u0938\u093e\u0901\u091d' === a
          ? e + 12
          : void 0
      );
    },
    meridiem: function (e, a, t) {
      return e < 3
        ? '\u0930\u093e\u0924\u093f'
        : e < 12
        ? '\u092c\u093f\u0939\u093e\u0928'
        : e < 16
        ? '\u0926\u093f\u0909\u0901\u0938\u094b'
        : e < 20
        ? '\u0938\u093e\u0901\u091d'
        : '\u0930\u093e\u0924\u093f';
    },
    calendar: {
      sameDay: '[\u0906\u091c] LT',
      nextDay: '[\u092d\u094b\u0932\u093f] LT',
      nextWeek: '[\u0906\u0909\u0901\u0926\u094b] dddd[,] LT',
      lastDay: '[\u0939\u093f\u091c\u094b] LT',
      lastWeek: '[\u0917\u090f\u0915\u094b] dddd[,] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s\u092e\u093e',
      past: '%s \u0905\u0917\u093e\u0921\u093f',
      s: '\u0915\u0947\u0939\u0940 \u0915\u094d\u0937\u0923',
      ss: '%d \u0938\u0947\u0915\u0947\u0923\u094d\u0921',
      m: '\u090f\u0915 \u092e\u093f\u0928\u0947\u091f',
      mm: '%d \u092e\u093f\u0928\u0947\u091f',
      h: '\u090f\u0915 \u0918\u0923\u094d\u091f\u093e',
      hh: '%d \u0918\u0923\u094d\u091f\u093e',
      d: '\u090f\u0915 \u0926\u093f\u0928',
      dd: '%d \u0926\u093f\u0928',
      M: '\u090f\u0915 \u092e\u0939\u093f\u0928\u093e',
      MM: '%d \u092e\u0939\u093f\u0928\u093e',
      y: '\u090f\u0915 \u092c\u0930\u094d\u0937',
      yy: '%d \u092c\u0930\u094d\u0937',
    },
    week: { dow: 0, doy: 6 },
  });
  var tr = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
    sr = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    nr = [
      /^jan/i,
      /^feb/i,
      /^maart|mrt.?$/i,
      /^apr/i,
      /^mei$/i,
      /^jun[i.]?$/i,
      /^jul[i.]?$/i,
      /^aug/i,
      /^sep/i,
      /^okt/i,
      /^nov/i,
      /^dec/i,
    ],
    rr =
      /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
  M.defineLocale('nl-be', {
    months:
      'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
        '_'
      ),
    monthsShort: function (e, a) {
      return e ? (/-MMM-/.test(a) ? sr[e.month()] : tr[e.month()]) : tr;
    },
    monthsRegex: rr,
    monthsShortRegex: rr,
    monthsStrictRegex:
      /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex:
      /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
    monthsParse: nr,
    longMonthsParse: nr,
    shortMonthsParse: nr,
    weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[vandaag om] LT',
      nextDay: '[morgen om] LT',
      nextWeek: 'dddd [om] LT',
      lastDay: '[gisteren om] LT',
      lastWeek: '[afgelopen] dddd [om] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'over %s',
      past: '%s geleden',
      s: 'een paar seconden',
      ss: '%d seconden',
      m: '\xe9\xe9n minuut',
      mm: '%d minuten',
      h: '\xe9\xe9n uur',
      hh: '%d uur',
      d: '\xe9\xe9n dag',
      dd: '%d dagen',
      M: '\xe9\xe9n maand',
      MM: '%d maanden',
      y: '\xe9\xe9n jaar',
      yy: '%d jaar',
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal: function (e) {
      return e + (1 === e || 8 === e || 20 <= e ? 'ste' : 'de');
    },
    week: { dow: 1, doy: 4 },
  });
  var dr = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
    ir = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    _r = [
      /^jan/i,
      /^feb/i,
      /^maart|mrt.?$/i,
      /^apr/i,
      /^mei$/i,
      /^jun[i.]?$/i,
      /^jul[i.]?$/i,
      /^aug/i,
      /^sep/i,
      /^okt/i,
      /^nov/i,
      /^dec/i,
    ],
    or =
      /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
  M.defineLocale('nl', {
    months:
      'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
        '_'
      ),
    monthsShort: function (e, a) {
      return e ? (/-MMM-/.test(a) ? ir[e.month()] : dr[e.month()]) : dr;
    },
    monthsRegex: or,
    monthsShortRegex: or,
    monthsStrictRegex:
      /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex:
      /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
    monthsParse: _r,
    longMonthsParse: _r,
    shortMonthsParse: _r,
    weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD-MM-YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[vandaag om] LT',
      nextDay: '[morgen om] LT',
      nextWeek: 'dddd [om] LT',
      lastDay: '[gisteren om] LT',
      lastWeek: '[afgelopen] dddd [om] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: 'over %s',
      past: '%s geleden',
      s: 'een paar seconden',
      ss: '%d seconden',
      m: '\xe9\xe9n minuut',
      mm: '%d minuten',
      h: '\xe9\xe9n uur',
      hh: '%d uur',
      d: '\xe9\xe9n dag',
      dd: '%d dagen',
      w: '\xe9\xe9n week',
      ww: '%d weken',
      M: '\xe9\xe9n maand',
      MM: '%d maanden',
      y: '\xe9\xe9n jaar',
      yy: '%d jaar',
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal: function (e) {
      return e + (1 === e || 8 === e || 20 <= e ? 'ste' : 'de');
    },
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('nn', {
      months:
        'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
          '_'
        ),
      monthsShort: 'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'sundag_m\xe5ndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
      weekdaysShort: 'su._m\xe5._ty._on._to._fr._lau.'.split('_'),
      weekdaysMin: 'su_m\xe5_ty_on_to_fr_la'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY [kl.] H:mm',
        LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
      },
      calendar: {
        sameDay: '[I dag klokka] LT',
        nextDay: '[I morgon klokka] LT',
        nextWeek: 'dddd [klokka] LT',
        lastDay: '[I g\xe5r klokka] LT',
        lastWeek: '[F\xf8reg\xe5ande] dddd [klokka] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'om %s',
        past: '%s sidan',
        s: 'nokre sekund',
        ss: '%d sekund',
        m: 'eit minutt',
        mm: '%d minutt',
        h: 'ein time',
        hh: '%d timar',
        d: 'ein dag',
        dd: '%d dagar',
        w: 'ei veke',
        ww: '%d veker',
        M: 'ein m\xe5nad',
        MM: '%d m\xe5nader',
        y: 'eit \xe5r',
        yy: '%d \xe5r',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('oc-lnc', {
      months: {
        standalone:
          'geni\xe8r_febri\xe8r_mar\xe7_abril_mai_junh_julhet_agost_setembre_oct\xf2bre_novembre_decembre'.split(
            '_'
          ),
        format:
          "de geni\xe8r_de febri\xe8r_de mar\xe7_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'oct\xf2bre_de novembre_de decembre".split(
            '_'
          ),
        isFormat: /D[oD]?(\s)+MMMM/,
      },
      monthsShort: 'gen._febr._mar\xe7_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'dimenge_diluns_dimars_dim\xe8cres_dij\xf2us_divendres_dissabte'.split('_'),
      weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
      weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM [de] YYYY',
        ll: 'D MMM YYYY',
        LLL: 'D MMMM [de] YYYY [a] H:mm',
        lll: 'D MMM YYYY, H:mm',
        LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
        llll: 'ddd D MMM YYYY, H:mm',
      },
      calendar: {
        sameDay: '[u\xe8i a] LT',
        nextDay: '[deman a] LT',
        nextWeek: 'dddd [a] LT',
        lastDay: '[i\xe8r a] LT',
        lastWeek: 'dddd [passat a] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: "d'aqu\xed %s",
        past: 'fa %s',
        s: 'unas segondas',
        ss: '%d segondas',
        m: 'una minuta',
        mm: '%d minutas',
        h: 'una ora',
        hh: '%d oras',
        d: 'un jorn',
        dd: '%d jorns',
        M: 'un mes',
        MM: '%d meses',
        y: 'un an',
        yy: '%d ans',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|\xe8|a)/,
      ordinal: function (e, a) {
        return (
          e +
          ('w' !== a && 'W' !== a
            ? 1 === e
              ? 'r'
              : 2 === e
              ? 'n'
              : 3 === e
              ? 'r'
              : 4 === e
              ? 't'
              : '\xe8'
            : 'a')
        );
      },
      week: { dow: 1, doy: 4 },
    });
  var mr = {
      1: '\u0a67',
      2: '\u0a68',
      3: '\u0a69',
      4: '\u0a6a',
      5: '\u0a6b',
      6: '\u0a6c',
      7: '\u0a6d',
      8: '\u0a6e',
      9: '\u0a6f',
      0: '\u0a66',
    },
    ur = {
      '\u0a67': '1',
      '\u0a68': '2',
      '\u0a69': '3',
      '\u0a6a': '4',
      '\u0a6b': '5',
      '\u0a6c': '6',
      '\u0a6d': '7',
      '\u0a6e': '8',
      '\u0a6f': '9',
      '\u0a66': '0',
    };
  M.defineLocale('pa-in', {
    months:
      '\u0a1c\u0a28\u0a35\u0a30\u0a40_\u0a2b\u0a3c\u0a30\u0a35\u0a30\u0a40_\u0a2e\u0a3e\u0a30\u0a1a_\u0a05\u0a2a\u0a4d\u0a30\u0a48\u0a32_\u0a2e\u0a08_\u0a1c\u0a42\u0a28_\u0a1c\u0a41\u0a32\u0a3e\u0a08_\u0a05\u0a17\u0a38\u0a24_\u0a38\u0a24\u0a70\u0a2c\u0a30_\u0a05\u0a15\u0a24\u0a42\u0a2c\u0a30_\u0a28\u0a35\u0a70\u0a2c\u0a30_\u0a26\u0a38\u0a70\u0a2c\u0a30'.split(
        '_'
      ),
    monthsShort:
      '\u0a1c\u0a28\u0a35\u0a30\u0a40_\u0a2b\u0a3c\u0a30\u0a35\u0a30\u0a40_\u0a2e\u0a3e\u0a30\u0a1a_\u0a05\u0a2a\u0a4d\u0a30\u0a48\u0a32_\u0a2e\u0a08_\u0a1c\u0a42\u0a28_\u0a1c\u0a41\u0a32\u0a3e\u0a08_\u0a05\u0a17\u0a38\u0a24_\u0a38\u0a24\u0a70\u0a2c\u0a30_\u0a05\u0a15\u0a24\u0a42\u0a2c\u0a30_\u0a28\u0a35\u0a70\u0a2c\u0a30_\u0a26\u0a38\u0a70\u0a2c\u0a30'.split(
        '_'
      ),
    weekdays:
      '\u0a10\u0a24\u0a35\u0a3e\u0a30_\u0a38\u0a4b\u0a2e\u0a35\u0a3e\u0a30_\u0a2e\u0a70\u0a17\u0a32\u0a35\u0a3e\u0a30_\u0a2c\u0a41\u0a27\u0a35\u0a3e\u0a30_\u0a35\u0a40\u0a30\u0a35\u0a3e\u0a30_\u0a38\u0a3c\u0a41\u0a71\u0a15\u0a30\u0a35\u0a3e\u0a30_\u0a38\u0a3c\u0a28\u0a40\u0a1a\u0a30\u0a35\u0a3e\u0a30'.split(
        '_'
      ),
    weekdaysShort:
      '\u0a10\u0a24_\u0a38\u0a4b\u0a2e_\u0a2e\u0a70\u0a17\u0a32_\u0a2c\u0a41\u0a27_\u0a35\u0a40\u0a30_\u0a38\u0a3c\u0a41\u0a15\u0a30_\u0a38\u0a3c\u0a28\u0a40'.split(
        '_'
      ),
    weekdaysMin:
      '\u0a10\u0a24_\u0a38\u0a4b\u0a2e_\u0a2e\u0a70\u0a17\u0a32_\u0a2c\u0a41\u0a27_\u0a35\u0a40\u0a30_\u0a38\u0a3c\u0a41\u0a15\u0a30_\u0a38\u0a3c\u0a28\u0a40'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'A h:mm \u0a35\u0a1c\u0a47',
      LTS: 'A h:mm:ss \u0a35\u0a1c\u0a47',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, A h:mm \u0a35\u0a1c\u0a47',
      LLLL: 'dddd, D MMMM YYYY, A h:mm \u0a35\u0a1c\u0a47',
    },
    calendar: {
      sameDay: '[\u0a05\u0a1c] LT',
      nextDay: '[\u0a15\u0a32] LT',
      nextWeek: '[\u0a05\u0a17\u0a32\u0a3e] dddd, LT',
      lastDay: '[\u0a15\u0a32] LT',
      lastWeek: '[\u0a2a\u0a3f\u0a1b\u0a32\u0a47] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u0a35\u0a3f\u0a71\u0a1a',
      past: '%s \u0a2a\u0a3f\u0a1b\u0a32\u0a47',
      s: '\u0a15\u0a41\u0a1d \u0a38\u0a15\u0a3f\u0a70\u0a1f',
      ss: '%d \u0a38\u0a15\u0a3f\u0a70\u0a1f',
      m: '\u0a07\u0a15 \u0a2e\u0a3f\u0a70\u0a1f',
      mm: '%d \u0a2e\u0a3f\u0a70\u0a1f',
      h: '\u0a07\u0a71\u0a15 \u0a18\u0a70\u0a1f\u0a3e',
      hh: '%d \u0a18\u0a70\u0a1f\u0a47',
      d: '\u0a07\u0a71\u0a15 \u0a26\u0a3f\u0a28',
      dd: '%d \u0a26\u0a3f\u0a28',
      M: '\u0a07\u0a71\u0a15 \u0a2e\u0a39\u0a40\u0a28\u0a3e',
      MM: '%d \u0a2e\u0a39\u0a40\u0a28\u0a47',
      y: '\u0a07\u0a71\u0a15 \u0a38\u0a3e\u0a32',
      yy: '%d \u0a38\u0a3e\u0a32',
    },
    preparse: function (e) {
      return e.replace(
        /[\u0a67\u0a68\u0a69\u0a6a\u0a6b\u0a6c\u0a6d\u0a6e\u0a6f\u0a66]/g,
        function (e) {
          return ur[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return mr[e];
      });
    },
    meridiemParse:
      /\u0a30\u0a3e\u0a24|\u0a38\u0a35\u0a47\u0a30|\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30|\u0a38\u0a3c\u0a3e\u0a2e/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u0a30\u0a3e\u0a24' === a
          ? e < 4
            ? e
            : e + 12
          : '\u0a38\u0a35\u0a47\u0a30' === a
          ? e
          : '\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30' === a
          ? 10 <= e
            ? e
            : e + 12
          : '\u0a38\u0a3c\u0a3e\u0a2e' === a
          ? e + 12
          : void 0
      );
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u0a30\u0a3e\u0a24'
        : e < 10
        ? '\u0a38\u0a35\u0a47\u0a30'
        : e < 17
        ? '\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30'
        : e < 20
        ? '\u0a38\u0a3c\u0a3e\u0a2e'
        : '\u0a30\u0a3e\u0a24';
    },
    week: { dow: 0, doy: 6 },
  });
  var lr =
      'stycze\u0144_luty_marzec_kwiecie\u0144_maj_czerwiec_lipiec_sierpie\u0144_wrzesie\u0144_pa\u017adziernik_listopad_grudzie\u0144'.split(
        '_'
      ),
    Mr =
      'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrze\u015bnia_pa\u017adziernika_listopada_grudnia'.split(
        '_'
      ),
    hr = [
      /^sty/i,
      /^lut/i,
      /^mar/i,
      /^kwi/i,
      /^maj/i,
      /^cze/i,
      /^lip/i,
      /^sie/i,
      /^wrz/i,
      /^pa\u017a/i,
      /^lis/i,
      /^gru/i,
    ];
  function cr(e) {
    return e % 10 < 5 && 1 < e % 10 && ~~(e / 10) % 10 != 1;
  }
  function Lr(e, a, t) {
    var s = e + ' ';
    switch (t) {
      case 'ss':
        return s + (cr(e) ? 'sekundy' : 'sekund');
      case 'm':
        return a ? 'minuta' : 'minut\u0119';
      case 'mm':
        return s + (cr(e) ? 'minuty' : 'minut');
      case 'h':
        return a ? 'godzina' : 'godzin\u0119';
      case 'hh':
        return s + (cr(e) ? 'godziny' : 'godzin');
      case 'ww':
        return s + (cr(e) ? 'tygodnie' : 'tygodni');
      case 'MM':
        return s + (cr(e) ? 'miesi\u0105ce' : 'miesi\u0119cy');
      case 'yy':
        return s + (cr(e) ? 'lata' : 'lat');
    }
  }
  function Yr(e, a, t) {
    return (
      e +
      (20 <= e % 100 || (100 <= e && e % 100 == 0) ? ' de ' : ' ') +
      {
        ss: 'secunde',
        mm: 'minute',
        hh: 'ore',
        dd: 'zile',
        ww: 's\u0103pt\u0103m\xe2ni',
        MM: 'luni',
        yy: 'ani',
      }[t]
    );
  }
  function yr(e, a, t) {
    var s, n;
    return 'm' === t
      ? a
        ? '\u043c\u0438\u043d\u0443\u0442\u0430'
        : '\u043c\u0438\u043d\u0443\u0442\u0443'
      : e +
          ' ' +
          ((s = +e),
          (n = {
            ss: a
              ? '\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434'
              : '\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434',
            mm: a
              ? '\u043c\u0438\u043d\u0443\u0442\u0430_\u043c\u0438\u043d\u0443\u0442\u044b_\u043c\u0438\u043d\u0443\u0442'
              : '\u043c\u0438\u043d\u0443\u0442\u0443_\u043c\u0438\u043d\u0443\u0442\u044b_\u043c\u0438\u043d\u0443\u0442',
            hh: '\u0447\u0430\u0441_\u0447\u0430\u0441\u0430_\u0447\u0430\u0441\u043e\u0432',
            dd: '\u0434\u0435\u043d\u044c_\u0434\u043d\u044f_\u0434\u043d\u0435\u0439',
            ww: '\u043d\u0435\u0434\u0435\u043b\u044f_\u043d\u0435\u0434\u0435\u043b\u0438_\u043d\u0435\u0434\u0435\u043b\u044c',
            MM: '\u043c\u0435\u0441\u044f\u0446_\u043c\u0435\u0441\u044f\u0446\u0430_\u043c\u0435\u0441\u044f\u0446\u0435\u0432',
            yy: '\u0433\u043e\u0434_\u0433\u043e\u0434\u0430_\u043b\u0435\u0442',
          }[t].split('_')),
          s % 10 == 1 && s % 100 != 11
            ? n[0]
            : 2 <= s % 10 && s % 10 <= 4 && (s % 100 < 10 || 20 <= s % 100)
            ? n[1]
            : n[2]);
  }
  M.defineLocale('pl', {
    months: function (e, a) {
      return e ? (/D MMMM/.test(a) ? Mr[e.month()] : lr[e.month()]) : lr;
    },
    monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_pa\u017a_lis_gru'.split('_'),
    monthsParse: hr,
    longMonthsParse: hr,
    shortMonthsParse: hr,
    weekdays: 'niedziela_poniedzia\u0142ek_wtorek_\u015broda_czwartek_pi\u0105tek_sobota'.split(
      '_'
    ),
    weekdaysShort: 'ndz_pon_wt_\u015br_czw_pt_sob'.split('_'),
    weekdaysMin: 'Nd_Pn_Wt_\u015ar_Cz_Pt_So'.split('_'),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[Dzi\u015b o] LT',
      nextDay: '[Jutro o] LT',
      nextWeek: function () {
        switch (this.day()) {
          case 0:
            return '[W niedziel\u0119 o] LT';
          case 2:
            return '[We wtorek o] LT';
          case 3:
            return '[W \u015brod\u0119 o] LT';
          case 6:
            return '[W sobot\u0119 o] LT';
          default:
            return '[W] dddd [o] LT';
        }
      },
      lastDay: '[Wczoraj o] LT',
      lastWeek: function () {
        switch (this.day()) {
          case 0:
            return '[W zesz\u0142\u0105 niedziel\u0119 o] LT';
          case 3:
            return '[W zesz\u0142\u0105 \u015brod\u0119 o] LT';
          case 6:
            return '[W zesz\u0142\u0105 sobot\u0119 o] LT';
          default:
            return '[W zesz\u0142y] dddd [o] LT';
        }
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'za %s',
      past: '%s temu',
      s: 'kilka sekund',
      ss: Lr,
      m: Lr,
      mm: Lr,
      h: Lr,
      hh: Lr,
      d: '1 dzie\u0144',
      dd: '%d dni',
      w: 'tydzie\u0144',
      ww: Lr,
      M: 'miesi\u0105c',
      MM: Lr,
      y: 'rok',
      yy: Lr,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('pt-br', {
      months:
        'janeiro_fevereiro_mar\xe7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
          '_'
        ),
      monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
      weekdays:
        'domingo_segunda-feira_ter\xe7a-feira_quarta-feira_quinta-feira_sexta-feira_s\xe1bado'.split(
          '_'
        ),
      weekdaysShort: 'dom_seg_ter_qua_qui_sex_s\xe1b'.split('_'),
      weekdaysMin: 'do_2\xaa_3\xaa_4\xaa_5\xaa_6\xaa_s\xe1'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D [de] MMMM [de] YYYY',
        LLL: 'D [de] MMMM [de] YYYY [\xe0s] HH:mm',
        LLLL: 'dddd, D [de] MMMM [de] YYYY [\xe0s] HH:mm',
      },
      calendar: {
        sameDay: '[Hoje \xe0s] LT',
        nextDay: '[Amanh\xe3 \xe0s] LT',
        nextWeek: 'dddd [\xe0s] LT',
        lastDay: '[Ontem \xe0s] LT',
        lastWeek: function () {
          return 0 === this.day() || 6 === this.day()
            ? '[\xdaltimo] dddd [\xe0s] LT'
            : '[\xdaltima] dddd [\xe0s] LT';
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: 'em %s',
        past: 'h\xe1 %s',
        s: 'poucos segundos',
        ss: '%d segundos',
        m: 'um minuto',
        mm: '%d minutos',
        h: 'uma hora',
        hh: '%d horas',
        d: 'um dia',
        dd: '%d dias',
        M: 'um m\xeas',
        MM: '%d meses',
        y: 'um ano',
        yy: '%d anos',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\xba/,
      ordinal: '%d\xba',
      invalidDate: 'Data inv\xe1lida',
    }),
    M.defineLocale('pt', {
      months:
        'janeiro_fevereiro_mar\xe7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
          '_'
        ),
      monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
      weekdays:
        'Domingo_Segunda-feira_Ter\xe7a-feira_Quarta-feira_Quinta-feira_Sexta-feira_S\xe1bado'.split(
          '_'
        ),
      weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_S\xe1b'.split('_'),
      weekdaysMin: 'Do_2\xaa_3\xaa_4\xaa_5\xaa_6\xaa_S\xe1'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D [de] MMMM [de] YYYY',
        LLL: 'D [de] MMMM [de] YYYY HH:mm',
        LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Hoje \xe0s] LT',
        nextDay: '[Amanh\xe3 \xe0s] LT',
        nextWeek: 'dddd [\xe0s] LT',
        lastDay: '[Ontem \xe0s] LT',
        lastWeek: function () {
          return 0 === this.day() || 6 === this.day()
            ? '[\xdaltimo] dddd [\xe0s] LT'
            : '[\xdaltima] dddd [\xe0s] LT';
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: 'em %s',
        past: 'h\xe1 %s',
        s: 'segundos',
        ss: '%d segundos',
        m: 'um minuto',
        mm: '%d minutos',
        h: 'uma hora',
        hh: '%d horas',
        d: 'um dia',
        dd: '%d dias',
        w: 'uma semana',
        ww: '%d semanas',
        M: 'um m\xeas',
        MM: '%d meses',
        y: 'um ano',
        yy: '%d anos',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\xba/,
      ordinal: '%d\xba',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('ro', {
      months:
        'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
          '_'
        ),
      monthsShort: 'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'duminic\u0103_luni_mar\u021bi_miercuri_joi_vineri_s\xe2mb\u0103t\u0103'.split('_'),
      weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_S\xe2m'.split('_'),
      weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_S\xe2'.split('_'),
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY H:mm',
        LLLL: 'dddd, D MMMM YYYY H:mm',
      },
      calendar: {
        sameDay: '[azi la] LT',
        nextDay: '[m\xe2ine la] LT',
        nextWeek: 'dddd [la] LT',
        lastDay: '[ieri la] LT',
        lastWeek: '[fosta] dddd [la] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'peste %s',
        past: '%s \xeen urm\u0103',
        s: 'c\xe2teva secunde',
        ss: Yr,
        m: 'un minut',
        mm: Yr,
        h: 'o or\u0103',
        hh: Yr,
        d: 'o zi',
        dd: Yr,
        w: 'o s\u0103pt\u0103m\xe2n\u0103',
        ww: Yr,
        M: 'o lun\u0103',
        MM: Yr,
        y: 'un an',
        yy: Yr,
      },
      week: { dow: 1, doy: 7 },
    });
  var fr = [
    /^\u044f\u043d\u0432/i,
    /^\u0444\u0435\u0432/i,
    /^\u043c\u0430\u0440/i,
    /^\u0430\u043f\u0440/i,
    /^\u043c\u0430[\u0439\u044f]/i,
    /^\u0438\u044e\u043d/i,
    /^\u0438\u044e\u043b/i,
    /^\u0430\u0432\u0433/i,
    /^\u0441\u0435\u043d/i,
    /^\u043e\u043a\u0442/i,
    /^\u043d\u043e\u044f/i,
    /^\u0434\u0435\u043a/i,
  ];
  M.defineLocale('ru', {
    months: {
      format:
        '\u044f\u043d\u0432\u0430\u0440\u044f_\u0444\u0435\u0432\u0440\u0430\u043b\u044f_\u043c\u0430\u0440\u0442\u0430_\u0430\u043f\u0440\u0435\u043b\u044f_\u043c\u0430\u044f_\u0438\u044e\u043d\u044f_\u0438\u044e\u043b\u044f_\u0430\u0432\u0433\u0443\u0441\u0442\u0430_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f_\u043e\u043a\u0442\u044f\u0431\u0440\u044f_\u043d\u043e\u044f\u0431\u0440\u044f_\u0434\u0435\u043a\u0430\u0431\u0440\u044f'.split(
          '_'
        ),
      standalone:
        '\u044f\u043d\u0432\u0430\u0440\u044c_\u0444\u0435\u0432\u0440\u0430\u043b\u044c_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b\u044c_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c_\u043e\u043a\u0442\u044f\u0431\u0440\u044c_\u043d\u043e\u044f\u0431\u0440\u044c_\u0434\u0435\u043a\u0430\u0431\u0440\u044c'.split(
          '_'
        ),
    },
    monthsShort: {
      format:
        '\u044f\u043d\u0432._\u0444\u0435\u0432\u0440._\u043c\u0430\u0440._\u0430\u043f\u0440._\u043c\u0430\u044f_\u0438\u044e\u043d\u044f_\u0438\u044e\u043b\u044f_\u0430\u0432\u0433._\u0441\u0435\u043d\u0442._\u043e\u043a\u0442._\u043d\u043e\u044f\u0431._\u0434\u0435\u043a.'.split(
          '_'
        ),
      standalone:
        '\u044f\u043d\u0432._\u0444\u0435\u0432\u0440._\u043c\u0430\u0440\u0442_\u0430\u043f\u0440._\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433._\u0441\u0435\u043d\u0442._\u043e\u043a\u0442._\u043d\u043e\u044f\u0431._\u0434\u0435\u043a.'.split(
          '_'
        ),
    },
    weekdays: {
      standalone:
        '\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043f\u044f\u0442\u043d\u0438\u0446\u0430_\u0441\u0443\u0431\u0431\u043e\u0442\u0430'.split(
          '_'
        ),
      format:
        '\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043f\u044f\u0442\u043d\u0438\u0446\u0443_\u0441\u0443\u0431\u0431\u043e\u0442\u0443'.split(
          '_'
        ),
      isFormat:
        /\[ ?[\u0412\u0432] ?(?:\u043f\u0440\u043e\u0448\u043b\u0443\u044e|\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e|\u044d\u0442\u0443)? ?] ?dddd/,
    },
    weekdaysShort:
      '\u0432\u0441_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431'.split(
        '_'
      ),
    weekdaysMin:
      '\u0432\u0441_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431'.split(
        '_'
      ),
    monthsParse: fr,
    longMonthsParse: fr,
    shortMonthsParse: fr,
    monthsRegex:
      /^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i,
    monthsShortRegex:
      /^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i,
    monthsStrictRegex:
      /^(\u044f\u043d\u0432\u0430\u0440[\u044f\u044c]|\u0444\u0435\u0432\u0440\u0430\u043b[\u044f\u044c]|\u043c\u0430\u0440\u0442\u0430?|\u0430\u043f\u0440\u0435\u043b[\u044f\u044c]|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044f\u044c]|\u0438\u044e\u043b[\u044f\u044c]|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043e\u043a\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043d\u043e\u044f\u0431\u0440[\u044f\u044c]|\u0434\u0435\u043a\u0430\u0431\u0440[\u044f\u044c])/i,
    monthsShortStrictRegex:
      /^(\u044f\u043d\u0432\.|\u0444\u0435\u0432\u0440?\.|\u043c\u0430\u0440[\u0442.]|\u0430\u043f\u0440\.|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044c\u044f.]|\u0438\u044e\u043b[\u044c\u044f.]|\u0430\u0432\u0433\.|\u0441\u0435\u043d\u0442?\.|\u043e\u043a\u0442\.|\u043d\u043e\u044f\u0431?\.|\u0434\u0435\u043a\.)/i,
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY \u0433.',
      LLL: 'D MMMM YYYY \u0433., H:mm',
      LLLL: 'dddd, D MMMM YYYY \u0433., H:mm',
    },
    calendar: {
      sameDay: '[\u0421\u0435\u0433\u043e\u0434\u043d\u044f, \u0432] LT',
      nextDay: '[\u0417\u0430\u0432\u0442\u0440\u0430, \u0432] LT',
      lastDay: '[\u0412\u0447\u0435\u0440\u0430, \u0432] LT',
      nextWeek: function (e) {
        if (e.week() === this.week())
          return 2 === this.day()
            ? '[\u0412\u043e] dddd, [\u0432] LT'
            : '[\u0412] dddd, [\u0432] LT';
        switch (this.day()) {
          case 0:
            return '[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435] dddd, [\u0432] LT';
          case 1:
          case 2:
          case 4:
            return '[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439] dddd, [\u0432] LT';
          case 3:
          case 5:
          case 6:
            return '[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e] dddd, [\u0432] LT';
        }
      },
      lastWeek: function (e) {
        if (e.week() === this.week())
          return 2 === this.day()
            ? '[\u0412\u043e] dddd, [\u0432] LT'
            : '[\u0412] dddd, [\u0432] LT';
        switch (this.day()) {
          case 0:
            return '[\u0412 \u043f\u0440\u043e\u0448\u043b\u043e\u0435] dddd, [\u0432] LT';
          case 1:
          case 2:
          case 4:
            return '[\u0412 \u043f\u0440\u043e\u0448\u043b\u044b\u0439] dddd, [\u0432] LT';
          case 3:
          case 5:
          case 6:
            return '[\u0412 \u043f\u0440\u043e\u0448\u043b\u0443\u044e] dddd, [\u0432] LT';
        }
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u0447\u0435\u0440\u0435\u0437 %s',
      past: '%s \u043d\u0430\u0437\u0430\u0434',
      s: '\u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434',
      ss: yr,
      m: yr,
      mm: yr,
      h: '\u0447\u0430\u0441',
      hh: yr,
      d: '\u0434\u0435\u043d\u044c',
      dd: yr,
      w: '\u043d\u0435\u0434\u0435\u043b\u044f',
      ww: yr,
      M: '\u043c\u0435\u0441\u044f\u0446',
      MM: yr,
      y: '\u0433\u043e\u0434',
      yy: yr,
    },
    meridiemParse:
      /\u043d\u043e\u0447\u0438|\u0443\u0442\u0440\u0430|\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430/i,
    isPM: function (e) {
      return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430)$/.test(e);
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u043d\u043e\u0447\u0438'
        : e < 12
        ? '\u0443\u0442\u0440\u0430'
        : e < 17
        ? '\u0434\u043d\u044f'
        : '\u0432\u0435\u0447\u0435\u0440\u0430';
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(\u0439|\u0433\u043e|\u044f)/,
    ordinal: function (e, a) {
      switch (a) {
        case 'M':
        case 'd':
        case 'DDD':
          return e + '-\u0439';
        case 'D':
          return e + '-\u0433\u043e';
        case 'w':
        case 'W':
          return e + '-\u044f';
        default:
          return e;
      }
    },
    week: { dow: 1, doy: 4 },
  });
  var pr = [
      '\u062c\u0646\u0648\u0631\u064a',
      '\u0641\u064a\u0628\u0631\u0648\u0631\u064a',
      '\u0645\u0627\u0631\u0686',
      '\u0627\u067e\u0631\u064a\u0644',
      '\u0645\u0626\u064a',
      '\u062c\u0648\u0646',
      '\u062c\u0648\u0644\u0627\u0621\u0650',
      '\u0622\u06af\u0633\u067d',
      '\u0633\u064a\u067e\u067d\u0645\u0628\u0631',
      '\u0622\u06aa\u067d\u0648\u0628\u0631',
      '\u0646\u0648\u0645\u0628\u0631',
      '\u068a\u0633\u0645\u0628\u0631',
    ],
    kr = [
      '\u0622\u0686\u0631',
      '\u0633\u0648\u0645\u0631',
      '\u0627\u06b1\u0627\u0631\u0648',
      '\u0627\u0631\u0628\u0639',
      '\u062e\u0645\u064a\u0633',
      '\u062c\u0645\u0639',
      '\u0687\u0646\u0687\u0631',
    ];
  M.defineLocale('sd', {
    months: pr,
    monthsShort: pr,
    weekdays: kr,
    weekdaysShort: kr,
    weekdaysMin: kr,
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd\u060c D MMMM YYYY HH:mm',
    },
    meridiemParse: /\u0635\u0628\u062d|\u0634\u0627\u0645/,
    isPM: function (e) {
      return '\u0634\u0627\u0645' === e;
    },
    meridiem: function (e, a, t) {
      return e < 12 ? '\u0635\u0628\u062d' : '\u0634\u0627\u0645';
    },
    calendar: {
      sameDay: '[\u0627\u0684] LT',
      nextDay: '[\u0633\u0680\u0627\u06bb\u064a] LT',
      nextWeek: 'dddd [\u0627\u06b3\u064a\u0646 \u0647\u0641\u062a\u064a \u062a\u064a] LT',
      lastDay: '[\u06aa\u0627\u0644\u0647\u0647] LT',
      lastWeek: '[\u06af\u0632\u0631\u064a\u0644 \u0647\u0641\u062a\u064a] dddd [\u062a\u064a] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u067e\u0648\u0621',
      past: '%s \u0627\u06b3',
      s: '\u0686\u0646\u062f \u0633\u064a\u06aa\u0646\u068a',
      ss: '%d \u0633\u064a\u06aa\u0646\u068a',
      m: '\u0647\u06aa \u0645\u0646\u067d',
      mm: '%d \u0645\u0646\u067d',
      h: '\u0647\u06aa \u06aa\u0644\u0627\u06aa',
      hh: '%d \u06aa\u0644\u0627\u06aa',
      d: '\u0647\u06aa \u068f\u064a\u0646\u0647\u0646',
      dd: '%d \u068f\u064a\u0646\u0647\u0646',
      M: '\u0647\u06aa \u0645\u0647\u064a\u0646\u0648',
      MM: '%d \u0645\u0647\u064a\u0646\u0627',
      y: '\u0647\u06aa \u0633\u0627\u0644',
      yy: '%d \u0633\u0627\u0644',
    },
    preparse: function (e) {
      return e.replace(/\u060c/g, ',');
    },
    postformat: function (e) {
      return e.replace(/,/g, '\u060c');
    },
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('se', {
      months:
        'o\u0111\u0111ajagem\xe1nnu_guovvam\xe1nnu_njuk\u010dam\xe1nnu_cuo\u014bom\xe1nnu_miessem\xe1nnu_geassem\xe1nnu_suoidnem\xe1nnu_borgem\xe1nnu_\u010dak\u010dam\xe1nnu_golggotm\xe1nnu_sk\xe1bmam\xe1nnu_juovlam\xe1nnu'.split(
          '_'
        ),
      monthsShort:
        'o\u0111\u0111j_guov_njuk_cuo_mies_geas_suoi_borg_\u010dak\u010d_golg_sk\xe1b_juov'.split(
          '_'
        ),
      weekdays:
        'sotnabeaivi_vuoss\xe1rga_ma\u014b\u014beb\xe1rga_gaskavahkku_duorastat_bearjadat_l\xe1vvardat'.split(
          '_'
        ),
      weekdaysShort: 'sotn_vuos_ma\u014b_gask_duor_bear_l\xe1v'.split('_'),
      weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'MMMM D. [b.] YYYY',
        LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
        LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm',
      },
      calendar: {
        sameDay: '[otne ti] LT',
        nextDay: '[ihttin ti] LT',
        nextWeek: 'dddd [ti] LT',
        lastDay: '[ikte ti] LT',
        lastWeek: '[ovddit] dddd [ti] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s gea\u017ees',
        past: 'ma\u014bit %s',
        s: 'moadde sekunddat',
        ss: '%d sekunddat',
        m: 'okta minuhta',
        mm: '%d minuhtat',
        h: 'okta diimmu',
        hh: '%d diimmut',
        d: 'okta beaivi',
        dd: '%d beaivvit',
        M: 'okta m\xe1nnu',
        MM: '%d m\xe1nut',
        y: 'okta jahki',
        yy: '%d jagit',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('si', {
      months:
        '\u0da2\u0db1\u0dc0\u0dcf\u0dbb\u0dd2_\u0db4\u0dd9\u0db6\u0dbb\u0dc0\u0dcf\u0dbb\u0dd2_\u0db8\u0dcf\u0dbb\u0dca\u0dad\u0dd4_\u0d85\u0db4\u0dca\u200d\u0dbb\u0dda\u0dbd\u0dca_\u0db8\u0dd0\u0dba\u0dd2_\u0da2\u0dd6\u0db1\u0dd2_\u0da2\u0dd6\u0dbd\u0dd2_\u0d85\u0d9c\u0ddd\u0dc3\u0dca\u0dad\u0dd4_\u0dc3\u0dd0\u0db4\u0dca\u0dad\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca_\u0d94\u0d9a\u0dca\u0dad\u0ddd\u0db6\u0dbb\u0dca_\u0db1\u0ddc\u0dc0\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca_\u0daf\u0dd9\u0dc3\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca'.split(
          '_'
        ),
      monthsShort:
        '\u0da2\u0db1_\u0db4\u0dd9\u0db6_\u0db8\u0dcf\u0dbb\u0dca_\u0d85\u0db4\u0dca_\u0db8\u0dd0\u0dba\u0dd2_\u0da2\u0dd6\u0db1\u0dd2_\u0da2\u0dd6\u0dbd\u0dd2_\u0d85\u0d9c\u0ddd_\u0dc3\u0dd0\u0db4\u0dca_\u0d94\u0d9a\u0dca_\u0db1\u0ddc\u0dc0\u0dd0_\u0daf\u0dd9\u0dc3\u0dd0'.split(
          '_'
        ),
      weekdays:
        '\u0d89\u0dbb\u0dd2\u0daf\u0dcf_\u0dc3\u0db3\u0dd4\u0daf\u0dcf_\u0d85\u0d9f\u0dc4\u0dbb\u0dd4\u0dc0\u0dcf\u0daf\u0dcf_\u0db6\u0daf\u0dcf\u0daf\u0dcf_\u0db6\u0dca\u200d\u0dbb\u0dc4\u0dc3\u0dca\u0db4\u0dad\u0dd2\u0db1\u0dca\u0daf\u0dcf_\u0dc3\u0dd2\u0d9a\u0dd4\u0dbb\u0dcf\u0daf\u0dcf_\u0dc3\u0dd9\u0db1\u0dc3\u0dd4\u0dbb\u0dcf\u0daf\u0dcf'.split(
          '_'
        ),
      weekdaysShort:
        '\u0d89\u0dbb\u0dd2_\u0dc3\u0db3\u0dd4_\u0d85\u0d9f_\u0db6\u0daf\u0dcf_\u0db6\u0dca\u200d\u0dbb\u0dc4_\u0dc3\u0dd2\u0d9a\u0dd4_\u0dc3\u0dd9\u0db1'.split(
          '_'
        ),
      weekdaysMin:
        '\u0d89_\u0dc3_\u0d85_\u0db6_\u0db6\u0dca\u200d\u0dbb_\u0dc3\u0dd2_\u0dc3\u0dd9'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'a h:mm',
        LTS: 'a h:mm:ss',
        L: 'YYYY/MM/DD',
        LL: 'YYYY MMMM D',
        LLL: 'YYYY MMMM D, a h:mm',
        LLLL: 'YYYY MMMM D [\u0dc0\u0dd0\u0db1\u0dd2] dddd, a h:mm:ss',
      },
      calendar: {
        sameDay: '[\u0d85\u0daf] LT[\u0da7]',
        nextDay: '[\u0dc4\u0dd9\u0da7] LT[\u0da7]',
        nextWeek: 'dddd LT[\u0da7]',
        lastDay: '[\u0d8a\u0dba\u0dda] LT[\u0da7]',
        lastWeek: '[\u0db4\u0dc3\u0dd4\u0d9c\u0dd2\u0dba] dddd LT[\u0da7]',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s\u0d9a\u0dd2\u0db1\u0dca',
        past: '%s\u0d9a\u0da7 \u0db4\u0dd9\u0dbb',
        s: '\u0dad\u0dad\u0dca\u0db4\u0dbb \u0d9a\u0dd2\u0dc4\u0dd2\u0db4\u0dba',
        ss: '\u0dad\u0dad\u0dca\u0db4\u0dbb %d',
        m: '\u0db8\u0dd2\u0db1\u0dd2\u0dad\u0dca\u0dad\u0dd4\u0dc0',
        mm: '\u0db8\u0dd2\u0db1\u0dd2\u0dad\u0dca\u0dad\u0dd4 %d',
        h: '\u0db4\u0dd0\u0dba',
        hh: '\u0db4\u0dd0\u0dba %d',
        d: '\u0daf\u0dd2\u0db1\u0dba',
        dd: '\u0daf\u0dd2\u0db1 %d',
        M: '\u0db8\u0dcf\u0dc3\u0dba',
        MM: '\u0db8\u0dcf\u0dc3 %d',
        y: '\u0dc0\u0dc3\u0dbb',
        yy: '\u0dc0\u0dc3\u0dbb %d',
      },
      dayOfMonthOrdinalParse: /\d{1,2} \u0dc0\u0dd0\u0db1\u0dd2/,
      ordinal: function (e) {
        return e + ' \u0dc0\u0dd0\u0db1\u0dd2';
      },
      meridiemParse:
        /\u0db4\u0dd9\u0dbb \u0dc0\u0dbb\u0dd4|\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4|\u0db4\u0dd9.\u0dc0|\u0db4.\u0dc0./,
      isPM: function (e) {
        return '\u0db4.\u0dc0.' === e || '\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4' === e;
      },
      meridiem: function (e, a, t) {
        return 11 < e
          ? t
            ? '\u0db4.\u0dc0.'
            : '\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4'
          : t
          ? '\u0db4\u0dd9.\u0dc0.'
          : '\u0db4\u0dd9\u0dbb \u0dc0\u0dbb\u0dd4';
      },
    });
  var Dr =
      'janu\xe1r_febru\xe1r_marec_apr\xedl_m\xe1j_j\xfan_j\xfal_august_september_okt\xf3ber_november_december'.split(
        '_'
      ),
    Tr = 'jan_feb_mar_apr_m\xe1j_j\xfan_j\xfal_aug_sep_okt_nov_dec'.split('_');
  function gr(e) {
    return 1 < e && e < 5;
  }
  function wr(e, a, t, s) {
    var n = e + ' ';
    switch (t) {
      case 's':
        return a || s ? 'p\xe1r sek\xfand' : 'p\xe1r sekundami';
      case 'ss':
        return a || s ? n + (gr(e) ? 'sekundy' : 'sek\xfand') : n + 'sekundami';
      case 'm':
        return a ? 'min\xfata' : s ? 'min\xfatu' : 'min\xfatou';
      case 'mm':
        return a || s ? n + (gr(e) ? 'min\xfaty' : 'min\xfat') : n + 'min\xfatami';
      case 'h':
        return a ? 'hodina' : s ? 'hodinu' : 'hodinou';
      case 'hh':
        return a || s ? n + (gr(e) ? 'hodiny' : 'hod\xedn') : n + 'hodinami';
      case 'd':
        return a || s ? 'de\u0148' : 'd\u0148om';
      case 'dd':
        return a || s ? n + (gr(e) ? 'dni' : 'dn\xed') : n + 'd\u0148ami';
      case 'M':
        return a || s ? 'mesiac' : 'mesiacom';
      case 'MM':
        return a || s ? n + (gr(e) ? 'mesiace' : 'mesiacov') : n + 'mesiacmi';
      case 'y':
        return a || s ? 'rok' : 'rokom';
      case 'yy':
        return a || s ? n + (gr(e) ? 'roky' : 'rokov') : n + 'rokmi';
    }
  }
  function vr(e, a, t, s) {
    var n = e + ' ';
    switch (t) {
      case 's':
        return a || s ? 'nekaj sekund' : 'nekaj sekundami';
      case 'ss':
        return (n +=
          1 === e
            ? a
              ? 'sekundo'
              : 'sekundi'
            : 2 === e
            ? a || s
              ? 'sekundi'
              : 'sekundah'
            : e < 5
            ? a || s
              ? 'sekunde'
              : 'sekundah'
            : 'sekund');
      case 'm':
        return a ? 'ena minuta' : 'eno minuto';
      case 'mm':
        return (n +=
          1 === e
            ? a
              ? 'minuta'
              : 'minuto'
            : 2 === e
            ? a || s
              ? 'minuti'
              : 'minutama'
            : e < 5
            ? a || s
              ? 'minute'
              : 'minutami'
            : a || s
            ? 'minut'
            : 'minutami');
      case 'h':
        return a ? 'ena ura' : 'eno uro';
      case 'hh':
        return (n +=
          1 === e
            ? a
              ? 'ura'
              : 'uro'
            : 2 === e
            ? a || s
              ? 'uri'
              : 'urama'
            : e < 5
            ? a || s
              ? 'ure'
              : 'urami'
            : a || s
            ? 'ur'
            : 'urami');
      case 'd':
        return a || s ? 'en dan' : 'enim dnem';
      case 'dd':
        return (n +=
          1 === e
            ? a || s
              ? 'dan'
              : 'dnem'
            : 2 === e
            ? a || s
              ? 'dni'
              : 'dnevoma'
            : a || s
            ? 'dni'
            : 'dnevi');
      case 'M':
        return a || s ? 'en mesec' : 'enim mesecem';
      case 'MM':
        return (n +=
          1 === e
            ? a || s
              ? 'mesec'
              : 'mesecem'
            : 2 === e
            ? a || s
              ? 'meseca'
              : 'mesecema'
            : e < 5
            ? a || s
              ? 'mesece'
              : 'meseci'
            : a || s
            ? 'mesecev'
            : 'meseci');
      case 'y':
        return a || s ? 'eno leto' : 'enim letom';
      case 'yy':
        return (n +=
          1 === e
            ? a || s
              ? 'leto'
              : 'letom'
            : 2 === e
            ? a || s
              ? 'leti'
              : 'letoma'
            : e < 5
            ? a || s
              ? 'leta'
              : 'leti'
            : a || s
            ? 'let'
            : 'leti');
    }
  }
  M.defineLocale('sk', {
    months: Dr,
    monthsShort: Tr,
    weekdays: 'nede\u013ea_pondelok_utorok_streda_\u0161tvrtok_piatok_sobota'.split('_'),
    weekdaysShort: 'ne_po_ut_st_\u0161t_pi_so'.split('_'),
    weekdaysMin: 'ne_po_ut_st_\u0161t_pi_so'.split('_'),
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D. MMMM YYYY',
      LLL: 'D. MMMM YYYY H:mm',
      LLLL: 'dddd D. MMMM YYYY H:mm',
    },
    calendar: {
      sameDay: '[dnes o] LT',
      nextDay: '[zajtra o] LT',
      nextWeek: function () {
        switch (this.day()) {
          case 0:
            return '[v nede\u013eu o] LT';
          case 1:
          case 2:
            return '[v] dddd [o] LT';
          case 3:
            return '[v stredu o] LT';
          case 4:
            return '[vo \u0161tvrtok o] LT';
          case 5:
            return '[v piatok o] LT';
          case 6:
            return '[v sobotu o] LT';
        }
      },
      lastDay: '[v\u010dera o] LT',
      lastWeek: function () {
        switch (this.day()) {
          case 0:
            return '[minul\xfa nede\u013eu o] LT';
          case 1:
          case 2:
            return '[minul\xfd] dddd [o] LT';
          case 3:
            return '[minul\xfa stredu o] LT';
          case 4:
          case 5:
            return '[minul\xfd] dddd [o] LT';
          case 6:
            return '[minul\xfa sobotu o] LT';
        }
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'za %s',
      past: 'pred %s',
      s: wr,
      ss: wr,
      m: wr,
      mm: wr,
      h: wr,
      hh: wr,
      d: wr,
      dd: wr,
      M: wr,
      MM: wr,
      y: wr,
      yy: wr,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 4 },
  }),
    M.defineLocale('sl', {
      months:
        'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
          '_'
        ),
      monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
      monthsParseExact: !0,
      weekdays: 'nedelja_ponedeljek_torek_sreda_\u010detrtek_petek_sobota'.split('_'),
      weekdaysShort: 'ned._pon._tor._sre._\u010det._pet._sob.'.split('_'),
      weekdaysMin: 'ne_po_to_sr_\u010de_pe_so'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD. MM. YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm',
      },
      calendar: {
        sameDay: '[danes ob] LT',
        nextDay: '[jutri ob] LT',
        nextWeek: function () {
          switch (this.day()) {
            case 0:
              return '[v] [nedeljo] [ob] LT';
            case 3:
              return '[v] [sredo] [ob] LT';
            case 6:
              return '[v] [soboto] [ob] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[v] dddd [ob] LT';
          }
        },
        lastDay: '[v\u010deraj ob] LT',
        lastWeek: function () {
          switch (this.day()) {
            case 0:
              return '[prej\u0161njo] [nedeljo] [ob] LT';
            case 3:
              return '[prej\u0161njo] [sredo] [ob] LT';
            case 6:
              return '[prej\u0161njo] [soboto] [ob] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[prej\u0161nji] dddd [ob] LT';
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u010dez %s',
        past: 'pred %s',
        s: vr,
        ss: vr,
        m: vr,
        mm: vr,
        h: vr,
        hh: vr,
        d: vr,
        dd: vr,
        M: vr,
        MM: vr,
        y: vr,
        yy: vr,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('sq', {
      months:
        'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_N\xebntor_Dhjetor'.split(
          '_'
        ),
      monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_N\xebn_Dhj'.split('_'),
      weekdays: 'E Diel_E H\xebn\xeb_E Mart\xeb_E M\xebrkur\xeb_E Enjte_E Premte_E Shtun\xeb'.split(
        '_'
      ),
      weekdaysShort: 'Die_H\xebn_Mar_M\xebr_Enj_Pre_Sht'.split('_'),
      weekdaysMin: 'D_H_Ma_M\xeb_E_P_Sh'.split('_'),
      weekdaysParseExact: !0,
      meridiemParse: /PD|MD/,
      isPM: function (e) {
        return 'M' === e.charAt(0);
      },
      meridiem: function (e, a, t) {
        return e < 12 ? 'PD' : 'MD';
      },
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Sot n\xeb] LT',
        nextDay: '[Nes\xebr n\xeb] LT',
        nextWeek: 'dddd [n\xeb] LT',
        lastDay: '[Dje n\xeb] LT',
        lastWeek: 'dddd [e kaluar n\xeb] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'n\xeb %s',
        past: '%s m\xeb par\xeb',
        s: 'disa sekonda',
        ss: '%d sekonda',
        m: 'nj\xeb minut\xeb',
        mm: '%d minuta',
        h: 'nj\xeb or\xeb',
        hh: '%d or\xeb',
        d: 'nj\xeb dit\xeb',
        dd: '%d dit\xeb',
        M: 'nj\xeb muaj',
        MM: '%d muaj',
        y: 'nj\xeb vit',
        yy: '%d vite',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    });
  var br = {
    words: {
      ss: [
        '\u0441\u0435\u043a\u0443\u043d\u0434\u0430',
        '\u0441\u0435\u043a\u0443\u043d\u0434\u0435',
        '\u0441\u0435\u043a\u0443\u043d\u0434\u0438',
      ],
      m: [
        '\u0458\u0435\u0434\u0430\u043d \u043c\u0438\u043d\u0443\u0442',
        '\u0458\u0435\u0434\u043d\u0435 \u043c\u0438\u043d\u0443\u0442\u0435',
      ],
      mm: [
        '\u043c\u0438\u043d\u0443\u0442',
        '\u043c\u0438\u043d\u0443\u0442\u0435',
        '\u043c\u0438\u043d\u0443\u0442\u0430',
      ],
      h: [
        '\u0458\u0435\u0434\u0430\u043d \u0441\u0430\u0442',
        '\u0458\u0435\u0434\u043d\u043e\u0433 \u0441\u0430\u0442\u0430',
      ],
      hh: ['\u0441\u0430\u0442', '\u0441\u0430\u0442\u0430', '\u0441\u0430\u0442\u0438'],
      dd: ['\u0434\u0430\u043d', '\u0434\u0430\u043d\u0430', '\u0434\u0430\u043d\u0430'],
      MM: [
        '\u043c\u0435\u0441\u0435\u0446',
        '\u043c\u0435\u0441\u0435\u0446\u0430',
        '\u043c\u0435\u0441\u0435\u0446\u0438',
      ],
      yy: [
        '\u0433\u043e\u0434\u0438\u043d\u0430',
        '\u0433\u043e\u0434\u0438\u043d\u0435',
        '\u0433\u043e\u0434\u0438\u043d\u0430',
      ],
    },
    correctGrammaticalCase: function (e, a) {
      return 1 === e ? a[0] : 2 <= e && e <= 4 ? a[1] : a[2];
    },
    translate: function (e, a, t) {
      var s = br.words[t];
      return 1 === t.length ? (a ? s[0] : s[1]) : e + ' ' + br.correctGrammaticalCase(e, s);
    },
  };
  M.defineLocale('sr-cyrl', {
    months:
      '\u0458\u0430\u043d\u0443\u0430\u0440_\u0444\u0435\u0431\u0440\u0443\u0430\u0440_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0431\u0430\u0440_\u043e\u043a\u0442\u043e\u0431\u0430\u0440_\u043d\u043e\u0432\u0435\u043c\u0431\u0430\u0440_\u0434\u0435\u0446\u0435\u043c\u0431\u0430\u0440'.split(
        '_'
      ),
    monthsShort:
      '\u0458\u0430\u043d._\u0444\u0435\u0431._\u043c\u0430\u0440._\u0430\u043f\u0440._\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433._\u0441\u0435\u043f._\u043e\u043a\u0442._\u043d\u043e\u0432._\u0434\u0435\u0446.'.split(
        '_'
      ),
    monthsParseExact: !0,
    weekdays:
      '\u043d\u0435\u0434\u0435\u0459\u0430_\u043f\u043e\u043d\u0435\u0434\u0435\u0459\u0430\u043a_\u0443\u0442\u043e\u0440\u0430\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043a_\u043f\u0435\u0442\u0430\u043a_\u0441\u0443\u0431\u043e\u0442\u0430'.split(
        '_'
      ),
    weekdaysShort:
      '\u043d\u0435\u0434._\u043f\u043e\u043d._\u0443\u0442\u043e._\u0441\u0440\u0435._\u0447\u0435\u0442._\u043f\u0435\u0442._\u0441\u0443\u0431.'.split(
        '_'
      ),
    weekdaysMin:
      '\u043d\u0435_\u043f\u043e_\u0443\u0442_\u0441\u0440_\u0447\u0435_\u043f\u0435_\u0441\u0443'.split(
        '_'
      ),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'D. M. YYYY.',
      LL: 'D. MMMM YYYY.',
      LLL: 'D. MMMM YYYY. H:mm',
      LLLL: 'dddd, D. MMMM YYYY. H:mm',
    },
    calendar: {
      sameDay: '[\u0434\u0430\u043d\u0430\u0441 \u0443] LT',
      nextDay: '[\u0441\u0443\u0442\u0440\u0430 \u0443] LT',
      nextWeek: function () {
        switch (this.day()) {
          case 0:
            return '[\u0443] [\u043d\u0435\u0434\u0435\u0459\u0443] [\u0443] LT';
          case 3:
            return '[\u0443] [\u0441\u0440\u0435\u0434\u0443] [\u0443] LT';
          case 6:
            return '[\u0443] [\u0441\u0443\u0431\u043e\u0442\u0443] [\u0443] LT';
          case 1:
          case 2:
          case 4:
          case 5:
            return '[\u0443] dddd [\u0443] LT';
        }
      },
      lastDay: '[\u0458\u0443\u0447\u0435 \u0443] LT',
      lastWeek: function () {
        return [
          '[\u043f\u0440\u043e\u0448\u043b\u0435] [\u043d\u0435\u0434\u0435\u0459\u0435] [\u0443] LT',
          '[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u043f\u043e\u043d\u0435\u0434\u0435\u0459\u043a\u0430] [\u0443] LT',
          '[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u0443\u0442\u043e\u0440\u043a\u0430] [\u0443] LT',
          '[\u043f\u0440\u043e\u0448\u043b\u0435] [\u0441\u0440\u0435\u0434\u0435] [\u0443] LT',
          '[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u0447\u0435\u0442\u0432\u0440\u0442\u043a\u0430] [\u0443] LT',
          '[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u043f\u0435\u0442\u043a\u0430] [\u0443] LT',
          '[\u043f\u0440\u043e\u0448\u043b\u0435] [\u0441\u0443\u0431\u043e\u0442\u0435] [\u0443] LT',
        ][this.day()];
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u0437\u0430 %s',
      past: '\u043f\u0440\u0435 %s',
      s: '\u043d\u0435\u043a\u043e\u043b\u0438\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434\u0438',
      ss: br.translate,
      m: br.translate,
      mm: br.translate,
      h: br.translate,
      hh: br.translate,
      d: '\u0434\u0430\u043d',
      dd: br.translate,
      M: '\u043c\u0435\u0441\u0435\u0446',
      MM: br.translate,
      y: '\u0433\u043e\u0434\u0438\u043d\u0443',
      yy: br.translate,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 7 },
  });
  var Sr = {
    words: {
      ss: ['sekunda', 'sekunde', 'sekundi'],
      m: ['jedan minut', 'jedne minute'],
      mm: ['minut', 'minute', 'minuta'],
      h: ['jedan sat', 'jednog sata'],
      hh: ['sat', 'sata', 'sati'],
      dd: ['dan', 'dana', 'dana'],
      MM: ['mesec', 'meseca', 'meseci'],
      yy: ['godina', 'godine', 'godina'],
    },
    correctGrammaticalCase: function (e, a) {
      return 1 === e ? a[0] : 2 <= e && e <= 4 ? a[1] : a[2];
    },
    translate: function (e, a, t) {
      var s = Sr.words[t];
      return 1 === t.length ? (a ? s[0] : s[1]) : e + ' ' + Sr.correctGrammaticalCase(e, s);
    },
  };
  M.defineLocale('sr', {
    months:
      'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: !0,
    weekdays: 'nedelja_ponedeljak_utorak_sreda_\u010detvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sre._\u010det._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_\u010de_pe_su'.split('_'),
    weekdaysParseExact: !0,
    longDateFormat: {
      LT: 'H:mm',
      LTS: 'H:mm:ss',
      L: 'D. M. YYYY.',
      LL: 'D. MMMM YYYY.',
      LLL: 'D. MMMM YYYY. H:mm',
      LLLL: 'dddd, D. MMMM YYYY. H:mm',
    },
    calendar: {
      sameDay: '[danas u] LT',
      nextDay: '[sutra u] LT',
      nextWeek: function () {
        switch (this.day()) {
          case 0:
            return '[u] [nedelju] [u] LT';
          case 3:
            return '[u] [sredu] [u] LT';
          case 6:
            return '[u] [subotu] [u] LT';
          case 1:
          case 2:
          case 4:
          case 5:
            return '[u] dddd [u] LT';
        }
      },
      lastDay: '[ju\u010de u] LT',
      lastWeek: function () {
        return [
          '[pro\u0161le] [nedelje] [u] LT',
          '[pro\u0161log] [ponedeljka] [u] LT',
          '[pro\u0161log] [utorka] [u] LT',
          '[pro\u0161le] [srede] [u] LT',
          '[pro\u0161log] [\u010detvrtka] [u] LT',
          '[pro\u0161log] [petka] [u] LT',
          '[pro\u0161le] [subote] [u] LT',
        ][this.day()];
      },
      sameElse: 'L',
    },
    relativeTime: {
      future: 'za %s',
      past: 'pre %s',
      s: 'nekoliko sekundi',
      ss: Sr.translate,
      m: Sr.translate,
      mm: Sr.translate,
      h: Sr.translate,
      hh: Sr.translate,
      d: 'dan',
      dd: Sr.translate,
      M: 'mesec',
      MM: Sr.translate,
      y: 'godinu',
      yy: Sr.translate,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 7 },
  }),
    M.defineLocale('ss', {
      months:
        "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
          '_'
        ),
      monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
      weekdays: 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
      weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
      weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'h:mm A',
        LTS: 'h:mm:ss A',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY h:mm A',
        LLLL: 'dddd, D MMMM YYYY h:mm A',
      },
      calendar: {
        sameDay: '[Namuhla nga] LT',
        nextDay: '[Kusasa nga] LT',
        nextWeek: 'dddd [nga] LT',
        lastDay: '[Itolo nga] LT',
        lastWeek: 'dddd [leliphelile] [nga] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'nga %s',
        past: 'wenteka nga %s',
        s: 'emizuzwana lomcane',
        ss: '%d mzuzwana',
        m: 'umzuzu',
        mm: '%d emizuzu',
        h: 'lihora',
        hh: '%d emahora',
        d: 'lilanga',
        dd: '%d emalanga',
        M: 'inyanga',
        MM: '%d tinyanga',
        y: 'umnyaka',
        yy: '%d iminyaka',
      },
      meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
      meridiem: function (e, a, t) {
        return e < 11 ? 'ekuseni' : e < 15 ? 'emini' : e < 19 ? 'entsambama' : 'ebusuku';
      },
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          'ekuseni' === a
            ? e
            : 'emini' === a
            ? 11 <= e
              ? e
              : e + 12
            : 'entsambama' === a || 'ebusuku' === a
            ? 0 === e
              ? 0
              : e + 12
            : void 0
        );
      },
      dayOfMonthOrdinalParse: /\d{1,2}/,
      ordinal: '%d',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('sv', {
      months:
        'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
          '_'
        ),
      monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
      weekdays: 's\xf6ndag_m\xe5ndag_tisdag_onsdag_torsdag_fredag_l\xf6rdag'.split('_'),
      weekdaysShort: 's\xf6n_m\xe5n_tis_ons_tor_fre_l\xf6r'.split('_'),
      weekdaysMin: 's\xf6_m\xe5_ti_on_to_fr_l\xf6'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY-MM-DD',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [kl.] HH:mm',
        LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
        lll: 'D MMM YYYY HH:mm',
        llll: 'ddd D MMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Idag] LT',
        nextDay: '[Imorgon] LT',
        lastDay: '[Ig\xe5r] LT',
        nextWeek: '[P\xe5] dddd LT',
        lastWeek: '[I] dddd[s] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'om %s',
        past: 'f\xf6r %s sedan',
        s: 'n\xe5gra sekunder',
        ss: '%d sekunder',
        m: 'en minut',
        mm: '%d minuter',
        h: 'en timme',
        hh: '%d timmar',
        d: 'en dag',
        dd: '%d dagar',
        M: 'en m\xe5nad',
        MM: '%d m\xe5nader',
        y: 'ett \xe5r',
        yy: '%d \xe5r',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
      ordinal: function (e) {
        var a = e % 10;
        return e + (1 != ~~((e % 100) / 10) && (1 == a || 2 == a) ? ':a' : ':e');
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('sw', {
      months:
        'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split(
          '_'
        ),
      monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
      weekdays: 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
      weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
      weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'hh:mm A',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[leo saa] LT',
        nextDay: '[kesho saa] LT',
        nextWeek: '[wiki ijayo] dddd [saat] LT',
        lastDay: '[jana] LT',
        lastWeek: '[wiki iliyopita] dddd [saat] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s baadaye',
        past: 'tokea %s',
        s: 'hivi punde',
        ss: 'sekunde %d',
        m: 'dakika moja',
        mm: 'dakika %d',
        h: 'saa limoja',
        hh: 'masaa %d',
        d: 'siku moja',
        dd: 'siku %d',
        M: 'mwezi mmoja',
        MM: 'miezi %d',
        y: 'mwaka mmoja',
        yy: 'miaka %d',
      },
      week: { dow: 1, doy: 7 },
    });
  var Hr = {
      1: '\u0be7',
      2: '\u0be8',
      3: '\u0be9',
      4: '\u0bea',
      5: '\u0beb',
      6: '\u0bec',
      7: '\u0bed',
      8: '\u0bee',
      9: '\u0bef',
      0: '\u0be6',
    },
    jr = {
      '\u0be7': '1',
      '\u0be8': '2',
      '\u0be9': '3',
      '\u0bea': '4',
      '\u0beb': '5',
      '\u0bec': '6',
      '\u0bed': '7',
      '\u0bee': '8',
      '\u0bef': '9',
      '\u0be6': '0',
    };
  M.defineLocale('ta', {
    months:
      '\u0b9c\u0ba9\u0bb5\u0bb0\u0bbf_\u0baa\u0bbf\u0baa\u0bcd\u0bb0\u0bb5\u0bb0\u0bbf_\u0bae\u0bbe\u0bb0\u0bcd\u0b9a\u0bcd_\u0b8f\u0baa\u0bcd\u0bb0\u0bb2\u0bcd_\u0bae\u0bc7_\u0b9c\u0bc2\u0ba9\u0bcd_\u0b9c\u0bc2\u0bb2\u0bc8_\u0b86\u0b95\u0bb8\u0bcd\u0b9f\u0bcd_\u0b9a\u0bc6\u0baa\u0bcd\u0b9f\u0bc6\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b85\u0b95\u0bcd\u0b9f\u0bc7\u0bbe\u0baa\u0bb0\u0bcd_\u0ba8\u0bb5\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b9f\u0bbf\u0b9a\u0bae\u0bcd\u0baa\u0bb0\u0bcd'.split(
        '_'
      ),
    monthsShort:
      '\u0b9c\u0ba9\u0bb5\u0bb0\u0bbf_\u0baa\u0bbf\u0baa\u0bcd\u0bb0\u0bb5\u0bb0\u0bbf_\u0bae\u0bbe\u0bb0\u0bcd\u0b9a\u0bcd_\u0b8f\u0baa\u0bcd\u0bb0\u0bb2\u0bcd_\u0bae\u0bc7_\u0b9c\u0bc2\u0ba9\u0bcd_\u0b9c\u0bc2\u0bb2\u0bc8_\u0b86\u0b95\u0bb8\u0bcd\u0b9f\u0bcd_\u0b9a\u0bc6\u0baa\u0bcd\u0b9f\u0bc6\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b85\u0b95\u0bcd\u0b9f\u0bc7\u0bbe\u0baa\u0bb0\u0bcd_\u0ba8\u0bb5\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b9f\u0bbf\u0b9a\u0bae\u0bcd\u0baa\u0bb0\u0bcd'.split(
        '_'
      ),
    weekdays:
      '\u0b9e\u0bbe\u0baf\u0bbf\u0bb1\u0bcd\u0bb1\u0bc1\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0ba4\u0bbf\u0b99\u0bcd\u0b95\u0b9f\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0b9a\u0bc6\u0bb5\u0bcd\u0bb5\u0bbe\u0baf\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0baa\u0bc1\u0ba4\u0ba9\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0bb5\u0bbf\u0baf\u0bbe\u0bb4\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0bb5\u0bc6\u0bb3\u0bcd\u0bb3\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0b9a\u0ba9\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8'.split(
        '_'
      ),
    weekdaysShort:
      '\u0b9e\u0bbe\u0baf\u0bbf\u0bb1\u0bc1_\u0ba4\u0bbf\u0b99\u0bcd\u0b95\u0bb3\u0bcd_\u0b9a\u0bc6\u0bb5\u0bcd\u0bb5\u0bbe\u0baf\u0bcd_\u0baa\u0bc1\u0ba4\u0ba9\u0bcd_\u0bb5\u0bbf\u0baf\u0bbe\u0bb4\u0ba9\u0bcd_\u0bb5\u0bc6\u0bb3\u0bcd\u0bb3\u0bbf_\u0b9a\u0ba9\u0bbf'.split(
        '_'
      ),
    weekdaysMin:
      '\u0b9e\u0bbe_\u0ba4\u0bbf_\u0b9a\u0bc6_\u0baa\u0bc1_\u0bb5\u0bbf_\u0bb5\u0bc6_\u0b9a'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD/MM/YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY, HH:mm',
      LLLL: 'dddd, D MMMM YYYY, HH:mm',
    },
    calendar: {
      sameDay: '[\u0b87\u0ba9\u0bcd\u0bb1\u0bc1] LT',
      nextDay: '[\u0ba8\u0bbe\u0bb3\u0bc8] LT',
      nextWeek: 'dddd, LT',
      lastDay: '[\u0ba8\u0bc7\u0bb1\u0bcd\u0bb1\u0bc1] LT',
      lastWeek: '[\u0b95\u0b9f\u0ba8\u0bcd\u0ba4 \u0bb5\u0bbe\u0bb0\u0bae\u0bcd] dddd, LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s \u0b87\u0bb2\u0bcd',
      past: '%s \u0bae\u0bc1\u0ba9\u0bcd',
      s: '\u0b92\u0bb0\u0bc1 \u0b9a\u0bbf\u0bb2 \u0bb5\u0bbf\u0ba8\u0bbe\u0b9f\u0bbf\u0b95\u0bb3\u0bcd',
      ss: '%d \u0bb5\u0bbf\u0ba8\u0bbe\u0b9f\u0bbf\u0b95\u0bb3\u0bcd',
      m: '\u0b92\u0bb0\u0bc1 \u0ba8\u0bbf\u0bae\u0bbf\u0b9f\u0bae\u0bcd',
      mm: '%d \u0ba8\u0bbf\u0bae\u0bbf\u0b9f\u0b99\u0bcd\u0b95\u0bb3\u0bcd',
      h: '\u0b92\u0bb0\u0bc1 \u0bae\u0ba3\u0bbf \u0ba8\u0bc7\u0bb0\u0bae\u0bcd',
      hh: '%d \u0bae\u0ba3\u0bbf \u0ba8\u0bc7\u0bb0\u0bae\u0bcd',
      d: '\u0b92\u0bb0\u0bc1 \u0ba8\u0bbe\u0bb3\u0bcd',
      dd: '%d \u0ba8\u0bbe\u0b9f\u0bcd\u0b95\u0bb3\u0bcd',
      M: '\u0b92\u0bb0\u0bc1 \u0bae\u0bbe\u0ba4\u0bae\u0bcd',
      MM: '%d \u0bae\u0bbe\u0ba4\u0b99\u0bcd\u0b95\u0bb3\u0bcd',
      y: '\u0b92\u0bb0\u0bc1 \u0bb5\u0bb0\u0bc1\u0b9f\u0bae\u0bcd',
      yy: '%d \u0b86\u0ba3\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd',
    },
    dayOfMonthOrdinalParse: /\d{1,2}\u0bb5\u0ba4\u0bc1/,
    ordinal: function (e) {
      return e + '\u0bb5\u0ba4\u0bc1';
    },
    preparse: function (e) {
      return e.replace(
        /[\u0be7\u0be8\u0be9\u0bea\u0beb\u0bec\u0bed\u0bee\u0bef\u0be6]/g,
        function (e) {
          return jr[e];
        }
      );
    },
    postformat: function (e) {
      return e.replace(/\d/g, function (e) {
        return Hr[e];
      });
    },
    meridiemParse:
      /\u0baf\u0bbe\u0bae\u0bae\u0bcd|\u0bb5\u0bc8\u0b95\u0bb1\u0bc8|\u0b95\u0bbe\u0bb2\u0bc8|\u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd|\u0b8e\u0bb1\u0bcd\u0baa\u0bbe\u0b9f\u0bc1|\u0bae\u0bbe\u0bb2\u0bc8/,
    meridiem: function (e, a, t) {
      return e < 2
        ? ' \u0baf\u0bbe\u0bae\u0bae\u0bcd'
        : e < 6
        ? ' \u0bb5\u0bc8\u0b95\u0bb1\u0bc8'
        : e < 10
        ? ' \u0b95\u0bbe\u0bb2\u0bc8'
        : e < 14
        ? ' \u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd'
        : e < 18
        ? ' \u0b8e\u0bb1\u0bcd\u0baa\u0bbe\u0b9f\u0bc1'
        : e < 22
        ? ' \u0bae\u0bbe\u0bb2\u0bc8'
        : ' \u0baf\u0bbe\u0bae\u0bae\u0bcd';
    },
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u0baf\u0bbe\u0bae\u0bae\u0bcd' === a
          ? e < 2
            ? e
            : e + 12
          : '\u0bb5\u0bc8\u0b95\u0bb1\u0bc8' === a ||
            '\u0b95\u0bbe\u0bb2\u0bc8' === a ||
            ('\u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd' === a && 10 <= e)
          ? e
          : e + 12
      );
    },
    week: { dow: 0, doy: 6 },
  }),
    M.defineLocale('te', {
      months:
        '\u0c1c\u0c28\u0c35\u0c30\u0c3f_\u0c2b\u0c3f\u0c2c\u0c4d\u0c30\u0c35\u0c30\u0c3f_\u0c2e\u0c3e\u0c30\u0c4d\u0c1a\u0c3f_\u0c0f\u0c2a\u0c4d\u0c30\u0c3f\u0c32\u0c4d_\u0c2e\u0c47_\u0c1c\u0c42\u0c28\u0c4d_\u0c1c\u0c41\u0c32\u0c48_\u0c06\u0c17\u0c38\u0c4d\u0c1f\u0c41_\u0c38\u0c46\u0c2a\u0c4d\u0c1f\u0c46\u0c02\u0c2c\u0c30\u0c4d_\u0c05\u0c15\u0c4d\u0c1f\u0c4b\u0c2c\u0c30\u0c4d_\u0c28\u0c35\u0c02\u0c2c\u0c30\u0c4d_\u0c21\u0c3f\u0c38\u0c46\u0c02\u0c2c\u0c30\u0c4d'.split(
          '_'
        ),
      monthsShort:
        '\u0c1c\u0c28._\u0c2b\u0c3f\u0c2c\u0c4d\u0c30._\u0c2e\u0c3e\u0c30\u0c4d\u0c1a\u0c3f_\u0c0f\u0c2a\u0c4d\u0c30\u0c3f._\u0c2e\u0c47_\u0c1c\u0c42\u0c28\u0c4d_\u0c1c\u0c41\u0c32\u0c48_\u0c06\u0c17._\u0c38\u0c46\u0c2a\u0c4d._\u0c05\u0c15\u0c4d\u0c1f\u0c4b._\u0c28\u0c35._\u0c21\u0c3f\u0c38\u0c46.'.split(
          '_'
        ),
      monthsParseExact: !0,
      weekdays:
        '\u0c06\u0c26\u0c3f\u0c35\u0c3e\u0c30\u0c02_\u0c38\u0c4b\u0c2e\u0c35\u0c3e\u0c30\u0c02_\u0c2e\u0c02\u0c17\u0c33\u0c35\u0c3e\u0c30\u0c02_\u0c2c\u0c41\u0c27\u0c35\u0c3e\u0c30\u0c02_\u0c17\u0c41\u0c30\u0c41\u0c35\u0c3e\u0c30\u0c02_\u0c36\u0c41\u0c15\u0c4d\u0c30\u0c35\u0c3e\u0c30\u0c02_\u0c36\u0c28\u0c3f\u0c35\u0c3e\u0c30\u0c02'.split(
          '_'
        ),
      weekdaysShort:
        '\u0c06\u0c26\u0c3f_\u0c38\u0c4b\u0c2e_\u0c2e\u0c02\u0c17\u0c33_\u0c2c\u0c41\u0c27_\u0c17\u0c41\u0c30\u0c41_\u0c36\u0c41\u0c15\u0c4d\u0c30_\u0c36\u0c28\u0c3f'.split(
          '_'
        ),
      weekdaysMin:
        '\u0c06_\u0c38\u0c4b_\u0c2e\u0c02_\u0c2c\u0c41_\u0c17\u0c41_\u0c36\u0c41_\u0c36'.split('_'),
      longDateFormat: {
        LT: 'A h:mm',
        LTS: 'A h:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY, A h:mm',
        LLLL: 'dddd, D MMMM YYYY, A h:mm',
      },
      calendar: {
        sameDay: '[\u0c28\u0c47\u0c21\u0c41] LT',
        nextDay: '[\u0c30\u0c47\u0c2a\u0c41] LT',
        nextWeek: 'dddd, LT',
        lastDay: '[\u0c28\u0c3f\u0c28\u0c4d\u0c28] LT',
        lastWeek: '[\u0c17\u0c24] dddd, LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s \u0c32\u0c4b',
        past: '%s \u0c15\u0c4d\u0c30\u0c3f\u0c24\u0c02',
        s: '\u0c15\u0c4a\u0c28\u0c4d\u0c28\u0c3f \u0c15\u0c4d\u0c37\u0c23\u0c3e\u0c32\u0c41',
        ss: '%d \u0c38\u0c46\u0c15\u0c28\u0c4d\u0c32\u0c41',
        m: '\u0c12\u0c15 \u0c28\u0c3f\u0c2e\u0c3f\u0c37\u0c02',
        mm: '%d \u0c28\u0c3f\u0c2e\u0c3f\u0c37\u0c3e\u0c32\u0c41',
        h: '\u0c12\u0c15 \u0c17\u0c02\u0c1f',
        hh: '%d \u0c17\u0c02\u0c1f\u0c32\u0c41',
        d: '\u0c12\u0c15 \u0c30\u0c4b\u0c1c\u0c41',
        dd: '%d \u0c30\u0c4b\u0c1c\u0c41\u0c32\u0c41',
        M: '\u0c12\u0c15 \u0c28\u0c46\u0c32',
        MM: '%d \u0c28\u0c46\u0c32\u0c32\u0c41',
        y: '\u0c12\u0c15 \u0c38\u0c02\u0c35\u0c24\u0c4d\u0c38\u0c30\u0c02',
        yy: '%d \u0c38\u0c02\u0c35\u0c24\u0c4d\u0c38\u0c30\u0c3e\u0c32\u0c41',
      },
      dayOfMonthOrdinalParse: /\d{1,2}\u0c35/,
      ordinal: '%d\u0c35',
      meridiemParse:
        /\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f|\u0c09\u0c26\u0c2f\u0c02|\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02|\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          '\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f' === a
            ? e < 4
              ? e
              : e + 12
            : '\u0c09\u0c26\u0c2f\u0c02' === a
            ? e
            : '\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02' === a
            ? 10 <= e
              ? e
              : e + 12
            : '\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        return e < 4
          ? '\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f'
          : e < 10
          ? '\u0c09\u0c26\u0c2f\u0c02'
          : e < 17
          ? '\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02'
          : e < 20
          ? '\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02'
          : '\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f';
      },
      week: { dow: 0, doy: 6 },
    }),
    M.defineLocale('tet', {
      months:
        'Janeiru_Fevereiru_Marsu_Abril_Maiu_Ju\xf1u_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split(
          '_'
        ),
      monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
      weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
      weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
      weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[Ohin iha] LT',
        nextDay: '[Aban iha] LT',
        nextWeek: 'dddd [iha] LT',
        lastDay: '[Horiseik iha] LT',
        lastWeek: 'dddd [semana kotuk] [iha] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'iha %s',
        past: '%s liuba',
        s: 'segundu balun',
        ss: 'segundu %d',
        m: 'minutu ida',
        mm: 'minutu %d',
        h: 'oras ida',
        hh: 'oras %d',
        d: 'loron ida',
        dd: 'loron %d',
        M: 'fulan ida',
        MM: 'fulan %d',
        y: 'tinan ida',
        yy: 'tinan %d',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
      week: { dow: 1, doy: 4 },
    });
  var xr = {
    0: '-\u0443\u043c',
    1: '-\u0443\u043c',
    2: '-\u044e\u043c',
    3: '-\u044e\u043c',
    4: '-\u0443\u043c',
    5: '-\u0443\u043c',
    6: '-\u0443\u043c',
    7: '-\u0443\u043c',
    8: '-\u0443\u043c',
    9: '-\u0443\u043c',
    10: '-\u0443\u043c',
    12: '-\u0443\u043c',
    13: '-\u0443\u043c',
    20: '-\u0443\u043c',
    30: '-\u044e\u043c',
    40: '-\u0443\u043c',
    50: '-\u0443\u043c',
    60: '-\u0443\u043c',
    70: '-\u0443\u043c',
    80: '-\u0443\u043c',
    90: '-\u0443\u043c',
    100: '-\u0443\u043c',
  };
  M.defineLocale('tg', {
    months: {
      format:
        '\u044f\u043d\u0432\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0430\u043b\u0438_\u043c\u0430\u0440\u0442\u0438_\u0430\u043f\u0440\u0435\u043b\u0438_\u043c\u0430\u0439\u0438_\u0438\u044e\u043d\u0438_\u0438\u044e\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442\u0438_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u0438_\u043e\u043a\u0442\u044f\u0431\u0440\u0438_\u043d\u043e\u044f\u0431\u0440\u0438_\u0434\u0435\u043a\u0430\u0431\u0440\u0438'.split(
          '_'
        ),
      standalone:
        '\u044f\u043d\u0432\u0430\u0440_\u0444\u0435\u0432\u0440\u0430\u043b_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440_\u043e\u043a\u0442\u044f\u0431\u0440_\u043d\u043e\u044f\u0431\u0440_\u0434\u0435\u043a\u0430\u0431\u0440'.split(
          '_'
        ),
    },
    monthsShort:
      '\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a'.split(
        '_'
      ),
    weekdays:
      '\u044f\u043a\u0448\u0430\u043d\u0431\u0435_\u0434\u0443\u0448\u0430\u043d\u0431\u0435_\u0441\u0435\u0448\u0430\u043d\u0431\u0435_\u0447\u043e\u0440\u0448\u0430\u043d\u0431\u0435_\u043f\u0430\u043d\u04b7\u0448\u0430\u043d\u0431\u0435_\u04b7\u0443\u043c\u044a\u0430_\u0448\u0430\u043d\u0431\u0435'.split(
        '_'
      ),
    weekdaysShort:
      '\u044f\u0448\u0431_\u0434\u0448\u0431_\u0441\u0448\u0431_\u0447\u0448\u0431_\u043f\u0448\u0431_\u04b7\u0443\u043c_\u0448\u043d\u0431'.split(
        '_'
      ),
    weekdaysMin:
      '\u044f\u0448_\u0434\u0448_\u0441\u0448_\u0447\u0448_\u043f\u0448_\u04b7\u043c_\u0448\u0431'.split(
        '_'
      ),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[\u0418\u043c\u0440\u04ef\u0437 \u0441\u043e\u0430\u0442\u0438] LT',
      nextDay: '[\u0424\u0430\u0440\u0434\u043e \u0441\u043e\u0430\u0442\u0438] LT',
      lastDay: '[\u0414\u0438\u0440\u04ef\u0437 \u0441\u043e\u0430\u0442\u0438] LT',
      nextWeek:
        'dddd[\u0438] [\u04b3\u0430\u0444\u0442\u0430\u0438 \u043e\u044f\u043d\u0434\u0430 \u0441\u043e\u0430\u0442\u0438] LT',
      lastWeek:
        'dddd[\u0438] [\u04b3\u0430\u0444\u0442\u0430\u0438 \u0433\u0443\u0437\u0430\u0448\u0442\u0430 \u0441\u043e\u0430\u0442\u0438] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '\u0431\u0430\u044a\u0434\u0438 %s',
      past: '%s \u043f\u0435\u0448',
      s: '\u044f\u043a\u0447\u0430\u043d\u0434 \u0441\u043e\u043d\u0438\u044f',
      m: '\u044f\u043a \u0434\u0430\u049b\u0438\u049b\u0430',
      mm: '%d \u0434\u0430\u049b\u0438\u049b\u0430',
      h: '\u044f\u043a \u0441\u043e\u0430\u0442',
      hh: '%d \u0441\u043e\u0430\u0442',
      d: '\u044f\u043a \u0440\u04ef\u0437',
      dd: '%d \u0440\u04ef\u0437',
      M: '\u044f\u043a \u043c\u043e\u04b3',
      MM: '%d \u043c\u043e\u04b3',
      y: '\u044f\u043a \u0441\u043e\u043b',
      yy: '%d \u0441\u043e\u043b',
    },
    meridiemParse:
      /\u0448\u0430\u0431|\u0441\u0443\u0431\u04b3|\u0440\u04ef\u0437|\u0431\u0435\u0433\u043e\u04b3/,
    meridiemHour: function (e, a) {
      return (
        12 === e && (e = 0),
        '\u0448\u0430\u0431' === a
          ? e < 4
            ? e
            : e + 12
          : '\u0441\u0443\u0431\u04b3' === a
          ? e
          : '\u0440\u04ef\u0437' === a
          ? 11 <= e
            ? e
            : e + 12
          : '\u0431\u0435\u0433\u043e\u04b3' === a
          ? e + 12
          : void 0
      );
    },
    meridiem: function (e, a, t) {
      return e < 4
        ? '\u0448\u0430\u0431'
        : e < 11
        ? '\u0441\u0443\u0431\u04b3'
        : e < 16
        ? '\u0440\u04ef\u0437'
        : e < 19
        ? '\u0431\u0435\u0433\u043e\u04b3'
        : '\u0448\u0430\u0431';
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(\u0443\u043c|\u044e\u043c)/,
    ordinal: function (e) {
      return e + (xr[e] || xr[e % 10] || xr[100 <= e ? 100 : null]);
    },
    week: { dow: 1, doy: 7 },
  }),
    M.defineLocale('th', {
      months:
        '\u0e21\u0e01\u0e23\u0e32\u0e04\u0e21_\u0e01\u0e38\u0e21\u0e20\u0e32\u0e1e\u0e31\u0e19\u0e18\u0e4c_\u0e21\u0e35\u0e19\u0e32\u0e04\u0e21_\u0e40\u0e21\u0e29\u0e32\u0e22\u0e19_\u0e1e\u0e24\u0e29\u0e20\u0e32\u0e04\u0e21_\u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19_\u0e01\u0e23\u0e01\u0e0e\u0e32\u0e04\u0e21_\u0e2a\u0e34\u0e07\u0e2b\u0e32\u0e04\u0e21_\u0e01\u0e31\u0e19\u0e22\u0e32\u0e22\u0e19_\u0e15\u0e38\u0e25\u0e32\u0e04\u0e21_\u0e1e\u0e24\u0e28\u0e08\u0e34\u0e01\u0e32\u0e22\u0e19_\u0e18\u0e31\u0e19\u0e27\u0e32\u0e04\u0e21'.split(
          '_'
        ),
      monthsShort:
        '\u0e21.\u0e04._\u0e01.\u0e1e._\u0e21\u0e35.\u0e04._\u0e40\u0e21.\u0e22._\u0e1e.\u0e04._\u0e21\u0e34.\u0e22._\u0e01.\u0e04._\u0e2a.\u0e04._\u0e01.\u0e22._\u0e15.\u0e04._\u0e1e.\u0e22._\u0e18.\u0e04.'.split(
          '_'
        ),
      monthsParseExact: !0,
      weekdays:
        '\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c_\u0e08\u0e31\u0e19\u0e17\u0e23\u0e4c_\u0e2d\u0e31\u0e07\u0e04\u0e32\u0e23_\u0e1e\u0e38\u0e18_\u0e1e\u0e24\u0e2b\u0e31\u0e2a\u0e1a\u0e14\u0e35_\u0e28\u0e38\u0e01\u0e23\u0e4c_\u0e40\u0e2a\u0e32\u0e23\u0e4c'.split(
          '_'
        ),
      weekdaysShort:
        '\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c_\u0e08\u0e31\u0e19\u0e17\u0e23\u0e4c_\u0e2d\u0e31\u0e07\u0e04\u0e32\u0e23_\u0e1e\u0e38\u0e18_\u0e1e\u0e24\u0e2b\u0e31\u0e2a_\u0e28\u0e38\u0e01\u0e23\u0e4c_\u0e40\u0e2a\u0e32\u0e23\u0e4c'.split(
          '_'
        ),
      weekdaysMin: '\u0e2d\u0e32._\u0e08._\u0e2d._\u0e1e._\u0e1e\u0e24._\u0e28._\u0e2a.'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY \u0e40\u0e27\u0e25\u0e32 H:mm',
        LLLL: '\u0e27\u0e31\u0e19dddd\u0e17\u0e35\u0e48 D MMMM YYYY \u0e40\u0e27\u0e25\u0e32 H:mm',
      },
      meridiemParse:
        /\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07|\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07/,
      isPM: function (e) {
        return '\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07' === e;
      },
      meridiem: function (e, a, t) {
        return e < 12
          ? '\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07'
          : '\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07';
      },
      calendar: {
        sameDay: '[\u0e27\u0e31\u0e19\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT',
        nextDay: '[\u0e1e\u0e23\u0e38\u0e48\u0e07\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT',
        nextWeek: 'dddd[\u0e2b\u0e19\u0e49\u0e32 \u0e40\u0e27\u0e25\u0e32] LT',
        lastDay:
          '[\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e27\u0e32\u0e19\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT',
        lastWeek:
          '[\u0e27\u0e31\u0e19]dddd[\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e27\u0e25\u0e32] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u0e2d\u0e35\u0e01 %s',
        past: '%s\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27',
        s: '\u0e44\u0e21\u0e48\u0e01\u0e35\u0e48\u0e27\u0e34\u0e19\u0e32\u0e17\u0e35',
        ss: '%d \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35',
        m: '1 \u0e19\u0e32\u0e17\u0e35',
        mm: '%d \u0e19\u0e32\u0e17\u0e35',
        h: '1 \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07',
        hh: '%d \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07',
        d: '1 \u0e27\u0e31\u0e19',
        dd: '%d \u0e27\u0e31\u0e19',
        w: '1 \u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c',
        ww: '%d \u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c',
        M: '1 \u0e40\u0e14\u0e37\u0e2d\u0e19',
        MM: '%d \u0e40\u0e14\u0e37\u0e2d\u0e19',
        y: '1 \u0e1b\u0e35',
        yy: '%d \u0e1b\u0e35',
      },
    });
  var Pr = {
    1: "'inji",
    5: "'inji",
    8: "'inji",
    70: "'inji",
    80: "'inji",
    2: "'nji",
    7: "'nji",
    20: "'nji",
    50: "'nji",
    3: "'\xfcnji",
    4: "'\xfcnji",
    100: "'\xfcnji",
    6: "'njy",
    9: "'unjy",
    10: "'unjy",
    30: "'unjy",
    60: "'ynjy",
    90: "'ynjy",
  };
  M.defineLocale('tk', {
    months:
      '\xddanwar_Fewral_Mart_Aprel_Ma\xfd_I\xfdun_I\xfdul_Awgust_Sent\xfdabr_Okt\xfdabr_No\xfdabr_Dekabr'.split(
        '_'
      ),
    monthsShort: '\xddan_Few_Mar_Apr_Ma\xfd_I\xfdn_I\xfdl_Awg_Sen_Okt_No\xfd_Dek'.split('_'),
    weekdays:
      '\xddek\u015fenbe_Du\u015fenbe_Si\u015fenbe_\xc7ar\u015fenbe_Pen\u015fenbe_Anna_\u015eenbe'.split(
        '_'
      ),
    weekdaysShort: '\xddek_Du\u015f_Si\u015f_\xc7ar_Pen_Ann_\u015een'.split('_'),
    weekdaysMin: '\xddk_D\u015f_S\u015f_\xc7r_Pn_An_\u015en'.split('_'),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[bug\xfcn sagat] LT',
      nextDay: '[ertir sagat] LT',
      nextWeek: '[indiki] dddd [sagat] LT',
      lastDay: '[d\xfc\xfdn] LT',
      lastWeek: '[ge\xe7en] dddd [sagat] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s so\u0148',
      past: '%s \xf6\u0148',
      s: 'birn\xe4\xe7e sekunt',
      m: 'bir minut',
      mm: '%d minut',
      h: 'bir sagat',
      hh: '%d sagat',
      d: 'bir g\xfcn',
      dd: '%d g\xfcn',
      M: 'bir a\xfd',
      MM: '%d a\xfd',
      y: 'bir \xfdyl',
      yy: '%d \xfdyl',
    },
    ordinal: function (e, a) {
      switch (a) {
        case 'd':
        case 'D':
        case 'Do':
        case 'DD':
          return e;
        default:
          if (0 === e) return e + "'unjy";
          var t = e % 10;
          return e + (Pr[t] || Pr[(e % 100) - t] || Pr[100 <= e ? 100 : null]);
      }
    },
    week: { dow: 1, doy: 7 },
  }),
    M.defineLocale('tl-ph', {
      months:
        'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
          '_'
        ),
      monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
      weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
      weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
      weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'MM/D/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY HH:mm',
        LLLL: 'dddd, MMMM DD, YYYY HH:mm',
      },
      calendar: {
        sameDay: 'LT [ngayong araw]',
        nextDay: '[Bukas ng] LT',
        nextWeek: 'LT [sa susunod na] dddd',
        lastDay: 'LT [kahapon]',
        lastWeek: 'LT [noong nakaraang] dddd',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'sa loob ng %s',
        past: '%s ang nakalipas',
        s: 'ilang segundo',
        ss: '%d segundo',
        m: 'isang minuto',
        mm: '%d minuto',
        h: 'isang oras',
        hh: '%d oras',
        d: 'isang araw',
        dd: '%d araw',
        M: 'isang buwan',
        MM: '%d buwan',
        y: 'isang taon',
        yy: '%d taon',
      },
      dayOfMonthOrdinalParse: /\d{1,2}/,
      ordinal: function (e) {
        return e;
      },
      week: { dow: 1, doy: 4 },
    });
  var Or = 'pagh_wa\u2019_cha\u2019_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
  function Wr(e, a, t, s) {
    var n = (function (e) {
      var a = Math.floor((e % 1e3) / 100),
        t = Math.floor((e % 100) / 10),
        s = e % 10,
        n = '';
      0 < a && (n += Or[a] + 'vatlh');
      0 < t && (n += ('' !== n ? ' ' : '') + Or[t] + 'maH');
      0 < s && (n += ('' !== n ? ' ' : '') + Or[s]);
      return '' === n ? 'pagh' : n;
    })(e);
    switch (t) {
      case 'ss':
        return n + ' lup';
      case 'mm':
        return n + ' tup';
      case 'hh':
        return n + ' rep';
      case 'dd':
        return n + ' jaj';
      case 'MM':
        return n + ' jar';
      case 'yy':
        return n + ' DIS';
    }
  }
  M.defineLocale('tlh', {
    months:
      'tera\u2019 jar wa\u2019_tera\u2019 jar cha\u2019_tera\u2019 jar wej_tera\u2019 jar loS_tera\u2019 jar vagh_tera\u2019 jar jav_tera\u2019 jar Soch_tera\u2019 jar chorgh_tera\u2019 jar Hut_tera\u2019 jar wa\u2019maH_tera\u2019 jar wa\u2019maH wa\u2019_tera\u2019 jar wa\u2019maH cha\u2019'.split(
        '_'
      ),
    monthsShort:
      'jar wa\u2019_jar cha\u2019_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa\u2019maH_jar wa\u2019maH wa\u2019_jar wa\u2019maH cha\u2019'.split(
        '_'
      ),
    monthsParseExact: !0,
    weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysShort: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysMin: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[DaHjaj] LT',
      nextDay: '[wa\u2019leS] LT',
      nextWeek: 'LLL',
      lastDay: '[wa\u2019Hu\u2019] LT',
      lastWeek: 'LLL',
      sameElse: 'L',
    },
    relativeTime: {
      future: function (e) {
        var a = e;
        return (a =
          -1 !== e.indexOf('jaj')
            ? a.slice(0, -3) + 'leS'
            : -1 !== e.indexOf('jar')
            ? a.slice(0, -3) + 'waQ'
            : -1 !== e.indexOf('DIS')
            ? a.slice(0, -3) + 'nem'
            : a + ' pIq');
      },
      past: function (e) {
        var a = e;
        return (a =
          -1 !== e.indexOf('jaj')
            ? a.slice(0, -3) + 'Hu\u2019'
            : -1 !== e.indexOf('jar')
            ? a.slice(0, -3) + 'wen'
            : -1 !== e.indexOf('DIS')
            ? a.slice(0, -3) + 'ben'
            : a + ' ret');
      },
      s: 'puS lup',
      ss: Wr,
      m: 'wa\u2019 tup',
      mm: Wr,
      h: 'wa\u2019 rep',
      hh: Wr,
      d: 'wa\u2019 jaj',
      dd: Wr,
      M: 'wa\u2019 jar',
      MM: Wr,
      y: 'wa\u2019 DIS',
      yy: Wr,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: { dow: 1, doy: 4 },
  });
  var Ar = {
    1: "'inci",
    5: "'inci",
    8: "'inci",
    70: "'inci",
    80: "'inci",
    2: "'nci",
    7: "'nci",
    20: "'nci",
    50: "'nci",
    3: "'\xfcnc\xfc",
    4: "'\xfcnc\xfc",
    100: "'\xfcnc\xfc",
    6: "'nc\u0131",
    9: "'uncu",
    10: "'uncu",
    30: "'uncu",
    60: "'\u0131nc\u0131",
    90: "'\u0131nc\u0131",
  };
  function Er(e, a, t, s) {
    var n = {
      s: ['viensas secunds', "'iensas secunds"],
      ss: [e + ' secunds', e + ' secunds'],
      m: ["'n m\xedut", "'iens m\xedut"],
      mm: [e + ' m\xeduts', e + ' m\xeduts'],
      h: ["'n \xfeora", "'iensa \xfeora"],
      hh: [e + ' \xfeoras', e + ' \xfeoras'],
      d: ["'n ziua", "'iensa ziua"],
      dd: [e + ' ziuas', e + ' ziuas'],
      M: ["'n mes", "'iens mes"],
      MM: [e + ' mesen', e + ' mesen'],
      y: ["'n ar", "'iens ar"],
      yy: [e + ' ars', e + ' ars'],
    };
    return s || a ? n[t][0] : n[t][1];
  }
  function Fr(e, a, t) {
    var s, n;
    return 'm' === t
      ? a
        ? '\u0445\u0432\u0438\u043b\u0438\u043d\u0430'
        : '\u0445\u0432\u0438\u043b\u0438\u043d\u0443'
      : 'h' === t
      ? a
        ? '\u0433\u043e\u0434\u0438\u043d\u0430'
        : '\u0433\u043e\u0434\u0438\u043d\u0443'
      : e +
        ' ' +
        ((s = +e),
        (n = {
          ss: a
            ? '\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u0438_\u0441\u0435\u043a\u0443\u043d\u0434'
            : '\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u0438_\u0441\u0435\u043a\u0443\u043d\u0434',
          mm: a
            ? '\u0445\u0432\u0438\u043b\u0438\u043d\u0430_\u0445\u0432\u0438\u043b\u0438\u043d\u0438_\u0445\u0432\u0438\u043b\u0438\u043d'
            : '\u0445\u0432\u0438\u043b\u0438\u043d\u0443_\u0445\u0432\u0438\u043b\u0438\u043d\u0438_\u0445\u0432\u0438\u043b\u0438\u043d',
          hh: a
            ? '\u0433\u043e\u0434\u0438\u043d\u0430_\u0433\u043e\u0434\u0438\u043d\u0438_\u0433\u043e\u0434\u0438\u043d'
            : '\u0433\u043e\u0434\u0438\u043d\u0443_\u0433\u043e\u0434\u0438\u043d\u0438_\u0433\u043e\u0434\u0438\u043d',
          dd: '\u0434\u0435\u043d\u044c_\u0434\u043d\u0456_\u0434\u043d\u0456\u0432',
          MM: '\u043c\u0456\u0441\u044f\u0446\u044c_\u043c\u0456\u0441\u044f\u0446\u0456_\u043c\u0456\u0441\u044f\u0446\u0456\u0432',
          yy: '\u0440\u0456\u043a_\u0440\u043e\u043a\u0438_\u0440\u043e\u043a\u0456\u0432',
        }[t].split('_')),
        s % 10 == 1 && s % 100 != 11
          ? n[0]
          : 2 <= s % 10 && s % 10 <= 4 && (s % 100 < 10 || 20 <= s % 100)
          ? n[1]
          : n[2]);
  }
  function zr(e) {
    return function () {
      return e + '\u043e' + (11 === this.hours() ? '\u0431' : '') + '] LT';
    };
  }
  M.defineLocale('tr', {
    months:
      'Ocak_\u015eubat_Mart_Nisan_May\u0131s_Haziran_Temmuz_A\u011fustos_Eyl\xfcl_Ekim_Kas\u0131m_Aral\u0131k'.split(
        '_'
      ),
    monthsShort: 'Oca_\u015eub_Mar_Nis_May_Haz_Tem_A\u011fu_Eyl_Eki_Kas_Ara'.split('_'),
    weekdays: 'Pazar_Pazartesi_Sal\u0131_\xc7ar\u015famba_Per\u015fembe_Cuma_Cumartesi'.split('_'),
    weekdaysShort: 'Paz_Pts_Sal_\xc7ar_Per_Cum_Cts'.split('_'),
    weekdaysMin: 'Pz_Pt_Sa_\xc7a_Pe_Cu_Ct'.split('_'),
    meridiem: function (e, a, t) {
      return e < 12 ? (t ? '\xf6\xf6' : '\xd6\xd6') : t ? '\xf6s' : '\xd6S';
    },
    meridiemParse: /\xf6\xf6|\xd6\xd6|\xf6s|\xd6S/,
    isPM: function (e) {
      return '\xf6s' === e || '\xd6S' === e;
    },
    longDateFormat: {
      LT: 'HH:mm',
      LTS: 'HH:mm:ss',
      L: 'DD.MM.YYYY',
      LL: 'D MMMM YYYY',
      LLL: 'D MMMM YYYY HH:mm',
      LLLL: 'dddd, D MMMM YYYY HH:mm',
    },
    calendar: {
      sameDay: '[bug\xfcn saat] LT',
      nextDay: '[yar\u0131n saat] LT',
      nextWeek: '[gelecek] dddd [saat] LT',
      lastDay: '[d\xfcn] LT',
      lastWeek: '[ge\xe7en] dddd [saat] LT',
      sameElse: 'L',
    },
    relativeTime: {
      future: '%s sonra',
      past: '%s \xf6nce',
      s: 'birka\xe7 saniye',
      ss: '%d saniye',
      m: 'bir dakika',
      mm: '%d dakika',
      h: 'bir saat',
      hh: '%d saat',
      d: 'bir g\xfcn',
      dd: '%d g\xfcn',
      w: 'bir hafta',
      ww: '%d hafta',
      M: 'bir ay',
      MM: '%d ay',
      y: 'bir y\u0131l',
      yy: '%d y\u0131l',
    },
    ordinal: function (e, a) {
      switch (a) {
        case 'd':
        case 'D':
        case 'Do':
        case 'DD':
          return e;
        default:
          if (0 === e) return e + "'\u0131nc\u0131";
          var t = e % 10;
          return e + (Ar[t] || Ar[(e % 100) - t] || Ar[100 <= e ? 100 : null]);
      }
    },
    week: { dow: 1, doy: 7 },
  }),
    M.defineLocale('tzl', {
      months:
        'Januar_Fevraglh_Mar\xe7_Avr\xefu_Mai_G\xfcn_Julia_Guscht_Setemvar_Listop\xe4ts_Noemvar_Zecemvar'.split(
          '_'
        ),
      monthsShort: 'Jan_Fev_Mar_Avr_Mai_G\xfcn_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
      weekdays: 'S\xfaladi_L\xfane\xe7i_Maitzi_M\xe1rcuri_Xh\xfaadi_Vi\xe9ner\xe7i_S\xe1turi'.split(
        '_'
      ),
      weekdaysShort: 'S\xfal_L\xfan_Mai_M\xe1r_Xh\xfa_Vi\xe9_S\xe1t'.split('_'),
      weekdaysMin: 'S\xfa_L\xfa_Ma_M\xe1_Xh_Vi_S\xe1'.split('_'),
      longDateFormat: {
        LT: 'HH.mm',
        LTS: 'HH.mm.ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM [dallas] YYYY',
        LLL: 'D. MMMM [dallas] YYYY HH.mm',
        LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm',
      },
      meridiemParse: /d\'o|d\'a/i,
      isPM: function (e) {
        return "d'o" === e.toLowerCase();
      },
      meridiem: function (e, a, t) {
        return 11 < e ? (t ? "d'o" : "D'O") : t ? "d'a" : "D'A";
      },
      calendar: {
        sameDay: '[oxhi \xe0] LT',
        nextDay: '[dem\xe0 \xe0] LT',
        nextWeek: 'dddd [\xe0] LT',
        lastDay: '[ieiri \xe0] LT',
        lastWeek: '[s\xfcr el] dddd [lasteu \xe0] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'osprei %s',
        past: 'ja%s',
        s: Er,
        ss: Er,
        m: Er,
        mm: Er,
        h: Er,
        hh: Er,
        d: Er,
        dd: Er,
        M: Er,
        MM: Er,
        y: Er,
        yy: Er,
      },
      dayOfMonthOrdinalParse: /\d{1,2}\./,
      ordinal: '%d.',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('tzm-latn', {
      months:
        'innayr_br\u02e4ayr\u02e4_mar\u02e4s\u02e4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02e4wbr\u02e4_nwwanbir_dwjnbir'.split(
          '_'
        ),
      monthsShort:
        'innayr_br\u02e4ayr\u02e4_mar\u02e4s\u02e4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02e4wbr\u02e4_nwwanbir_dwjnbir'.split(
          '_'
        ),
      weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas'.split('_'),
      weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas'.split('_'),
      weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[asdkh g] LT',
        nextDay: '[aska g] LT',
        nextWeek: 'dddd [g] LT',
        lastDay: '[assant g] LT',
        lastWeek: 'dddd [g] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'dadkh s yan %s',
        past: 'yan %s',
        s: 'imik',
        ss: '%d imik',
        m: 'minu\u1e0d',
        mm: '%d minu\u1e0d',
        h: 'sa\u025ba',
        hh: '%d tassa\u025bin',
        d: 'ass',
        dd: '%d ossan',
        M: 'ayowr',
        MM: '%d iyyirn',
        y: 'asgas',
        yy: '%d isgasn',
      },
      week: { dow: 6, doy: 12 },
    }),
    M.defineLocale('tzm', {
      months:
        '\u2d49\u2d4f\u2d4f\u2d30\u2d62\u2d54_\u2d31\u2d55\u2d30\u2d62\u2d55_\u2d4e\u2d30\u2d55\u2d5a_\u2d49\u2d31\u2d54\u2d49\u2d54_\u2d4e\u2d30\u2d62\u2d62\u2d53_\u2d62\u2d53\u2d4f\u2d62\u2d53_\u2d62\u2d53\u2d4d\u2d62\u2d53\u2d63_\u2d56\u2d53\u2d5b\u2d5c_\u2d5b\u2d53\u2d5c\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d3d\u2d5f\u2d53\u2d31\u2d55_\u2d4f\u2d53\u2d61\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d37\u2d53\u2d4a\u2d4f\u2d31\u2d49\u2d54'.split(
          '_'
        ),
      monthsShort:
        '\u2d49\u2d4f\u2d4f\u2d30\u2d62\u2d54_\u2d31\u2d55\u2d30\u2d62\u2d55_\u2d4e\u2d30\u2d55\u2d5a_\u2d49\u2d31\u2d54\u2d49\u2d54_\u2d4e\u2d30\u2d62\u2d62\u2d53_\u2d62\u2d53\u2d4f\u2d62\u2d53_\u2d62\u2d53\u2d4d\u2d62\u2d53\u2d63_\u2d56\u2d53\u2d5b\u2d5c_\u2d5b\u2d53\u2d5c\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d3d\u2d5f\u2d53\u2d31\u2d55_\u2d4f\u2d53\u2d61\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d37\u2d53\u2d4a\u2d4f\u2d31\u2d49\u2d54'.split(
          '_'
        ),
      weekdays:
        '\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59'.split(
          '_'
        ),
      weekdaysShort:
        '\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59'.split(
          '_'
        ),
      weekdaysMin:
        '\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[\u2d30\u2d59\u2d37\u2d45 \u2d34] LT',
        nextDay: '[\u2d30\u2d59\u2d3d\u2d30 \u2d34] LT',
        nextWeek: 'dddd [\u2d34] LT',
        lastDay: '[\u2d30\u2d5a\u2d30\u2d4f\u2d5c \u2d34] LT',
        lastWeek: 'dddd [\u2d34] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u2d37\u2d30\u2d37\u2d45 \u2d59 \u2d62\u2d30\u2d4f %s',
        past: '\u2d62\u2d30\u2d4f %s',
        s: '\u2d49\u2d4e\u2d49\u2d3d',
        ss: '%d \u2d49\u2d4e\u2d49\u2d3d',
        m: '\u2d4e\u2d49\u2d4f\u2d53\u2d3a',
        mm: '%d \u2d4e\u2d49\u2d4f\u2d53\u2d3a',
        h: '\u2d59\u2d30\u2d44\u2d30',
        hh: '%d \u2d5c\u2d30\u2d59\u2d59\u2d30\u2d44\u2d49\u2d4f',
        d: '\u2d30\u2d59\u2d59',
        dd: '%d o\u2d59\u2d59\u2d30\u2d4f',
        M: '\u2d30\u2d62o\u2d53\u2d54',
        MM: '%d \u2d49\u2d62\u2d62\u2d49\u2d54\u2d4f',
        y: '\u2d30\u2d59\u2d33\u2d30\u2d59',
        yy: '%d \u2d49\u2d59\u2d33\u2d30\u2d59\u2d4f',
      },
      week: { dow: 6, doy: 12 },
    }),
    M.defineLocale('ug-cn', {
      months:
        '\u064a\u0627\u0646\u06cb\u0627\u0631_\u0641\u06d0\u06cb\u0631\u0627\u0644_\u0645\u0627\u0631\u062a_\u0626\u0627\u067e\u0631\u06d0\u0644_\u0645\u0627\u064a_\u0626\u0649\u064a\u06c7\u0646_\u0626\u0649\u064a\u06c7\u0644_\u0626\u0627\u06cb\u063a\u06c7\u0633\u062a_\u0633\u06d0\u0646\u062a\u06d5\u0628\u0649\u0631_\u0626\u06c6\u0643\u062a\u06d5\u0628\u0649\u0631_\u0646\u0648\u064a\u0627\u0628\u0649\u0631_\u062f\u06d0\u0643\u0627\u0628\u0649\u0631'.split(
          '_'
        ),
      monthsShort:
        '\u064a\u0627\u0646\u06cb\u0627\u0631_\u0641\u06d0\u06cb\u0631\u0627\u0644_\u0645\u0627\u0631\u062a_\u0626\u0627\u067e\u0631\u06d0\u0644_\u0645\u0627\u064a_\u0626\u0649\u064a\u06c7\u0646_\u0626\u0649\u064a\u06c7\u0644_\u0626\u0627\u06cb\u063a\u06c7\u0633\u062a_\u0633\u06d0\u0646\u062a\u06d5\u0628\u0649\u0631_\u0626\u06c6\u0643\u062a\u06d5\u0628\u0649\u0631_\u0646\u0648\u064a\u0627\u0628\u0649\u0631_\u062f\u06d0\u0643\u0627\u0628\u0649\u0631'.split(
          '_'
        ),
      weekdays:
        '\u064a\u06d5\u0643\u0634\u06d5\u0646\u0628\u06d5_\u062f\u06c8\u0634\u06d5\u0646\u0628\u06d5_\u0633\u06d5\u064a\u0634\u06d5\u0646\u0628\u06d5_\u0686\u0627\u0631\u0634\u06d5\u0646\u0628\u06d5_\u067e\u06d5\u064a\u0634\u06d5\u0646\u0628\u06d5_\u062c\u06c8\u0645\u06d5_\u0634\u06d5\u0646\u0628\u06d5'.split(
          '_'
        ),
      weekdaysShort:
        '\u064a\u06d5_\u062f\u06c8_\u0633\u06d5_\u0686\u0627_\u067e\u06d5_\u062c\u06c8_\u0634\u06d5'.split(
          '_'
        ),
      weekdaysMin:
        '\u064a\u06d5_\u062f\u06c8_\u0633\u06d5_\u0686\u0627_\u067e\u06d5_\u062c\u06c8_\u0634\u06d5'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY-MM-DD',
        LL: 'YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649',
        LLL: 'YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649\u060c HH:mm',
        LLLL: 'dddd\u060c YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649\u060c HH:mm',
      },
      meridiemParse:
        /\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5|\u0633\u06d5\u06be\u06d5\u0631|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646|\u0686\u06c8\u0634|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646|\u0643\u06d5\u0686/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          '\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5' === a ||
          '\u0633\u06d5\u06be\u06d5\u0631' === a ||
          '\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646' === a ||
          ('\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646' !== a &&
            '\u0643\u06d5\u0686' !== a &&
            11 <= e)
            ? e
            : e + 12
        );
      },
      meridiem: function (e, a, t) {
        var s = 100 * e + a;
        return s < 600
          ? '\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5'
          : s < 900
          ? '\u0633\u06d5\u06be\u06d5\u0631'
          : s < 1130
          ? '\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646'
          : s < 1230
          ? '\u0686\u06c8\u0634'
          : s < 1800
          ? '\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646'
          : '\u0643\u06d5\u0686';
      },
      calendar: {
        sameDay: '[\u0628\u06c8\u06af\u06c8\u0646 \u0633\u0627\u0626\u06d5\u062a] LT',
        nextDay: '[\u0626\u06d5\u062a\u06d5 \u0633\u0627\u0626\u06d5\u062a] LT',
        nextWeek:
          '[\u0643\u06d0\u0644\u06d5\u0631\u0643\u0649] dddd [\u0633\u0627\u0626\u06d5\u062a] LT',
        lastDay: '[\u062a\u06c6\u0646\u06c8\u06af\u06c8\u0646] LT',
        lastWeek:
          '[\u0626\u0627\u0644\u062f\u0649\u0646\u0642\u0649] dddd [\u0633\u0627\u0626\u06d5\u062a] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s \u0643\u06d0\u064a\u0649\u0646',
        past: '%s \u0628\u06c7\u0631\u06c7\u0646',
        s: '\u0646\u06d5\u0686\u0686\u06d5 \u0633\u06d0\u0643\u0648\u0646\u062a',
        ss: '%d \u0633\u06d0\u0643\u0648\u0646\u062a',
        m: '\u0628\u0649\u0631 \u0645\u0649\u0646\u06c7\u062a',
        mm: '%d \u0645\u0649\u0646\u06c7\u062a',
        h: '\u0628\u0649\u0631 \u0633\u0627\u0626\u06d5\u062a',
        hh: '%d \u0633\u0627\u0626\u06d5\u062a',
        d: '\u0628\u0649\u0631 \u0643\u06c8\u0646',
        dd: '%d \u0643\u06c8\u0646',
        M: '\u0628\u0649\u0631 \u0626\u0627\u064a',
        MM: '%d \u0626\u0627\u064a',
        y: '\u0628\u0649\u0631 \u064a\u0649\u0644',
        yy: '%d \u064a\u0649\u0644',
      },
      dayOfMonthOrdinalParse:
        /\d{1,2}(-\u0643\u06c8\u0646\u0649|-\u0626\u0627\u064a|-\u06be\u06d5\u067e\u062a\u06d5)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'd':
          case 'D':
          case 'DDD':
            return e + '-\u0643\u06c8\u0646\u0649';
          case 'w':
          case 'W':
            return e + '-\u06be\u06d5\u067e\u062a\u06d5';
          default:
            return e;
        }
      },
      preparse: function (e) {
        return e.replace(/\u060c/g, ',');
      },
      postformat: function (e) {
        return e.replace(/,/g, '\u060c');
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('uk', {
      months: {
        format:
          '\u0441\u0456\u0447\u043d\u044f_\u043b\u044e\u0442\u043e\u0433\u043e_\u0431\u0435\u0440\u0435\u0437\u043d\u044f_\u043a\u0432\u0456\u0442\u043d\u044f_\u0442\u0440\u0430\u0432\u043d\u044f_\u0447\u0435\u0440\u0432\u043d\u044f_\u043b\u0438\u043f\u043d\u044f_\u0441\u0435\u0440\u043f\u043d\u044f_\u0432\u0435\u0440\u0435\u0441\u043d\u044f_\u0436\u043e\u0432\u0442\u043d\u044f_\u043b\u0438\u0441\u0442\u043e\u043f\u0430\u0434\u0430_\u0433\u0440\u0443\u0434\u043d\u044f'.split(
            '_'
          ),
        standalone:
          '\u0441\u0456\u0447\u0435\u043d\u044c_\u043b\u044e\u0442\u0438\u0439_\u0431\u0435\u0440\u0435\u0437\u0435\u043d\u044c_\u043a\u0432\u0456\u0442\u0435\u043d\u044c_\u0442\u0440\u0430\u0432\u0435\u043d\u044c_\u0447\u0435\u0440\u0432\u0435\u043d\u044c_\u043b\u0438\u043f\u0435\u043d\u044c_\u0441\u0435\u0440\u043f\u0435\u043d\u044c_\u0432\u0435\u0440\u0435\u0441\u0435\u043d\u044c_\u0436\u043e\u0432\u0442\u0435\u043d\u044c_\u043b\u0438\u0441\u0442\u043e\u043f\u0430\u0434_\u0433\u0440\u0443\u0434\u0435\u043d\u044c'.split(
            '_'
          ),
      },
      monthsShort:
        '\u0441\u0456\u0447_\u043b\u044e\u0442_\u0431\u0435\u0440_\u043a\u0432\u0456\u0442_\u0442\u0440\u0430\u0432_\u0447\u0435\u0440\u0432_\u043b\u0438\u043f_\u0441\u0435\u0440\u043f_\u0432\u0435\u0440_\u0436\u043e\u0432\u0442_\u043b\u0438\u0441\u0442_\u0433\u0440\u0443\u0434'.split(
          '_'
        ),
      weekdays: function (e, a) {
        var t = {
          nominative:
            '\u043d\u0435\u0434\u0456\u043b\u044f_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043e\u043a_\u0432\u0456\u0432\u0442\u043e\u0440\u043e\u043a_\u0441\u0435\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u044f_\u0441\u0443\u0431\u043e\u0442\u0430'.split(
              '_'
            ),
          accusative:
            '\u043d\u0435\u0434\u0456\u043b\u044e_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043e\u043a_\u0432\u0456\u0432\u0442\u043e\u0440\u043e\u043a_\u0441\u0435\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u044e_\u0441\u0443\u0431\u043e\u0442\u0443'.split(
              '_'
            ),
          genitive:
            '\u043d\u0435\u0434\u0456\u043b\u0456_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043a\u0430_\u0432\u0456\u0432\u0442\u043e\u0440\u043a\u0430_\u0441\u0435\u0440\u0435\u0434\u0438_\u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u0456_\u0441\u0443\u0431\u043e\u0442\u0438'.split(
              '_'
            ),
        };
        return !0 === e
          ? t.nominative.slice(1, 7).concat(t.nominative.slice(0, 1))
          : e
          ? t[
              /(\[[\u0412\u0432\u0423\u0443]\]) ?dddd/.test(a)
                ? 'accusative'
                : /\[?(?:\u043c\u0438\u043d\u0443\u043b\u043e\u0457|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0457)? ?\] ?dddd/.test(
                    a
                  )
                ? 'genitive'
                : 'nominative'
            ][e.day()]
          : t.nominative;
      },
      weekdaysShort:
        '\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431'.split(
          '_'
        ),
      weekdaysMin:
        '\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY \u0440.',
        LLL: 'D MMMM YYYY \u0440., HH:mm',
        LLLL: 'dddd, D MMMM YYYY \u0440., HH:mm',
      },
      calendar: {
        sameDay: zr('[\u0421\u044c\u043e\u0433\u043e\u0434\u043d\u0456 '),
        nextDay: zr('[\u0417\u0430\u0432\u0442\u0440\u0430 '),
        lastDay: zr('[\u0412\u0447\u043e\u0440\u0430 '),
        nextWeek: zr('[\u0423] dddd ['),
        lastWeek: function () {
          switch (this.day()) {
            case 0:
            case 3:
            case 5:
            case 6:
              return zr('[\u041c\u0438\u043d\u0443\u043b\u043e\u0457] dddd [').call(this);
            case 1:
            case 2:
            case 4:
              return zr('[\u041c\u0438\u043d\u0443\u043b\u043e\u0433\u043e] dddd [').call(this);
          }
        },
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u0437\u0430 %s',
        past: '%s \u0442\u043e\u043c\u0443',
        s: '\u0434\u0435\u043a\u0456\u043b\u044c\u043a\u0430 \u0441\u0435\u043a\u0443\u043d\u0434',
        ss: Fr,
        m: Fr,
        mm: Fr,
        h: '\u0433\u043e\u0434\u0438\u043d\u0443',
        hh: Fr,
        d: '\u0434\u0435\u043d\u044c',
        dd: Fr,
        M: '\u043c\u0456\u0441\u044f\u0446\u044c',
        MM: Fr,
        y: '\u0440\u0456\u043a',
        yy: Fr,
      },
      meridiemParse:
        /\u043d\u043e\u0447\u0456|\u0440\u0430\u043d\u043a\u0443|\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430/,
      isPM: function (e) {
        return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430)$/.test(e);
      },
      meridiem: function (e, a, t) {
        return e < 4
          ? '\u043d\u043e\u0447\u0456'
          : e < 12
          ? '\u0440\u0430\u043d\u043a\u0443'
          : e < 17
          ? '\u0434\u043d\u044f'
          : '\u0432\u0435\u0447\u043e\u0440\u0430';
      },
      dayOfMonthOrdinalParse: /\d{1,2}-(\u0439|\u0433\u043e)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'M':
          case 'd':
          case 'DDD':
          case 'w':
          case 'W':
            return e + '-\u0439';
          case 'D':
            return e + '-\u0433\u043e';
          default:
            return e;
        }
      },
      week: { dow: 1, doy: 7 },
    });
  var Nr = [
      '\u062c\u0646\u0648\u0631\u06cc',
      '\u0641\u0631\u0648\u0631\u06cc',
      '\u0645\u0627\u0631\u0686',
      '\u0627\u067e\u0631\u06cc\u0644',
      '\u0645\u0626\u06cc',
      '\u062c\u0648\u0646',
      '\u062c\u0648\u0644\u0627\u0626\u06cc',
      '\u0627\u06af\u0633\u062a',
      '\u0633\u062a\u0645\u0628\u0631',
      '\u0627\u06a9\u062a\u0648\u0628\u0631',
      '\u0646\u0648\u0645\u0628\u0631',
      '\u062f\u0633\u0645\u0628\u0631',
    ],
    Jr = [
      '\u0627\u062a\u0648\u0627\u0631',
      '\u067e\u06cc\u0631',
      '\u0645\u0646\u06af\u0644',
      '\u0628\u062f\u06be',
      '\u062c\u0645\u0639\u0631\u0627\u062a',
      '\u062c\u0645\u0639\u06c1',
      '\u06c1\u0641\u062a\u06c1',
    ];
  return (
    M.defineLocale('ur', {
      months: Nr,
      monthsShort: Nr,
      weekdays: Jr,
      weekdaysShort: Jr,
      weekdaysMin: Jr,
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd\u060c D MMMM YYYY HH:mm',
      },
      meridiemParse: /\u0635\u0628\u062d|\u0634\u0627\u0645/,
      isPM: function (e) {
        return '\u0634\u0627\u0645' === e;
      },
      meridiem: function (e, a, t) {
        return e < 12 ? '\u0635\u0628\u062d' : '\u0634\u0627\u0645';
      },
      calendar: {
        sameDay: '[\u0622\u062c \u0628\u0648\u0642\u062a] LT',
        nextDay: '[\u06a9\u0644 \u0628\u0648\u0642\u062a] LT',
        nextWeek: 'dddd [\u0628\u0648\u0642\u062a] LT',
        lastDay: '[\u06af\u0630\u0634\u062a\u06c1 \u0631\u0648\u0632 \u0628\u0648\u0642\u062a] LT',
        lastWeek: '[\u06af\u0630\u0634\u062a\u06c1] dddd [\u0628\u0648\u0642\u062a] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s \u0628\u0639\u062f',
        past: '%s \u0642\u0628\u0644',
        s: '\u0686\u0646\u062f \u0633\u06cc\u06a9\u0646\u0688',
        ss: '%d \u0633\u06cc\u06a9\u0646\u0688',
        m: '\u0627\u06cc\u06a9 \u0645\u0646\u0679',
        mm: '%d \u0645\u0646\u0679',
        h: '\u0627\u06cc\u06a9 \u06af\u06be\u0646\u0679\u06c1',
        hh: '%d \u06af\u06be\u0646\u0679\u06d2',
        d: '\u0627\u06cc\u06a9 \u062f\u0646',
        dd: '%d \u062f\u0646',
        M: '\u0627\u06cc\u06a9 \u0645\u0627\u06c1',
        MM: '%d \u0645\u0627\u06c1',
        y: '\u0627\u06cc\u06a9 \u0633\u0627\u0644',
        yy: '%d \u0633\u0627\u0644',
      },
      preparse: function (e) {
        return e.replace(/\u060c/g, ',');
      },
      postformat: function (e) {
        return e.replace(/,/g, '\u060c');
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('uz-latn', {
      months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split(
        '_'
      ),
      monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
      weekdays: 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
      weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
      weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'D MMMM YYYY, dddd HH:mm',
      },
      calendar: {
        sameDay: '[Bugun soat] LT [da]',
        nextDay: '[Ertaga] LT [da]',
        nextWeek: 'dddd [kuni soat] LT [da]',
        lastDay: '[Kecha soat] LT [da]',
        lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
        sameElse: 'L',
      },
      relativeTime: {
        future: 'Yaqin %s ichida',
        past: 'Bir necha %s oldin',
        s: 'soniya',
        ss: '%d soniya',
        m: 'bir daqiqa',
        mm: '%d daqiqa',
        h: 'bir soat',
        hh: '%d soat',
        d: 'bir kun',
        dd: '%d kun',
        M: 'bir oy',
        MM: '%d oy',
        y: 'bir yil',
        yy: '%d yil',
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('uz', {
      months:
        '\u044f\u043d\u0432\u0430\u0440_\u0444\u0435\u0432\u0440\u0430\u043b_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440_\u043e\u043a\u0442\u044f\u0431\u0440_\u043d\u043e\u044f\u0431\u0440_\u0434\u0435\u043a\u0430\u0431\u0440'.split(
          '_'
        ),
      monthsShort:
        '\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a'.split(
          '_'
        ),
      weekdays:
        '\u042f\u043a\u0448\u0430\u043d\u0431\u0430_\u0414\u0443\u0448\u0430\u043d\u0431\u0430_\u0421\u0435\u0448\u0430\u043d\u0431\u0430_\u0427\u043e\u0440\u0448\u0430\u043d\u0431\u0430_\u041f\u0430\u0439\u0448\u0430\u043d\u0431\u0430_\u0416\u0443\u043c\u0430_\u0428\u0430\u043d\u0431\u0430'.split(
          '_'
        ),
      weekdaysShort:
        '\u042f\u043a\u0448_\u0414\u0443\u0448_\u0421\u0435\u0448_\u0427\u043e\u0440_\u041f\u0430\u0439_\u0416\u0443\u043c_\u0428\u0430\u043d'.split(
          '_'
        ),
      weekdaysMin:
        '\u042f\u043a_\u0414\u0443_\u0421\u0435_\u0427\u043e_\u041f\u0430_\u0416\u0443_\u0428\u0430'.split(
          '_'
        ),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'D MMMM YYYY, dddd HH:mm',
      },
      calendar: {
        sameDay: '[\u0411\u0443\u0433\u0443\u043d \u0441\u043e\u0430\u0442] LT [\u0434\u0430]',
        nextDay: '[\u042d\u0440\u0442\u0430\u0433\u0430] LT [\u0434\u0430]',
        nextWeek: 'dddd [\u043a\u0443\u043d\u0438 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]',
        lastDay: '[\u041a\u0435\u0447\u0430 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]',
        lastWeek:
          '[\u0423\u0442\u0433\u0430\u043d] dddd [\u043a\u0443\u043d\u0438 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\u042f\u043a\u0438\u043d %s \u0438\u0447\u0438\u0434\u0430',
        past: '\u0411\u0438\u0440 \u043d\u0435\u0447\u0430 %s \u043e\u043b\u0434\u0438\u043d',
        s: '\u0444\u0443\u0440\u0441\u0430\u0442',
        ss: '%d \u0444\u0443\u0440\u0441\u0430\u0442',
        m: '\u0431\u0438\u0440 \u0434\u0430\u043a\u0438\u043a\u0430',
        mm: '%d \u0434\u0430\u043a\u0438\u043a\u0430',
        h: '\u0431\u0438\u0440 \u0441\u043e\u0430\u0442',
        hh: '%d \u0441\u043e\u0430\u0442',
        d: '\u0431\u0438\u0440 \u043a\u0443\u043d',
        dd: '%d \u043a\u0443\u043d',
        M: '\u0431\u0438\u0440 \u043e\u0439',
        MM: '%d \u043e\u0439',
        y: '\u0431\u0438\u0440 \u0439\u0438\u043b',
        yy: '%d \u0439\u0438\u043b',
      },
      week: { dow: 1, doy: 7 },
    }),
    M.defineLocale('vi', {
      months:
        'th\xe1ng 1_th\xe1ng 2_th\xe1ng 3_th\xe1ng 4_th\xe1ng 5_th\xe1ng 6_th\xe1ng 7_th\xe1ng 8_th\xe1ng 9_th\xe1ng 10_th\xe1ng 11_th\xe1ng 12'.split(
          '_'
        ),
      monthsShort:
        'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split(
          '_'
        ),
      monthsParseExact: !0,
      weekdays:
        'ch\u1ee7 nh\u1eadt_th\u1ee9 hai_th\u1ee9 ba_th\u1ee9 t\u01b0_th\u1ee9 n\u0103m_th\u1ee9 s\xe1u_th\u1ee9 b\u1ea3y'.split(
          '_'
        ),
      weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
      weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
      weekdaysParseExact: !0,
      meridiemParse: /sa|ch/i,
      isPM: function (e) {
        return /^ch$/i.test(e);
      },
      meridiem: function (e, a, t) {
        return e < 12 ? (t ? 'sa' : 'SA') : t ? 'ch' : 'CH';
      },
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM [n\u0103m] YYYY',
        LLL: 'D MMMM [n\u0103m] YYYY HH:mm',
        LLLL: 'dddd, D MMMM [n\u0103m] YYYY HH:mm',
        l: 'DD/M/YYYY',
        ll: 'D MMM YYYY',
        lll: 'D MMM YYYY HH:mm',
        llll: 'ddd, D MMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[H\xf4m nay l\xfac] LT',
        nextDay: '[Ng\xe0y mai l\xfac] LT',
        nextWeek: 'dddd [tu\u1ea7n t\u1edbi l\xfac] LT',
        lastDay: '[H\xf4m qua l\xfac] LT',
        lastWeek: 'dddd [tu\u1ea7n tr\u01b0\u1edbc l\xfac] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '%s t\u1edbi',
        past: '%s tr\u01b0\u1edbc',
        s: 'v\xe0i gi\xe2y',
        ss: '%d gi\xe2y',
        m: 'm\u1ed9t ph\xfat',
        mm: '%d ph\xfat',
        h: 'm\u1ed9t gi\u1edd',
        hh: '%d gi\u1edd',
        d: 'm\u1ed9t ng\xe0y',
        dd: '%d ng\xe0y',
        w: 'm\u1ed9t tu\u1ea7n',
        ww: '%d tu\u1ea7n',
        M: 'm\u1ed9t th\xe1ng',
        MM: '%d th\xe1ng',
        y: 'm\u1ed9t n\u0103m',
        yy: '%d n\u0103m',
      },
      dayOfMonthOrdinalParse: /\d{1,2}/,
      ordinal: function (e) {
        return e;
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('x-pseudo', {
      months:
        'J~\xe1\xf1\xfa\xe1~r\xfd_F~\xe9br\xfa~\xe1r\xfd_~M\xe1rc~h_\xc1p~r\xedl_~M\xe1\xfd_~J\xfa\xf1\xe9~_J\xfal~\xfd_\xc1\xfa~g\xfast~_S\xe9p~t\xe9mb~\xe9r_\xd3~ct\xf3b~\xe9r_\xd1~\xf3v\xe9m~b\xe9r_~D\xe9c\xe9~mb\xe9r'.split(
          '_'
        ),
      monthsShort:
        'J~\xe1\xf1_~F\xe9b_~M\xe1r_~\xc1pr_~M\xe1\xfd_~J\xfa\xf1_~J\xfal_~\xc1\xfag_~S\xe9p_~\xd3ct_~\xd1\xf3v_~D\xe9c'.split(
          '_'
        ),
      monthsParseExact: !0,
      weekdays:
        'S~\xfa\xf1d\xe1~\xfd_M\xf3~\xf1d\xe1\xfd~_T\xfa\xe9~sd\xe1\xfd~_W\xe9d~\xf1\xe9sd~\xe1\xfd_T~h\xfars~d\xe1\xfd_~Fr\xedd~\xe1\xfd_S~\xe1t\xfar~d\xe1\xfd'.split(
          '_'
        ),
      weekdaysShort: 'S~\xfa\xf1_~M\xf3\xf1_~T\xfa\xe9_~W\xe9d_~Th\xfa_~Fr\xed_~S\xe1t'.split('_'),
      weekdaysMin: 'S~\xfa_M\xf3~_T\xfa_~W\xe9_T~h_Fr~_S\xe1'.split('_'),
      weekdaysParseExact: !0,
      longDateFormat: {
        LT: 'HH:mm',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm',
      },
      calendar: {
        sameDay: '[T~\xf3d\xe1~\xfd \xe1t] LT',
        nextDay: '[T~\xf3m\xf3~rr\xf3~w \xe1t] LT',
        nextWeek: 'dddd [\xe1t] LT',
        lastDay: '[\xdd~\xe9st~\xe9rd\xe1~\xfd \xe1t] LT',
        lastWeek: '[L~\xe1st] dddd [\xe1t] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: '\xed~\xf1 %s',
        past: '%s \xe1~g\xf3',
        s: '\xe1 ~f\xe9w ~s\xe9c\xf3~\xf1ds',
        ss: '%d s~\xe9c\xf3\xf1~ds',
        m: '\xe1 ~m\xed\xf1~\xfat\xe9',
        mm: '%d m~\xed\xf1\xfa~t\xe9s',
        h: '\xe1~\xf1 h\xf3~\xfar',
        hh: '%d h~\xf3\xfars',
        d: '\xe1 ~d\xe1\xfd',
        dd: '%d d~\xe1\xfds',
        M: '\xe1 ~m\xf3\xf1~th',
        MM: '%d m~\xf3\xf1t~hs',
        y: '\xe1 ~\xfd\xe9\xe1r',
        yy: '%d \xfd~\xe9\xe1rs',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function (e) {
        var a = e % 10;
        return (
          e +
          (1 == ~~((e % 100) / 10) ? 'th' : 1 == a ? 'st' : 2 == a ? 'nd' : 3 == a ? 'rd' : 'th')
        );
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('yo', {
      months:
        'S\u1eb9\u0301r\u1eb9\u0301_E\u0300re\u0300le\u0300_\u1eb8r\u1eb9\u0300na\u0300_I\u0300gbe\u0301_E\u0300bibi_O\u0300ku\u0300du_Ag\u1eb9mo_O\u0300gu\u0301n_Owewe_\u1ecc\u0300wa\u0300ra\u0300_Be\u0301lu\u0301_\u1ecc\u0300p\u1eb9\u0300\u0300'.split(
          '_'
        ),
      monthsShort:
        'S\u1eb9\u0301r_E\u0300rl_\u1eb8rn_I\u0300gb_E\u0300bi_O\u0300ku\u0300_Ag\u1eb9_O\u0300gu\u0301_Owe_\u1ecc\u0300wa\u0300_Be\u0301l_\u1ecc\u0300p\u1eb9\u0300\u0300'.split(
          '_'
        ),
      weekdays:
        'A\u0300i\u0300ku\u0301_Aje\u0301_I\u0300s\u1eb9\u0301gun_\u1eccj\u1ecd\u0301ru\u0301_\u1eccj\u1ecd\u0301b\u1ecd_\u1eb8ti\u0300_A\u0300ba\u0301m\u1eb9\u0301ta'.split(
          '_'
        ),
      weekdaysShort:
        'A\u0300i\u0300k_Aje\u0301_I\u0300s\u1eb9\u0301_\u1eccjr_\u1eccjb_\u1eb8ti\u0300_A\u0300ba\u0301'.split(
          '_'
        ),
      weekdaysMin: 'A\u0300i\u0300_Aj_I\u0300s_\u1eccr_\u1eccb_\u1eb8t_A\u0300b'.split('_'),
      longDateFormat: {
        LT: 'h:mm A',
        LTS: 'h:mm:ss A',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY h:mm A',
        LLLL: 'dddd, D MMMM YYYY h:mm A',
      },
      calendar: {
        sameDay: '[O\u0300ni\u0300 ni] LT',
        nextDay: '[\u1ecc\u0300la ni] LT',
        nextWeek: "dddd [\u1eccs\u1eb9\u0300 to\u0301n'b\u1ecd] [ni] LT",
        lastDay: '[A\u0300na ni] LT',
        lastWeek: 'dddd [\u1eccs\u1eb9\u0300 to\u0301l\u1ecd\u0301] [ni] LT',
        sameElse: 'L',
      },
      relativeTime: {
        future: 'ni\u0301 %s',
        past: '%s k\u1ecdja\u0301',
        s: 'i\u0300s\u1eb9ju\u0301 aaya\u0301 die',
        ss: 'aaya\u0301 %d',
        m: 'i\u0300s\u1eb9ju\u0301 kan',
        mm: 'i\u0300s\u1eb9ju\u0301 %d',
        h: 'wa\u0301kati kan',
        hh: 'wa\u0301kati %d',
        d: '\u1ecdj\u1ecd\u0301 kan',
        dd: '\u1ecdj\u1ecd\u0301 %d',
        M: 'osu\u0300 kan',
        MM: 'osu\u0300 %d',
        y: '\u1ecddu\u0301n kan',
        yy: '\u1ecddu\u0301n %d',
      },
      dayOfMonthOrdinalParse: /\u1ecdj\u1ecd\u0301\s\d{1,2}/,
      ordinal: '\u1ecdj\u1ecd\u0301 %d',
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('zh-cn', {
      months:
        '\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708'.split(
          '_'
        ),
      monthsShort:
        '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split(
          '_'
        ),
      weekdays:
        '\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d'.split(
          '_'
        ),
      weekdaysShort:
        '\u5468\u65e5_\u5468\u4e00_\u5468\u4e8c_\u5468\u4e09_\u5468\u56db_\u5468\u4e94_\u5468\u516d'.split(
          '_'
        ),
      weekdaysMin: '\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY/MM/DD',
        LL: 'YYYY\u5e74M\u6708D\u65e5',
        LLL: 'YYYY\u5e74M\u6708D\u65e5Ah\u70b9mm\u5206',
        LLLL: 'YYYY\u5e74M\u6708D\u65e5ddddAh\u70b9mm\u5206',
        l: 'YYYY/M/D',
        ll: 'YYYY\u5e74M\u6708D\u65e5',
        lll: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        llll: 'YYYY\u5e74M\u6708D\u65e5dddd HH:mm',
      },
      meridiemParse:
        /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          '\u51cc\u6668' === a ||
          '\u65e9\u4e0a' === a ||
          '\u4e0a\u5348' === a ||
          ('\u4e0b\u5348' !== a && '\u665a\u4e0a' !== a && 11 <= e)
            ? e
            : e + 12
        );
      },
      meridiem: function (e, a, t) {
        var s = 100 * e + a;
        return s < 600
          ? '\u51cc\u6668'
          : s < 900
          ? '\u65e9\u4e0a'
          : s < 1130
          ? '\u4e0a\u5348'
          : s < 1230
          ? '\u4e2d\u5348'
          : s < 1800
          ? '\u4e0b\u5348'
          : '\u665a\u4e0a';
      },
      calendar: {
        sameDay: '[\u4eca\u5929]LT',
        nextDay: '[\u660e\u5929]LT',
        nextWeek: function (e) {
          return e.week() !== this.week() ? '[\u4e0b]dddLT' : '[\u672c]dddLT';
        },
        lastDay: '[\u6628\u5929]LT',
        lastWeek: function (e) {
          return this.week() !== e.week() ? '[\u4e0a]dddLT' : '[\u672c]dddLT';
        },
        sameElse: 'L',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u5468)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'd':
          case 'D':
          case 'DDD':
            return e + '\u65e5';
          case 'M':
            return e + '\u6708';
          case 'w':
          case 'W':
            return e + '\u5468';
          default:
            return e;
        }
      },
      relativeTime: {
        future: '%s\u540e',
        past: '%s\u524d',
        s: '\u51e0\u79d2',
        ss: '%d \u79d2',
        m: '1 \u5206\u949f',
        mm: '%d \u5206\u949f',
        h: '1 \u5c0f\u65f6',
        hh: '%d \u5c0f\u65f6',
        d: '1 \u5929',
        dd: '%d \u5929',
        w: '1 \u5468',
        ww: '%d \u5468',
        M: '1 \u4e2a\u6708',
        MM: '%d \u4e2a\u6708',
        y: '1 \u5e74',
        yy: '%d \u5e74',
      },
      week: { dow: 1, doy: 4 },
    }),
    M.defineLocale('zh-hk', {
      months:
        '\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708'.split(
          '_'
        ),
      monthsShort:
        '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split(
          '_'
        ),
      weekdays:
        '\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d'.split(
          '_'
        ),
      weekdaysShort:
        '\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d'.split(
          '_'
        ),
      weekdaysMin: '\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY/MM/DD',
        LL: 'YYYY\u5e74M\u6708D\u65e5',
        LLL: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        LLLL: 'YYYY\u5e74M\u6708D\u65e5dddd HH:mm',
        l: 'YYYY/M/D',
        ll: 'YYYY\u5e74M\u6708D\u65e5',
        lll: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        llll: 'YYYY\u5e74M\u6708D\u65e5dddd HH:mm',
      },
      meridiemParse:
        /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          '\u51cc\u6668' === a || '\u65e9\u4e0a' === a || '\u4e0a\u5348' === a
            ? e
            : '\u4e2d\u5348' === a
            ? 11 <= e
              ? e
              : e + 12
            : '\u4e0b\u5348' === a || '\u665a\u4e0a' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        var s = 100 * e + a;
        return s < 600
          ? '\u51cc\u6668'
          : s < 900
          ? '\u65e9\u4e0a'
          : s < 1200
          ? '\u4e0a\u5348'
          : 1200 === s
          ? '\u4e2d\u5348'
          : s < 1800
          ? '\u4e0b\u5348'
          : '\u665a\u4e0a';
      },
      calendar: {
        sameDay: '[\u4eca\u5929]LT',
        nextDay: '[\u660e\u5929]LT',
        nextWeek: '[\u4e0b]ddddLT',
        lastDay: '[\u6628\u5929]LT',
        lastWeek: '[\u4e0a]ddddLT',
        sameElse: 'L',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'd':
          case 'D':
          case 'DDD':
            return e + '\u65e5';
          case 'M':
            return e + '\u6708';
          case 'w':
          case 'W':
            return e + '\u9031';
          default:
            return e;
        }
      },
      relativeTime: {
        future: '%s\u5f8c',
        past: '%s\u524d',
        s: '\u5e7e\u79d2',
        ss: '%d \u79d2',
        m: '1 \u5206\u9418',
        mm: '%d \u5206\u9418',
        h: '1 \u5c0f\u6642',
        hh: '%d \u5c0f\u6642',
        d: '1 \u5929',
        dd: '%d \u5929',
        M: '1 \u500b\u6708',
        MM: '%d \u500b\u6708',
        y: '1 \u5e74',
        yy: '%d \u5e74',
      },
    }),
    M.defineLocale('zh-mo', {
      months:
        '\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708'.split(
          '_'
        ),
      monthsShort:
        '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split(
          '_'
        ),
      weekdays:
        '\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d'.split(
          '_'
        ),
      weekdaysShort:
        '\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d'.split(
          '_'
        ),
      weekdaysMin: '\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'YYYY\u5e74M\u6708D\u65e5',
        LLL: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        LLLL: 'YYYY\u5e74M\u6708D\u65e5dddd HH:mm',
        l: 'D/M/YYYY',
        ll: 'YYYY\u5e74M\u6708D\u65e5',
        lll: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        llll: 'YYYY\u5e74M\u6708D\u65e5dddd HH:mm',
      },
      meridiemParse:
        /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          '\u51cc\u6668' === a || '\u65e9\u4e0a' === a || '\u4e0a\u5348' === a
            ? e
            : '\u4e2d\u5348' === a
            ? 11 <= e
              ? e
              : e + 12
            : '\u4e0b\u5348' === a || '\u665a\u4e0a' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        var s = 100 * e + a;
        return s < 600
          ? '\u51cc\u6668'
          : s < 900
          ? '\u65e9\u4e0a'
          : s < 1130
          ? '\u4e0a\u5348'
          : s < 1230
          ? '\u4e2d\u5348'
          : s < 1800
          ? '\u4e0b\u5348'
          : '\u665a\u4e0a';
      },
      calendar: {
        sameDay: '[\u4eca\u5929] LT',
        nextDay: '[\u660e\u5929] LT',
        nextWeek: '[\u4e0b]dddd LT',
        lastDay: '[\u6628\u5929] LT',
        lastWeek: '[\u4e0a]dddd LT',
        sameElse: 'L',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'd':
          case 'D':
          case 'DDD':
            return e + '\u65e5';
          case 'M':
            return e + '\u6708';
          case 'w':
          case 'W':
            return e + '\u9031';
          default:
            return e;
        }
      },
      relativeTime: {
        future: '%s\u5167',
        past: '%s\u524d',
        s: '\u5e7e\u79d2',
        ss: '%d \u79d2',
        m: '1 \u5206\u9418',
        mm: '%d \u5206\u9418',
        h: '1 \u5c0f\u6642',
        hh: '%d \u5c0f\u6642',
        d: '1 \u5929',
        dd: '%d \u5929',
        M: '1 \u500b\u6708',
        MM: '%d \u500b\u6708',
        y: '1 \u5e74',
        yy: '%d \u5e74',
      },
    }),
    M.defineLocale('zh-tw', {
      months:
        '\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708'.split(
          '_'
        ),
      monthsShort:
        '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split(
          '_'
        ),
      weekdays:
        '\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d'.split(
          '_'
        ),
      weekdaysShort:
        '\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d'.split(
          '_'
        ),
      weekdaysMin: '\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d'.split('_'),
      longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY/MM/DD',
        LL: 'YYYY\u5e74M\u6708D\u65e5',
        LLL: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        LLLL: 'YYYY\u5e74M\u6708D\u65e5dddd HH:mm',
        l: 'YYYY/M/D',
        ll: 'YYYY\u5e74M\u6708D\u65e5',
        lll: 'YYYY\u5e74M\u6708D\u65e5 HH:mm',
        llll: 'YYYY\u5e74M\u6708D\u65e5dddd HH:mm',
      },
      meridiemParse:
        /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,
      meridiemHour: function (e, a) {
        return (
          12 === e && (e = 0),
          '\u51cc\u6668' === a || '\u65e9\u4e0a' === a || '\u4e0a\u5348' === a
            ? e
            : '\u4e2d\u5348' === a
            ? 11 <= e
              ? e
              : e + 12
            : '\u4e0b\u5348' === a || '\u665a\u4e0a' === a
            ? e + 12
            : void 0
        );
      },
      meridiem: function (e, a, t) {
        var s = 100 * e + a;
        return s < 600
          ? '\u51cc\u6668'
          : s < 900
          ? '\u65e9\u4e0a'
          : s < 1130
          ? '\u4e0a\u5348'
          : s < 1230
          ? '\u4e2d\u5348'
          : s < 1800
          ? '\u4e0b\u5348'
          : '\u665a\u4e0a';
      },
      calendar: {
        sameDay: '[\u4eca\u5929] LT',
        nextDay: '[\u660e\u5929] LT',
        nextWeek: '[\u4e0b]dddd LT',
        lastDay: '[\u6628\u5929] LT',
        lastWeek: '[\u4e0a]dddd LT',
        sameElse: 'L',
      },
      dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/,
      ordinal: function (e, a) {
        switch (a) {
          case 'd':
          case 'D':
          case 'DDD':
            return e + '\u65e5';
          case 'M':
            return e + '\u6708';
          case 'w':
          case 'W':
            return e + '\u9031';
          default:
            return e;
        }
      },
      relativeTime: {
        future: '%s\u5f8c',
        past: '%s\u524d',
        s: '\u5e7e\u79d2',
        ss: '%d \u79d2',
        m: '1 \u5206\u9418',
        mm: '%d \u5206\u9418',
        h: '1 \u5c0f\u6642',
        hh: '%d \u5c0f\u6642',
        d: '1 \u5929',
        dd: '%d \u5929',
        M: '1 \u500b\u6708',
        MM: '%d \u500b\u6708',
        y: '1 \u5e74',
        yy: '%d \u5e74',
      },
    }),
    M.locale('en'),
    M
  );
});
// #endregion

// #region / WNumb v1.2.0
//  __          ___   _                 _
//  \ \        / / \ | |               | |
//   \ \  /\  / /|  \| |_   _ _ __ ___ | |__
//    \ \/  \/ / | . ` | | | | '_ ` _ \| '_ \
//     \  /\  /  | |\  | |_| | | | | | | |_) |
//      \/  \/   |_| \_|\__,_|_| |_| |_|_.__/
//
//                                              v1.2.0
/*!
 * WNumb v1.2.0 (https://github.com/leongersen/wnumb)
 * Licensed under MIT (https://github.com/leongersen/wnumb/blob/master/LICENSE.MD)
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof exports === 'object') {
    // Node/CommonJS
    module.exports = factory();
  } else {
    // Browser globals
    window.wNumb = factory();
  }
})(function () {
  'use strict';

  var FormatOptions = [
    'decimals',
    'thousand',
    'mark',
    'prefix',
    'suffix',
    'encoder',
    'decoder',
    'negativeBefore',
    'negative',
    'edit',
    'undo',
  ];

  // General

  // Reverse a string
  function strReverse(a) {
    return a.split('').reverse().join('');
  }

  // Check if a string starts with a specified prefix.
  function strStartsWith(input, match) {
    return input.substring(0, match.length) === match;
  }

  // Check is a string ends in a specified suffix.
  function strEndsWith(input, match) {
    return input.slice(-1 * match.length) === match;
  }

  // Throw an error if formatting options are incompatible.
  function throwEqualError(F, a, b) {
    if ((F[a] || F[b]) && F[a] === F[b]) {
      throw new Error(a);
    }
  }

  // Check if a number is finite and not NaN
  function isValidNumber(input) {
    return typeof input === 'number' && isFinite(input);
  }

  // Provide rounding-accurate toFixed method.
  // Borrowed: http://stackoverflow.com/a/21323330/775265
  function toFixed(value, exp) {
    value = value.toString().split('e');
    value = Math.round(+(value[0] + 'e' + (value[1] ? +value[1] + exp : exp)));
    value = value.toString().split('e');
    return (+(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp))).toFixed(exp);
  }

  // Formatting

  // Accept a number as input, output formatted string.
  function formatTo(
    decimals,
    thousand,
    mark,
    prefix,
    suffix,
    encoder,
    decoder,
    negativeBefore,
    negative,
    edit,
    undo,
    input
  ) {
    var originalInput = input,
      inputIsNegative,
      inputPieces,
      inputBase,
      inputDecimals = '',
      output = '';

    // Apply user encoder to the input.
    // Expected outcome: number.
    if (encoder) {
      input = encoder(input);
    }

    // Stop if no valid number was provided, the number is infinite or NaN.
    if (!isValidNumber(input)) {
      return false;
    }

    // Rounding away decimals might cause a value of -0
    // when using very small ranges. Remove those cases.
    if (decimals !== false && parseFloat(input.toFixed(decimals)) === 0) {
      input = 0;
    }

    // Formatting is done on absolute numbers,
    // decorated by an optional negative symbol.
    if (input < 0) {
      inputIsNegative = true;
      input = Math.abs(input);
    }

    // Reduce the number of decimals to the specified option.
    if (decimals !== false) {
      input = toFixed(input, decimals);
    }

    // Transform the number into a string, so it can be split.
    input = input.toString();

    // Break the number on the decimal separator.
    if (input.indexOf('.') !== -1) {
      inputPieces = input.split('.');

      inputBase = inputPieces[0];

      if (mark) {
        inputDecimals = mark + inputPieces[1];
      }
    } else {
      // If it isn't split, the entire number will do.
      inputBase = input;
    }

    // Group numbers in sets of three.
    if (thousand) {
      inputBase = strReverse(inputBase).match(/.{1,3}/g);
      inputBase = strReverse(inputBase.join(strReverse(thousand)));
    }

    // If the number is negative, prefix with negation symbol.
    if (inputIsNegative && negativeBefore) {
      output += negativeBefore;
    }

    // Prefix the number
    if (prefix) {
      output += prefix;
    }

    // Normal negative option comes after the prefix. Defaults to '-'.
    if (inputIsNegative && negative) {
      output += negative;
    }

    // Append the actual number.
    output += inputBase;
    output += inputDecimals;

    // Apply the suffix.
    if (suffix) {
      output += suffix;
    }

    // Run the output through a user-specified post-formatter.
    if (edit) {
      output = edit(output, originalInput);
    }

    // All done.
    return output;
  }

  // Accept a sting as input, output decoded number.
  function formatFrom(
    decimals,
    thousand,
    mark,
    prefix,
    suffix,
    encoder,
    decoder,
    negativeBefore,
    negative,
    edit,
    undo,
    input
  ) {
    var originalInput = input,
      inputIsNegative,
      output = '';

    // User defined pre-decoder. Result must be a non empty string.
    if (undo) {
      input = undo(input);
    }

    // Test the input. Can't be empty.
    if (!input || typeof input !== 'string') {
      return false;
    }

    // If the string starts with the negativeBefore value: remove it.
    // Remember is was there, the number is negative.
    if (negativeBefore && strStartsWith(input, negativeBefore)) {
      input = input.replace(negativeBefore, '');
      inputIsNegative = true;
    }

    // Repeat the same procedure for the prefix.
    if (prefix && strStartsWith(input, prefix)) {
      input = input.replace(prefix, '');
    }

    // And again for negative.
    if (negative && strStartsWith(input, negative)) {
      input = input.replace(negative, '');
      inputIsNegative = true;
    }

    // Remove the suffix.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice
    if (suffix && strEndsWith(input, suffix)) {
      input = input.slice(0, -1 * suffix.length);
    }

    // Remove the thousand grouping.
    if (thousand) {
      input = input.split(thousand).join('');
    }

    // Set the decimal separator back to period.
    if (mark) {
      input = input.replace(mark, '.');
    }

    // Prepend the negative symbol.
    if (inputIsNegative) {
      output += '-';
    }

    // Add the number
    output += input;

    // Trim all non-numeric characters (allow '.' and '-');
    output = output.replace(/[^0-9\.\-.]/g, '');

    // The value contains no parse-able number.
    if (output === '') {
      return false;
    }

    // Covert to number.
    output = Number(output);

    // Run the user-specified post-decoder.
    if (decoder) {
      output = decoder(output);
    }

    // Check is the output is valid, otherwise: return false.
    if (!isValidNumber(output)) {
      return false;
    }

    return output;
  }

  // Framework

  // Validate formatting options
  function validate(inputOptions) {
    var i,
      optionName,
      optionValue,
      filteredOptions = {};

    if (inputOptions['suffix'] === undefined) {
      inputOptions['suffix'] = inputOptions['postfix'];
    }

    for (i = 0; i < FormatOptions.length; i += 1) {
      optionName = FormatOptions[i];
      optionValue = inputOptions[optionName];

      if (optionValue === undefined) {
        // Only default if negativeBefore isn't set.
        if (optionName === 'negative' && !filteredOptions.negativeBefore) {
          filteredOptions[optionName] = '-';
          // Don't set a default for mark when 'thousand' is set.
        } else if (optionName === 'mark' && filteredOptions.thousand !== '.') {
          filteredOptions[optionName] = '.';
        } else {
          filteredOptions[optionName] = false;
        }

        // Floating points in JS are stable up to 7 decimals.
      } else if (optionName === 'decimals') {
        if (optionValue >= 0 && optionValue < 8) {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }

        // These options, when provided, must be functions.
      } else if (
        optionName === 'encoder' ||
        optionName === 'decoder' ||
        optionName === 'edit' ||
        optionName === 'undo'
      ) {
        if (typeof optionValue === 'function') {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }

        // Other options are strings.
      } else {
        if (typeof optionValue === 'string') {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }
      }
    }

    // Some values can't be extracted from a
    // string if certain combinations are present.
    throwEqualError(filteredOptions, 'mark', 'thousand');
    throwEqualError(filteredOptions, 'prefix', 'negative');
    throwEqualError(filteredOptions, 'prefix', 'negativeBefore');

    return filteredOptions;
  }

  // Pass all options as function arguments
  function passAll(options, method, input) {
    var i,
      args = [];

    // Add all options in order of FormatOptions
    for (i = 0; i < FormatOptions.length; i += 1) {
      args.push(options[FormatOptions[i]]);
    }

    // Append the input, then call the method, presenting all
    // options as arguments.
    args.push(input);
    return method.apply('', args);
  }

  function wNumb(options) {
    if (!(this instanceof wNumb)) {
      return new wNumb(options);
    }

    if (typeof options !== 'object') {
      return;
    }

    options = validate(options);

    // Call 'formatTo' with proper arguments.
    this.to = function (input) {
      return passAll(options, formatTo, input);
    };

    // Call 'formatFrom' with proper arguments.
    this.from = function (input) {
      return passAll(options, formatFrom, input);
    };
  }

  return wNumb;
});
// #endregion

// #region / Select2 v4.1.0
//    _____      _           _   ___
//   / ____|    | |         | | |__ \
//  | (___   ___| | ___  ___| |_   ) |
//   \___ \ / _ \ |/ _ \/ __| __| / /
//   ____) |  __/ |  __/ (__| |_ / /_
//  |_____/ \___|_|\___|\___|\__|____|
//
//                                      v4.1.0
/*!
 * Select2 4.1.0-rc.0 (https://select2.github.io)
 * Released under the MIT license (https://github.com/select2/select2/blob/master/LICENSE.md)
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node/CommonJS
    module.exports = function (root, jQuery) {
      if (jQuery === undefined) {
        // require('jQuery') returns a factory that requires window to
        // build a jQuery instance, we normalize how we use modules
        // that require this pattern but the window provided is a noop
        // if it's defined (how jquery works)
        if (typeof window !== 'undefined') {
          jQuery = require('jquery');
        } else {
          jQuery = require('jquery')(root);
        }
      }
      factory(jQuery);
      return jQuery;
    };
  } else {
    // Browser globals
    factory(jQuery);
  }
})(function (jQuery) {
  // This is needed so we can catch the AMD loader configuration and use it
  // The inner file should be wrapped (by `banner.start.js`) in a function that
  // returns the AMD loader references.
  var S2 = (function () {
    // Restore the Select2 AMD loader so it can be used
    // Needed mostly in the language files, where the loader is not inserted
    if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
      var S2 = jQuery.fn.select2.amd;
    }
    var S2;
    (function () {
      if (!S2 || !S2.requirejs) {
        if (!S2) {
          S2 = {};
        } else {
          require = S2;
        }
        /**
         * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
         * Released under MIT license, http://github.com/requirejs/almond/LICENSE
         */
        //Going sloppy to avoid 'use strict' string cost, but strict practices should
        //be followed.
        /*global setTimeout: false */

        var requirejs, require, define;
        (function (undef) {
          var main,
            req,
            makeMap,
            handlers,
            defined = {},
            waiting = {},
            config = {},
            defining = {},
            hasOwn = Object.prototype.hasOwnProperty,
            aps = [].slice,
            jsSuffixRegExp = /\.js$/;

          function hasProp(obj, prop) {
            return hasOwn.call(obj, prop);
          }

          /**
           * Given a relative module name, like ./something, normalize it to
           * a real name that can be mapped to a path.
           * @param {String} name the relative name
           * @param {String} baseName a real name that the name arg is relative
           * to.
           * @returns {String} normalized name
           */
          function normalize(name, baseName) {
            var nameParts,
              nameSegment,
              mapValue,
              foundMap,
              lastIndex,
              foundI,
              foundStarMap,
              starI,
              i,
              j,
              part,
              normalizedBaseParts,
              baseParts = baseName && baseName.split('/'),
              map = config.map,
              starMap = (map && map['*']) || {};

            //Adjust any relative paths.
            if (name) {
              name = name.split('/');
              lastIndex = name.length - 1;

              // If wanting node ID compatibility, strip .js from end
              // of IDs. Have to do this here, and not in nameToUrl
              // because node allows either .js or non .js to map
              // to same file.
              if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
              }

              // Starts with a '.' so need the baseName
              if (name[0].charAt(0) === '.' && baseParts) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that 'directory' and not name of the baseName's
                //module. For instance, baseName of 'one/two/three', maps to
                //'one/two/three.js', but we want the directory, 'one/two' for
                //this normalization.
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
              }

              //start trimDots
              for (i = 0; i < name.length; i++) {
                part = name[i];
                if (part === '.') {
                  name.splice(i, 1);
                  i -= 1;
                } else if (part === '..') {
                  // If at the start, or previous value is still ..,
                  // keep them so that when converted to a path it may
                  // still work when converted to a path, even though
                  // as an ID it is less than ideal. In larger point
                  // releases, may be better to just kick out an error.
                  if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                    continue;
                  } else if (i > 0) {
                    name.splice(i - 1, 2);
                    i -= 2;
                  }
                }
              }
              //end trimDots

              name = name.join('/');
            }

            //Apply map config if available.
            if ((baseParts || starMap) && map) {
              nameParts = name.split('/');

              for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join('/');

                if (baseParts) {
                  //Find the longest baseName segment match in the config.
                  //So, do joins on the biggest to smallest lengths of baseParts.
                  for (j = baseParts.length; j > 0; j -= 1) {
                    mapValue = map[baseParts.slice(0, j).join('/')];

                    //baseName segment has  config, find if it has one for
                    //this name.
                    if (mapValue) {
                      mapValue = mapValue[nameSegment];
                      if (mapValue) {
                        //Match, update name to the new value.
                        foundMap = mapValue;
                        foundI = i;
                        break;
                      }
                    }
                  }
                }

                if (foundMap) {
                  break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                  foundStarMap = starMap[nameSegment];
                  starI = i;
                }
              }

              if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
              }

              if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
              }
            }

            return name;
          }

          function makeRequire(relName, forceSync) {
            return function () {
              //A version of a require function that passes a moduleName
              //value for items that may need to
              //look up paths relative to the moduleName
              var args = aps.call(arguments, 0);

              //If first arg is not require('string'), and there is only
              //one arg, it is the array form without a callback. Insert
              //a null so that the following concat is correct.
              if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
              }
              return req.apply(undef, args.concat([relName, forceSync]));
            };
          }

          function makeNormalize(relName) {
            return function (name) {
              return normalize(name, relName);
            };
          }

          function makeLoad(depName) {
            return function (value) {
              defined[depName] = value;
            };
          }

          function callDep(name) {
            if (hasProp(waiting, name)) {
              var args = waiting[name];
              delete waiting[name];
              defining[name] = true;
              main.apply(undef, args);
            }

            if (!hasProp(defined, name) && !hasProp(defining, name)) {
              throw new Error('No ' + name);
            }
            return defined[name];
          }

          //Turns a plugin!resource to [plugin, resource]
          //with the plugin being undefined if the name
          //did not have a plugin prefix.
          function splitPrefix(name) {
            var prefix,
              index = name ? name.indexOf('!') : -1;
            if (index > -1) {
              prefix = name.substring(0, index);
              name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
          }

          //Creates a parts array for a relName where first part is plugin ID,
          //second part is resource ID. Assumes relName has already been normalized.
          function makeRelParts(relName) {
            return relName ? splitPrefix(relName) : [];
          }

          /**
           * Makes a name map, normalizing the name, and using a plugin
           * for normalization if necessary. Grabs a ref to plugin
           * too, as an optimization.
           */
          makeMap = function (name, relParts) {
            var plugin,
              parts = splitPrefix(name),
              prefix = parts[0],
              relResourceName = relParts[1];

            name = parts[1];

            if (prefix) {
              prefix = normalize(prefix, relResourceName);
              plugin = callDep(prefix);
            }

            //Normalize according
            if (prefix) {
              if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
              } else {
                name = normalize(name, relResourceName);
              }
            } else {
              name = normalize(name, relResourceName);
              parts = splitPrefix(name);
              prefix = parts[0];
              name = parts[1];
              if (prefix) {
                plugin = callDep(prefix);
              }
            }

            //Using ridiculous property names for space reasons
            return {
              f: prefix ? prefix + '!' + name : name, //fullName
              n: name,
              pr: prefix,
              p: plugin,
            };
          };

          function makeConfig(name) {
            return function () {
              return (config && config.config && config.config[name]) || {};
            };
          }

          handlers = {
            require: function (name) {
              return makeRequire(name);
            },
            exports: function (name) {
              var e = defined[name];
              if (typeof e !== 'undefined') {
                return e;
              } else {
                return (defined[name] = {});
              }
            },
            module: function (name) {
              return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name),
              };
            },
          };

          main = function (name, deps, callback, relName) {
            var cjsModule,
              depName,
              ret,
              map,
              i,
              relParts,
              args = [],
              callbackType = typeof callback,
              usingExports;

            //Use name if no relName
            relName = relName || name;
            relParts = makeRelParts(relName);

            //Call the callback to define the module, if necessary.
            if (callbackType === 'undefined' || callbackType === 'function') {
              //Pull out the defined dependencies and pass the ordered
              //values to the callback.
              //Default to [require, exports, module] if no deps
              deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
              for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === 'require') {
                  args[i] = handlers.require(name);
                } else if (depName === 'exports') {
                  //CommonJS module spec 1.1
                  args[i] = handlers.exports(name);
                  usingExports = true;
                } else if (depName === 'module') {
                  //CommonJS module spec 1.1
                  cjsModule = args[i] = handlers.module(name);
                } else if (
                  hasProp(defined, depName) ||
                  hasProp(waiting, depName) ||
                  hasProp(defining, depName)
                ) {
                  args[i] = callDep(depName);
                } else if (map.p) {
                  map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                  args[i] = defined[depName];
                } else {
                  throw new Error(name + ' missing ' + depName);
                }
              }

              ret = callback ? callback.apply(defined[name], args) : undefined;

              if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (
                  cjsModule &&
                  cjsModule.exports !== undef &&
                  cjsModule.exports !== defined[name]
                ) {
                  defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                  //Use the return value from the function.
                  defined[name] = ret;
                }
              }
            } else if (name) {
              //May just be an object definition for the module. Only
              //worry about defining if have a module name.
              defined[name] = callback;
            }
          };

          requirejs =
            require =
            req =
              function (deps, callback, relName, forceSync, alt) {
                if (typeof deps === 'string') {
                  if (handlers[deps]) {
                    //callback in this case is really relName
                    return handlers[deps](callback);
                  }
                  //Just return the module wanted. In this scenario, the
                  //deps arg is the module name, and second arg (if passed)
                  //is just the relName.
                  //Normalize module name, if it contains . or ..
                  return callDep(makeMap(deps, makeRelParts(callback)).f);
                } else if (!deps.splice) {
                  //deps is a config object, not an array.
                  config = deps;
                  if (config.deps) {
                    req(config.deps, config.callback);
                  }
                  if (!callback) {
                    return;
                  }

                  if (callback.splice) {
                    //callback is an array, which means it is a dependency list.
                    //Adjust args if there are dependencies
                    deps = callback;
                    callback = relName;
                    relName = null;
                  } else {
                    deps = undef;
                  }
                }

                //Support require(['a'])
                callback = callback || function () {};

                //If relName is a function, it is an errback handler,
                //so remove it.
                if (typeof relName === 'function') {
                  relName = forceSync;
                  forceSync = alt;
                }

                //Simulate async callback;
                if (forceSync) {
                  main(undef, deps, callback, relName);
                } else {
                  //Using a non-zero value because of concern for what old browsers
                  //do, and latest browsers "upgrade" to 4 if lower value is used:
                  //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                  //If want a value immediately, use require('id') instead -- something
                  //that works in almond on the global level, but not guaranteed and
                  //unlikely to work in other AMD implementations.
                  setTimeout(function () {
                    main(undef, deps, callback, relName);
                  }, 4);
                }

                return req;
              };

          /**
           * Just drops the config on the floor, but returns req in case
           * the config return value is used.
           */
          req.config = function (cfg) {
            return req(cfg);
          };

          /**
           * Expose module registry for debugging and tooling
           */
          requirejs._defined = defined;

          define = function (name, deps, callback) {
            if (typeof name !== 'string') {
              throw new Error('See almond README: incorrect module build, no module name');
            }

            //This module may not have dependencies
            if (!deps.splice) {
              //deps is not an array, so probably means
              //an object literal or factory function for
              //the value. Adjust args.
              callback = deps;
              deps = [];
            }

            if (!hasProp(defined, name) && !hasProp(waiting, name)) {
              waiting[name] = [name, deps, callback];
            }
          };

          define.amd = {
            jQuery: true,
          };
        })();

        S2.requirejs = requirejs;
        S2.require = require;
        S2.define = define;
      }
    })();
    S2.define('almond', function () {});

    /* global jQuery:false, $:false */
    S2.define('jquery', [], function () {
      var _$ = jQuery || $;

      if (_$ == null && console && console.error) {
        console.error(
          'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
            'found. Make sure that you are including jQuery before Select2 on your ' +
            'web page.'
        );
      }

      return _$;
    });

    S2.define('select2/utils', ['jquery'], function ($) {
      var Utils = {};

      Utils.Extend = function (ChildClass, SuperClass) {
        var __hasProp = {}.hasOwnProperty;

        function BaseConstructor() {
          this.constructor = ChildClass;
        }

        for (var key in SuperClass) {
          if (__hasProp.call(SuperClass, key)) {
            ChildClass[key] = SuperClass[key];
          }
        }

        BaseConstructor.prototype = SuperClass.prototype;
        ChildClass.prototype = new BaseConstructor();
        ChildClass.__super__ = SuperClass.prototype;

        return ChildClass;
      };

      function getMethods(theClass) {
        var proto = theClass.prototype;

        var methods = [];

        for (var methodName in proto) {
          var m = proto[methodName];

          if (typeof m !== 'function') {
            continue;
          }

          if (methodName === 'constructor') {
            continue;
          }

          methods.push(methodName);
        }

        return methods;
      }

      Utils.Decorate = function (SuperClass, DecoratorClass) {
        var decoratedMethods = getMethods(DecoratorClass);
        var superMethods = getMethods(SuperClass);

        function DecoratedClass() {
          var unshift = Array.prototype.unshift;

          var argCount = DecoratorClass.prototype.constructor.length;

          var calledConstructor = SuperClass.prototype.constructor;

          if (argCount > 0) {
            unshift.call(arguments, SuperClass.prototype.constructor);

            calledConstructor = DecoratorClass.prototype.constructor;
          }

          calledConstructor.apply(this, arguments);
        }

        DecoratorClass.displayName = SuperClass.displayName;

        function ctr() {
          this.constructor = DecoratedClass;
        }

        DecoratedClass.prototype = new ctr();

        for (var m = 0; m < superMethods.length; m++) {
          var superMethod = superMethods[m];

          DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod];
        }

        var calledMethod = function (methodName) {
          // Stub out the original method if it's not decorating an actual method
          var originalMethod = function () {};

          if (methodName in DecoratedClass.prototype) {
            originalMethod = DecoratedClass.prototype[methodName];
          }

          var decoratedMethod = DecoratorClass.prototype[methodName];

          return function () {
            var unshift = Array.prototype.unshift;

            unshift.call(arguments, originalMethod);

            return decoratedMethod.apply(this, arguments);
          };
        };

        for (var d = 0; d < decoratedMethods.length; d++) {
          var decoratedMethod = decoratedMethods[d];

          DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
        }

        return DecoratedClass;
      };

      var Observable = function () {
        this.listeners = {};
      };

      Observable.prototype.on = function (event, callback) {
        this.listeners = this.listeners || {};

        if (event in this.listeners) {
          this.listeners[event].push(callback);
        } else {
          this.listeners[event] = [callback];
        }
      };

      Observable.prototype.trigger = function (event) {
        var slice = Array.prototype.slice;
        var params = slice.call(arguments, 1);

        this.listeners = this.listeners || {};

        // Params should always come in as an array
        if (params == null) {
          params = [];
        }

        // If there are no arguments to the event, use a temporary object
        if (params.length === 0) {
          params.push({});
        }

        // Set the `_type` of the first object to the event
        params[0]._type = event;

        if (event in this.listeners) {
          this.invoke(this.listeners[event], slice.call(arguments, 1));
        }

        if ('*' in this.listeners) {
          this.invoke(this.listeners['*'], arguments);
        }
      };

      Observable.prototype.invoke = function (listeners, params) {
        for (var i = 0, len = listeners.length; i < len; i++) {
          listeners[i].apply(this, params);
        }
      };

      Utils.Observable = Observable;

      Utils.generateChars = function (length) {
        var chars = '';

        for (var i = 0; i < length; i++) {
          var randomChar = Math.floor(Math.random() * 36);
          chars += randomChar.toString(36);
        }

        return chars;
      };

      Utils.bind = function (func, context) {
        return function () {
          func.apply(context, arguments);
        };
      };

      Utils._convertData = function (data) {
        for (var originalKey in data) {
          var keys = originalKey.split('-');

          var dataLevel = data;

          if (keys.length === 1) {
            continue;
          }

          for (var k = 0; k < keys.length; k++) {
            var key = keys[k];

            // Lowercase the first letter
            // By default, dash-separated becomes camelCase
            key = key.substring(0, 1).toLowerCase() + key.substring(1);

            if (!(key in dataLevel)) {
              dataLevel[key] = {};
            }

            if (k == keys.length - 1) {
              dataLevel[key] = data[originalKey];
            }

            dataLevel = dataLevel[key];
          }

          delete data[originalKey];
        }

        return data;
      };

      Utils.hasScroll = function (index, el) {
        // Adapted from the function created by @ShadowScripter
        // and adapted by @BillBarry on the Stack Exchange Code Review website.
        // The original code can be found at
        // http://codereview.stackexchange.com/q/13338
        // and was designed to be used with the Sizzle selector engine.

        var $el = $(el);
        var overflowX = el.style.overflowX;
        var overflowY = el.style.overflowY;

        //Check both x and y declarations
        if (overflowX === overflowY && (overflowY === 'hidden' || overflowY === 'visible')) {
          return false;
        }

        if (overflowX === 'scroll' || overflowY === 'scroll') {
          return true;
        }

        return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth;
      };

      Utils.escapeMarkup = function (markup) {
        var replaceMap = {
          '\\': '&#92;',
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;',
          '/': '&#47;',
        };

        // Do not try to escape the markup if it's not a string
        if (typeof markup !== 'string') {
          return markup;
        }

        return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
          return replaceMap[match];
        });
      };

      // Cache objects in Utils.__cache instead of $.data (see #4346)
      Utils.__cache = {};

      var id = 0;
      Utils.GetUniqueElementId = function (element) {
        // Get a unique element Id. If element has no id,
        // creates a new unique number, stores it in the id
        // attribute and returns the new id with a prefix.
        // If an id already exists, it simply returns it with a prefix.

        var select2Id = element.getAttribute('data-select2-id');

        if (select2Id != null) {
          return select2Id;
        }

        // If element has id, use it.
        if (element.id) {
          select2Id = 'select2-data-' + element.id;
        } else {
          select2Id = 'select2-data-' + (++id).toString() + '-' + Utils.generateChars(4);
        }

        element.setAttribute('data-select2-id', select2Id);

        return select2Id;
      };

      Utils.StoreData = function (element, name, value) {
        // Stores an item in the cache for a specified element.
        // name is the cache key.
        var id = Utils.GetUniqueElementId(element);
        if (!Utils.__cache[id]) {
          Utils.__cache[id] = {};
        }

        Utils.__cache[id][name] = value;
      };

      Utils.GetData = function (element, name) {
        // Retrieves a value from the cache by its key (name)
        // name is optional. If no name specified, return
        // all cache items for the specified element.
        // and for a specified element.
        var id = Utils.GetUniqueElementId(element);
        if (name) {
          if (Utils.__cache[id]) {
            if (Utils.__cache[id][name] != null) {
              return Utils.__cache[id][name];
            }
            return $(element).data(name); // Fallback to HTML5 data attribs.
          }
          return $(element).data(name); // Fallback to HTML5 data attribs.
        } else {
          return Utils.__cache[id];
        }
      };

      Utils.RemoveData = function (element) {
        // Removes all cached items for a specified element.
        var id = Utils.GetUniqueElementId(element);
        if (Utils.__cache[id] != null) {
          delete Utils.__cache[id];
        }

        element.removeAttribute('data-select2-id');
      };

      Utils.copyNonInternalCssClasses = function (dest, src) {
        var classes;

        var destinationClasses = dest.getAttribute('class').trim().split(/\s+/);

        destinationClasses = destinationClasses.filter(function (clazz) {
          // Save all Select2 classes
          return clazz.indexOf('select2-') === 0;
        });

        var sourceClasses = src.getAttribute('class').trim().split(/\s+/);

        sourceClasses = sourceClasses.filter(function (clazz) {
          // Only copy non-Select2 classes
          return clazz.indexOf('select2-') !== 0;
        });

        var replacements = destinationClasses.concat(sourceClasses);

        dest.setAttribute('class', replacements.join(' '));
      };

      return Utils;
    });

    S2.define('select2/results', ['jquery', './utils'], function ($, Utils) {
      function Results($element, options, dataAdapter) {
        this.$element = $element;
        this.data = dataAdapter;
        this.options = options;

        Results.__super__.constructor.call(this);
      }

      Utils.Extend(Results, Utils.Observable);

      Results.prototype.render = function () {
        var $results = $('<ul class="select2-results__options" role="listbox"></ul>');

        if (this.options.get('multiple')) {
          $results.attr('aria-multiselectable', 'true');
        }

        this.$results = $results;

        return $results;
      };

      Results.prototype.clear = function () {
        this.$results.empty();
      };

      Results.prototype.displayMessage = function (params) {
        var escapeMarkup = this.options.get('escapeMarkup');

        this.clear();
        this.hideLoading();

        var $message = $(
          '<li role="alert" aria-live="assertive"' + ' class="select2-results__option"></li>'
        );

        var message = this.options.get('translations').get(params.message);

        $message.append(escapeMarkup(message(params.args)));

        $message[0].className += ' select2-results__message';

        this.$results.append($message);
      };

      Results.prototype.hideMessages = function () {
        this.$results.find('.select2-results__message').remove();
      };

      Results.prototype.append = function (data) {
        this.hideLoading();

        var $options = [];

        if (data.results == null || data.results.length === 0) {
          if (this.$results.children().length === 0) {
            this.trigger('results:message', {
              message: 'noResults',
            });
          }

          return;
        }

        data.results = this.sort(data.results);

        for (var d = 0; d < data.results.length; d++) {
          var item = data.results[d];

          var $option = this.option(item);

          $options.push($option);
        }

        this.$results.append($options);
      };

      Results.prototype.position = function ($results, $dropdown) {
        var $resultsContainer = $dropdown.find('.select2-results');
        $resultsContainer.append($results);
      };

      Results.prototype.sort = function (data) {
        var sorter = this.options.get('sorter');

        return sorter(data);
      };

      Results.prototype.highlightFirstItem = function () {
        var $options = this.$results.find('.select2-results__option--selectable');

        var $selected = $options.filter('.select2-results__option--selected');

        // Check if there are any selected options
        if ($selected.length > 0) {
          // If there are selected options, highlight the first
          $selected.first().trigger('mouseenter');
        } else {
          // If there are no selected options, highlight the first option
          // in the dropdown
          $options.first().trigger('mouseenter');
        }

        this.ensureHighlightVisible();
      };

      Results.prototype.setClasses = function () {
        var self = this;

        this.data.current(function (selected) {
          var selectedIds = selected.map(function (s) {
            return s.id.toString();
          });

          var $options = self.$results.find('.select2-results__option--selectable');

          $options.each(function () {
            var $option = $(this);

            var item = Utils.GetData(this, 'data');

            // id needs to be converted to a string when comparing
            var id = '' + item.id;

            if (
              (item.element != null && item.element.selected) ||
              (item.element == null && selectedIds.indexOf(id) > -1)
            ) {
              this.classList.add('select2-results__option--selected');
              $option.attr('aria-selected', 'true');
            } else {
              this.classList.remove('select2-results__option--selected');
              $option.attr('aria-selected', 'false');
            }
          });
        });
      };

      Results.prototype.showLoading = function (params) {
        this.hideLoading();

        var loadingMore = this.options.get('translations').get('searching');

        var loading = {
          disabled: true,
          loading: true,
          text: loadingMore(params),
        };
        var $loading = this.option(loading);
        $loading.className += ' loading-results';

        this.$results.prepend($loading);
      };

      Results.prototype.hideLoading = function () {
        this.$results.find('.loading-results').remove();
      };

      Results.prototype.option = function (data) {
        var option = document.createElement('li');
        option.classList.add('select2-results__option');
        option.classList.add('select2-results__option--selectable');

        var attrs = {
          role: 'option',
        };

        var matches =
          window.Element.prototype.matches ||
          window.Element.prototype.msMatchesSelector ||
          window.Element.prototype.webkitMatchesSelector;

        if (
          (data.element != null && matches.call(data.element, ':disabled')) ||
          (data.element == null && data.disabled)
        ) {
          attrs['aria-disabled'] = 'true';

          option.classList.remove('select2-results__option--selectable');
          option.classList.add('select2-results__option--disabled');
        }

        if (data.id == null) {
          option.classList.remove('select2-results__option--selectable');
        }

        if (data._resultId != null) {
          option.id = data._resultId;
        }

        if (data.title) {
          option.title = data.title;
        }

        if (data.children) {
          attrs.role = 'group';
          attrs['aria-label'] = data.text;

          option.classList.remove('select2-results__option--selectable');
          option.classList.add('select2-results__option--group');
        }

        for (var attr in attrs) {
          var val = attrs[attr];

          option.setAttribute(attr, val);
        }

        if (data.children) {
          var $option = $(option);

          var label = document.createElement('strong');
          label.className = 'select2-results__group';

          this.template(data, label);

          var $children = [];

          for (var c = 0; c < data.children.length; c++) {
            var child = data.children[c];

            var $child = this.option(child);

            $children.push($child);
          }

          var $childrenContainer = $('<ul></ul>', {
            class: 'select2-results__options select2-results__options--nested',
            role: 'none',
          });

          $childrenContainer.append($children);

          $option.append(label);
          $option.append($childrenContainer);
        } else {
          this.template(data, option);
        }

        Utils.StoreData(option, 'data', data);

        return option;
      };

      Results.prototype.bind = function (container, $container) {
        var self = this;

        var id = container.id + '-results';

        this.$results.attr('id', id);

        container.on('results:all', function (params) {
          self.clear();
          self.append(params.data);

          if (container.isOpen()) {
            self.setClasses();
            self.highlightFirstItem();
          }
        });

        container.on('results:append', function (params) {
          self.append(params.data);

          if (container.isOpen()) {
            self.setClasses();
          }
        });

        container.on('query', function (params) {
          self.hideMessages();
          self.showLoading(params);
        });

        container.on('select', function () {
          if (!container.isOpen()) {
            return;
          }

          self.setClasses();

          if (self.options.get('scrollAfterSelect')) {
            self.highlightFirstItem();
          }
        });

        container.on('unselect', function () {
          if (!container.isOpen()) {
            return;
          }

          self.setClasses();

          if (self.options.get('scrollAfterSelect')) {
            self.highlightFirstItem();
          }
        });

        container.on('open', function () {
          // When the dropdown is open, aria-expended="true"
          self.$results.attr('aria-expanded', 'true');
          self.$results.attr('aria-hidden', 'false');

          self.setClasses();
          self.ensureHighlightVisible();
        });

        container.on('close', function () {
          // When the dropdown is closed, aria-expended="false"
          self.$results.attr('aria-expanded', 'false');
          self.$results.attr('aria-hidden', 'true');
          self.$results.removeAttr('aria-activedescendant');
        });

        container.on('results:toggle', function () {
          var $highlighted = self.getHighlightedResults();

          if ($highlighted.length === 0) {
            return;
          }

          $highlighted.trigger('mouseup');
        });

        container.on('results:select', function () {
          var $highlighted = self.getHighlightedResults();

          if ($highlighted.length === 0) {
            return;
          }

          var data = Utils.GetData($highlighted[0], 'data');

          if ($highlighted.hasClass('select2-results__option--selected')) {
            self.trigger('close', {});
          } else {
            self.trigger('select', {
              data: data,
            });
          }
        });

        container.on('results:previous', function () {
          var $highlighted = self.getHighlightedResults();

          var $options = self.$results.find('.select2-results__option--selectable');

          var currentIndex = $options.index($highlighted);

          // If we are already at the top, don't move further
          // If no options, currentIndex will be -1
          if (currentIndex <= 0) {
            return;
          }

          var nextIndex = currentIndex - 1;

          // If none are highlighted, highlight the first
          if ($highlighted.length === 0) {
            nextIndex = 0;
          }

          var $next = $options.eq(nextIndex);

          $next.trigger('mouseenter');

          var currentOffset = self.$results.offset().top;
          var nextTop = $next.offset().top;
          var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextTop - currentOffset < 0) {
            self.$results.scrollTop(nextOffset);
          }
        });

        container.on('results:next', function () {
          var $highlighted = self.getHighlightedResults();

          var $options = self.$results.find('.select2-results__option--selectable');

          var currentIndex = $options.index($highlighted);

          var nextIndex = currentIndex + 1;

          // If we are at the last option, stay there
          if (nextIndex >= $options.length) {
            return;
          }

          var $next = $options.eq(nextIndex);

          $next.trigger('mouseenter');

          var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
          var nextBottom = $next.offset().top + $next.outerHeight(false);
          var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextBottom > currentOffset) {
            self.$results.scrollTop(nextOffset);
          }
        });

        container.on('results:focus', function (params) {
          params.element[0].classList.add('select2-results__option--highlighted');
          params.element[0].setAttribute('aria-selected', 'true');
        });

        container.on('results:message', function (params) {
          self.displayMessage(params);
        });

        if ($.fn.mousewheel) {
          this.$results.on('mousewheel', function (e) {
            var top = self.$results.scrollTop();

            var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

            if (isAtTop) {
              self.$results.scrollTop(0);

              e.preventDefault();
              e.stopPropagation();
            } else if (isAtBottom) {
              self.$results.scrollTop(self.$results.get(0).scrollHeight - self.$results.height());

              e.preventDefault();
              e.stopPropagation();
            }
          });
        }

        this.$results.on('mouseup', '.select2-results__option--selectable', function (evt) {
          var $this = $(this);

          var data = Utils.GetData(this, 'data');

          if ($this.hasClass('select2-results__option--selected')) {
            if (self.options.get('multiple')) {
              self.trigger('unselect', {
                originalEvent: evt,
                data: data,
              });
            } else {
              self.trigger('close', {});
            }

            return;
          }

          self.trigger('select', {
            originalEvent: evt,
            data: data,
          });
        });

        this.$results.on('mouseenter', '.select2-results__option--selectable', function (evt) {
          var data = Utils.GetData(this, 'data');

          self
            .getHighlightedResults()
            .removeClass('select2-results__option--highlighted')
            .attr('aria-selected', 'false');

          self.trigger('results:focus', {
            data: data,
            element: $(this),
          });
        });
      };

      Results.prototype.getHighlightedResults = function () {
        var $highlighted = this.$results.find('.select2-results__option--highlighted');

        return $highlighted;
      };

      Results.prototype.destroy = function () {
        this.$results.remove();
      };

      Results.prototype.ensureHighlightVisible = function () {
        var $highlighted = this.getHighlightedResults();

        if ($highlighted.length === 0) {
          return;
        }

        var $options = this.$results.find('.select2-results__option--selectable');

        var currentIndex = $options.index($highlighted);

        var currentOffset = this.$results.offset().top;
        var nextTop = $highlighted.offset().top;
        var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

        var offsetDelta = nextTop - currentOffset;
        nextOffset -= $highlighted.outerHeight(false) * 2;

        if (currentIndex <= 2) {
          this.$results.scrollTop(0);
        } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
          this.$results.scrollTop(nextOffset);
        }
      };

      Results.prototype.template = function (result, container) {
        var template = this.options.get('templateResult');
        var escapeMarkup = this.options.get('escapeMarkup');

        var content = template(result, container);

        if (content == null) {
          container.style.display = 'none';
        } else if (typeof content === 'string') {
          container.innerHTML = escapeMarkup(content);
        } else {
          $(container).append(content);
        }
      };

      return Results;
    });

    S2.define('select2/keys', [], function () {
      var KEYS = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        DELETE: 46,
      };

      return KEYS;
    });

    S2.define(
      'select2/selection/base',
      ['jquery', '../utils', '../keys'],
      function ($, Utils, KEYS) {
        function BaseSelection($element, options) {
          this.$element = $element;
          this.options = options;

          BaseSelection.__super__.constructor.call(this);
        }

        Utils.Extend(BaseSelection, Utils.Observable);

        BaseSelection.prototype.render = function () {
          var $selection = $(
            '<span class="select2-selection" role="combobox" ' +
              ' aria-haspopup="true" aria-expanded="false">' +
              '</span>'
          );

          this._tabindex = 0;

          if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {
            this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');
          } else if (this.$element.attr('tabindex') != null) {
            this._tabindex = this.$element.attr('tabindex');
          }

          $selection.attr('title', this.$element.attr('title'));
          $selection.attr('tabindex', this._tabindex);
          $selection.attr('aria-disabled', 'false');

          this.$selection = $selection;

          return $selection;
        };

        BaseSelection.prototype.bind = function (container, $container) {
          var self = this;

          var resultsId = container.id + '-results';

          this.container = container;

          this.$selection.on('focus', function (evt) {
            self.trigger('focus', evt);
          });

          this.$selection.on('blur', function (evt) {
            self._handleBlur(evt);
          });

          this.$selection.on('keydown', function (evt) {
            self.trigger('keypress', evt);

            if (evt.which === KEYS.SPACE) {
              evt.preventDefault();
            }
          });

          container.on('results:focus', function (params) {
            self.$selection.attr('aria-activedescendant', params.data._resultId);
          });

          container.on('selection:update', function (params) {
            self.update(params.data);
          });

          container.on('open', function () {
            // When the dropdown is open, aria-expanded="true"
            self.$selection.attr('aria-expanded', 'true');
            self.$selection.attr('aria-owns', resultsId);

            self._attachCloseHandler(container);
          });

          container.on('close', function () {
            // When the dropdown is closed, aria-expanded="false"
            self.$selection.attr('aria-expanded', 'false');
            self.$selection.removeAttr('aria-activedescendant');
            self.$selection.removeAttr('aria-owns');

            self.$selection.trigger('focus');

            self._detachCloseHandler(container);
          });

          container.on('enable', function () {
            self.$selection.attr('tabindex', self._tabindex);
            self.$selection.attr('aria-disabled', 'false');
          });

          container.on('disable', function () {
            self.$selection.attr('tabindex', '-1');
            self.$selection.attr('aria-disabled', 'true');
          });
        };

        BaseSelection.prototype._handleBlur = function (evt) {
          var self = this;

          // This needs to be delayed as the active element is the body when the tab
          // key is pressed, possibly along with others.
          window.setTimeout(function () {
            // Don't trigger `blur` if the focus is still in the selection
            if (
              document.activeElement == self.$selection[0] ||
              $.contains(self.$selection[0], document.activeElement)
            ) {
              return;
            }

            self.trigger('blur', evt);
          }, 1);
        };

        BaseSelection.prototype._attachCloseHandler = function (container) {
          $(document.body).on('mousedown.select2.' + container.id, function (e) {
            var $target = $(e.target);

            var $select = $target.closest('.select2');

            var $all = $('.select2.select2-container--open');

            $all.each(function () {
              if (this == $select[0]) {
                return;
              }

              var $element = Utils.GetData(this, 'element');

              $element.select2('close');
            });
          });
        };

        BaseSelection.prototype._detachCloseHandler = function (container) {
          $(document.body).off('mousedown.select2.' + container.id);
        };

        BaseSelection.prototype.position = function ($selection, $container) {
          var $selectionContainer = $container.find('.selection');
          $selectionContainer.append($selection);
        };

        BaseSelection.prototype.destroy = function () {
          this._detachCloseHandler(this.container);
        };

        BaseSelection.prototype.update = function (data) {
          throw new Error('The `update` method must be defined in child classes.');
        };

        /**
         * Helper method to abstract the "enabled" (not "disabled") state of this
         * object.
         *
         * @return {true} if the instance is not disabled.
         * @return {false} if the instance is disabled.
         */
        BaseSelection.prototype.isEnabled = function () {
          return !this.isDisabled();
        };

        /**
         * Helper method to abstract the "disabled" state of this object.
         *
         * @return {true} if the disabled option is true.
         * @return {false} if the disabled option is false.
         */
        BaseSelection.prototype.isDisabled = function () {
          return this.options.get('disabled');
        };

        return BaseSelection;
      }
    );

    S2.define(
      'select2/selection/single',
      ['jquery', './base', '../utils', '../keys'],
      function ($, BaseSelection, Utils, KEYS) {
        function SingleSelection() {
          SingleSelection.__super__.constructor.apply(this, arguments);
        }

        Utils.Extend(SingleSelection, BaseSelection);

        SingleSelection.prototype.render = function () {
          var $selection = SingleSelection.__super__.render.call(this);

          $selection[0].classList.add('select2-selection--single');

          $selection.html(
            '<span class="select2-selection__rendered"></span>' +
              '<span class="select2-selection__arrow" role="presentation">' +
              '<b role="presentation"></b>' +
              '</span>'
          );

          return $selection;
        };

        SingleSelection.prototype.bind = function (container, $container) {
          var self = this;

          SingleSelection.__super__.bind.apply(this, arguments);

          var id = container.id + '-container';

          this.$selection
            .find('.select2-selection__rendered')
            .attr('id', id)
            .attr('role', 'textbox')
            .attr('aria-readonly', 'true');
          this.$selection.attr('aria-labelledby', id);
          this.$selection.attr('aria-controls', id);

          this.$selection.on('mousedown', function (evt) {
            // Only respond to left clicks
            if (evt.which !== 1) {
              return;
            }

            self.trigger('toggle', {
              originalEvent: evt,
            });
          });

          this.$selection.on('focus', function (evt) {
            // User focuses on the container
          });

          this.$selection.on('blur', function (evt) {
            // User exits the container
          });

          container.on('focus', function (evt) {
            if (!container.isOpen()) {
              self.$selection.trigger('focus');
            }
          });
        };

        SingleSelection.prototype.clear = function () {
          var $rendered = this.$selection.find('.select2-selection__rendered');
          $rendered.empty();
          $rendered.removeAttr('title'); // clear tooltip on empty
        };

        SingleSelection.prototype.display = function (data, container) {
          var template = this.options.get('templateSelection');
          var escapeMarkup = this.options.get('escapeMarkup');

          return escapeMarkup(template(data, container));
        };

        SingleSelection.prototype.selectionContainer = function () {
          return $('<span></span>');
        };

        SingleSelection.prototype.update = function (data) {
          if (data.length === 0) {
            this.clear();
            return;
          }

          var selection = data[0];

          var $rendered = this.$selection.find('.select2-selection__rendered');
          var formatted = this.display(selection, $rendered);

          $rendered.empty().append(formatted);

          var title = selection.title || selection.text;

          if (title) {
            $rendered.attr('title', title);
          } else {
            $rendered.removeAttr('title');
          }
        };

        return SingleSelection;
      }
    );

    S2.define(
      'select2/selection/multiple',
      ['jquery', './base', '../utils'],
      function ($, BaseSelection, Utils) {
        function MultipleSelection($element, options) {
          MultipleSelection.__super__.constructor.apply(this, arguments);
        }

        Utils.Extend(MultipleSelection, BaseSelection);

        MultipleSelection.prototype.render = function () {
          var $selection = MultipleSelection.__super__.render.call(this);

          $selection[0].classList.add('select2-selection--multiple');

          $selection.html('<ul class="select2-selection__rendered"></ul>');

          return $selection;
        };

        MultipleSelection.prototype.bind = function (container, $container) {
          var self = this;

          MultipleSelection.__super__.bind.apply(this, arguments);

          var id = container.id + '-container';
          this.$selection.find('.select2-selection__rendered').attr('id', id);

          this.$selection.on('click', function (evt) {
            self.trigger('toggle', {
              originalEvent: evt,
            });
          });

          this.$selection.on('click', '.select2-selection__choice__remove', function (evt) {
            // Ignore the event if it is disabled
            if (self.isDisabled()) {
              return;
            }

            var $remove = $(this);
            var $selection = $remove.parent();

            var data = Utils.GetData($selection[0], 'data');

            self.trigger('unselect', {
              originalEvent: evt,
              data: data,
            });
          });

          this.$selection.on('keydown', '.select2-selection__choice__remove', function (evt) {
            // Ignore the event if it is disabled
            if (self.isDisabled()) {
              return;
            }

            evt.stopPropagation();
          });
        };

        MultipleSelection.prototype.clear = function () {
          var $rendered = this.$selection.find('.select2-selection__rendered');
          $rendered.empty();
          $rendered.removeAttr('title');
        };

        MultipleSelection.prototype.display = function (data, container) {
          var template = this.options.get('templateSelection');
          var escapeMarkup = this.options.get('escapeMarkup');

          return escapeMarkup(template(data, container));
        };

        MultipleSelection.prototype.selectionContainer = function () {
          var $container = $(
            '<li class="select2-selection__choice">' +
              '<button type="button" class="select2-selection__choice__remove" ' +
              'tabindex="-1">' +
              '<span aria-hidden="true">&times;</span>' +
              '</button>' +
              '<span class="select2-selection__choice__display"></span>' +
              '</li>'
          );

          return $container;
        };

        MultipleSelection.prototype.update = function (data) {
          this.clear();

          if (data.length === 0) {
            return;
          }

          var $selections = [];

          var selectionIdPrefix =
            this.$selection.find('.select2-selection__rendered').attr('id') + '-choice-';

          for (var d = 0; d < data.length; d++) {
            var selection = data[d];

            var $selection = this.selectionContainer();
            var formatted = this.display(selection, $selection);

            var selectionId = selectionIdPrefix + Utils.generateChars(4) + '-';

            if (selection.id) {
              selectionId += selection.id;
            } else {
              selectionId += Utils.generateChars(4);
            }

            $selection
              .find('.select2-selection__choice__display')
              .append(formatted)
              .attr('id', selectionId);

            var title = selection.title || selection.text;

            if (title) {
              $selection.attr('title', title);
            }

            var removeItem = this.options.get('translations').get('removeItem');

            var $remove = $selection.find('.select2-selection__choice__remove');

            $remove.attr('title', removeItem());
            $remove.attr('aria-label', removeItem());
            $remove.attr('aria-describedby', selectionId);

            Utils.StoreData($selection[0], 'data', selection);

            $selections.push($selection);
          }

          var $rendered = this.$selection.find('.select2-selection__rendered');

          $rendered.append($selections);
        };

        return MultipleSelection;
      }
    );

    S2.define('select2/selection/placeholder', [], function () {
      function Placeholder(decorated, $element, options) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

        decorated.call(this, $element, options);
      }

      Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder,
          };
        }

        return placeholder;
      };

      Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
        var $placeholder = this.selectionContainer();

        $placeholder.html(this.display(placeholder));
        $placeholder[0].classList.add('select2-selection__placeholder');
        $placeholder[0].classList.remove('select2-selection__choice');

        var placeholderTitle = placeholder.title || placeholder.text || $placeholder.text();

        this.$selection.find('.select2-selection__rendered').attr('title', placeholderTitle);

        return $placeholder;
      };

      Placeholder.prototype.update = function (decorated, data) {
        var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;
        var multipleSelections = data.length > 1;

        if (multipleSelections || singlePlaceholder) {
          return decorated.call(this, data);
        }

        this.clear();

        var $placeholder = this.createPlaceholder(this.placeholder);

        this.$selection.find('.select2-selection__rendered').append($placeholder);
      };

      return Placeholder;
    });

    S2.define(
      'select2/selection/allowClear',
      ['jquery', '../keys', '../utils'],
      function ($, KEYS, Utils) {
        function AllowClear() {}

        AllowClear.prototype.bind = function (decorated, container, $container) {
          var self = this;

          decorated.call(this, container, $container);

          if (this.placeholder == null) {
            if (this.options.get('debug') && window.console && console.error) {
              console.error(
                'Select2: The `allowClear` option should be used in combination ' +
                  'with the `placeholder` option.'
              );
            }
          }

          this.$selection.on('mousedown', '.select2-selection__clear', function (evt) {
            self._handleClear(evt);
          });

          container.on('keypress', function (evt) {
            self._handleKeyboardClear(evt, container);
          });
        };

        AllowClear.prototype._handleClear = function (_, evt) {
          // Ignore the event if it is disabled
          if (this.isDisabled()) {
            return;
          }

          var $clear = this.$selection.find('.select2-selection__clear');

          // Ignore the event if nothing has been selected
          if ($clear.length === 0) {
            return;
          }

          evt.stopPropagation();

          var data = Utils.GetData($clear[0], 'data');

          var previousVal = this.$element.val();
          this.$element.val(this.placeholder.id);

          var unselectData = {
            data: data,
          };
          this.trigger('clear', unselectData);
          if (unselectData.prevented) {
            this.$element.val(previousVal);
            return;
          }

          for (var d = 0; d < data.length; d++) {
            unselectData = {
              data: data[d],
            };

            // Trigger the `unselect` event, so people can prevent it from being
            // cleared.
            this.trigger('unselect', unselectData);

            // If the event was prevented, don't clear it out.
            if (unselectData.prevented) {
              this.$element.val(previousVal);
              return;
            }
          }

          this.$element.trigger('input').trigger('change');

          this.trigger('toggle', {});
        };

        AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
          if (container.isOpen()) {
            return;
          }

          if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
            this._handleClear(evt);
          }
        };

        AllowClear.prototype.update = function (decorated, data) {
          decorated.call(this, data);

          this.$selection.find('.select2-selection__clear').remove();
          this.$selection[0].classList.remove('select2-selection--clearable');

          if (
            this.$selection.find('.select2-selection__placeholder').length > 0 ||
            data.length === 0
          ) {
            return;
          }

          var selectionId = this.$selection.find('.select2-selection__rendered').attr('id');

          var removeAll = this.options.get('translations').get('removeAllItems');

          var $remove = $(
            '<button type="button" class="select2-selection__clear" tabindex="-1">' +
              '<span aria-hidden="true">&times;</span>' +
              '</button>'
          );
          $remove.attr('title', removeAll());
          $remove.attr('aria-label', removeAll());
          $remove.attr('aria-describedby', selectionId);
          Utils.StoreData($remove[0], 'data', data);

          this.$selection.prepend($remove);
          this.$selection[0].classList.add('select2-selection--clearable');
        };

        return AllowClear;
      }
    );

    S2.define(
      'select2/selection/search',
      ['jquery', '../utils', '../keys'],
      function ($, Utils, KEYS) {
        function Search(decorated, $element, options) {
          decorated.call(this, $element, options);
        }

        Search.prototype.render = function (decorated) {
          var searchLabel = this.options.get('translations').get('search');
          var $search = $(
            '<span class="select2-search select2-search--inline">' +
              '<textarea class="select2-search__field"' +
              ' type="search" tabindex="-1"' +
              ' autocorrect="off" autocapitalize="none"' +
              ' spellcheck="false" role="searchbox" aria-autocomplete="list" >' +
              '</textarea>' +
              '</span>'
          );

          this.$searchContainer = $search;
          this.$search = $search.find('textarea');

          this.$search.prop('autocomplete', this.options.get('autocomplete'));
          this.$search.attr('aria-label', searchLabel());

          var $rendered = decorated.call(this);

          this._transferTabIndex();
          $rendered.append(this.$searchContainer);

          return $rendered;
        };

        Search.prototype.bind = function (decorated, container, $container) {
          var self = this;

          var resultsId = container.id + '-results';
          var selectionId = container.id + '-container';

          decorated.call(this, container, $container);

          self.$search.attr('aria-describedby', selectionId);

          container.on('open', function () {
            self.$search.attr('aria-controls', resultsId);
            self.$search.trigger('focus');
          });

          container.on('close', function () {
            self.$search.val('');
            self.resizeSearch();
            self.$search.removeAttr('aria-controls');
            self.$search.removeAttr('aria-activedescendant');
            self.$search.trigger('focus');
          });

          container.on('enable', function () {
            self.$search.prop('disabled', false);

            self._transferTabIndex();
          });

          container.on('disable', function () {
            self.$search.prop('disabled', true);
          });

          container.on('focus', function (evt) {
            self.$search.trigger('focus');
          });

          container.on('results:focus', function (params) {
            if (params.data._resultId) {
              self.$search.attr('aria-activedescendant', params.data._resultId);
            } else {
              self.$search.removeAttr('aria-activedescendant');
            }
          });

          this.$selection.on('focusin', '.select2-search--inline', function (evt) {
            self.trigger('focus', evt);
          });

          this.$selection.on('focusout', '.select2-search--inline', function (evt) {
            self._handleBlur(evt);
          });

          this.$selection.on('keydown', '.select2-search--inline', function (evt) {
            evt.stopPropagation();

            self.trigger('keypress', evt);

            self._keyUpPrevented = evt.isDefaultPrevented();

            var key = evt.which;

            if (key === KEYS.BACKSPACE && self.$search.val() === '') {
              var $previousChoice = self.$selection.find('.select2-selection__choice').last();

              if ($previousChoice.length > 0) {
                var item = Utils.GetData($previousChoice[0], 'data');

                self.searchRemoveChoice(item);

                evt.preventDefault();
              }
            }
          });

          this.$selection.on('click', '.select2-search--inline', function (evt) {
            if (self.$search.val()) {
              evt.stopPropagation();
            }
          });

          // Try to detect the IE version should the `documentMode` property that
          // is stored on the document. This is only implemented in IE and is
          // slightly cleaner than doing a user agent check.
          // This property is not available in Edge, but Edge also doesn't have
          // this bug.
          var msie = document.documentMode;
          var disableInputEvents = msie && msie <= 11;

          // Workaround for browsers which do not support the `input` event
          // This will prevent double-triggering of events for browsers which support
          // both the `keyup` and `input` events.
          this.$selection.on('input.searchcheck', '.select2-search--inline', function (evt) {
            // IE will trigger the `input` event when a placeholder is used on a
            // search box. To get around this issue, we are forced to ignore all
            // `input` events in IE and keep using `keyup`.
            if (disableInputEvents) {
              self.$selection.off('input.search input.searchcheck');
              return;
            }

            // Unbind the duplicated `keyup` event
            self.$selection.off('keyup.search');
          });

          this.$selection.on(
            'keyup.search input.search',
            '.select2-search--inline',
            function (evt) {
              // IE will trigger the `input` event when a placeholder is used on a
              // search box. To get around this issue, we are forced to ignore all
              // `input` events in IE and keep using `keyup`.
              if (disableInputEvents && evt.type === 'input') {
                self.$selection.off('input.search input.searchcheck');
                return;
              }

              var key = evt.which;

              // We can freely ignore events from modifier keys
              if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
                return;
              }

              // Tabbing will be handled during the `keydown` phase
              if (key == KEYS.TAB) {
                return;
              }

              self.handleSearch(evt);
            }
          );
        };

        /**
         * This method will transfer the tabindex attribute from the rendered
         * selection to the search box. This allows for the search box to be used as
         * the primary focus instead of the selection container.
         *
         * @private
         */
        Search.prototype._transferTabIndex = function (decorated) {
          this.$search.attr('tabindex', this.$selection.attr('tabindex'));
          this.$selection.attr('tabindex', '-1');
        };

        Search.prototype.createPlaceholder = function (decorated, placeholder) {
          this.$search.attr('placeholder', placeholder.text);
        };

        Search.prototype.update = function (decorated, data) {
          var searchHadFocus = this.$search[0] == document.activeElement;

          this.$search.attr('placeholder', '');

          decorated.call(this, data);

          this.resizeSearch();
          if (searchHadFocus) {
            this.$search.trigger('focus');
          }
        };

        Search.prototype.handleSearch = function () {
          this.resizeSearch();

          if (!this._keyUpPrevented) {
            var input = this.$search.val();

            this.trigger('query', {
              term: input,
            });
          }

          this._keyUpPrevented = false;
        };

        Search.prototype.searchRemoveChoice = function (decorated, item) {
          this.trigger('unselect', {
            data: item,
          });

          this.$search.val(item.text);
          this.handleSearch();
        };

        Search.prototype.resizeSearch = function () {
          this.$search.css('width', '25px');

          var width = '100%';

          if (this.$search.attr('placeholder') === '') {
            var minimumWidth = this.$search.val().length + 1;

            width = minimumWidth * 0.75 + 'em';
          }

          this.$search.css('width', width);
        };

        return Search;
      }
    );

    S2.define('select2/selection/selectionCss', ['../utils'], function (Utils) {
      function SelectionCSS() {}

      SelectionCSS.prototype.render = function (decorated) {
        var $selection = decorated.call(this);

        var selectionCssClass = this.options.get('selectionCssClass') || '';

        if (selectionCssClass.indexOf(':all:') !== -1) {
          selectionCssClass = selectionCssClass.replace(':all:', '');

          Utils.copyNonInternalCssClasses($selection[0], this.$element[0]);
        }

        $selection.addClass(selectionCssClass);

        return $selection;
      };

      return SelectionCSS;
    });

    S2.define('select2/selection/eventRelay', ['jquery'], function ($) {
      function EventRelay() {}

      EventRelay.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var relayEvents = [
          'open',
          'opening',
          'close',
          'closing',
          'select',
          'selecting',
          'unselect',
          'unselecting',
          'clear',
          'clearing',
        ];

        var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting', 'clearing'];

        decorated.call(this, container, $container);

        container.on('*', function (name, params) {
          // Ignore events that should not be relayed
          if (relayEvents.indexOf(name) === -1) {
            return;
          }

          // The parameters should always be an object
          params = params || {};

          // Generate the jQuery event for the Select2 event
          var evt = $.Event('select2:' + name, {
            params: params,
          });

          self.$element.trigger(evt);

          // Only handle preventable events if it was one
          if (preventableEvents.indexOf(name) === -1) {
            return;
          }

          params.prevented = evt.isDefaultPrevented();
        });
      };

      return EventRelay;
    });

    S2.define('select2/translation', ['jquery', 'require'], function ($, require) {
      function Translation(dict) {
        this.dict = dict || {};
      }

      Translation.prototype.all = function () {
        return this.dict;
      };

      Translation.prototype.get = function (key) {
        return this.dict[key];
      };

      Translation.prototype.extend = function (translation) {
        this.dict = $.extend({}, translation.all(), this.dict);
      };

      // Static functions

      Translation._cache = {};

      Translation.loadPath = function (path) {
        if (!(path in Translation._cache)) {
          var translations = require(path);

          Translation._cache[path] = translations;
        }

        return new Translation(Translation._cache[path]);
      };

      return Translation;
    });

    S2.define('select2/diacritics', [], function () {
      var diacritics = {
        '\u24B6': 'A',
        '\uFF21': 'A',
        '\u00C0': 'A',
        '\u00C1': 'A',
        '\u00C2': 'A',
        '\u1EA6': 'A',
        '\u1EA4': 'A',
        '\u1EAA': 'A',
        '\u1EA8': 'A',
        '\u00C3': 'A',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u1EB0': 'A',
        '\u1EAE': 'A',
        '\u1EB4': 'A',
        '\u1EB2': 'A',
        '\u0226': 'A',
        '\u01E0': 'A',
        '\u00C4': 'A',
        '\u01DE': 'A',
        '\u1EA2': 'A',
        '\u00C5': 'A',
        '\u01FA': 'A',
        '\u01CD': 'A',
        '\u0200': 'A',
        '\u0202': 'A',
        '\u1EA0': 'A',
        '\u1EAC': 'A',
        '\u1EB6': 'A',
        '\u1E00': 'A',
        '\u0104': 'A',
        '\u023A': 'A',
        '\u2C6F': 'A',
        '\uA732': 'AA',
        '\u00C6': 'AE',
        '\u01FC': 'AE',
        '\u01E2': 'AE',
        '\uA734': 'AO',
        '\uA736': 'AU',
        '\uA738': 'AV',
        '\uA73A': 'AV',
        '\uA73C': 'AY',
        '\u24B7': 'B',
        '\uFF22': 'B',
        '\u1E02': 'B',
        '\u1E04': 'B',
        '\u1E06': 'B',
        '\u0243': 'B',
        '\u0182': 'B',
        '\u0181': 'B',
        '\u24B8': 'C',
        '\uFF23': 'C',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u00C7': 'C',
        '\u1E08': 'C',
        '\u0187': 'C',
        '\u023B': 'C',
        '\uA73E': 'C',
        '\u24B9': 'D',
        '\uFF24': 'D',
        '\u1E0A': 'D',
        '\u010E': 'D',
        '\u1E0C': 'D',
        '\u1E10': 'D',
        '\u1E12': 'D',
        '\u1E0E': 'D',
        '\u0110': 'D',
        '\u018B': 'D',
        '\u018A': 'D',
        '\u0189': 'D',
        '\uA779': 'D',
        '\u01F1': 'DZ',
        '\u01C4': 'DZ',
        '\u01F2': 'Dz',
        '\u01C5': 'Dz',
        '\u24BA': 'E',
        '\uFF25': 'E',
        '\u00C8': 'E',
        '\u00C9': 'E',
        '\u00CA': 'E',
        '\u1EC0': 'E',
        '\u1EBE': 'E',
        '\u1EC4': 'E',
        '\u1EC2': 'E',
        '\u1EBC': 'E',
        '\u0112': 'E',
        '\u1E14': 'E',
        '\u1E16': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u00CB': 'E',
        '\u1EBA': 'E',
        '\u011A': 'E',
        '\u0204': 'E',
        '\u0206': 'E',
        '\u1EB8': 'E',
        '\u1EC6': 'E',
        '\u0228': 'E',
        '\u1E1C': 'E',
        '\u0118': 'E',
        '\u1E18': 'E',
        '\u1E1A': 'E',
        '\u0190': 'E',
        '\u018E': 'E',
        '\u24BB': 'F',
        '\uFF26': 'F',
        '\u1E1E': 'F',
        '\u0191': 'F',
        '\uA77B': 'F',
        '\u24BC': 'G',
        '\uFF27': 'G',
        '\u01F4': 'G',
        '\u011C': 'G',
        '\u1E20': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u01E6': 'G',
        '\u0122': 'G',
        '\u01E4': 'G',
        '\u0193': 'G',
        '\uA7A0': 'G',
        '\uA77D': 'G',
        '\uA77E': 'G',
        '\u24BD': 'H',
        '\uFF28': 'H',
        '\u0124': 'H',
        '\u1E22': 'H',
        '\u1E26': 'H',
        '\u021E': 'H',
        '\u1E24': 'H',
        '\u1E28': 'H',
        '\u1E2A': 'H',
        '\u0126': 'H',
        '\u2C67': 'H',
        '\u2C75': 'H',
        '\uA78D': 'H',
        '\u24BE': 'I',
        '\uFF29': 'I',
        '\u00CC': 'I',
        '\u00CD': 'I',
        '\u00CE': 'I',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u0130': 'I',
        '\u00CF': 'I',
        '\u1E2E': 'I',
        '\u1EC8': 'I',
        '\u01CF': 'I',
        '\u0208': 'I',
        '\u020A': 'I',
        '\u1ECA': 'I',
        '\u012E': 'I',
        '\u1E2C': 'I',
        '\u0197': 'I',
        '\u24BF': 'J',
        '\uFF2A': 'J',
        '\u0134': 'J',
        '\u0248': 'J',
        '\u24C0': 'K',
        '\uFF2B': 'K',
        '\u1E30': 'K',
        '\u01E8': 'K',
        '\u1E32': 'K',
        '\u0136': 'K',
        '\u1E34': 'K',
        '\u0198': 'K',
        '\u2C69': 'K',
        '\uA740': 'K',
        '\uA742': 'K',
        '\uA744': 'K',
        '\uA7A2': 'K',
        '\u24C1': 'L',
        '\uFF2C': 'L',
        '\u013F': 'L',
        '\u0139': 'L',
        '\u013D': 'L',
        '\u1E36': 'L',
        '\u1E38': 'L',
        '\u013B': 'L',
        '\u1E3C': 'L',
        '\u1E3A': 'L',
        '\u0141': 'L',
        '\u023D': 'L',
        '\u2C62': 'L',
        '\u2C60': 'L',
        '\uA748': 'L',
        '\uA746': 'L',
        '\uA780': 'L',
        '\u01C7': 'LJ',
        '\u01C8': 'Lj',
        '\u24C2': 'M',
        '\uFF2D': 'M',
        '\u1E3E': 'M',
        '\u1E40': 'M',
        '\u1E42': 'M',
        '\u2C6E': 'M',
        '\u019C': 'M',
        '\u24C3': 'N',
        '\uFF2E': 'N',
        '\u01F8': 'N',
        '\u0143': 'N',
        '\u00D1': 'N',
        '\u1E44': 'N',
        '\u0147': 'N',
        '\u1E46': 'N',
        '\u0145': 'N',
        '\u1E4A': 'N',
        '\u1E48': 'N',
        '\u0220': 'N',
        '\u019D': 'N',
        '\uA790': 'N',
        '\uA7A4': 'N',
        '\u01CA': 'NJ',
        '\u01CB': 'Nj',
        '\u24C4': 'O',
        '\uFF2F': 'O',
        '\u00D2': 'O',
        '\u00D3': 'O',
        '\u00D4': 'O',
        '\u1ED2': 'O',
        '\u1ED0': 'O',
        '\u1ED6': 'O',
        '\u1ED4': 'O',
        '\u00D5': 'O',
        '\u1E4C': 'O',
        '\u022C': 'O',
        '\u1E4E': 'O',
        '\u014C': 'O',
        '\u1E50': 'O',
        '\u1E52': 'O',
        '\u014E': 'O',
        '\u022E': 'O',
        '\u0230': 'O',
        '\u00D6': 'O',
        '\u022A': 'O',
        '\u1ECE': 'O',
        '\u0150': 'O',
        '\u01D1': 'O',
        '\u020C': 'O',
        '\u020E': 'O',
        '\u01A0': 'O',
        '\u1EDC': 'O',
        '\u1EDA': 'O',
        '\u1EE0': 'O',
        '\u1EDE': 'O',
        '\u1EE2': 'O',
        '\u1ECC': 'O',
        '\u1ED8': 'O',
        '\u01EA': 'O',
        '\u01EC': 'O',
        '\u00D8': 'O',
        '\u01FE': 'O',
        '\u0186': 'O',
        '\u019F': 'O',
        '\uA74A': 'O',
        '\uA74C': 'O',
        '\u0152': 'OE',
        '\u01A2': 'OI',
        '\uA74E': 'OO',
        '\u0222': 'OU',
        '\u24C5': 'P',
        '\uFF30': 'P',
        '\u1E54': 'P',
        '\u1E56': 'P',
        '\u01A4': 'P',
        '\u2C63': 'P',
        '\uA750': 'P',
        '\uA752': 'P',
        '\uA754': 'P',
        '\u24C6': 'Q',
        '\uFF31': 'Q',
        '\uA756': 'Q',
        '\uA758': 'Q',
        '\u024A': 'Q',
        '\u24C7': 'R',
        '\uFF32': 'R',
        '\u0154': 'R',
        '\u1E58': 'R',
        '\u0158': 'R',
        '\u0210': 'R',
        '\u0212': 'R',
        '\u1E5A': 'R',
        '\u1E5C': 'R',
        '\u0156': 'R',
        '\u1E5E': 'R',
        '\u024C': 'R',
        '\u2C64': 'R',
        '\uA75A': 'R',
        '\uA7A6': 'R',
        '\uA782': 'R',
        '\u24C8': 'S',
        '\uFF33': 'S',
        '\u1E9E': 'S',
        '\u015A': 'S',
        '\u1E64': 'S',
        '\u015C': 'S',
        '\u1E60': 'S',
        '\u0160': 'S',
        '\u1E66': 'S',
        '\u1E62': 'S',
        '\u1E68': 'S',
        '\u0218': 'S',
        '\u015E': 'S',
        '\u2C7E': 'S',
        '\uA7A8': 'S',
        '\uA784': 'S',
        '\u24C9': 'T',
        '\uFF34': 'T',
        '\u1E6A': 'T',
        '\u0164': 'T',
        '\u1E6C': 'T',
        '\u021A': 'T',
        '\u0162': 'T',
        '\u1E70': 'T',
        '\u1E6E': 'T',
        '\u0166': 'T',
        '\u01AC': 'T',
        '\u01AE': 'T',
        '\u023E': 'T',
        '\uA786': 'T',
        '\uA728': 'TZ',
        '\u24CA': 'U',
        '\uFF35': 'U',
        '\u00D9': 'U',
        '\u00DA': 'U',
        '\u00DB': 'U',
        '\u0168': 'U',
        '\u1E78': 'U',
        '\u016A': 'U',
        '\u1E7A': 'U',
        '\u016C': 'U',
        '\u00DC': 'U',
        '\u01DB': 'U',
        '\u01D7': 'U',
        '\u01D5': 'U',
        '\u01D9': 'U',
        '\u1EE6': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u01D3': 'U',
        '\u0214': 'U',
        '\u0216': 'U',
        '\u01AF': 'U',
        '\u1EEA': 'U',
        '\u1EE8': 'U',
        '\u1EEE': 'U',
        '\u1EEC': 'U',
        '\u1EF0': 'U',
        '\u1EE4': 'U',
        '\u1E72': 'U',
        '\u0172': 'U',
        '\u1E76': 'U',
        '\u1E74': 'U',
        '\u0244': 'U',
        '\u24CB': 'V',
        '\uFF36': 'V',
        '\u1E7C': 'V',
        '\u1E7E': 'V',
        '\u01B2': 'V',
        '\uA75E': 'V',
        '\u0245': 'V',
        '\uA760': 'VY',
        '\u24CC': 'W',
        '\uFF37': 'W',
        '\u1E80': 'W',
        '\u1E82': 'W',
        '\u0174': 'W',
        '\u1E86': 'W',
        '\u1E84': 'W',
        '\u1E88': 'W',
        '\u2C72': 'W',
        '\u24CD': 'X',
        '\uFF38': 'X',
        '\u1E8A': 'X',
        '\u1E8C': 'X',
        '\u24CE': 'Y',
        '\uFF39': 'Y',
        '\u1EF2': 'Y',
        '\u00DD': 'Y',
        '\u0176': 'Y',
        '\u1EF8': 'Y',
        '\u0232': 'Y',
        '\u1E8E': 'Y',
        '\u0178': 'Y',
        '\u1EF6': 'Y',
        '\u1EF4': 'Y',
        '\u01B3': 'Y',
        '\u024E': 'Y',
        '\u1EFE': 'Y',
        '\u24CF': 'Z',
        '\uFF3A': 'Z',
        '\u0179': 'Z',
        '\u1E90': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u1E92': 'Z',
        '\u1E94': 'Z',
        '\u01B5': 'Z',
        '\u0224': 'Z',
        '\u2C7F': 'Z',
        '\u2C6B': 'Z',
        '\uA762': 'Z',
        '\u24D0': 'a',
        '\uFF41': 'a',
        '\u1E9A': 'a',
        '\u00E0': 'a',
        '\u00E1': 'a',
        '\u00E2': 'a',
        '\u1EA7': 'a',
        '\u1EA5': 'a',
        '\u1EAB': 'a',
        '\u1EA9': 'a',
        '\u00E3': 'a',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u1EB1': 'a',
        '\u1EAF': 'a',
        '\u1EB5': 'a',
        '\u1EB3': 'a',
        '\u0227': 'a',
        '\u01E1': 'a',
        '\u00E4': 'a',
        '\u01DF': 'a',
        '\u1EA3': 'a',
        '\u00E5': 'a',
        '\u01FB': 'a',
        '\u01CE': 'a',
        '\u0201': 'a',
        '\u0203': 'a',
        '\u1EA1': 'a',
        '\u1EAD': 'a',
        '\u1EB7': 'a',
        '\u1E01': 'a',
        '\u0105': 'a',
        '\u2C65': 'a',
        '\u0250': 'a',
        '\uA733': 'aa',
        '\u00E6': 'ae',
        '\u01FD': 'ae',
        '\u01E3': 'ae',
        '\uA735': 'ao',
        '\uA737': 'au',
        '\uA739': 'av',
        '\uA73B': 'av',
        '\uA73D': 'ay',
        '\u24D1': 'b',
        '\uFF42': 'b',
        '\u1E03': 'b',
        '\u1E05': 'b',
        '\u1E07': 'b',
        '\u0180': 'b',
        '\u0183': 'b',
        '\u0253': 'b',
        '\u24D2': 'c',
        '\uFF43': 'c',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u00E7': 'c',
        '\u1E09': 'c',
        '\u0188': 'c',
        '\u023C': 'c',
        '\uA73F': 'c',
        '\u2184': 'c',
        '\u24D3': 'd',
        '\uFF44': 'd',
        '\u1E0B': 'd',
        '\u010F': 'd',
        '\u1E0D': 'd',
        '\u1E11': 'd',
        '\u1E13': 'd',
        '\u1E0F': 'd',
        '\u0111': 'd',
        '\u018C': 'd',
        '\u0256': 'd',
        '\u0257': 'd',
        '\uA77A': 'd',
        '\u01F3': 'dz',
        '\u01C6': 'dz',
        '\u24D4': 'e',
        '\uFF45': 'e',
        '\u00E8': 'e',
        '\u00E9': 'e',
        '\u00EA': 'e',
        '\u1EC1': 'e',
        '\u1EBF': 'e',
        '\u1EC5': 'e',
        '\u1EC3': 'e',
        '\u1EBD': 'e',
        '\u0113': 'e',
        '\u1E15': 'e',
        '\u1E17': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u00EB': 'e',
        '\u1EBB': 'e',
        '\u011B': 'e',
        '\u0205': 'e',
        '\u0207': 'e',
        '\u1EB9': 'e',
        '\u1EC7': 'e',
        '\u0229': 'e',
        '\u1E1D': 'e',
        '\u0119': 'e',
        '\u1E19': 'e',
        '\u1E1B': 'e',
        '\u0247': 'e',
        '\u025B': 'e',
        '\u01DD': 'e',
        '\u24D5': 'f',
        '\uFF46': 'f',
        '\u1E1F': 'f',
        '\u0192': 'f',
        '\uA77C': 'f',
        '\u24D6': 'g',
        '\uFF47': 'g',
        '\u01F5': 'g',
        '\u011D': 'g',
        '\u1E21': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u01E7': 'g',
        '\u0123': 'g',
        '\u01E5': 'g',
        '\u0260': 'g',
        '\uA7A1': 'g',
        '\u1D79': 'g',
        '\uA77F': 'g',
        '\u24D7': 'h',
        '\uFF48': 'h',
        '\u0125': 'h',
        '\u1E23': 'h',
        '\u1E27': 'h',
        '\u021F': 'h',
        '\u1E25': 'h',
        '\u1E29': 'h',
        '\u1E2B': 'h',
        '\u1E96': 'h',
        '\u0127': 'h',
        '\u2C68': 'h',
        '\u2C76': 'h',
        '\u0265': 'h',
        '\u0195': 'hv',
        '\u24D8': 'i',
        '\uFF49': 'i',
        '\u00EC': 'i',
        '\u00ED': 'i',
        '\u00EE': 'i',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u00EF': 'i',
        '\u1E2F': 'i',
        '\u1EC9': 'i',
        '\u01D0': 'i',
        '\u0209': 'i',
        '\u020B': 'i',
        '\u1ECB': 'i',
        '\u012F': 'i',
        '\u1E2D': 'i',
        '\u0268': 'i',
        '\u0131': 'i',
        '\u24D9': 'j',
        '\uFF4A': 'j',
        '\u0135': 'j',
        '\u01F0': 'j',
        '\u0249': 'j',
        '\u24DA': 'k',
        '\uFF4B': 'k',
        '\u1E31': 'k',
        '\u01E9': 'k',
        '\u1E33': 'k',
        '\u0137': 'k',
        '\u1E35': 'k',
        '\u0199': 'k',
        '\u2C6A': 'k',
        '\uA741': 'k',
        '\uA743': 'k',
        '\uA745': 'k',
        '\uA7A3': 'k',
        '\u24DB': 'l',
        '\uFF4C': 'l',
        '\u0140': 'l',
        '\u013A': 'l',
        '\u013E': 'l',
        '\u1E37': 'l',
        '\u1E39': 'l',
        '\u013C': 'l',
        '\u1E3D': 'l',
        '\u1E3B': 'l',
        '\u017F': 'l',
        '\u0142': 'l',
        '\u019A': 'l',
        '\u026B': 'l',
        '\u2C61': 'l',
        '\uA749': 'l',
        '\uA781': 'l',
        '\uA747': 'l',
        '\u01C9': 'lj',
        '\u24DC': 'm',
        '\uFF4D': 'm',
        '\u1E3F': 'm',
        '\u1E41': 'm',
        '\u1E43': 'm',
        '\u0271': 'm',
        '\u026F': 'm',
        '\u24DD': 'n',
        '\uFF4E': 'n',
        '\u01F9': 'n',
        '\u0144': 'n',
        '\u00F1': 'n',
        '\u1E45': 'n',
        '\u0148': 'n',
        '\u1E47': 'n',
        '\u0146': 'n',
        '\u1E4B': 'n',
        '\u1E49': 'n',
        '\u019E': 'n',
        '\u0272': 'n',
        '\u0149': 'n',
        '\uA791': 'n',
        '\uA7A5': 'n',
        '\u01CC': 'nj',
        '\u24DE': 'o',
        '\uFF4F': 'o',
        '\u00F2': 'o',
        '\u00F3': 'o',
        '\u00F4': 'o',
        '\u1ED3': 'o',
        '\u1ED1': 'o',
        '\u1ED7': 'o',
        '\u1ED5': 'o',
        '\u00F5': 'o',
        '\u1E4D': 'o',
        '\u022D': 'o',
        '\u1E4F': 'o',
        '\u014D': 'o',
        '\u1E51': 'o',
        '\u1E53': 'o',
        '\u014F': 'o',
        '\u022F': 'o',
        '\u0231': 'o',
        '\u00F6': 'o',
        '\u022B': 'o',
        '\u1ECF': 'o',
        '\u0151': 'o',
        '\u01D2': 'o',
        '\u020D': 'o',
        '\u020F': 'o',
        '\u01A1': 'o',
        '\u1EDD': 'o',
        '\u1EDB': 'o',
        '\u1EE1': 'o',
        '\u1EDF': 'o',
        '\u1EE3': 'o',
        '\u1ECD': 'o',
        '\u1ED9': 'o',
        '\u01EB': 'o',
        '\u01ED': 'o',
        '\u00F8': 'o',
        '\u01FF': 'o',
        '\u0254': 'o',
        '\uA74B': 'o',
        '\uA74D': 'o',
        '\u0275': 'o',
        '\u0153': 'oe',
        '\u01A3': 'oi',
        '\u0223': 'ou',
        '\uA74F': 'oo',
        '\u24DF': 'p',
        '\uFF50': 'p',
        '\u1E55': 'p',
        '\u1E57': 'p',
        '\u01A5': 'p',
        '\u1D7D': 'p',
        '\uA751': 'p',
        '\uA753': 'p',
        '\uA755': 'p',
        '\u24E0': 'q',
        '\uFF51': 'q',
        '\u024B': 'q',
        '\uA757': 'q',
        '\uA759': 'q',
        '\u24E1': 'r',
        '\uFF52': 'r',
        '\u0155': 'r',
        '\u1E59': 'r',
        '\u0159': 'r',
        '\u0211': 'r',
        '\u0213': 'r',
        '\u1E5B': 'r',
        '\u1E5D': 'r',
        '\u0157': 'r',
        '\u1E5F': 'r',
        '\u024D': 'r',
        '\u027D': 'r',
        '\uA75B': 'r',
        '\uA7A7': 'r',
        '\uA783': 'r',
        '\u24E2': 's',
        '\uFF53': 's',
        '\u00DF': 's',
        '\u015B': 's',
        '\u1E65': 's',
        '\u015D': 's',
        '\u1E61': 's',
        '\u0161': 's',
        '\u1E67': 's',
        '\u1E63': 's',
        '\u1E69': 's',
        '\u0219': 's',
        '\u015F': 's',
        '\u023F': 's',
        '\uA7A9': 's',
        '\uA785': 's',
        '\u1E9B': 's',
        '\u24E3': 't',
        '\uFF54': 't',
        '\u1E6B': 't',
        '\u1E97': 't',
        '\u0165': 't',
        '\u1E6D': 't',
        '\u021B': 't',
        '\u0163': 't',
        '\u1E71': 't',
        '\u1E6F': 't',
        '\u0167': 't',
        '\u01AD': 't',
        '\u0288': 't',
        '\u2C66': 't',
        '\uA787': 't',
        '\uA729': 'tz',
        '\u24E4': 'u',
        '\uFF55': 'u',
        '\u00F9': 'u',
        '\u00FA': 'u',
        '\u00FB': 'u',
        '\u0169': 'u',
        '\u1E79': 'u',
        '\u016B': 'u',
        '\u1E7B': 'u',
        '\u016D': 'u',
        '\u00FC': 'u',
        '\u01DC': 'u',
        '\u01D8': 'u',
        '\u01D6': 'u',
        '\u01DA': 'u',
        '\u1EE7': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u01D4': 'u',
        '\u0215': 'u',
        '\u0217': 'u',
        '\u01B0': 'u',
        '\u1EEB': 'u',
        '\u1EE9': 'u',
        '\u1EEF': 'u',
        '\u1EED': 'u',
        '\u1EF1': 'u',
        '\u1EE5': 'u',
        '\u1E73': 'u',
        '\u0173': 'u',
        '\u1E77': 'u',
        '\u1E75': 'u',
        '\u0289': 'u',
        '\u24E5': 'v',
        '\uFF56': 'v',
        '\u1E7D': 'v',
        '\u1E7F': 'v',
        '\u028B': 'v',
        '\uA75F': 'v',
        '\u028C': 'v',
        '\uA761': 'vy',
        '\u24E6': 'w',
        '\uFF57': 'w',
        '\u1E81': 'w',
        '\u1E83': 'w',
        '\u0175': 'w',
        '\u1E87': 'w',
        '\u1E85': 'w',
        '\u1E98': 'w',
        '\u1E89': 'w',
        '\u2C73': 'w',
        '\u24E7': 'x',
        '\uFF58': 'x',
        '\u1E8B': 'x',
        '\u1E8D': 'x',
        '\u24E8': 'y',
        '\uFF59': 'y',
        '\u1EF3': 'y',
        '\u00FD': 'y',
        '\u0177': 'y',
        '\u1EF9': 'y',
        '\u0233': 'y',
        '\u1E8F': 'y',
        '\u00FF': 'y',
        '\u1EF7': 'y',
        '\u1E99': 'y',
        '\u1EF5': 'y',
        '\u01B4': 'y',
        '\u024F': 'y',
        '\u1EFF': 'y',
        '\u24E9': 'z',
        '\uFF5A': 'z',
        '\u017A': 'z',
        '\u1E91': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u1E93': 'z',
        '\u1E95': 'z',
        '\u01B6': 'z',
        '\u0225': 'z',
        '\u0240': 'z',
        '\u2C6C': 'z',
        '\uA763': 'z',
        '\u0386': '\u0391',
        '\u0388': '\u0395',
        '\u0389': '\u0397',
        '\u038A': '\u0399',
        '\u03AA': '\u0399',
        '\u038C': '\u039F',
        '\u038E': '\u03A5',
        '\u03AB': '\u03A5',
        '\u038F': '\u03A9',
        '\u03AC': '\u03B1',
        '\u03AD': '\u03B5',
        '\u03AE': '\u03B7',
        '\u03AF': '\u03B9',
        '\u03CA': '\u03B9',
        '\u0390': '\u03B9',
        '\u03CC': '\u03BF',
        '\u03CD': '\u03C5',
        '\u03CB': '\u03C5',
        '\u03B0': '\u03C5',
        '\u03CE': '\u03C9',
        '\u03C2': '\u03C3',
        '\u2019': "'",
      };

      return diacritics;
    });

    S2.define('select2/data/base', ['../utils'], function (Utils) {
      function BaseAdapter($element, options) {
        BaseAdapter.__super__.constructor.call(this);
      }

      Utils.Extend(BaseAdapter, Utils.Observable);

      BaseAdapter.prototype.current = function (callback) {
        throw new Error('The `current` method must be defined in child classes.');
      };

      BaseAdapter.prototype.query = function (params, callback) {
        throw new Error('The `query` method must be defined in child classes.');
      };

      BaseAdapter.prototype.bind = function (container, $container) {
        // Can be implemented in subclasses
      };

      BaseAdapter.prototype.destroy = function () {
        // Can be implemented in subclasses
      };

      BaseAdapter.prototype.generateResultId = function (container, data) {
        var id = container.id + '-result-';

        id += Utils.generateChars(4);

        if (data.id != null) {
          id += '-' + data.id.toString();
        } else {
          id += '-' + Utils.generateChars(4);
        }
        return id;
      };

      return BaseAdapter;
    });

    S2.define(
      'select2/data/select',
      ['./base', '../utils', 'jquery'],
      function (BaseAdapter, Utils, $) {
        function SelectAdapter($element, options) {
          this.$element = $element;
          this.options = options;

          SelectAdapter.__super__.constructor.call(this);
        }

        Utils.Extend(SelectAdapter, BaseAdapter);

        SelectAdapter.prototype.current = function (callback) {
          var self = this;

          var data = Array.prototype.map.call(
            this.$element[0].querySelectorAll(':checked'),
            function (selectedElement) {
              return self.item($(selectedElement));
            }
          );

          callback(data);
        };

        SelectAdapter.prototype.select = function (data) {
          var self = this;

          data.selected = true;

          // If data.element is a DOM node, use it instead
          if (data.element != null && data.element.tagName.toLowerCase() === 'option') {
            data.element.selected = true;

            this.$element.trigger('input').trigger('change');

            return;
          }

          if (this.$element.prop('multiple')) {
            this.current(function (currentData) {
              var val = [];

              data = [data];
              data.push.apply(data, currentData);

              for (var d = 0; d < data.length; d++) {
                var id = data[d].id;

                if (val.indexOf(id) === -1) {
                  val.push(id);
                }
              }

              self.$element.val(val);
              self.$element.trigger('input').trigger('change');
            });
          } else {
            var val = data.id;

            this.$element.val(val);
            this.$element.trigger('input').trigger('change');
          }
        };

        SelectAdapter.prototype.unselect = function (data) {
          var self = this;

          if (!this.$element.prop('multiple')) {
            return;
          }

          data.selected = false;

          if (data.element != null && data.element.tagName.toLowerCase() === 'option') {
            data.element.selected = false;

            this.$element.trigger('input').trigger('change');

            return;
          }

          this.current(function (currentData) {
            var val = [];

            for (var d = 0; d < currentData.length; d++) {
              var id = currentData[d].id;

              if (id !== data.id && val.indexOf(id) === -1) {
                val.push(id);
              }
            }

            self.$element.val(val);

            self.$element.trigger('input').trigger('change');
          });
        };

        SelectAdapter.prototype.bind = function (container, $container) {
          var self = this;

          this.container = container;

          container.on('select', function (params) {
            self.select(params.data);
          });

          container.on('unselect', function (params) {
            self.unselect(params.data);
          });
        };

        SelectAdapter.prototype.destroy = function () {
          // Remove anything added to child elements
          this.$element.find('*').each(function () {
            // Remove any custom data set by Select2
            Utils.RemoveData(this);
          });
        };

        SelectAdapter.prototype.query = function (params, callback) {
          var data = [];
          var self = this;

          var $options = this.$element.children();

          $options.each(function () {
            if (
              this.tagName.toLowerCase() !== 'option' &&
              this.tagName.toLowerCase() !== 'optgroup'
            ) {
              return;
            }

            var $option = $(this);

            var option = self.item($option);

            var matches = self.matches(params, option);

            if (matches !== null) {
              data.push(matches);
            }
          });

          callback({
            results: data,
          });
        };

        SelectAdapter.prototype.addOptions = function ($options) {
          this.$element.append($options);
        };

        SelectAdapter.prototype.option = function (data) {
          var option;

          if (data.children) {
            option = document.createElement('optgroup');
            option.label = data.text;
          } else {
            option = document.createElement('option');

            if (option.textContent !== undefined) {
              option.textContent = data.text;
            } else {
              option.innerText = data.text;
            }
          }

          if (data.id !== undefined) {
            option.value = data.id;
          }

          if (data.disabled) {
            option.disabled = true;
          }

          if (data.selected) {
            option.selected = true;
          }

          if (data.title) {
            option.title = data.title;
          }

          var normalizedData = this._normalizeItem(data);
          normalizedData.element = option;

          // Override the option's data with the combined data
          Utils.StoreData(option, 'data', normalizedData);

          return $(option);
        };

        SelectAdapter.prototype.item = function ($option) {
          var data = {};

          data = Utils.GetData($option[0], 'data');

          if (data != null) {
            return data;
          }

          var option = $option[0];

          if (option.tagName.toLowerCase() === 'option') {
            data = {
              id: $option.val(),
              text: $option.text(),
              disabled: $option.prop('disabled'),
              selected: $option.prop('selected'),
              title: $option.prop('title'),
            };
          } else if (option.tagName.toLowerCase() === 'optgroup') {
            data = {
              text: $option.prop('label'),
              children: [],
              title: $option.prop('title'),
            };

            var $children = $option.children('option');
            var children = [];

            for (var c = 0; c < $children.length; c++) {
              var $child = $($children[c]);

              var child = this.item($child);

              children.push(child);
            }

            data.children = children;
          }

          data = this._normalizeItem(data);
          data.element = $option[0];

          Utils.StoreData($option[0], 'data', data);

          return data;
        };

        SelectAdapter.prototype._normalizeItem = function (item) {
          if (item !== Object(item)) {
            item = {
              id: item,
              text: item,
            };
          }

          item = $.extend(
            {},
            {
              text: '',
            },
            item
          );

          var defaults = {
            selected: false,
            disabled: false,
          };

          if (item.id != null) {
            item.id = item.id.toString();
          }

          if (item.text != null) {
            item.text = item.text.toString();
          }

          if (item._resultId == null && item.id && this.container != null) {
            item._resultId = this.generateResultId(this.container, item);
          }

          return $.extend({}, defaults, item);
        };

        SelectAdapter.prototype.matches = function (params, data) {
          var matcher = this.options.get('matcher');

          return matcher(params, data);
        };

        return SelectAdapter;
      }
    );

    S2.define(
      'select2/data/array',
      ['./select', '../utils', 'jquery'],
      function (SelectAdapter, Utils, $) {
        function ArrayAdapter($element, options) {
          this._dataToConvert = options.get('data') || [];

          ArrayAdapter.__super__.constructor.call(this, $element, options);
        }

        Utils.Extend(ArrayAdapter, SelectAdapter);

        ArrayAdapter.prototype.bind = function (container, $container) {
          ArrayAdapter.__super__.bind.call(this, container, $container);

          this.addOptions(this.convertToOptions(this._dataToConvert));
        };

        ArrayAdapter.prototype.select = function (data) {
          var $option = this.$element.find('option').filter(function (i, elm) {
            return elm.value == data.id.toString();
          });

          if ($option.length === 0) {
            $option = this.option(data);

            this.addOptions($option);
          }

          ArrayAdapter.__super__.select.call(this, data);
        };

        ArrayAdapter.prototype.convertToOptions = function (data) {
          var self = this;

          var $existing = this.$element.find('option');
          var existingIds = $existing
            .map(function () {
              return self.item($(this)).id;
            })
            .get();

          var $options = [];

          // Filter out all items except for the one passed in the argument
          function onlyItem(item) {
            return function () {
              return $(this).val() == item.id;
            };
          }

          for (var d = 0; d < data.length; d++) {
            var item = this._normalizeItem(data[d]);

            // Skip items which were pre-loaded, only merge the data
            if (existingIds.indexOf(item.id) >= 0) {
              var $existingOption = $existing.filter(onlyItem(item));

              var existingData = this.item($existingOption);
              var newData = $.extend(true, {}, item, existingData);

              var $newOption = this.option(newData);

              $existingOption.replaceWith($newOption);

              continue;
            }

            var $option = this.option(item);

            if (item.children) {
              var $children = this.convertToOptions(item.children);

              $option.append($children);
            }

            $options.push($option);
          }

          return $options;
        };

        return ArrayAdapter;
      }
    );

    S2.define(
      'select2/data/ajax',
      ['./array', '../utils', 'jquery'],
      function (ArrayAdapter, Utils, $) {
        function AjaxAdapter($element, options) {
          this.ajaxOptions = this._applyDefaults(options.get('ajax'));

          if (this.ajaxOptions.processResults != null) {
            this.processResults = this.ajaxOptions.processResults;
          }

          AjaxAdapter.__super__.constructor.call(this, $element, options);
        }

        Utils.Extend(AjaxAdapter, ArrayAdapter);

        AjaxAdapter.prototype._applyDefaults = function (options) {
          var defaults = {
            data: function (params) {
              return $.extend({}, params, {
                q: params.term,
              });
            },
            transport: function (params, success, failure) {
              var $request = $.ajax(params);

              $request.then(success);
              $request.fail(failure);

              return $request;
            },
          };

          return $.extend({}, defaults, options, true);
        };

        AjaxAdapter.prototype.processResults = function (results) {
          return results;
        };

        AjaxAdapter.prototype.query = function (params, callback) {
          var matches = [];
          var self = this;

          if (this._request != null) {
            // JSONP requests cannot always be aborted
            if (typeof this._request.abort === 'function') {
              this._request.abort();
            }

            this._request = null;
          }

          var options = $.extend(
            {
              type: 'GET',
            },
            this.ajaxOptions
          );

          if (typeof options.url === 'function') {
            options.url = options.url.call(this.$element, params);
          }

          if (typeof options.data === 'function') {
            options.data = options.data.call(this.$element, params);
          }

          function request() {
            var $request = options.transport(
              options,
              function (data) {
                var results = self.processResults(data, params);

                if (self.options.get('debug') && window.console && console.error) {
                  // Check to make sure that the response included a `results` key.
                  if (!results || !results.results || !Array.isArray(results.results)) {
                    console.error(
                      'Select2: The AJAX results did not return an array in the ' +
                        '`results` key of the response.'
                    );
                  }
                }

                callback(results);
              },
              function () {
                // Attempt to detect if a request was aborted
                // Only works if the transport exposes a status property
                if ('status' in $request && ($request.status === 0 || $request.status === '0')) {
                  return;
                }

                self.trigger('results:message', {
                  message: 'errorLoading',
                });
              }
            );

            self._request = $request;
          }

          if (this.ajaxOptions.delay && params.term != null) {
            if (this._queryTimeout) {
              window.clearTimeout(this._queryTimeout);
            }

            this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
          } else {
            request();
          }
        };

        return AjaxAdapter;
      }
    );

    S2.define('select2/data/tags', ['jquery'], function ($) {
      function Tags(decorated, $element, options) {
        var tags = options.get('tags');

        var createTag = options.get('createTag');

        if (createTag !== undefined) {
          this.createTag = createTag;
        }

        var insertTag = options.get('insertTag');

        if (insertTag !== undefined) {
          this.insertTag = insertTag;
        }

        decorated.call(this, $element, options);

        if (Array.isArray(tags)) {
          for (var t = 0; t < tags.length; t++) {
            var tag = tags[t];
            var item = this._normalizeItem(tag);

            var $option = this.option(item);

            this.$element.append($option);
          }
        }
      }

      Tags.prototype.query = function (decorated, params, callback) {
        var self = this;

        this._removeOldTags();

        if (params.term == null || params.page != null) {
          decorated.call(this, params, callback);
          return;
        }

        function wrapper(obj, child) {
          var data = obj.results;

          for (var i = 0; i < data.length; i++) {
            var option = data[i];

            var checkChildren =
              option.children != null &&
              !wrapper(
                {
                  results: option.children,
                },
                true
              );

            var optionText = (option.text || '').toUpperCase();
            var paramsTerm = (params.term || '').toUpperCase();

            var checkText = optionText === paramsTerm;

            if (checkText || checkChildren) {
              if (child) {
                return false;
              }

              obj.data = data;
              callback(obj);

              return;
            }
          }

          if (child) {
            return true;
          }

          var tag = self.createTag(params);

          if (tag != null) {
            var $option = self.option(tag);
            $option.attr('data-select2-tag', 'true');

            self.addOptions([$option]);

            self.insertTag(data, tag);
          }

          obj.results = data;

          callback(obj);
        }

        decorated.call(this, params, wrapper);
      };

      Tags.prototype.createTag = function (decorated, params) {
        if (params.term == null) {
          return null;
        }

        var term = params.term.trim();

        if (term === '') {
          return null;
        }

        return {
          id: term,
          text: term,
        };
      };

      Tags.prototype.insertTag = function (_, data, tag) {
        data.unshift(tag);
      };

      Tags.prototype._removeOldTags = function (_) {
        var $options = this.$element.find('option[data-select2-tag]');

        $options.each(function () {
          if (this.selected) {
            return;
          }

          $(this).remove();
        });
      };

      return Tags;
    });

    S2.define('select2/data/tokenizer', ['jquery'], function ($) {
      function Tokenizer(decorated, $element, options) {
        var tokenizer = options.get('tokenizer');

        if (tokenizer !== undefined) {
          this.tokenizer = tokenizer;
        }

        decorated.call(this, $element, options);
      }

      Tokenizer.prototype.bind = function (decorated, container, $container) {
        decorated.call(this, container, $container);

        this.$search =
          container.dropdown.$search ||
          container.selection.$search ||
          $container.find('.select2-search__field');
      };

      Tokenizer.prototype.query = function (decorated, params, callback) {
        var self = this;

        function createAndSelect(data) {
          // Normalize the data object so we can use it for checks
          var item = self._normalizeItem(data);

          // Check if the data object already exists as a tag
          // Select it if it doesn't
          var $existingOptions = self.$element.find('option').filter(function () {
            return $(this).val() === item.id;
          });

          // If an existing option wasn't found for it, create the option
          if (!$existingOptions.length) {
            var $option = self.option(item);
            $option.attr('data-select2-tag', true);

            self._removeOldTags();
            self.addOptions([$option]);
          }

          // Select the item, now that we know there is an option for it
          select(item);
        }

        function select(data) {
          self.trigger('select', {
            data: data,
          });
        }

        params.term = params.term || '';

        var tokenData = this.tokenizer(params, this.options, createAndSelect);

        if (tokenData.term !== params.term) {
          // Replace the search term if we have the search box
          if (this.$search.length) {
            this.$search.val(tokenData.term);
            this.$search.trigger('focus');
          }

          params.term = tokenData.term;
        }

        decorated.call(this, params, callback);
      };

      Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
        var separators = options.get('tokenSeparators') || [];
        var term = params.term;
        var i = 0;

        var createTag =
          this.createTag ||
          function (params) {
            return {
              id: params.term,
              text: params.term,
            };
          };

        while (i < term.length) {
          var termChar = term[i];

          if (separators.indexOf(termChar) === -1) {
            i++;

            continue;
          }

          var part = term.substr(0, i);
          var partParams = $.extend({}, params, {
            term: part,
          });

          var data = createTag(partParams);

          if (data == null) {
            i++;
            continue;
          }

          callback(data);

          // Reset the term to not include the tokenized portion
          term = term.substr(i + 1) || '';
          i = 0;
        }

        return {
          term: term,
        };
      };

      return Tokenizer;
    });

    S2.define('select2/data/minimumInputLength', [], function () {
      function MinimumInputLength(decorated, $e, options) {
        this.minimumInputLength = options.get('minimumInputLength');

        decorated.call(this, $e, options);
      }

      MinimumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';

        if (params.term.length < this.minimumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooShort',
            args: {
              minimum: this.minimumInputLength,
              input: params.term,
              params: params,
            },
          });

          return;
        }

        decorated.call(this, params, callback);
      };

      return MinimumInputLength;
    });

    S2.define('select2/data/maximumInputLength', [], function () {
      function MaximumInputLength(decorated, $e, options) {
        this.maximumInputLength = options.get('maximumInputLength');

        decorated.call(this, $e, options);
      }

      MaximumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';

        if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooLong',
            args: {
              maximum: this.maximumInputLength,
              input: params.term,
              params: params,
            },
          });

          return;
        }

        decorated.call(this, params, callback);
      };

      return MaximumInputLength;
    });

    S2.define('select2/data/maximumSelectionLength', [], function () {
      function MaximumSelectionLength(decorated, $e, options) {
        this.maximumSelectionLength = options.get('maximumSelectionLength');

        decorated.call(this, $e, options);
      }

      MaximumSelectionLength.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('select', function () {
          self._checkIfMaximumSelected();
        });
      };

      MaximumSelectionLength.prototype.query = function (decorated, params, callback) {
        var self = this;

        this._checkIfMaximumSelected(function () {
          decorated.call(self, params, callback);
        });
      };

      MaximumSelectionLength.prototype._checkIfMaximumSelected = function (_, successCallback) {
        var self = this;

        this.current(function (currentData) {
          var count = currentData != null ? currentData.length : 0;
          if (self.maximumSelectionLength > 0 && count >= self.maximumSelectionLength) {
            self.trigger('results:message', {
              message: 'maximumSelected',
              args: {
                maximum: self.maximumSelectionLength,
              },
            });
            return;
          }

          if (successCallback) {
            successCallback();
          }
        });
      };

      return MaximumSelectionLength;
    });

    S2.define('select2/dropdown', ['jquery', './utils'], function ($, Utils) {
      function Dropdown($element, options) {
        this.$element = $element;
        this.options = options;

        Dropdown.__super__.constructor.call(this);
      }

      Utils.Extend(Dropdown, Utils.Observable);

      Dropdown.prototype.render = function () {
        var $dropdown = $(
          '<span class="select2-dropdown">' + '<span class="select2-results"></span>' + '</span>'
        );

        $dropdown.attr('dir', this.options.get('dir'));

        this.$dropdown = $dropdown;

        return $dropdown;
      };

      Dropdown.prototype.bind = function () {
        // Should be implemented in subclasses
      };

      Dropdown.prototype.position = function ($dropdown, $container) {
        // Should be implemented in subclasses
      };

      Dropdown.prototype.destroy = function () {
        // Remove the dropdown from the DOM
        this.$dropdown.remove();
      };

      return Dropdown;
    });

    S2.define('select2/dropdown/search', ['jquery'], function ($) {
      function Search() {}

      Search.prototype.render = function (decorated) {
        var $rendered = decorated.call(this);
        var searchLabel = this.options.get('translations').get('search');

        var $search = $(
          '<span class="select2-search select2-search--dropdown">' +
            '<input class="select2-search__field" type="search" tabindex="-1"' +
            ' autocorrect="off" autocapitalize="none"' +
            ' spellcheck="false" role="searchbox" aria-autocomplete="list" />' +
            '</span>'
        );

        this.$searchContainer = $search;
        this.$search = $search.find('input');

        this.$search.prop('autocomplete', this.options.get('autocomplete'));
        this.$search.attr('aria-label', searchLabel());

        $rendered.prepend($search);

        return $rendered;
      };

      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;

        var resultsId = container.id + '-results';

        decorated.call(this, container, $container);

        this.$search.on('keydown', function (evt) {
          self.trigger('keypress', evt);

          self._keyUpPrevented = evt.isDefaultPrevented();
        });

        // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.
        this.$search.on('input', function (evt) {
          // Unbind the duplicated `keyup` event
          $(this).off('keyup');
        });

        this.$search.on('keyup input', function (evt) {
          self.handleSearch(evt);
        });

        container.on('open', function () {
          self.$search.attr('tabindex', 0);
          self.$search.attr('aria-controls', resultsId);

          self.$search.trigger('focus');

          window.setTimeout(function () {
            self.$search.trigger('focus');
          }, 0);
        });

        container.on('close', function () {
          self.$search.attr('tabindex', -1);
          self.$search.removeAttr('aria-controls');
          self.$search.removeAttr('aria-activedescendant');

          self.$search.val('');
          self.$search.trigger('blur');
        });

        container.on('focus', function () {
          if (!container.isOpen()) {
            self.$search.trigger('focus');
          }
        });

        container.on('results:all', function (params) {
          if (params.query.term == null || params.query.term === '') {
            var showSearch = self.showSearch(params);

            if (showSearch) {
              self.$searchContainer[0].classList.remove('select2-search--hide');
            } else {
              self.$searchContainer[0].classList.add('select2-search--hide');
            }
          }
        });

        container.on('results:focus', function (params) {
          if (params.data._resultId) {
            self.$search.attr('aria-activedescendant', params.data._resultId);
          } else {
            self.$search.removeAttr('aria-activedescendant');
          }
        });
      };

      Search.prototype.handleSearch = function (evt) {
        if (!this._keyUpPrevented) {
          var input = this.$search.val();

          this.trigger('query', {
            term: input,
          });
        }

        this._keyUpPrevented = false;
      };

      Search.prototype.showSearch = function (_, params) {
        return true;
      };

      return Search;
    });

    S2.define('select2/dropdown/hidePlaceholder', [], function () {
      function HidePlaceholder(decorated, $element, options, dataAdapter) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

        decorated.call(this, $element, options, dataAdapter);
      }

      HidePlaceholder.prototype.append = function (decorated, data) {
        data.results = this.removePlaceholder(data.results);

        decorated.call(this, data);
      };

      HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder,
          };
        }

        return placeholder;
      };

      HidePlaceholder.prototype.removePlaceholder = function (_, data) {
        var modifiedData = data.slice(0);

        for (var d = data.length - 1; d >= 0; d--) {
          var item = data[d];

          if (this.placeholder.id === item.id) {
            modifiedData.splice(d, 1);
          }
        }

        return modifiedData;
      };

      return HidePlaceholder;
    });

    S2.define('select2/dropdown/infiniteScroll', ['jquery'], function ($) {
      function InfiniteScroll(decorated, $element, options, dataAdapter) {
        this.lastParams = {};

        decorated.call(this, $element, options, dataAdapter);

        this.$loadingMore = this.createLoadingMore();
        this.loading = false;
      }

      InfiniteScroll.prototype.append = function (decorated, data) {
        this.$loadingMore.remove();
        this.loading = false;

        decorated.call(this, data);

        if (this.showLoadingMore(data)) {
          this.$results.append(this.$loadingMore);
          this.loadMoreIfNeeded();
        }
      };

      InfiniteScroll.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('query', function (params) {
          self.lastParams = params;
          self.loading = true;
        });

        container.on('query:append', function (params) {
          self.lastParams = params;
          self.loading = true;
        });

        this.$results.on('scroll', this.loadMoreIfNeeded.bind(this));
      };

      InfiniteScroll.prototype.loadMoreIfNeeded = function () {
        var isLoadMoreVisible = $.contains(document.documentElement, this.$loadingMore[0]);

        if (this.loading || !isLoadMoreVisible) {
          return;
        }

        var currentOffset = this.$results.offset().top + this.$results.outerHeight(false);
        var loadingMoreOffset =
          this.$loadingMore.offset().top + this.$loadingMore.outerHeight(false);

        if (currentOffset + 50 >= loadingMoreOffset) {
          this.loadMore();
        }
      };

      InfiniteScroll.prototype.loadMore = function () {
        this.loading = true;

        var params = $.extend({}, { page: 1 }, this.lastParams);

        params.page++;

        this.trigger('query:append', params);
      };

      InfiniteScroll.prototype.showLoadingMore = function (_, data) {
        return data.pagination && data.pagination.more;
      };

      InfiniteScroll.prototype.createLoadingMore = function () {
        var $option = $(
          '<li ' +
            'class="select2-results__option select2-results__option--load-more"' +
            'role="option" aria-disabled="true"></li>'
        );

        var message = this.options.get('translations').get('loadingMore');

        $option.html(message(this.lastParams));

        return $option;
      };

      return InfiniteScroll;
    });

    S2.define('select2/dropdown/attachBody', ['jquery', '../utils'], function ($, Utils) {
      function AttachBody(decorated, $element, options) {
        this.$dropdownParent = $(options.get('dropdownParent') || document.body);

        decorated.call(this, $element, options);
      }

      AttachBody.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('open', function () {
          self._showDropdown();
          self._attachPositioningHandler(container);

          // Must bind after the results handlers to ensure correct sizing
          self._bindContainerResultHandlers(container);
        });

        container.on('close', function () {
          self._hideDropdown();
          self._detachPositioningHandler(container);
        });

        this.$dropdownContainer.on('mousedown', function (evt) {
          evt.stopPropagation();
        });
      };

      AttachBody.prototype.destroy = function (decorated) {
        decorated.call(this);

        this.$dropdownContainer.remove();
      };

      AttachBody.prototype.position = function (decorated, $dropdown, $container) {
        // Clone all of the container classes
        $dropdown.attr('class', $container.attr('class'));

        $dropdown[0].classList.remove('select2');
        $dropdown[0].classList.add('select2-container--open');

        $dropdown.css({
          position: 'absolute',
          top: -999999,
        });

        this.$container = $container;
      };

      AttachBody.prototype.render = function (decorated) {
        var $container = $('<span></span>');

        var $dropdown = decorated.call(this);
        $container.append($dropdown);

        this.$dropdownContainer = $container;

        return $container;
      };

      AttachBody.prototype._hideDropdown = function (decorated) {
        this.$dropdownContainer.detach();
      };

      AttachBody.prototype._bindContainerResultHandlers = function (decorated, container) {
        // These should only be bound once
        if (this._containerResultsHandlersBound) {
          return;
        }

        var self = this;

        container.on('results:all', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });

        container.on('results:append', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });

        container.on('results:message', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });

        container.on('select', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });

        container.on('unselect', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });

        this._containerResultsHandlersBound = true;
      };

      AttachBody.prototype._attachPositioningHandler = function (decorated, container) {
        var self = this;

        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;

        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.each(function () {
          Utils.StoreData(this, 'select2-scroll-position', {
            x: $(this).scrollLeft(),
            y: $(this).scrollTop(),
          });
        });

        $watchers.on(scrollEvent, function (ev) {
          var position = Utils.GetData(this, 'select2-scroll-position');
          $(this).scrollTop(position.y);
        });

        $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent, function (e) {
          self._positionDropdown();
          self._resizeDropdown();
        });
      };

      AttachBody.prototype._detachPositioningHandler = function (decorated, container) {
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;

        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.off(scrollEvent);

        $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
      };

      AttachBody.prototype._positionDropdown = function () {
        var $window = $(window);

        var isCurrentlyAbove = this.$dropdown[0].classList.contains('select2-dropdown--above');
        var isCurrentlyBelow = this.$dropdown[0].classList.contains('select2-dropdown--below');

        var newDirection = null;

        var offset = this.$container.offset();

        offset.bottom = offset.top + this.$container.outerHeight(false);

        var container = {
          height: this.$container.outerHeight(false),
        };

        container.top = offset.top;
        container.bottom = offset.top + container.height;

        var dropdown = {
          height: this.$dropdown.outerHeight(false),
        };

        var viewport = {
          top: $window.scrollTop(),
          bottom: $window.scrollTop() + $window.height(),
        };

        var enoughRoomAbove = viewport.top < offset.top - dropdown.height;
        var enoughRoomBelow = viewport.bottom > offset.bottom + dropdown.height;

        var css = {
          left: offset.left,
          top: container.bottom,
        };

        // Determine what the parent element is to use for calculating the offset
        var $offsetParent = this.$dropdownParent;

        // For statically positioned elements, we need to get the element
        // that is determining the offset
        if ($offsetParent.css('position') === 'static') {
          $offsetParent = $offsetParent.offsetParent();
        }

        var parentOffset = {
          top: 0,
          left: 0,
        };

        if ($.contains(document.body, $offsetParent[0]) || $offsetParent[0].isConnected) {
          parentOffset = $offsetParent.offset();
        }

        css.top -= parentOffset.top;
        css.left -= parentOffset.left;

        if (!isCurrentlyAbove && !isCurrentlyBelow) {
          newDirection = 'below';
        }

        if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
          newDirection = 'above';
        } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
          newDirection = 'below';
        }

        if (newDirection == 'above' || (isCurrentlyAbove && newDirection !== 'below')) {
          css.top = container.top - parentOffset.top - dropdown.height;
        }

        if (newDirection != null) {
          this.$dropdown[0].classList.remove('select2-dropdown--below');
          this.$dropdown[0].classList.remove('select2-dropdown--above');
          this.$dropdown[0].classList.add('select2-dropdown--' + newDirection);

          this.$container[0].classList.remove('select2-container--below');
          this.$container[0].classList.remove('select2-container--above');
          this.$container[0].classList.add('select2-container--' + newDirection);
        }

        this.$dropdownContainer.css(css);
      };

      AttachBody.prototype._resizeDropdown = function () {
        var css = {
          width: this.$container.outerWidth(false) + 'px',
        };

        if (this.options.get('dropdownAutoWidth')) {
          css.minWidth = css.width;
          css.position = 'relative';
          css.width = 'auto';
        }

        this.$dropdown.css(css);
      };

      AttachBody.prototype._showDropdown = function (decorated) {
        this.$dropdownContainer.appendTo(this.$dropdownParent);

        this._positionDropdown();
        this._resizeDropdown();
      };

      return AttachBody;
    });

    S2.define('select2/dropdown/minimumResultsForSearch', [], function () {
      function countResults(data) {
        var count = 0;

        for (var d = 0; d < data.length; d++) {
          var item = data[d];

          if (item.children) {
            count += countResults(item.children);
          } else {
            count++;
          }
        }

        return count;
      }

      function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
        this.minimumResultsForSearch = options.get('minimumResultsForSearch');

        if (this.minimumResultsForSearch < 0) {
          this.minimumResultsForSearch = Infinity;
        }

        decorated.call(this, $element, options, dataAdapter);
      }

      MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
        if (countResults(params.data.results) < this.minimumResultsForSearch) {
          return false;
        }

        return decorated.call(this, params);
      };

      return MinimumResultsForSearch;
    });

    S2.define('select2/dropdown/selectOnClose', ['../utils'], function (Utils) {
      function SelectOnClose() {}

      SelectOnClose.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('close', function (params) {
          self._handleSelectOnClose(params);
        });
      };

      SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
        if (params && params.originalSelect2Event != null) {
          var event = params.originalSelect2Event;

          // Don't select an item if the close event was triggered from a select or
          // unselect event
          if (event._type === 'select' || event._type === 'unselect') {
            return;
          }
        }

        var $highlightedResults = this.getHighlightedResults();

        // Only select highlighted results
        if ($highlightedResults.length < 1) {
          return;
        }

        var data = Utils.GetData($highlightedResults[0], 'data');

        // Don't re-select already selected resulte
        if (
          (data.element != null && data.element.selected) ||
          (data.element == null && data.selected)
        ) {
          return;
        }

        this.trigger('select', {
          data: data,
        });
      };

      return SelectOnClose;
    });

    S2.define('select2/dropdown/closeOnSelect', [], function () {
      function CloseOnSelect() {}

      CloseOnSelect.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('select', function (evt) {
          self._selectTriggered(evt);
        });

        container.on('unselect', function (evt) {
          self._selectTriggered(evt);
        });
      };

      CloseOnSelect.prototype._selectTriggered = function (_, evt) {
        var originalEvent = evt.originalEvent;

        // Don't close if the control key is being held
        if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {
          return;
        }

        this.trigger('close', {
          originalEvent: originalEvent,
          originalSelect2Event: evt,
        });
      };

      return CloseOnSelect;
    });

    S2.define('select2/dropdown/dropdownCss', ['../utils'], function (Utils) {
      function DropdownCSS() {}

      DropdownCSS.prototype.render = function (decorated) {
        var $dropdown = decorated.call(this);

        var dropdownCssClass = this.options.get('dropdownCssClass') || '';

        if (dropdownCssClass.indexOf(':all:') !== -1) {
          dropdownCssClass = dropdownCssClass.replace(':all:', '');

          Utils.copyNonInternalCssClasses($dropdown[0], this.$element[0]);
        }

        $dropdown.addClass(dropdownCssClass);

        return $dropdown;
      };

      return DropdownCSS;
    });

    S2.define('select2/dropdown/tagsSearchHighlight', ['../utils'], function (Utils) {
      function TagsSearchHighlight() {}

      TagsSearchHighlight.prototype.highlightFirstItem = function (decorated) {
        var $options = this.$results.find(
          '.select2-results__option--selectable' + ':not(.select2-results__option--selected)'
        );

        if ($options.length > 0) {
          var $firstOption = $options.first();
          var data = Utils.GetData($firstOption[0], 'data');
          var firstElement = data.element;

          if (firstElement && firstElement.getAttribute) {
            if (firstElement.getAttribute('data-select2-tag') === 'true') {
              $firstOption.trigger('mouseenter');

              return;
            }
          }
        }

        decorated.call(this);
      };

      return TagsSearchHighlight;
    });

    S2.define('select2/i18n/en', [], function () {
      // English
      return {
        errorLoading: function () {
          return 'The results could not be loaded.';
        },
        inputTooLong: function (args) {
          var overChars = args.input.length - args.maximum;

          var message = 'Please delete ' + overChars + ' character';

          if (overChars != 1) {
            message += 's';
          }

          return message;
        },
        inputTooShort: function (args) {
          var remainingChars = args.minimum - args.input.length;

          var message = 'Please enter ' + remainingChars + ' or more characters';

          return message;
        },
        loadingMore: function () {
          return 'Loading more results…';
        },
        maximumSelected: function (args) {
          var message = 'You can only select ' + args.maximum + ' item';

          if (args.maximum != 1) {
            message += 's';
          }

          return message;
        },
        noResults: function () {
          return 'No results found';
        },
        searching: function () {
          return 'Searching…';
        },
        removeAllItems: function () {
          return 'Remove all items';
        },
        removeItem: function () {
          return 'Remove item';
        },
        search: function () {
          return 'Search';
        },
      };
    });

    S2.define(
      'select2/defaults',
      [
        'jquery',

        './results',

        './selection/single',
        './selection/multiple',
        './selection/placeholder',
        './selection/allowClear',
        './selection/search',
        './selection/selectionCss',
        './selection/eventRelay',

        './utils',
        './translation',
        './diacritics',

        './data/select',
        './data/array',
        './data/ajax',
        './data/tags',
        './data/tokenizer',
        './data/minimumInputLength',
        './data/maximumInputLength',
        './data/maximumSelectionLength',

        './dropdown',
        './dropdown/search',
        './dropdown/hidePlaceholder',
        './dropdown/infiniteScroll',
        './dropdown/attachBody',
        './dropdown/minimumResultsForSearch',
        './dropdown/selectOnClose',
        './dropdown/closeOnSelect',
        './dropdown/dropdownCss',
        './dropdown/tagsSearchHighlight',

        './i18n/en',
      ],
      function (
        $,

        ResultsList,

        SingleSelection,
        MultipleSelection,
        Placeholder,
        AllowClear,
        SelectionSearch,
        SelectionCSS,
        EventRelay,

        Utils,
        Translation,
        DIACRITICS,

        SelectData,
        ArrayData,
        AjaxData,
        Tags,
        Tokenizer,
        MinimumInputLength,
        MaximumInputLength,
        MaximumSelectionLength,

        Dropdown,
        DropdownSearch,
        HidePlaceholder,
        InfiniteScroll,
        AttachBody,
        MinimumResultsForSearch,
        SelectOnClose,
        CloseOnSelect,
        DropdownCSS,
        TagsSearchHighlight,

        EnglishTranslation
      ) {
        function Defaults() {
          this.reset();
        }

        Defaults.prototype.apply = function (options) {
          options = $.extend(true, {}, this.defaults, options);

          if (options.dataAdapter == null) {
            if (options.ajax != null) {
              options.dataAdapter = AjaxData;
            } else if (options.data != null) {
              options.dataAdapter = ArrayData;
            } else {
              options.dataAdapter = SelectData;
            }

            if (options.minimumInputLength > 0) {
              options.dataAdapter = Utils.Decorate(options.dataAdapter, MinimumInputLength);
            }

            if (options.maximumInputLength > 0) {
              options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumInputLength);
            }

            if (options.maximumSelectionLength > 0) {
              options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumSelectionLength);
            }

            if (options.tags) {
              options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
            }

            if (options.tokenSeparators != null || options.tokenizer != null) {
              options.dataAdapter = Utils.Decorate(options.dataAdapter, Tokenizer);
            }
          }

          if (options.resultsAdapter == null) {
            options.resultsAdapter = ResultsList;

            if (options.ajax != null) {
              options.resultsAdapter = Utils.Decorate(options.resultsAdapter, InfiniteScroll);
            }

            if (options.placeholder != null) {
              options.resultsAdapter = Utils.Decorate(options.resultsAdapter, HidePlaceholder);
            }

            if (options.selectOnClose) {
              options.resultsAdapter = Utils.Decorate(options.resultsAdapter, SelectOnClose);
            }

            if (options.tags) {
              options.resultsAdapter = Utils.Decorate(options.resultsAdapter, TagsSearchHighlight);
            }
          }

          if (options.dropdownAdapter == null) {
            if (options.multiple) {
              options.dropdownAdapter = Dropdown;
            } else {
              var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

              options.dropdownAdapter = SearchableDropdown;
            }

            if (options.minimumResultsForSearch !== 0) {
              options.dropdownAdapter = Utils.Decorate(
                options.dropdownAdapter,
                MinimumResultsForSearch
              );
            }

            if (options.closeOnSelect) {
              options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, CloseOnSelect);
            }

            if (options.dropdownCssClass != null) {
              options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, DropdownCSS);
            }

            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, AttachBody);
          }

          if (options.selectionAdapter == null) {
            if (options.multiple) {
              options.selectionAdapter = MultipleSelection;
            } else {
              options.selectionAdapter = SingleSelection;
            }

            // Add the placeholder mixin if a placeholder was specified
            if (options.placeholder != null) {
              options.selectionAdapter = Utils.Decorate(options.selectionAdapter, Placeholder);
            }

            if (options.allowClear) {
              options.selectionAdapter = Utils.Decorate(options.selectionAdapter, AllowClear);
            }

            if (options.multiple) {
              options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionSearch);
            }

            if (options.selectionCssClass != null) {
              options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionCSS);
            }

            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, EventRelay);
          }

          // If the defaults were not previously applied from an element, it is
          // possible for the language option to have not been resolved
          options.language = this._resolveLanguage(options.language);

          // Always fall back to English since it will always be complete
          options.language.push('en');

          var uniqueLanguages = [];

          for (var l = 0; l < options.language.length; l++) {
            var language = options.language[l];

            if (uniqueLanguages.indexOf(language) === -1) {
              uniqueLanguages.push(language);
            }
          }

          options.language = uniqueLanguages;

          options.translations = this._processTranslations(options.language, options.debug);

          return options;
        };

        Defaults.prototype.reset = function () {
          function stripDiacritics(text) {
            // Used 'uni range + named function' from http://jsperf.com/diacritics/18
            function match(a) {
              return DIACRITICS[a] || a;
            }

            return text.replace(/[^\u0000-\u007E]/g, match);
          }

          function matcher(params, data) {
            // Always return the object if there is nothing to compare
            if (params.term == null || params.term.trim() === '') {
              return data;
            }

            // Do a recursive check for options with children
            if (data.children && data.children.length > 0) {
              // Clone the data object if there are children
              // This is required as we modify the object to remove any non-matches
              var match = $.extend(true, {}, data);

              // Check each child of the option
              for (var c = data.children.length - 1; c >= 0; c--) {
                var child = data.children[c];

                var matches = matcher(params, child);

                // If there wasn't a match, remove the object in the array
                if (matches == null) {
                  match.children.splice(c, 1);
                }
              }

              // If any children matched, return the new object
              if (match.children.length > 0) {
                return match;
              }

              // If there were no matching children, check just the plain object
              return matcher(params, match);
            }

            var original = stripDiacritics(data.text).toUpperCase();
            var term = stripDiacritics(params.term).toUpperCase();

            // Check if the text contains the term
            if (original.indexOf(term) > -1) {
              return data;
            }

            // If it doesn't contain the term, don't return anything
            return null;
          }

          this.defaults = {
            amdLanguageBase: './i18n/',
            autocomplete: 'off',
            closeOnSelect: true,
            debug: false,
            dropdownAutoWidth: false,
            escapeMarkup: Utils.escapeMarkup,
            language: {},
            matcher: matcher,
            minimumInputLength: 0,
            maximumInputLength: 0,
            maximumSelectionLength: 0,
            minimumResultsForSearch: 0,
            selectOnClose: false,
            scrollAfterSelect: false,
            sorter: function (data) {
              return data;
            },
            templateResult: function (result) {
              return result.text;
            },
            templateSelection: function (selection) {
              return selection.text;
            },
            theme: 'default',
            width: 'resolve',
          };
        };

        Defaults.prototype.applyFromElement = function (options, $element) {
          var optionLanguage = options.language;
          var defaultLanguage = this.defaults.language;
          var elementLanguage = $element.prop('lang');
          var parentLanguage = $element.closest('[lang]').prop('lang');

          var languages = Array.prototype.concat.call(
            this._resolveLanguage(elementLanguage),
            this._resolveLanguage(optionLanguage),
            this._resolveLanguage(defaultLanguage),
            this._resolveLanguage(parentLanguage)
          );

          options.language = languages;

          return options;
        };

        Defaults.prototype._resolveLanguage = function (language) {
          if (!language) {
            return [];
          }

          if ($.isEmptyObject(language)) {
            return [];
          }

          if ($.isPlainObject(language)) {
            return [language];
          }

          var languages;

          if (!Array.isArray(language)) {
            languages = [language];
          } else {
            languages = language;
          }

          var resolvedLanguages = [];

          for (var l = 0; l < languages.length; l++) {
            resolvedLanguages.push(languages[l]);

            if (typeof languages[l] === 'string' && languages[l].indexOf('-') > 0) {
              // Extract the region information if it is included
              var languageParts = languages[l].split('-');
              var baseLanguage = languageParts[0];

              resolvedLanguages.push(baseLanguage);
            }
          }

          return resolvedLanguages;
        };

        Defaults.prototype._processTranslations = function (languages, debug) {
          var translations = new Translation();

          for (var l = 0; l < languages.length; l++) {
            var languageData = new Translation();

            var language = languages[l];

            if (typeof language === 'string') {
              try {
                // Try to load it with the original name
                languageData = Translation.loadPath(language);
              } catch (e) {
                try {
                  // If we couldn't load it, check if it wasn't the full path
                  language = this.defaults.amdLanguageBase + language;
                  languageData = Translation.loadPath(language);
                } catch (ex) {
                  // The translation could not be loaded at all. Sometimes this is
                  // because of a configuration problem, other times this can be
                  // because of how Select2 helps load all possible translation files
                  if (debug && window.console && console.warn) {
                    console.warn(
                      'Select2: The language file for "' +
                        language +
                        '" could ' +
                        'not be automatically loaded. A fallback will be used instead.'
                    );
                  }
                }
              }
            } else if ($.isPlainObject(language)) {
              languageData = new Translation(language);
            } else {
              languageData = language;
            }

            translations.extend(languageData);
          }

          return translations;
        };

        Defaults.prototype.set = function (key, value) {
          var camelKey = $.camelCase(key);

          var data = {};
          data[camelKey] = value;

          var convertedData = Utils._convertData(data);

          $.extend(true, this.defaults, convertedData);
        };

        var defaults = new Defaults();

        return defaults;
      }
    );

    S2.define(
      'select2/options',
      ['jquery', './defaults', './utils'],
      function ($, Defaults, Utils) {
        function Options(options, $element) {
          this.options = options;

          if ($element != null) {
            this.fromElement($element);
          }

          if ($element != null) {
            this.options = Defaults.applyFromElement(this.options, $element);
          }

          this.options = Defaults.apply(this.options);
        }

        Options.prototype.fromElement = function ($e) {
          var excludedData = ['select2'];

          if (this.options.multiple == null) {
            this.options.multiple = $e.prop('multiple');
          }

          if (this.options.disabled == null) {
            this.options.disabled = $e.prop('disabled');
          }

          if (this.options.autocomplete == null && $e.prop('autocomplete')) {
            this.options.autocomplete = $e.prop('autocomplete');
          }

          if (this.options.dir == null) {
            if ($e.prop('dir')) {
              this.options.dir = $e.prop('dir');
            } else if ($e.closest('[dir]').prop('dir')) {
              this.options.dir = $e.closest('[dir]').prop('dir');
            } else {
              this.options.dir = 'ltr';
            }
          }

          $e.prop('disabled', this.options.disabled);
          $e.prop('multiple', this.options.multiple);

          if (Utils.GetData($e[0], 'select2Tags')) {
            if (this.options.debug && window.console && console.warn) {
              console.warn(
                'Select2: The `data-select2-tags` attribute has been changed to ' +
                  'use the `data-data` and `data-tags="true"` attributes and will be ' +
                  'removed in future versions of Select2.'
              );
            }

            Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));
            Utils.StoreData($e[0], 'tags', true);
          }

          if (Utils.GetData($e[0], 'ajaxUrl')) {
            if (this.options.debug && window.console && console.warn) {
              console.warn(
                'Select2: The `data-ajax-url` attribute has been changed to ' +
                  '`data-ajax--url` and support for the old attribute will be removed' +
                  ' in future versions of Select2.'
              );
            }

            $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));
            Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));
          }

          var dataset = {};

          function upperCaseLetter(_, letter) {
            return letter.toUpperCase();
          }

          // Pre-load all of the attributes which are prefixed with `data-`
          for (var attr = 0; attr < $e[0].attributes.length; attr++) {
            var attributeName = $e[0].attributes[attr].name;
            var prefix = 'data-';

            if (attributeName.substr(0, prefix.length) == prefix) {
              // Get the contents of the attribute after `data-`
              var dataName = attributeName.substring(prefix.length);

              // Get the data contents from the consistent source
              // This is more than likely the jQuery data helper
              var dataValue = Utils.GetData($e[0], dataName);

              // camelCase the attribute name to match the spec
              var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);

              // Store the data attribute contents into the dataset since
              dataset[camelDataName] = dataValue;
            }
          }

          // Prefer the element's `dataset` attribute if it exists
          // jQuery 1.x does not correctly handle data attributes with multiple dashes
          if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
            dataset = $.extend(true, {}, $e[0].dataset, dataset);
          }

          // Prefer our internal data cache if it exists
          var data = $.extend(true, {}, Utils.GetData($e[0]), dataset);

          data = Utils._convertData(data);

          for (var key in data) {
            if (excludedData.indexOf(key) > -1) {
              continue;
            }

            if ($.isPlainObject(this.options[key])) {
              $.extend(this.options[key], data[key]);
            } else {
              this.options[key] = data[key];
            }
          }

          return this;
        };

        Options.prototype.get = function (key) {
          return this.options[key];
        };

        Options.prototype.set = function (key, val) {
          this.options[key] = val;
        };

        return Options;
      }
    );

    S2.define(
      'select2/core',
      ['jquery', './options', './utils', './keys'],
      function ($, Options, Utils, KEYS) {
        var Select2 = function ($element, options) {
          if (Utils.GetData($element[0], 'select2') != null) {
            Utils.GetData($element[0], 'select2').destroy();
          }

          this.$element = $element;

          this.id = this._generateId($element);

          options = options || {};

          this.options = new Options(options, $element);

          Select2.__super__.constructor.call(this);

          // Set up the tabindex

          var tabindex = $element.attr('tabindex') || 0;
          Utils.StoreData($element[0], 'old-tabindex', tabindex);
          $element.attr('tabindex', '-1');

          // Set up containers and adapters

          var DataAdapter = this.options.get('dataAdapter');
          this.dataAdapter = new DataAdapter($element, this.options);

          var $container = this.render();

          this._placeContainer($container);

          var SelectionAdapter = this.options.get('selectionAdapter');
          this.selection = new SelectionAdapter($element, this.options);
          this.$selection = this.selection.render();

          this.selection.position(this.$selection, $container);

          var DropdownAdapter = this.options.get('dropdownAdapter');
          this.dropdown = new DropdownAdapter($element, this.options);
          this.$dropdown = this.dropdown.render();

          this.dropdown.position(this.$dropdown, $container);

          var ResultsAdapter = this.options.get('resultsAdapter');
          this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
          this.$results = this.results.render();

          this.results.position(this.$results, this.$dropdown);

          // Bind events

          var self = this;

          // Bind the container to all of the adapters
          this._bindAdapters();

          // Register any DOM event handlers
          this._registerDomEvents();

          // Register any internal event handlers
          this._registerDataEvents();
          this._registerSelectionEvents();
          this._registerDropdownEvents();
          this._registerResultsEvents();
          this._registerEvents();

          // Set the initial state
          this.dataAdapter.current(function (initialData) {
            self.trigger('selection:update', {
              data: initialData,
            });
          });

          // Hide the original select
          $element[0].classList.add('select2-hidden-accessible');
          $element.attr('aria-hidden', 'true');

          // Synchronize any monitored attributes
          this._syncAttributes();

          Utils.StoreData($element[0], 'select2', this);

          // Ensure backwards compatibility with $element.data('select2').
          $element.data('select2', this);
        };

        Utils.Extend(Select2, Utils.Observable);

        Select2.prototype._generateId = function ($element) {
          var id = '';

          if ($element.attr('id') != null) {
            id = $element.attr('id');
          } else if ($element.attr('name') != null) {
            id = $element.attr('name') + '-' + Utils.generateChars(2);
          } else {
            id = Utils.generateChars(4);
          }

          id = id.replace(/(:|\.|\[|\]|,)/g, '');
          id = 'select2-' + id;

          return id;
        };

        Select2.prototype._placeContainer = function ($container) {
          $container.insertAfter(this.$element);

          var width = this._resolveWidth(this.$element, this.options.get('width'));

          if (width != null) {
            $container.css('width', width);
          }
        };

        Select2.prototype._resolveWidth = function ($element, method) {
          var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

          if (method == 'resolve') {
            var styleWidth = this._resolveWidth($element, 'style');

            if (styleWidth != null) {
              return styleWidth;
            }

            return this._resolveWidth($element, 'element');
          }

          if (method == 'element') {
            var elementWidth = $element.outerWidth(false);

            if (elementWidth <= 0) {
              return 'auto';
            }

            return elementWidth + 'px';
          }

          if (method == 'style') {
            var style = $element.attr('style');

            if (typeof style !== 'string') {
              return null;
            }

            var attrs = style.split(';');

            for (var i = 0, l = attrs.length; i < l; i = i + 1) {
              var attr = attrs[i].replace(/\s/g, '');
              var matches = attr.match(WIDTH);

              if (matches !== null && matches.length >= 1) {
                return matches[1];
              }
            }

            return null;
          }

          if (method == 'computedstyle') {
            var computedStyle = window.getComputedStyle($element[0]);

            return computedStyle.width;
          }

          return method;
        };

        Select2.prototype._bindAdapters = function () {
          this.dataAdapter.bind(this, this.$container);
          this.selection.bind(this, this.$container);

          this.dropdown.bind(this, this.$container);
          this.results.bind(this, this.$container);
        };

        Select2.prototype._registerDomEvents = function () {
          var self = this;

          this.$element.on('change.select2', function () {
            self.dataAdapter.current(function (data) {
              self.trigger('selection:update', {
                data: data,
              });
            });
          });

          this.$element.on('focus.select2', function (evt) {
            self.trigger('focus', evt);
          });

          this._syncA = Utils.bind(this._syncAttributes, this);
          this._syncS = Utils.bind(this._syncSubtree, this);

          this._observer = new window.MutationObserver(function (mutations) {
            self._syncA();
            self._syncS(mutations);
          });
          this._observer.observe(this.$element[0], {
            attributes: true,
            childList: true,
            subtree: false,
          });
        };

        Select2.prototype._registerDataEvents = function () {
          var self = this;

          this.dataAdapter.on('*', function (name, params) {
            self.trigger(name, params);
          });
        };

        Select2.prototype._registerSelectionEvents = function () {
          var self = this;
          var nonRelayEvents = ['toggle', 'focus'];

          this.selection.on('toggle', function () {
            self.toggleDropdown();
          });

          this.selection.on('focus', function (params) {
            self.focus(params);
          });

          this.selection.on('*', function (name, params) {
            if (nonRelayEvents.indexOf(name) !== -1) {
              return;
            }

            self.trigger(name, params);
          });
        };

        Select2.prototype._registerDropdownEvents = function () {
          var self = this;

          this.dropdown.on('*', function (name, params) {
            self.trigger(name, params);
          });
        };

        Select2.prototype._registerResultsEvents = function () {
          var self = this;

          this.results.on('*', function (name, params) {
            self.trigger(name, params);
          });
        };

        Select2.prototype._registerEvents = function () {
          var self = this;

          this.on('open', function () {
            self.$container[0].classList.add('select2-container--open');
          });

          this.on('close', function () {
            self.$container[0].classList.remove('select2-container--open');
          });

          this.on('enable', function () {
            self.$container[0].classList.remove('select2-container--disabled');
          });

          this.on('disable', function () {
            self.$container[0].classList.add('select2-container--disabled');
          });

          this.on('blur', function () {
            self.$container[0].classList.remove('select2-container--focus');
          });

          this.on('query', function (params) {
            if (!self.isOpen()) {
              self.trigger('open', {});
            }

            this.dataAdapter.query(params, function (data) {
              self.trigger('results:all', {
                data: data,
                query: params,
              });
            });
          });

          this.on('query:append', function (params) {
            this.dataAdapter.query(params, function (data) {
              self.trigger('results:append', {
                data: data,
                query: params,
              });
            });
          });

          this.on('keypress', function (evt) {
            var key = evt.which;

            if (self.isOpen()) {
              if (key === KEYS.ESC || (key === KEYS.UP && evt.altKey)) {
                self.close(evt);

                evt.preventDefault();
              } else if (key === KEYS.ENTER || key === KEYS.TAB) {
                self.trigger('results:select', {});

                evt.preventDefault();
              } else if (key === KEYS.SPACE && evt.ctrlKey) {
                self.trigger('results:toggle', {});

                evt.preventDefault();
              } else if (key === KEYS.UP) {
                self.trigger('results:previous', {});

                evt.preventDefault();
              } else if (key === KEYS.DOWN) {
                self.trigger('results:next', {});

                evt.preventDefault();
              }
            } else {
              if (key === KEYS.ENTER || key === KEYS.SPACE || (key === KEYS.DOWN && evt.altKey)) {
                self.open();

                evt.preventDefault();
              }
            }
          });
        };

        Select2.prototype._syncAttributes = function () {
          this.options.set('disabled', this.$element.prop('disabled'));

          if (this.isDisabled()) {
            if (this.isOpen()) {
              this.close();
            }

            this.trigger('disable', {});
          } else {
            this.trigger('enable', {});
          }
        };

        Select2.prototype._isChangeMutation = function (mutations) {
          var self = this;

          if (mutations.addedNodes && mutations.addedNodes.length > 0) {
            for (var n = 0; n < mutations.addedNodes.length; n++) {
              var node = mutations.addedNodes[n];

              if (node.selected) {
                return true;
              }
            }
          } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
            return true;
          } else if (Array.isArray(mutations)) {
            return mutations.some(function (mutation) {
              return self._isChangeMutation(mutation);
            });
          }

          return false;
        };

        Select2.prototype._syncSubtree = function (mutations) {
          var changed = this._isChangeMutation(mutations);
          var self = this;

          // Only re-pull the data if we think there is a change
          if (changed) {
            this.dataAdapter.current(function (currentData) {
              self.trigger('selection:update', {
                data: currentData,
              });
            });
          }
        };

        /**
         * Override the trigger method to automatically trigger pre-events when
         * there are events that can be prevented.
         */
        Select2.prototype.trigger = function (name, args) {
          var actualTrigger = Select2.__super__.trigger;
          var preTriggerMap = {
            open: 'opening',
            close: 'closing',
            select: 'selecting',
            unselect: 'unselecting',
            clear: 'clearing',
          };

          if (args === undefined) {
            args = {};
          }

          if (name in preTriggerMap) {
            var preTriggerName = preTriggerMap[name];
            var preTriggerArgs = {
              prevented: false,
              name: name,
              args: args,
            };

            actualTrigger.call(this, preTriggerName, preTriggerArgs);

            if (preTriggerArgs.prevented) {
              args.prevented = true;

              return;
            }
          }

          actualTrigger.call(this, name, args);
        };

        Select2.prototype.toggleDropdown = function () {
          if (this.isDisabled()) {
            return;
          }

          if (this.isOpen()) {
            this.close();
          } else {
            this.open();
          }
        };

        Select2.prototype.open = function () {
          if (this.isOpen()) {
            return;
          }

          if (this.isDisabled()) {
            return;
          }

          this.trigger('query', {});
        };

        Select2.prototype.close = function (evt) {
          if (!this.isOpen()) {
            return;
          }

          this.trigger('close', { originalEvent: evt });
        };

        /**
         * Helper method to abstract the "enabled" (not "disabled") state of this
         * object.
         *
         * @return {true} if the instance is not disabled.
         * @return {false} if the instance is disabled.
         */
        Select2.prototype.isEnabled = function () {
          return !this.isDisabled();
        };

        /**
         * Helper method to abstract the "disabled" state of this object.
         *
         * @return {true} if the disabled option is true.
         * @return {false} if the disabled option is false.
         */
        Select2.prototype.isDisabled = function () {
          return this.options.get('disabled');
        };

        Select2.prototype.isOpen = function () {
          return this.$container[0].classList.contains('select2-container--open');
        };

        Select2.prototype.hasFocus = function () {
          return this.$container[0].classList.contains('select2-container--focus');
        };

        Select2.prototype.focus = function (data) {
          // No need to re-trigger focus events if we are already focused
          if (this.hasFocus()) {
            return;
          }

          this.$container[0].classList.add('select2-container--focus');
          this.trigger('focus', {});
        };

        Select2.prototype.enable = function (args) {
          if (this.options.get('debug') && window.console && console.warn) {
            console.warn(
              'Select2: The `select2("enable")` method has been deprecated and will' +
                ' be removed in later Select2 versions. Use $element.prop("disabled")' +
                ' instead.'
            );
          }

          if (args == null || args.length === 0) {
            args = [true];
          }

          var disabled = !args[0];

          this.$element.prop('disabled', disabled);
        };

        Select2.prototype.data = function () {
          if (this.options.get('debug') && arguments.length > 0 && window.console && console.warn) {
            console.warn(
              'Select2: Data can no longer be set using `select2("data")`. You ' +
                'should consider setting the value instead using `$element.val()`.'
            );
          }

          var data = [];

          this.dataAdapter.current(function (currentData) {
            data = currentData;
          });

          return data;
        };

        Select2.prototype.val = function (args) {
          if (this.options.get('debug') && window.console && console.warn) {
            console.warn(
              'Select2: The `select2("val")` method has been deprecated and will be' +
                ' removed in later Select2 versions. Use $element.val() instead.'
            );
          }

          if (args == null || args.length === 0) {
            return this.$element.val();
          }

          var newVal = args[0];

          if (Array.isArray(newVal)) {
            newVal = newVal.map(function (obj) {
              return obj.toString();
            });
          }

          this.$element.val(newVal).trigger('input').trigger('change');
        };

        Select2.prototype.destroy = function () {
          Utils.RemoveData(this.$container[0]);
          this.$container.remove();

          this._observer.disconnect();
          this._observer = null;

          this._syncA = null;
          this._syncS = null;

          this.$element.off('.select2');
          this.$element.attr('tabindex', Utils.GetData(this.$element[0], 'old-tabindex'));

          this.$element[0].classList.remove('select2-hidden-accessible');
          this.$element.attr('aria-hidden', 'false');
          Utils.RemoveData(this.$element[0]);
          this.$element.removeData('select2');

          this.dataAdapter.destroy();
          this.selection.destroy();
          this.dropdown.destroy();
          this.results.destroy();

          this.dataAdapter = null;
          this.selection = null;
          this.dropdown = null;
          this.results = null;
        };

        Select2.prototype.render = function () {
          var $container = $(
            '<span class="select2 select2-container">' +
              '<span class="selection"></span>' +
              '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
              '</span>'
          );

          $container.attr('dir', this.options.get('dir'));

          this.$container = $container;

          this.$container[0].classList.add('select2-container--' + this.options.get('theme'));

          Utils.StoreData($container[0], 'element', this.$element);

          return $container;
        };

        return Select2;
      }
    );

    S2.define('select2/dropdown/attachContainer', [], function () {
      function AttachContainer(decorated, $element, options) {
        decorated.call(this, $element, options);
      }

      AttachContainer.prototype.position = function (decorated, $dropdown, $container) {
        var $dropdownContainer = $container.find('.dropdown-wrapper');
        $dropdownContainer.append($dropdown);

        $dropdown[0].classList.add('select2-dropdown--below');
        $container[0].classList.add('select2-container--below');
      };

      return AttachContainer;
    });

    S2.define('select2/dropdown/stopPropagation', [], function () {
      function StopPropagation() {}

      StopPropagation.prototype.bind = function (decorated, container, $container) {
        decorated.call(this, container, $container);

        var stoppedEvents = [
          'blur',
          'change',
          'click',
          'dblclick',
          'focus',
          'focusin',
          'focusout',
          'input',
          'keydown',
          'keyup',
          'keypress',
          'mousedown',
          'mouseenter',
          'mouseleave',
          'mousemove',
          'mouseover',
          'mouseup',
          'search',
          'touchend',
          'touchstart',
        ];

        this.$dropdown.on(stoppedEvents.join(' '), function (evt) {
          evt.stopPropagation();
        });
      };

      return StopPropagation;
    });

    S2.define('select2/selection/stopPropagation', [], function () {
      function StopPropagation() {}

      StopPropagation.prototype.bind = function (decorated, container, $container) {
        decorated.call(this, container, $container);

        var stoppedEvents = [
          'blur',
          'change',
          'click',
          'dblclick',
          'focus',
          'focusin',
          'focusout',
          'input',
          'keydown',
          'keyup',
          'keypress',
          'mousedown',
          'mouseenter',
          'mouseleave',
          'mousemove',
          'mouseover',
          'mouseup',
          'search',
          'touchend',
          'touchstart',
        ];

        this.$selection.on(stoppedEvents.join(' '), function (evt) {
          evt.stopPropagation();
        });
      };

      return StopPropagation;
    });

    /*!
     * jQuery Mousewheel 3.1.13
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     */

    (function (factory) {
      if (typeof S2.define === 'function' && S2.define.amd) {
        // AMD. Register as an anonymous module.
        S2.define('jquery-mousewheel', ['jquery'], factory);
      } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
      } else {
        // Browser globals
        factory(jQuery);
      }
    })(function ($) {
      var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind =
          'onwheel' in document || document.documentMode >= 9
            ? ['wheel']
            : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice = Array.prototype.slice,
        nullLowestDeltaTimeout,
        lowestDelta;

      if ($.event.fixHooks) {
        for (var i = toFix.length; i; ) {
          $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
      }

      var special = ($.event.special.mousewheel = {
        version: '3.1.12',

        setup: function () {
          if (this.addEventListener) {
            for (var i = toBind.length; i; ) {
              this.addEventListener(toBind[--i], handler, false);
            }
          } else {
            this.onmousewheel = handler;
          }
          // Store the line height and page height for this particular element
          $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
          $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function () {
          if (this.removeEventListener) {
            for (var i = toBind.length; i; ) {
              this.removeEventListener(toBind[--i], handler, false);
            }
          } else {
            this.onmousewheel = null;
          }
          // Clean up the data we added to the element
          $.removeData(this, 'mousewheel-line-height');
          $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function (elem) {
          var $elem = $(elem),
            $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
          if (!$parent.length) {
            $parent = $('body');
          }
          return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function (elem) {
          return $(elem).height();
        },

        settings: {
          adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
          normalizeOffset: true, // calls getBoundingClientRect for each event
        },
      });

      $.fn.extend({
        mousewheel: function (fn) {
          return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function (fn) {
          return this.unbind('mousewheel', fn);
        },
      });

      function handler(event) {
        var orgEvent = event || window.event,
          args = slice.call(arguments, 1),
          delta = 0,
          deltaX = 0,
          deltaY = 0,
          absDelta = 0,
          offsetX = 0,
          offsetY = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ('detail' in orgEvent) {
          deltaY = orgEvent.detail * -1;
        }
        if ('wheelDelta' in orgEvent) {
          deltaY = orgEvent.wheelDelta;
        }
        if ('wheelDeltaY' in orgEvent) {
          deltaY = orgEvent.wheelDeltaY;
        }
        if ('wheelDeltaX' in orgEvent) {
          deltaX = orgEvent.wheelDeltaX * -1;
        }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
          deltaX = deltaY * -1;
          deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ('deltaY' in orgEvent) {
          deltaY = orgEvent.deltaY * -1;
          delta = deltaY;
        }
        if ('deltaX' in orgEvent) {
          deltaX = orgEvent.deltaX;
          if (deltaY === 0) {
            delta = deltaX * -1;
          }
        }

        // No change actually happened, no reason to go any further
        if (deltaY === 0 && deltaX === 0) {
          return;
        }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if (orgEvent.deltaMode === 1) {
          var lineHeight = $.data(this, 'mousewheel-line-height');
          delta *= lineHeight;
          deltaY *= lineHeight;
          deltaX *= lineHeight;
        } else if (orgEvent.deltaMode === 2) {
          var pageHeight = $.data(this, 'mousewheel-page-height');
          delta *= pageHeight;
          deltaY *= pageHeight;
          deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

        if (!lowestDelta || absDelta < lowestDelta) {
          lowestDelta = absDelta;

          // Adjust older deltas if necessary
          if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
            lowestDelta /= 40;
          }
        }

        // Adjust older deltas if necessary
        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
          // Divide all the things by 40!
          delta /= 40;
          deltaX /= 40;
          deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
          var boundingRect = this.getBoundingClientRect();
          offsetX = event.clientX - boundingRect.left;
          offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) {
          clearTimeout(nullLowestDeltaTimeout);
        }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
      }

      function nullLowestDelta() {
        lowestDelta = null;
      }

      function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return (
          special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0
        );
      }
    });

    S2.define(
      'jquery.select2',
      ['jquery', 'jquery-mousewheel', './select2/core', './select2/defaults', './select2/utils'],
      function ($, _, Select2, Defaults, Utils) {
        if ($.fn.select2 == null) {
          // All methods that should return the element
          var thisMethods = ['open', 'close', 'destroy'];

          $.fn.select2 = function (options) {
            options = options || {};

            if (typeof options === 'object') {
              this.each(function () {
                var instanceOptions = $.extend(true, {}, options);

                var instance = new Select2($(this), instanceOptions);
              });

              return this;
            } else if (typeof options === 'string') {
              var ret;
              var args = Array.prototype.slice.call(arguments, 1);

              this.each(function () {
                var instance = Utils.GetData(this, 'select2');

                if (instance == null && window.console && console.error) {
                  console.error(
                    "The select2('" +
                      options +
                      "') method was called on an " +
                      'element that is not using Select2.'
                  );
                }

                ret = instance[options].apply(instance, args);
              });

              // Check if we should be returning `this`
              if (thisMethods.indexOf(options) > -1) {
                return this;
              }

              return ret;
            } else {
              throw new Error('Invalid arguments for Select2: ' + options);
            }
          };
        }

        if ($.fn.select2.defaults == null) {
          $.fn.select2.defaults = Defaults;
        }

        return Select2;
      }
    );

    // Return the AMD loader configuration so it can be used outside of this file
    return {
      define: S2.define,
      require: S2.require,
    };
  })();

  // Autoload the jQuery bindings
  // We know that all of the modules exist above this, so we're safe
  var select2 = S2.require('jquery.select2');

  // Hold the AMD module references on the jQuery function that was just loaded
  // This allows Select2 to use the internal loader outside of this file, such
  // as in the language files.
  jQuery.fn.select2.amd = S2;

  // Return the Select2 instance for anyone who is importing it.
  return select2;
});

('use strict');

//
// Select2 Initialization
//

$.fn.select2.defaults.set('theme', 'bootstrap5');
$.fn.select2.defaults.set('width', '100%');
$.fn.select2.defaults.set('selectionCssClass', ':all:');
// #endregion

// #region / Bootstrap Maxlength v1.10.0
//   ____              _       _                     __  __            _                  _   _
//  |  _ \            | |     | |                   |  \/  |          | |                | | | |
//  | |_) | ___   ___ | |_ ___| |_ _ __ __ _ _ __   | \  / | __ ___  _| | ___ _ __   __ _| |_| |__
//  |  _ < / _ \ / _ \| __/ __| __| '__/ _` | '_ \  | |\/| |/ _` \ \/ / |/ _ \ '_ \ / _` | __| '_ \
//  | |_) | (_) | (_) | |_\__ \ |_| | | (_| | |_) | | |  | | (_| |>  <| |  __/ | | | (_| | |_| | | |
//  |____/ \___/ \___/ \__|___/\__|_|  \__,_| .__/  |_|  |_|\__,_/_/\_\_|\___|_| |_|\__, |\__|_| |_|
//                                          | |                                      __/ |
//                                          |_|                                     |___/             v1.10.0
/*!
 * bootstrap-maxlength.js v1.10.0 (https://github.com/mimo84/bootstrap-maxlength)
 * Copyright (c) 2013-2021 Maurizio Napoleoni;
 * Licensed under the terms of the MIT license (https://github.com/mimo84/bootstrap-maxlength/blob/master/LICENSE)
 */
/*global  jQuery*/

(function ($) {
  'use strict';
  /*!
   * We need an event when the elements are destroyed
   * because if an input is removed, we have to remove the
   * maxlength object associated (if any).
   * From:
   * http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom
   */
  if (!$.event.special.destroyed) {
    $.event.special.destroyed = {
      remove: function (o) {
        if (o.handler) {
          o.handler();
        }
      },
    };
  }

  $.fn.extend({
    maxlength: function (options, callback) {
      var documentBody = $('body'),
        defaults = {
          showOnReady: false, // true to always show when indicator is ready
          alwaysShow: true, // if true the indicator it's always shown.
          threshold: 0, // Represents how many chars left are needed to show up the counter
          warningClass: 'small form-text text-muted',
          limitReachedClass: 'small form-text text-danger',
          limitExceededClass: '',
          separator: ' / ',
          preText: '',
          postText: '',
          showMaxLength: true,
          placement: 'bottom-right-inside',
          message: null, // an alternative way to provide the message text
          showCharsTyped: true, // show the number of characters typed and not the number of characters remaining
          validate: false, // if the browser doesn't support the maxlength attribute, attempt to type more than the indicated chars, will be prevented.
          utf8: false, // counts using bytesize rather than length. eg: '£' is counted as 2 characters.
          appendToParent: false, // append the indicator to the input field's parent instead of body
          twoCharLinebreak: true, // count linebreak as 2 characters to match IE/Chrome textarea validation. As well as DB storage.
          customMaxAttribute: null, // null = use maxlength attribute and browser functionality, string = use specified attribute instead.
          customMaxClass: 'overmax', // Class to add to the input field when the maxlength is exceeded.
          allowOverMax: false, // Form submit validation is handled on your own.  when maxlength has been exceeded 'overmax' class added to element
          zIndex: 1099,
        };

      if ($.isFunction(options) && !callback) {
        callback = options;
        options = {};
      }
      options = $.extend(defaults, options);

      /**
       * Return the byte count of the specified character in UTF8 encoding.
       * Note: This won't cover UTF-8 characters that are 4 bytes long.
       *
       * @param input
       * @return {number}
       */
      function utf8CharByteCount(character) {
        var c = character.charCodeAt();
        // Not c then 0, else c < 128 then 1, else c < 2048 then 2, else 3
        return !c ? 0 : c < 128 ? 1 : c < 2048 ? 2 : 3;
      }

      /**
       * Return the length of the specified input in UTF8 encoding.
       *
       * @param input
       * @return {number}
       */
      function utf8Length(string) {
        return (
          string
            .split('')
            .map(utf8CharByteCount)
            // Prevent reduce from throwing an error if the string is empty.
            .concat(0)
            .reduce(function (sum, val) {
              return sum + val;
            })
        );
      }

      /**
       * Return the length of the specified input.
       *
       * @param input
       * @return {number}
       */
      function inputLength(input) {
        var text = input.val();

        if (options.twoCharLinebreak) {
          // Count all line breaks as 2 characters
          text = text.replace(/\r(?!\n)|\n(?!\r)/g, '\r\n');
        } else {
          // Remove all double-character (\r\n) linebreaks, so they're counted only once.
          text = text.replace(/(?:\r\n|\r|\n)/g, '\n');
        }

        var currentLength = 0;

        if (options.utf8) {
          currentLength = utf8Length(text);
        } else {
          currentLength = text.length;
        }

        // Remove "C:\fakepath\" from counter when using file input
        // Fix https://github.com/mimo84/bootstrap-maxlength/issues/146
        if (input.prop('type') === 'file' && input.val() !== '') {
          currentLength -= 12;
        }

        return currentLength;
      }

      /**
       * Truncate the text of the specified input.
       *
       * @param input
       * @param limit
       */
      function truncateChars(input, maxlength) {
        var text = input.val();

        if (options.twoCharLinebreak) {
          text = text.replace(/\r(?!\n)|\n(?!\r)/g, '\r\n');

          if (text[text.length - 1] === '\n') {
            maxlength -= text.length % 2;
          }
        }

        if (options.utf8) {
          var indexedSize = text.split('').map(utf8CharByteCount);
          for (
            var removedBytes = 0, bytesPastMax = utf8Length(text) - maxlength;
            removedBytes < bytesPastMax;
            removedBytes += indexedSize.pop()
          );
          maxlength -= maxlength - indexedSize.length;
        }

        input.val(text.substr(0, maxlength));
      }

      /**
       * Return true if the indicator should be showing up.
       *
       * @param input
       * @param threshold
       * @param maxlength
       * @return {number}
       */
      function charsLeftThreshold(input, threshold, maxlength) {
        var output = true;
        if (!options.alwaysShow && maxlength - inputLength(input) > threshold) {
          output = false;
        }
        return output;
      }

      /**
       * Returns how many chars are left to complete the fill up of the form.
       *
       * @param input
       * @param maxlength
       * @return {number}
       */
      function remainingChars(input, maxlength) {
        var length = maxlength - inputLength(input);
        return length;
      }

      /**
       * When called displays the indicator.
       *
       * @param indicator
       */
      function showRemaining(currentInput, indicator) {
        indicator.css({
          display: 'block',
        });
        currentInput.trigger('maxlength.shown');
      }

      /**
       * When called shows the indicator.
       *
       * @param indicator
       */
      function hideRemaining(currentInput, indicator) {
        if (options.alwaysShow) {
          return;
        }

        indicator.css({
          display: 'none',
        });
        currentInput.trigger('maxlength.hidden');
      }

      /**
       * This function updates the value in the indicator
       *
       * @param maxLengthThisInput
       * @param typedChars
       * @return String
       */
      function updateMaxLengthHTML(currentInputText, maxLengthThisInput, typedChars) {
        var output = '';
        if (options.message) {
          if (typeof options.message === 'function') {
            output = options.message(currentInputText, maxLengthThisInput);
          } else {
            output = options.message
              .replace('%charsTyped%', typedChars)
              .replace('%charsRemaining%', maxLengthThisInput - typedChars)
              .replace('%charsTotal%', maxLengthThisInput);
          }
        } else {
          if (options.preText) {
            output += options.preText;
          }
          if (!options.showCharsTyped) {
            output += maxLengthThisInput - typedChars;
          } else {
            output += typedChars;
          }
          if (options.showMaxLength) {
            output += options.separator + maxLengthThisInput;
          }
          if (options.postText) {
            output += options.postText;
          }
        }
        return output;
      }

      /**
       * This function updates the value of the counter in the indicator.
       * Wants as parameters: the number of remaining chars, the element currently managed,
       * the maxLength for the current input and the indicator generated for it.
       *
       * @param remaining
       * @param currentInput
       * @param maxLengthCurrentInput
       * @param maxLengthIndicator
       */
      function manageRemainingVisibility(
        remaining,
        currentInput,
        maxLengthCurrentInput,
        maxLengthIndicator
      ) {
        if (maxLengthIndicator) {
          maxLengthIndicator.html(
            updateMaxLengthHTML(
              currentInput.val(),
              maxLengthCurrentInput,
              maxLengthCurrentInput - remaining
            )
          );

          if (remaining > 0) {
            if (charsLeftThreshold(currentInput, options.threshold, maxLengthCurrentInput)) {
              showRemaining(
                currentInput,
                maxLengthIndicator
                  .removeClass(options.limitReachedClass + ' ' + options.limitExceededClass)
                  .addClass(options.warningClass)
              );
            } else {
              hideRemaining(currentInput, maxLengthIndicator);
            }
          } else {
            if (!options.limitExceededClass) {
              showRemaining(
                currentInput,
                maxLengthIndicator
                  .removeClass(options.warningClass)
                  .addClass(options.limitReachedClass)
              );
            } else {
              if (remaining === 0) {
                showRemaining(
                  currentInput,
                  maxLengthIndicator
                    .removeClass(options.warningClass + ' ' + options.limitExceededClass)
                    .addClass(options.limitReachedClass)
                );
              } else {
                showRemaining(
                  currentInput,
                  maxLengthIndicator
                    .removeClass(options.warningClass + ' ' + options.limitReachedClass)
                    .addClass(options.limitExceededClass)
                );
              }
            }
          }
        }

        if (options.customMaxAttribute) {
          // class to use for form validation on custom maxlength attribute
          if (remaining < 0) {
            currentInput.addClass(options.customMaxClass);
          } else {
            currentInput.removeClass(options.customMaxClass);
          }
        }
      }

      /**
       * This function returns an object containing all the
       * informations about the position of the current input
       *
       * @param currentInput
       * @return object {bottom height left right top width}
       *
       */
      function getPosition(currentInput) {
        var el = currentInput[0];
        return $.extend(
          {},
          typeof el.getBoundingClientRect === 'function'
            ? el.getBoundingClientRect()
            : {
                width: el.offsetWidth,
                height: el.offsetHeight,
              },
          currentInput.offset()
        );
      }

      /**
       * This function places the maxLengthIndicator based on placement config object.
       *
       * @param {object} placement
       * @param {$} maxLengthIndicator
       * @return null
       *
       */
      function placeWithCSS(placement, maxLengthIndicator) {
        if (!placement || !maxLengthIndicator) {
          return;
        }

        var POSITION_KEYS = ['top', 'bottom', 'left', 'right', 'position'];

        var cssPos = {};

        // filter css properties to position
        $.each(POSITION_KEYS, function (i, key) {
          var val = options.placement[key];
          if (typeof val !== 'undefined') {
            cssPos[key] = val;
          }
        });

        maxLengthIndicator.css(cssPos);

        return;
      }

      /**
       * This function places the maxLengthIndicator at the
       * top / bottom / left / right of the currentInput
       *
       * @param currentInput
       * @param maxLengthIndicator
       * @return null
       *
       */
      function place(currentInput, maxLengthIndicator) {
        var pos = getPosition(currentInput);

        // Supports custom placement handler
        if ($.type(options.placement) === 'function') {
          options.placement(currentInput, maxLengthIndicator, pos);
          return;
        }

        // Supports custom placement via css positional properties
        if ($.isPlainObject(options.placement)) {
          placeWithCSS(options.placement, maxLengthIndicator);
          return;
        }

        var inputOuter = currentInput.outerWidth(),
          outerWidth = maxLengthIndicator.outerWidth(),
          actualWidth = maxLengthIndicator.width(),
          actualHeight = maxLengthIndicator.height();

        // get the right position if the indicator is appended to the input's parent
        if (options.appendToParent) {
          pos.top -= currentInput.parent().offset().top;
          pos.left -= currentInput.parent().offset().left;
        }

        switch (options.placement) {
          case 'bottom':
            maxLengthIndicator.css({
              top: pos.top + pos.height,
              left: pos.left + pos.width / 2 - actualWidth / 2,
            });
            break;
          case 'top':
            maxLengthIndicator.css({
              top: pos.top - actualHeight,
              left: pos.left + pos.width / 2 - actualWidth / 2,
            });
            break;
          case 'left':
            maxLengthIndicator.css({
              top: pos.top + pos.height / 2 - actualHeight / 2,
              left: pos.left - actualWidth,
            });
            break;
          case 'right':
            maxLengthIndicator.css({
              top: pos.top + pos.height / 2 - actualHeight / 2,
              left: pos.left + pos.width,
            });
            break;
          case 'bottom-right':
            maxLengthIndicator.css({
              top: pos.top + pos.height,
              left: pos.left + pos.width,
            });
            break;
          case 'top-right':
            maxLengthIndicator.css({
              top: pos.top - actualHeight,
              left: pos.left + inputOuter,
            });
            break;
          case 'top-left':
            maxLengthIndicator.css({
              top: pos.top - actualHeight,
              left: pos.left - outerWidth,
            });
            break;
          case 'bottom-left':
            maxLengthIndicator.css({
              top: pos.top + currentInput.outerHeight(),
              left: pos.left - outerWidth,
            });
            break;
          case 'centered-right':
            maxLengthIndicator.css({
              top: pos.top + actualHeight / 2,
              left: pos.left + inputOuter - outerWidth - 3,
            });
            break;

          // Some more options for placements
          case 'bottom-right-inside':
            maxLengthIndicator.css({
              top: pos.top + pos.height,
              left: pos.left + pos.width - outerWidth,
            });
            break;
          case 'top-right-inside':
            maxLengthIndicator.css({
              top: pos.top - actualHeight,
              left: pos.left + inputOuter - outerWidth,
            });
            break;
          case 'top-left-inside':
            maxLengthIndicator.css({
              top: pos.top - actualHeight,
              left: pos.left,
            });
            break;
          case 'bottom-left-inside':
            maxLengthIndicator.css({
              top: pos.top + currentInput.outerHeight(),
              left: pos.left,
            });
            break;
        }
      }

      /**
       * This function returns true if the indicator position needs to
       * be recalculated when the currentInput changes
       *
       * @return {boolean}
       *
       */
      function isPlacementMutable() {
        return (
          options.placement === 'bottom-right-inside' ||
          options.placement === 'top-right-inside' ||
          typeof options.placement === 'function' ||
          (options.message && typeof options.message === 'function')
        );
      }

      /**
       * This function retrieves the maximum length of currentInput
       *
       * @param currentInput
       * @return {number}
       *
       */
      function getMaxLength(currentInput) {
        var max = currentInput.attr('maxlength') || options.customMaxAttribute;

        if (options.customMaxAttribute && !options.allowOverMax) {
          var custom = currentInput.attr(options.customMaxAttribute);
          if (!max || custom < max) {
            max = custom;
          }
        }

        if (!max) {
          max = currentInput.attr('size');
        }
        return max;
      }

      return this.each(function () {
        var currentInput = $(this),
          maxLengthCurrentInput,
          maxLengthIndicator;

        $(window).resize(function () {
          if (maxLengthIndicator) {
            place(currentInput, maxLengthIndicator);
          }
        });

        function firstInit() {
          var maxlengthContent = updateMaxLengthHTML(
            currentInput.val(),
            maxLengthCurrentInput,
            '0'
          );
          maxLengthCurrentInput = getMaxLength(currentInput);

          if (!maxLengthIndicator) {
            maxLengthIndicator = $('<span class="bootstrap-maxlength"></span>')
              .css({
                display: 'none',
                position: 'absolute',
                whiteSpace: 'nowrap',
                zIndex: options.zIndex,
              })
              .html(maxlengthContent);
          }

          // We need to detect resizes if we are dealing with a textarea:
          if (currentInput.is('textarea')) {
            currentInput.data('maxlenghtsizex', currentInput.outerWidth());
            currentInput.data('maxlenghtsizey', currentInput.outerHeight());

            currentInput.mouseup(function () {
              if (
                currentInput.outerWidth() !== currentInput.data('maxlenghtsizex') ||
                currentInput.outerHeight() !== currentInput.data('maxlenghtsizey')
              ) {
                place(currentInput, maxLengthIndicator);
              }

              currentInput.data('maxlenghtsizex', currentInput.outerWidth());
              currentInput.data('maxlenghtsizey', currentInput.outerHeight());
            });
          }

          if (options.appendToParent) {
            currentInput.parent().append(maxLengthIndicator);
            currentInput.parent().css('position', 'relative');
          } else {
            documentBody.append(maxLengthIndicator);
          }

          var remaining = remainingChars(currentInput, getMaxLength(currentInput));
          manageRemainingVisibility(
            remaining,
            currentInput,
            maxLengthCurrentInput,
            maxLengthIndicator
          );
          place(currentInput, maxLengthIndicator);
        }

        if (options.showOnReady) {
          currentInput.ready(function () {
            firstInit();
          });
        } else {
          currentInput.focus(function () {
            firstInit();
          });
        }

        currentInput.on('maxlength.reposition', function () {
          place(currentInput, maxLengthIndicator);
        });

        currentInput.on('destroyed', function () {
          if (maxLengthIndicator) {
            maxLengthIndicator.remove();
          }
        });

        currentInput.on('blur', function () {
          if (maxLengthIndicator && !options.showOnReady) {
            maxLengthIndicator.remove();
          }
        });

        currentInput.on('input', function () {
          var maxlength = getMaxLength(currentInput),
            remaining = remainingChars(currentInput, maxlength),
            output = true;

          if (options.validate && remaining < 0) {
            truncateChars(currentInput, maxlength);
            output = false;
          } else {
            manageRemainingVisibility(
              remaining,
              currentInput,
              maxLengthCurrentInput,
              maxLengthIndicator
            );
          }

          // if (isPlacementMutable()) {
          //   place(currentInput, maxLengthIndicator);
          // }

          return output;
        });
      });
    },
  });
})(jQuery);
// #endregion

// #region / Clipboard v2.0.10
//    _____ _ _       _                         _
//   / ____| (_)     | |                       | |
//  | |    | |_ _ __ | |__   ___   __ _ _ __ __| |
//  | |    | | | '_ \| '_ \ / _ \ / _` | '__/ _` |
//  | |____| | | |_) | |_) | (_) | (_| | | | (_| |
//   \_____|_|_| .__/|_.__/ \___/ \__,_|_|  \__,_|
//             | |
//             |_|                                  v2.0.10
/*!
 * clipboard.js v2.0.10 (https://clipboardjs.com/)
 * Licensed MIT © Zeno Rocha ()
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();
  else if (typeof define === 'function' && define.amd) define([], factory);
  else if (typeof exports === 'object') exports['ClipboardJS'] = factory();
  else root['ClipboardJS'] = factory();
})(this, function () {
  return /******/ (function () {
    // webpackBootstrap
    /******/ var __webpack_modules__ = {
      /***/ 686: /***/ function (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) {
        'use strict';

        // EXPORTS
        __webpack_require__.d(__webpack_exports__, {
          default: function () {
            return /* binding */ clipboard;
          },
        });

        // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js
        var tiny_emitter = __webpack_require__(279);
        var tiny_emitter_default = /*#__PURE__*/ __webpack_require__.n(tiny_emitter);
        // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js
        var listen = __webpack_require__(370);
        var listen_default = /*#__PURE__*/ __webpack_require__.n(listen);
        // EXTERNAL MODULE: ./node_modules/select/src/select.js
        var src_select = __webpack_require__(817);
        var select_default = /*#__PURE__*/ __webpack_require__.n(src_select); // CONCATENATED MODULE: ./src/common/command.js
        /**
         * Executes a given operation type.
         * @param {String} type
         * @return {Boolean}
         */
        function command(type) {
          try {
            return document.execCommand(type);
          } catch (err) {
            return false;
          }
        } // CONCATENATED MODULE: ./src/actions/cut.js
        /**
         * Cut action wrapper.
         * @param {String|HTMLElement} target
         * @return {String}
         */

        var ClipboardActionCut = function ClipboardActionCut(target) {
          var selectedText = select_default()(target);
          command('cut');
          return selectedText;
        };

        /* harmony default export */ var actions_cut = ClipboardActionCut; // CONCATENATED MODULE: ./src/common/create-fake-element.js
        /**
         * Creates a fake textarea element with a value.
         * @param {String} value
         * @return {HTMLElement}
         */
        function createFakeElement(value) {
          var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
          var fakeElement = document.createElement('textarea'); // Prevent zooming on iOS

          fakeElement.style.fontSize = '12pt'; // Reset box model

          fakeElement.style.border = '0';
          fakeElement.style.padding = '0';
          fakeElement.style.margin = '0'; // Move element out of screen horizontally

          fakeElement.style.position = 'absolute';
          fakeElement.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically

          var yPosition = window.pageYOffset || document.documentElement.scrollTop;
          fakeElement.style.top = ''.concat(yPosition, 'px');
          fakeElement.setAttribute('readonly', '');
          fakeElement.value = value;
          return fakeElement;
        } // CONCATENATED MODULE: ./src/actions/copy.js
        /**
         * Copy action wrapper.
         * @param {String|HTMLElement} target
         * @param {Object} options
         * @return {String}
         */

        var ClipboardActionCopy = function ClipboardActionCopy(target) {
          var options =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {
                  container: document.body,
                };
          var selectedText = '';

          if (typeof target === 'string') {
            var fakeElement = createFakeElement(target);
            options.container.appendChild(fakeElement);
            selectedText = select_default()(fakeElement);
            command('copy');
            fakeElement.remove();
          } else {
            selectedText = select_default()(target);
            command('copy');
          }

          return selectedText;
        };

        /* harmony default export */ var actions_copy = ClipboardActionCopy; // CONCATENATED MODULE: ./src/actions/default.js
        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        /**
         * Inner function which performs selection from either `text` or `target`
         * properties and then executes copy or cut operations.
         * @param {Object} options
         */

        var ClipboardActionDefault = function ClipboardActionDefault() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          // Defines base properties passed from constructor.
          var _options$action = options.action,
            action = _options$action === void 0 ? 'copy' : _options$action,
            container = options.container,
            target = options.target,
            text = options.text; // Sets the `action` to be performed which can be either 'copy' or 'cut'.

          if (action !== 'copy' && action !== 'cut') {
            throw new Error('Invalid "action" value, use either "copy" or "cut"');
          } // Sets the `target` property using an element that will be have its content copied.

          if (target !== undefined) {
            if (target && _typeof(target) === 'object' && target.nodeType === 1) {
              if (action === 'copy' && target.hasAttribute('disabled')) {
                throw new Error(
                  'Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute'
                );
              }

              if (
                action === 'cut' &&
                (target.hasAttribute('readonly') || target.hasAttribute('disabled'))
              ) {
                throw new Error(
                  'Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes'
                );
              }
            } else {
              throw new Error('Invalid "target" value, use a valid Element');
            }
          } // Define selection strategy based on `text` property.

          if (text) {
            return actions_copy(text, {
              container: container,
            });
          } // Defines which selection strategy based on `target` property.

          if (target) {
            return action === 'cut'
              ? actions_cut(target)
              : actions_copy(target, {
                  container: container,
                });
          }
        };

        /* harmony default export */ var actions_default = ClipboardActionDefault; // CONCATENATED MODULE: ./src/clipboard.js
        function clipboard_typeof(obj) {
          '@babel/helpers - typeof';
          if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
            clipboard_typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            clipboard_typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return clipboard_typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function');
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: { value: subClass, writable: true, configurable: true },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (clipboard_typeof(call) === 'object' || typeof call === 'function')) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        /**
         * Helper function to retrieve attribute value.
         * @param {String} suffix
         * @param {Element} element
         */

        function getAttributeValue(suffix, element) {
          var attribute = 'data-clipboard-'.concat(suffix);

          if (!element.hasAttribute(attribute)) {
            return;
          }

          return element.getAttribute(attribute);
        }
        /**
         * Base class which takes one or more elements, adds event listeners to them,
         * and instantiates a new `ClipboardAction` on each click.
         */

        var Clipboard = /*#__PURE__*/ (function (_Emitter) {
          _inherits(Clipboard, _Emitter);

          var _super = _createSuper(Clipboard);

          /**
           * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
           * @param {Object} options
           */
          function Clipboard(trigger, options) {
            var _this;

            _classCallCheck(this, Clipboard);

            _this = _super.call(this);

            _this.resolveOptions(options);

            _this.listenClick(trigger);

            return _this;
          }
          /**
           * Defines if attributes would be resolved using internal setter functions
           * or custom functions that were passed in the constructor.
           * @param {Object} options
           */

          _createClass(
            Clipboard,
            [
              {
                key: 'resolveOptions',
                value: function resolveOptions() {
                  var options =
                    arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                  this.action =
                    typeof options.action === 'function' ? options.action : this.defaultAction;
                  this.target =
                    typeof options.target === 'function' ? options.target : this.defaultTarget;
                  this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                  this.container =
                    clipboard_typeof(options.container) === 'object'
                      ? options.container
                      : document.body;
                },
                /**
                 * Adds a click event listener to the passed trigger.
                 * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                 */
              },
              {
                key: 'listenClick',
                value: function listenClick(trigger) {
                  var _this2 = this;

                  this.listener = listen_default()(trigger, 'click', function (e) {
                    return _this2.onClick(e);
                  });
                },
                /**
                 * Defines a new `ClipboardAction` on each click event.
                 * @param {Event} e
                 */
              },
              {
                key: 'onClick',
                value: function onClick(e) {
                  var trigger = e.delegateTarget || e.currentTarget;
                  var action = this.action(trigger) || 'copy';
                  var text = actions_default({
                    action: action,
                    container: this.container,
                    target: this.target(trigger),
                    text: this.text(trigger),
                  }); // Fires an event based on the copy operation result.

                  this.emit(text ? 'success' : 'error', {
                    action: action,
                    text: text,
                    trigger: trigger,
                    clearSelection: function clearSelection() {
                      if (trigger) {
                        trigger.focus();
                      }

                      document.activeElement.blur();
                      window.getSelection().removeAllRanges();
                    },
                  });
                },
                /**
                 * Default `action` lookup function.
                 * @param {Element} trigger
                 */
              },
              {
                key: 'defaultAction',
                value: function defaultAction(trigger) {
                  return getAttributeValue('action', trigger);
                },
                /**
                 * Default `target` lookup function.
                 * @param {Element} trigger
                 */
              },
              {
                key: 'defaultTarget',
                value: function defaultTarget(trigger) {
                  var selector = getAttributeValue('target', trigger);

                  if (selector) {
                    return document.querySelector(selector);
                  }
                },
                /**
                 * Allow fire programmatically a copy action
                 * @param {String|HTMLElement} target
                 * @param {Object} options
                 * @returns Text copied.
                 */
              },
              {
                key: 'defaultText',

                /**
                 * Default `text` lookup function.
                 * @param {Element} trigger
                 */
                value: function defaultText(trigger) {
                  return getAttributeValue('text', trigger);
                },
                /**
                 * Destroy lifecycle.
                 */
              },
              {
                key: 'destroy',
                value: function destroy() {
                  this.listener.destroy();
                },
              },
            ],
            [
              {
                key: 'copy',
                value: function copy(target) {
                  var options =
                    arguments.length > 1 && arguments[1] !== undefined
                      ? arguments[1]
                      : {
                          container: document.body,
                        };
                  return actions_copy(target, options);
                },
                /**
                 * Allow fire programmatically a cut action
                 * @param {String|HTMLElement} target
                 * @returns Text cutted.
                 */
              },
              {
                key: 'cut',
                value: function cut(target) {
                  return actions_cut(target);
                },
                /**
                 * Returns the support of the given action, or all actions if no action is
                 * given.
                 * @param {String} [action]
                 */
              },
              {
                key: 'isSupported',
                value: function isSupported() {
                  var action =
                    arguments.length > 0 && arguments[0] !== undefined
                      ? arguments[0]
                      : ['copy', 'cut'];
                  var actions = typeof action === 'string' ? [action] : action;
                  var support = !!document.queryCommandSupported;
                  actions.forEach(function (action) {
                    support = support && !!document.queryCommandSupported(action);
                  });
                  return support;
                },
              },
            ]
          );

          return Clipboard;
        })(tiny_emitter_default());

        /* harmony default export */ var clipboard = Clipboard;

        /***/
      },

      /***/ 828: /***/ function (module) {
        var DOCUMENT_NODE_TYPE = 9;

        /**
         * A polyfill for Element.matches()
         */
        if (typeof Element !== 'undefined' && !Element.prototype.matches) {
          var proto = Element.prototype;

          proto.matches =
            proto.matchesSelector ||
            proto.mozMatchesSelector ||
            proto.msMatchesSelector ||
            proto.oMatchesSelector ||
            proto.webkitMatchesSelector;
        }

        /**
         * Finds the closest parent that matches a selector.
         *
         * @param {Element} element
         * @param {String} selector
         * @return {Function}
         */
        function closest(element, selector) {
          while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
            if (typeof element.matches === 'function' && element.matches(selector)) {
              return element;
            }
            element = element.parentNode;
          }
        }

        module.exports = closest;

        /***/
      },

      /***/ 438: /***/ function (module, __unused_webpack_exports, __webpack_require__) {
        var closest = __webpack_require__(828);

        /**
         * Delegates event to a selector.
         *
         * @param {Element} element
         * @param {String} selector
         * @param {String} type
         * @param {Function} callback
         * @param {Boolean} useCapture
         * @return {Object}
         */
        function _delegate(element, selector, type, callback, useCapture) {
          var listenerFn = listener.apply(this, arguments);

          element.addEventListener(type, listenerFn, useCapture);

          return {
            destroy: function () {
              element.removeEventListener(type, listenerFn, useCapture);
            },
          };
        }

        /**
         * Delegates event to a selector.
         *
         * @param {Element|String|Array} [elements]
         * @param {String} selector
         * @param {String} type
         * @param {Function} callback
         * @param {Boolean} useCapture
         * @return {Object}
         */
        function delegate(elements, selector, type, callback, useCapture) {
          // Handle the regular Element usage
          if (typeof elements.addEventListener === 'function') {
            return _delegate.apply(null, arguments);
          }

          // Handle Element-less usage, it defaults to global delegation
          if (typeof type === 'function') {
            // Use `document` as the first parameter, then apply arguments
            // This is a short way to .unshift `arguments` without running into deoptimizations
            return _delegate.bind(null, document).apply(null, arguments);
          }

          // Handle Selector-based usage
          if (typeof elements === 'string') {
            elements = document.querySelectorAll(elements);
          }

          // Handle Array-like based usage
          return Array.prototype.map.call(elements, function (element) {
            return _delegate(element, selector, type, callback, useCapture);
          });
        }

        /**
         * Finds closest match and invokes callback.
         *
         * @param {Element} element
         * @param {String} selector
         * @param {String} type
         * @param {Function} callback
         * @return {Function}
         */
        function listener(element, selector, type, callback) {
          return function (e) {
            e.delegateTarget = closest(e.target, selector);

            if (e.delegateTarget) {
              callback.call(element, e);
            }
          };
        }

        module.exports = delegate;

        /***/
      },

      /***/ 879: /***/ function (__unused_webpack_module, exports) {
        /**
         * Check if argument is a HTML element.
         *
         * @param {Object} value
         * @return {Boolean}
         */
        exports.node = function (value) {
          return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
        };

        /**
         * Check if argument is a list of HTML elements.
         *
         * @param {Object} value
         * @return {Boolean}
         */
        exports.nodeList = function (value) {
          var type = Object.prototype.toString.call(value);

          return (
            value !== undefined &&
            (type === '[object NodeList]' || type === '[object HTMLCollection]') &&
            'length' in value &&
            (value.length === 0 || exports.node(value[0]))
          );
        };

        /**
         * Check if argument is a string.
         *
         * @param {Object} value
         * @return {Boolean}
         */
        exports.string = function (value) {
          return typeof value === 'string' || value instanceof String;
        };

        /**
         * Check if argument is a function.
         *
         * @param {Object} value
         * @return {Boolean}
         */
        exports.fn = function (value) {
          var type = Object.prototype.toString.call(value);

          return type === '[object Function]';
        };

        /***/
      },

      /***/ 370: /***/ function (module, __unused_webpack_exports, __webpack_require__) {
        var is = __webpack_require__(879);
        var delegate = __webpack_require__(438);

        /**
         * Validates all params and calls the right
         * listener function based on its target type.
         *
         * @param {String|HTMLElement|HTMLCollection|NodeList} target
         * @param {String} type
         * @param {Function} callback
         * @return {Object}
         */
        function listen(target, type, callback) {
          if (!target && !type && !callback) {
            throw new Error('Missing required arguments');
          }

          if (!is.string(type)) {
            throw new TypeError('Second argument must be a String');
          }

          if (!is.fn(callback)) {
            throw new TypeError('Third argument must be a Function');
          }

          if (is.node(target)) {
            return listenNode(target, type, callback);
          } else if (is.nodeList(target)) {
            return listenNodeList(target, type, callback);
          } else if (is.string(target)) {
            return listenSelector(target, type, callback);
          } else {
            throw new TypeError(
              'First argument must be a String, HTMLElement, HTMLCollection, or NodeList'
            );
          }
        }

        /**
         * Adds an event listener to a HTML element
         * and returns a remove listener function.
         *
         * @param {HTMLElement} node
         * @param {String} type
         * @param {Function} callback
         * @return {Object}
         */
        function listenNode(node, type, callback) {
          node.addEventListener(type, callback);

          return {
            destroy: function () {
              node.removeEventListener(type, callback);
            },
          };
        }

        /**
         * Add an event listener to a list of HTML elements
         * and returns a remove listener function.
         *
         * @param {NodeList|HTMLCollection} nodeList
         * @param {String} type
         * @param {Function} callback
         * @return {Object}
         */
        function listenNodeList(nodeList, type, callback) {
          Array.prototype.forEach.call(nodeList, function (node) {
            node.addEventListener(type, callback);
          });

          return {
            destroy: function () {
              Array.prototype.forEach.call(nodeList, function (node) {
                node.removeEventListener(type, callback);
              });
            },
          };
        }

        /**
         * Add an event listener to a selector
         * and returns a remove listener function.
         *
         * @param {String} selector
         * @param {String} type
         * @param {Function} callback
         * @return {Object}
         */
        function listenSelector(selector, type, callback) {
          return delegate(document.body, selector, type, callback);
        }

        module.exports = listen;

        /***/
      },

      /***/ 817: /***/ function (module) {
        function select(element) {
          var selectedText;

          if (element.nodeName === 'SELECT') {
            element.focus();

            selectedText = element.value;
          } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
            var isReadOnly = element.hasAttribute('readonly');

            if (!isReadOnly) {
              element.setAttribute('readonly', '');
            }

            element.select();
            element.setSelectionRange(0, element.value.length);

            if (!isReadOnly) {
              element.removeAttribute('readonly');
            }

            selectedText = element.value;
          } else {
            if (element.hasAttribute('contenteditable')) {
              element.focus();
            }

            var selection = window.getSelection();
            var range = document.createRange();

            range.selectNodeContents(element);
            selection.removeAllRanges();
            selection.addRange(range);

            selectedText = selection.toString();
          }

          return selectedText;
        }

        module.exports = select;

        /***/
      },

      /***/ 279: /***/ function (module) {
        function E() {
          // Keep this empty so it's easier to inherit from
          // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
        }

        E.prototype = {
          on: function (name, callback, ctx) {
            var e = this.e || (this.e = {});

            (e[name] || (e[name] = [])).push({
              fn: callback,
              ctx: ctx,
            });

            return this;
          },

          once: function (name, callback, ctx) {
            var self = this;
            function listener() {
              self.off(name, listener);
              callback.apply(ctx, arguments);
            }

            listener._ = callback;
            return this.on(name, listener, ctx);
          },

          emit: function (name) {
            var data = [].slice.call(arguments, 1);
            var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
            var i = 0;
            var len = evtArr.length;

            for (i; i < len; i++) {
              evtArr[i].fn.apply(evtArr[i].ctx, data);
            }

            return this;
          },

          off: function (name, callback) {
            var e = this.e || (this.e = {});
            var evts = e[name];
            var liveEvents = [];

            if (evts && callback) {
              for (var i = 0, len = evts.length; i < len; i++) {
                if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
              }
            }

            // Remove event from queue to prevent memory leak
            // Suggested by https://github.com/lazd
            // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

            liveEvents.length ? (e[name] = liveEvents) : delete e[name];

            return this;
          },
        };

        module.exports = E;
        module.exports.TinyEmitter = E;

        /***/
      },

      /******/
    };
    /************************************************************************/
    /******/ // The module cache
    /******/ var __webpack_module_cache__ = {};
    /******/
    /******/ // The require function
    /******/ function __webpack_require__(moduleId) {
      /******/ // Check if module is in cache
      /******/ if (__webpack_module_cache__[moduleId]) {
        /******/ return __webpack_module_cache__[moduleId].exports;
        /******/
      }
      /******/ // Create a new module (and put it into the cache)
      /******/ var module = (__webpack_module_cache__[moduleId] = {
        /******/ // no module.id needed
        /******/ // no module.loaded needed
        /******/ exports: {},
        /******/
      });
      /******/
      /******/ // Execute the module function
      /******/ __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
      /******/
      /******/ // Return the exports of the module
      /******/ return module.exports;
      /******/
    }
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/compat get default export */ /******/ !(function () {
      /******/ // getDefaultExport function for compatibility with non-harmony modules
      /******/ __webpack_require__.n = function (module) {
        /******/ var getter =
          module && module.__esModule
            ? /******/ function () {
                return module['default'];
              }
            : /******/ function () {
                return module;
              };
        /******/ __webpack_require__.d(getter, { a: getter });
        /******/ return getter;
        /******/
      };
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/define property getters */ /******/ !(function () {
      /******/ // define getter functions for harmony exports
      /******/ __webpack_require__.d = function (exports, definition) {
        /******/ for (var key in definition) {
          /******/ if (
            __webpack_require__.o(definition, key) &&
            !__webpack_require__.o(exports, key)
          ) {
            /******/ Object.defineProperty(exports, key, {
              enumerable: true,
              get: definition[key],
            });
            /******/
          }
          /******/
        }
        /******/
      };
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ !(function () {
      /******/ __webpack_require__.o = function (obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      };
      /******/
    })();
    /******/
    /************************************************************************/
    /******/ // module exports must be returned from runtime so entry inlining is disabled
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ return __webpack_require__(686);
    /******/
  })().default;
});
// #endregion

// #region / Smooth Scroll v16.1.3
//    _____                       _   _        _____                _ _
//   / ____|                     | | | |      / ____|              | | |
//  | (___  _ __ ___   ___   ___ | |_| |__   | (___   ___ _ __ ___ | | |
//   \___ \| '_ ` _ \ / _ \ / _ \| __| '_ \   \___ \ / __| '__/ _ \| | |
//   ____) | | | | | | (_) | (_) | |_| | | |  ____) | (__| | | (_) | | |
//  |_____/|_| |_| |_|\___/ \___/ \__|_| |_| |_____/ \___|_|  \___/|_|_|
//
//                                                                        v16.1.3
/*!
 * smooth-scroll v16.1.2 (https://github.com/cferdinandi/smooth-scroll)
 * Animate scrolling to anchor links
 * (c) 2020 Chris Ferdinandi - MIT License (http://github.com/cferdinandi/smooth-scroll)
 */

/**
 * closest() polyfill
 * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
 */
if (window.Element && !Element.prototype.closest) {
  Element.prototype.closest = function (s) {
    var matches = (this.document || this.ownerDocument).querySelectorAll(s),
      i,
      el = this;
    do {
      i = matches.length;
      while (--i >= 0 && matches.item(i) !== el) {}
    } while (i < 0 && (el = el.parentElement));
    return el;
  };
}

/**
 * CustomEvent() polyfill
 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill
 */
(function () {
  if (typeof window.CustomEvent === 'function') return false;

  function CustomEvent(event, params) {
    params = params || { bubbles: false, cancelable: false, detail: undefined };
    var evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  }

  CustomEvent.prototype = window.Event.prototype;

  window.CustomEvent = CustomEvent;
})();
/**
 * requestAnimationFrame() polyfill
 * By Erik Möller. Fixes from Paul Irish and Tino Zijdel.
 * @link http://paulirish.com/2011/requestanimationframe-for-smart-animating/
 * @link http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 * @license MIT
 */
(function () {
  var lastTime = 0;
  var vendors = ['ms', 'moz', 'webkit', 'o'];
  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame =
      window[vendors[x] + 'CancelAnimationFrame'] ||
      window[vendors[x] + 'CancelRequestAnimationFrame'];
  }

  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function (callback, element) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function () {
        callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }

  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };
  }
})();

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], function () {
      return factory(root);
    });
  } else if (typeof exports === 'object') {
    module.exports = factory(root);
  } else {
    root.SmoothScroll = factory(root);
  }
})(
  typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this,
  function (window) {
    'use strict';

    //
    // Default settings
    //

    var defaults = {
      // Selectors
      ignore: '[data-scroll-ignore]',
      header: null,
      topOnEmptyHash: true,

      // Speed & Duration
      speed: 500,
      speedAsDuration: false,
      durationMax: null,
      durationMin: null,
      clip: true,
      offset: 0,

      // Easing
      easing: 'easeInOutCubic',
      customEasing: null,

      // History
      updateURL: true,
      popstate: true,

      // Custom Events
      emitEvents: true,
    };

    //
    // Utility Methods
    //

    /**
     * Check if browser supports required methods
     * @return {Boolean} Returns true if all required methods are supported
     */
    var supports = function () {
      return (
        'querySelector' in document &&
        'addEventListener' in window &&
        'requestAnimationFrame' in window &&
        'closest' in window.Element.prototype
      );
    };

    /**
     * Merge two or more objects together.
     * @param   {Object}   objects  The objects to merge together
     * @returns {Object}            Merged values of defaults and options
     */
    var extend = function () {
      var merged = {};
      Array.prototype.forEach.call(arguments, function (obj) {
        for (var key in obj) {
          if (!obj.hasOwnProperty(key)) return;
          merged[key] = obj[key];
        }
      });
      return merged;
    };

    /**
     * Check to see if user prefers reduced motion
     * @param  {Object} settings Script settings
     */
    var reduceMotion = function () {
      if ('matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches) {
        return true;
      }
      return false;
    };

    /**
     * Get the height of an element.
     * @param  {Node} elem The element to get the height of
     * @return {Number}    The element's height in pixels
     */
    var getHeight = function (elem) {
      return parseInt(window.getComputedStyle(elem).height, 10);
    };

    /**
     * Escape special characters for use with querySelector
     * @author Mathias Bynens
     * @link https://github.com/mathiasbynens/CSS.escape
     * @param {String} id The anchor ID to escape
     */
    var escapeCharacters = function (id) {
      // Remove leading hash
      if (id.charAt(0) === '#') {
        id = id.substr(1);
      }

      var string = String(id);
      var length = string.length;
      var index = -1;
      var codeUnit;
      var result = '';
      var firstCodeUnit = string.charCodeAt(0);
      while (++index < length) {
        codeUnit = string.charCodeAt(index);
        // Note: there’s no need to special-case astral symbols, surrogate
        // pairs, or lone surrogates.

        // If the character is NULL (U+0000), then throw an
        // `InvalidCharacterError` exception and terminate these steps.
        if (codeUnit === 0x0000) {
          throw new InvalidCharacterError('Invalid character: the input contains U+0000.');
        }

        if (
          // If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
          // U+007F, […]
          (codeUnit >= 0x0001 && codeUnit <= 0x001f) ||
          codeUnit == 0x007f ||
          // If the character is the first character and is in the range [0-9]
          // (U+0030 to U+0039), […]
          (index === 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
          // If the character is the second character and is in the range [0-9]
          // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
          (index === 1 && codeUnit >= 0x0030 && codeUnit <= 0x0039 && firstCodeUnit === 0x002d)
        ) {
          // http://dev.w3.org/csswg/cssom/#escape-a-character-as-code-point
          result += '\\' + codeUnit.toString(16) + ' ';
          continue;
        }

        // If the character is not handled by one of the above rules and is
        // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
        // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
        // U+005A), or [a-z] (U+0061 to U+007A), […]
        if (
          codeUnit >= 0x0080 ||
          codeUnit === 0x002d ||
          codeUnit === 0x005f ||
          (codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
          (codeUnit >= 0x0041 && codeUnit <= 0x005a) ||
          (codeUnit >= 0x0061 && codeUnit <= 0x007a)
        ) {
          // the character itself
          result += string.charAt(index);
          continue;
        }

        // Otherwise, the escaped character.
        // http://dev.w3.org/csswg/cssom/#escape-a-character
        result += '\\' + string.charAt(index);
      }

      // Return sanitized hash
      return '#' + result;
    };

    /**
     * Calculate the easing pattern
     * @link https://gist.github.com/gre/1650294
     * @param {String} type Easing pattern
     * @param {Number} time Time animation should take to complete
     * @returns {Number}
     */
    var easingPattern = function (settings, time) {
      var pattern;

      // Default Easing Patterns
      if (settings.easing === 'easeInQuad') pattern = time * time; // accelerating from zero velocity
      if (settings.easing === 'easeOutQuad') pattern = time * (2 - time); // decelerating to zero velocity
      if (settings.easing === 'easeInOutQuad')
        pattern = time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time; // acceleration until halfway, then deceleration
      if (settings.easing === 'easeInCubic') pattern = time * time * time; // accelerating from zero velocity
      if (settings.easing === 'easeOutCubic') pattern = --time * time * time + 1; // decelerating to zero velocity
      if (settings.easing === 'easeInOutCubic')
        pattern =
          time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1; // acceleration until halfway, then deceleration
      if (settings.easing === 'easeInQuart') pattern = time * time * time * time; // accelerating from zero velocity
      if (settings.easing === 'easeOutQuart') pattern = 1 - --time * time * time * time; // decelerating to zero velocity
      if (settings.easing === 'easeInOutQuart')
        pattern = time < 0.5 ? 8 * time * time * time * time : 1 - 8 * --time * time * time * time; // acceleration until halfway, then deceleration
      if (settings.easing === 'easeInQuint') pattern = time * time * time * time * time; // accelerating from zero velocity
      if (settings.easing === 'easeOutQuint') pattern = 1 + --time * time * time * time * time; // decelerating to zero velocity
      if (settings.easing === 'easeInOutQuint')
        pattern =
          time < 0.5
            ? 16 * time * time * time * time * time
            : 1 + 16 * --time * time * time * time * time; // acceleration until halfway, then deceleration

      // Custom Easing Patterns
      if (!!settings.customEasing) pattern = settings.customEasing(time);

      return pattern || time; // no easing, no acceleration
    };

    /**
     * Determine the document's height
     * @returns {Number}
     */
    var getDocumentHeight = function () {
      return Math.max(
        document.body.scrollHeight,
        document.documentElement.scrollHeight,
        document.body.offsetHeight,
        document.documentElement.offsetHeight,
        document.body.clientHeight,
        document.documentElement.clientHeight
      );
    };

    /**
     * Calculate how far to scroll
     * Clip support added by robjtede - https://github.com/cferdinandi/smooth-scroll/issues/405
     * @param {Element} anchor       The anchor element to scroll to
     * @param {Number}  headerHeight Height of a fixed header, if any
     * @param {Number}  offset       Number of pixels by which to offset scroll
     * @param {Boolean} clip         If true, adjust scroll distance to prevent abrupt stops near the bottom of the page
     * @returns {Number}
     */
    var getEndLocation = function (anchor, headerHeight, offset, clip) {
      var location = 0;
      if (anchor.offsetParent) {
        do {
          location += anchor.offsetTop;
          anchor = anchor.offsetParent;
        } while (anchor);
      }
      location = Math.max(location - headerHeight - offset, 0);
      if (clip) {
        location = Math.min(location, getDocumentHeight() - window.innerHeight);
      }
      return location;
    };

    /**
     * Get the height of the fixed header
     * @param  {Node}   header The header
     * @return {Number}        The height of the header
     */
    var getHeaderHeight = function (header) {
      return !header ? 0 : getHeight(header) + header.offsetTop;
    };

    /**
     * Calculate the speed to use for the animation
     * @param  {Number} distance The distance to travel
     * @param  {Object} settings The plugin settings
     * @return {Number}          How fast to animate
     */
    var getSpeed = function (distance, settings) {
      var speed = settings.speedAsDuration
        ? settings.speed
        : Math.abs((distance / 1000) * settings.speed);
      if (settings.durationMax && speed > settings.durationMax) return settings.durationMax;
      if (settings.durationMin && speed < settings.durationMin) return settings.durationMin;
      return parseInt(speed, 10);
    };

    var setHistory = function (options) {
      // Make sure this should run
      if (!history.replaceState || !options.updateURL || history.state) return;

      // Get the hash to use
      var hash = window.location.hash;
      hash = hash ? hash : '';

      // Set a default history
      history.replaceState(
        {
          smoothScroll: JSON.stringify(options),
          anchor: hash ? hash : window.pageYOffset,
        },
        document.title,
        hash ? hash : window.location.href
      );
    };

    /**
     * Update the URL
     * @param  {Node}    anchor  The anchor that was scrolled to
     * @param  {Boolean} isNum   If true, anchor is a number
     * @param  {Object}  options Settings for Smooth Scroll
     */
    var updateURL = function (anchor, isNum, options) {
      // Bail if the anchor is a number
      if (isNum) return;

      // Verify that pushState is supported and the updateURL option is enabled
      if (!history.pushState || !options.updateURL) return;

      // Update URL
      history.pushState(
        {
          smoothScroll: JSON.stringify(options),
          anchor: anchor.id,
        },
        document.title,
        anchor === document.documentElement ? '#top' : '#' + anchor.id
      );
    };

    /**
     * Bring the anchored element into focus
     * @param {Node}     anchor      The anchor element
     * @param {Number}   endLocation The end location to scroll to
     * @param {Boolean}  isNum       If true, scroll is to a position rather than an element
     */
    var adjustFocus = function (anchor, endLocation, isNum) {
      // Is scrolling to top of page, blur
      if (anchor === 0) {
        document.body.focus();
      }

      // Don't run if scrolling to a number on the page
      if (isNum) return;

      // Otherwise, bring anchor element into focus
      anchor.focus();
      if (document.activeElement !== anchor) {
        anchor.setAttribute('tabindex', '-1');
        anchor.focus();
        anchor.style.outline = 'none';
      }
      window.scrollTo(0, endLocation);
    };

    /**
     * Emit a custom event
     * @param  {String} type    The event type
     * @param  {Object} options The settings object
     * @param  {Node}   anchor  The anchor element
     * @param  {Node}   toggle  The toggle element
     */
    var emitEvent = function (type, options, anchor, toggle) {
      if (!options.emitEvents || typeof window.CustomEvent !== 'function') return;
      var event = new CustomEvent(type, {
        bubbles: true,
        detail: {
          anchor: anchor,
          toggle: toggle,
        },
      });
      document.dispatchEvent(event);
    };

    //
    // SmoothScroll Constructor
    //

    var SmoothScroll = function (selector, options) {
      //
      // Variables
      //

      var smoothScroll = {}; // Object for public APIs
      var settings, anchor, toggle, fixedHeader, eventTimeout, animationInterval;

      //
      // Methods
      //

      /**
       * Cancel a scroll-in-progress
       */
      smoothScroll.cancelScroll = function (noEvent) {
        cancelAnimationFrame(animationInterval);
        animationInterval = null;
        if (noEvent) return;
        emitEvent('scrollCancel', settings);
      };

      /**
       * Start/stop the scrolling animation
       * @param {Node|Number} anchor  The element or position to scroll to
       * @param {Element}     toggle  The element that toggled the scroll event
       * @param {Object}      options
       */
      smoothScroll.animateScroll = function (anchor, toggle, options) {
        // Cancel any in progress scrolls
        smoothScroll.cancelScroll();

        // Local settings
        var _settings = extend(settings || defaults, options || {}); // Merge user options with defaults

        // Selectors and variables
        var isNum = Object.prototype.toString.call(anchor) === '[object Number]' ? true : false;
        var anchorElem = isNum || !anchor.tagName ? null : anchor;
        if (!isNum && !anchorElem) return;
        var startLocation = window.pageYOffset; // Current location on the page
        if (_settings.header && !fixedHeader) {
          // Get the fixed header if not already set
          fixedHeader = document.querySelector(_settings.header);
        }
        var headerHeight = getHeaderHeight(fixedHeader);
        var endLocation = isNum
          ? anchor
          : getEndLocation(
              anchorElem,
              headerHeight,
              parseInt(
                typeof _settings.offset === 'function'
                  ? _settings.offset(anchor, toggle)
                  : _settings.offset,
                10
              ),
              _settings.clip
            ); // Location to scroll to
        var distance = endLocation - startLocation; // distance to travel
        var documentHeight = getDocumentHeight();
        var timeLapsed = 0;
        var speed = getSpeed(distance, _settings);
        var start, percentage, position;

        /**
         * Stop the scroll animation when it reaches its target (or the bottom/top of page)
         * @param {Number} position Current position on the page
         * @param {Number} endLocation Scroll to location
         * @param {Number} animationInterval How much to scroll on this loop
         */
        var stopAnimateScroll = function (position, endLocation) {
          // Get the current location
          var currentLocation = window.pageYOffset;

          // Check if the end location has been reached yet (or we've hit the end of the document)
          if (
            position == endLocation ||
            currentLocation == endLocation ||
            (startLocation < endLocation && window.innerHeight + currentLocation) >= documentHeight
          ) {
            // Clear the animation timer
            smoothScroll.cancelScroll(true);

            // Bring the anchored element into focus
            adjustFocus(anchor, endLocation, isNum);

            // Emit a custom event
            emitEvent('scrollStop', _settings, anchor, toggle);

            // Reset start
            start = null;
            animationInterval = null;

            return true;
          }
        };

        /**
         * Loop scrolling animation
         */
        var loopAnimateScroll = function (timestamp) {
          if (!start) {
            start = timestamp;
          }
          timeLapsed += timestamp - start;
          percentage = speed === 0 ? 0 : timeLapsed / speed;
          percentage = percentage > 1 ? 1 : percentage;
          position = startLocation + distance * easingPattern(_settings, percentage);
          window.scrollTo(0, Math.floor(position));
          if (!stopAnimateScroll(position, endLocation)) {
            animationInterval = window.requestAnimationFrame(loopAnimateScroll);
            start = timestamp;
          }
        };

        /**
         * Reset position to fix weird iOS bug
         * @link https://github.com/cferdinandi/smooth-scroll/issues/45
         */
        if (window.pageYOffset === 0) {
          window.scrollTo(0, 0);
        }

        // Update the URL
        updateURL(anchor, isNum, _settings);

        // If the user prefers reduced motion, jump to location
        if (reduceMotion()) {
          window.scrollTo(0, Math.floor(endLocation));
          return;
        }

        // Emit a custom event
        emitEvent('scrollStart', _settings, anchor, toggle);

        // Start scrolling animation
        smoothScroll.cancelScroll(true);
        window.requestAnimationFrame(loopAnimateScroll);
      };

      /**
       * If smooth scroll element clicked, animate scroll
       */
      var clickHandler = function (event) {
        // Don't run if event was canceled but still bubbled up
        // By @mgreter - https://github.com/cferdinandi/smooth-scroll/pull/462/
        if (event.defaultPrevented) return;

        // Don't run if right-click or command/control + click or shift + click
        if (event.button !== 0 || event.metaKey || event.ctrlKey || event.shiftKey) return;

        // Check if event.target has closest() method
        // By @totegi - https://github.com/cferdinandi/smooth-scroll/pull/401/
        if (!('closest' in event.target)) return;

        // Check if a smooth scroll link was clicked
        toggle = event.target.closest(selector);
        if (
          !toggle ||
          toggle.tagName.toLowerCase() !== 'a' ||
          event.target.closest(settings.ignore)
        )
          return;

        // Only run if link is an anchor and points to the current page
        if (
          toggle.hostname !== window.location.hostname ||
          toggle.pathname !== window.location.pathname ||
          !/#/.test(toggle.href)
        )
          return;

        // Get an escaped version of the hash
        var hash;
        try {
          hash = escapeCharacters(decodeURIComponent(toggle.hash));
        } catch (e) {
          hash = escapeCharacters(toggle.hash);
        }

        // Get the anchored element
        var anchor;
        if (hash === '#') {
          if (!settings.topOnEmptyHash) return;
          anchor = document.documentElement;
        } else {
          anchor = document.querySelector(hash);
        }
        anchor = !anchor && hash === '#top' ? document.documentElement : anchor;

        // If anchored element exists, scroll to it
        if (!anchor) return;
        event.preventDefault();
        setHistory(settings);
        smoothScroll.animateScroll(anchor, toggle);
      };

      /**
       * Animate scroll on popstate events
       */
      var popstateHandler = function (event) {
        // Stop if history.state doesn't exist (ex. if clicking on a broken anchor link).
        // fixes `Cannot read property 'smoothScroll' of null` error getting thrown.
        if (history.state === null) return;

        // Only run if state is a popstate record for this instantiation
        if (!history.state.smoothScroll || history.state.smoothScroll !== JSON.stringify(settings))
          return;

        // Only run if state includes an anchor

        // if (!history.state.anchor && history.state.anchor !== 0) return;

        // Get the anchor
        var anchor = history.state.anchor;
        if (typeof anchor === 'string' && anchor) {
          anchor = document.querySelector(escapeCharacters(history.state.anchor));
          if (!anchor) return;
        }

        // Animate scroll to anchor link
        smoothScroll.animateScroll(anchor, null, { updateURL: false });
      };

      /**
       * Destroy the current initialization.
       */
      smoothScroll.destroy = function () {
        // If plugin isn't already initialized, stop
        if (!settings) return;

        // Remove event listeners
        document.removeEventListener('click', clickHandler, false);
        window.removeEventListener('popstate', popstateHandler, false);

        // Cancel any scrolls-in-progress
        smoothScroll.cancelScroll();

        // Reset variables
        settings = null;
        anchor = null;
        toggle = null;
        fixedHeader = null;
        eventTimeout = null;
        animationInterval = null;
      };

      /**
       * Initialize Smooth Scroll
       * @param {Object} options User settings
       */
      var init = function () {
        // feature test
        if (!supports())
          throw 'Smooth Scroll: This browser does not support the required JavaScript methods and browser APIs.';

        // Destroy any existing initializations
        smoothScroll.destroy();

        // Selectors and variables
        settings = extend(defaults, options || {}); // Merge user options with defaults
        fixedHeader = settings.header ? document.querySelector(settings.header) : null; // Get the fixed header

        // When a toggle is clicked, run the click handler
        document.addEventListener('click', clickHandler, false);

        // If updateURL and popState are enabled, listen for pop events
        if (settings.updateURL && settings.popstate) {
          window.addEventListener('popstate', popstateHandler, false);
        }
      };

      //
      // Initialize plugin
      //

      init();

      //
      // Public APIs
      //

      return smoothScroll;
    };

    return SmoothScroll;
  }
);
// #endregion

// #region / ApexCharts v3.31.0
//                             _____ _                _
//      /\                    / ____| |              | |
//     /  \   _ __   _____  _| |    | |__   __ _ _ __| |_ ___
//    / /\ \ | '_ \ / _ \ \/ / |    | '_ \ / _` | '__| __/ __|
//   / ____ \| |_) |  __/>  <| |____| | | | (_| | |  | |_\__ \
//  /_/    \_\ .__/ \___/_/\_\\_____|_| |_|\__,_|_|   \__|___/
//           | |
//           |_|                                                v3.31.0
/*!
 * ApexCharts v3.31.0 (https://apexcharts.com/)
 * (c) 2018-2021 ApexCharts - Released under the MIT License (https://github.com/apexcharts/apexcharts.js/blob/master/LICENSE)
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined'
    ? (module.exports = factory())
    : typeof define === 'function' && define.amd
    ? define(factory)
    : ((global = typeof globalThis !== 'undefined' ? globalThis : global || self),
      (global.ApexCharts = factory()));
})(this, function () {
  'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _typeof(obj) {
    '@babel/helpers - typeof';

    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj &&
          typeof Symbol === 'function' &&
          obj.constructor === Symbol &&
          obj !== Symbol.prototype
          ? 'symbol'
          : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ('value' in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true,
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function');
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true,
      },
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf =
      Object.setPrototypeOf ||
      function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === 'function') return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === 'object' || typeof call === 'function')) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError('Derived constructors may only return object or undefined');
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _toConsumableArray(arr) {
    return (
      _arrayWithoutHoles(arr) ||
      _iterableToArray(arr) ||
      _unsupportedIterableToArray(arr) ||
      _nonIterableSpread()
    );
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (
      (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
      iter['@@iterator'] != null
    )
      return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === 'Object' && o.constructor) n = o.constructor.name;
    if (n === 'Map' || n === 'Set') return Array.from(o);
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError(
      'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    );
  }

  /*
   ** Generic functions which are not dependent on ApexCharts
   */
  var Utils$1 = /*#__PURE__*/ (function () {
    function Utils() {
      _classCallCheck(this, Utils);
    }

    _createClass(
      Utils,
      [
        {
          key: 'shadeRGBColor',
          value: function shadeRGBColor(percent, color) {
            var f = color.split(','),
              t = percent < 0 ? 0 : 255,
              p = percent < 0 ? percent * -1 : percent,
              R = parseInt(f[0].slice(4), 10),
              G = parseInt(f[1], 10),
              B = parseInt(f[2], 10);
            return (
              'rgb(' +
              (Math.round((t - R) * p) + R) +
              ',' +
              (Math.round((t - G) * p) + G) +
              ',' +
              (Math.round((t - B) * p) + B) +
              ')'
            );
          },
        },
        {
          key: 'shadeHexColor',
          value: function shadeHexColor(percent, color) {
            var f = parseInt(color.slice(1), 16),
              t = percent < 0 ? 0 : 255,
              p = percent < 0 ? percent * -1 : percent,
              R = f >> 16,
              G = (f >> 8) & 0x00ff,
              B = f & 0x0000ff;
            return (
              '#' +
              (
                0x1000000 +
                (Math.round((t - R) * p) + R) * 0x10000 +
                (Math.round((t - G) * p) + G) * 0x100 +
                (Math.round((t - B) * p) + B)
              )
                .toString(16)
                .slice(1)
            );
          }, // beautiful color shading blending code
          // http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors
        },
        {
          key: 'shadeColor',
          value: function shadeColor(p, color) {
            if (Utils.isColorHex(color)) {
              return this.shadeHexColor(p, color);
            } else {
              return this.shadeRGBColor(p, color);
            }
          },
        },
      ],
      [
        {
          key: 'bind',
          value: function bind(fn, me) {
            return function () {
              return fn.apply(me, arguments);
            };
          },
        },
        {
          key: 'isObject',
          value: function isObject(item) {
            return item && _typeof(item) === 'object' && !Array.isArray(item) && item != null;
          }, // Type checking that works across different window objects
        },
        {
          key: 'is',
          value: function is(type, val) {
            return Object.prototype.toString.call(val) === '[object ' + type + ']';
          },
        },
        {
          key: 'listToArray',
          value: function listToArray(list) {
            var i,
              array = [];

            for (i = 0; i < list.length; i++) {
              array[i] = list[i];
            }

            return array;
          }, // to extend defaults with user options
          // credit: http://stackoverflow.com/questions/27936772/deep-object-merging-in-es6-es7#answer-34749873
        },
        {
          key: 'extend',
          value: function extend(target, source) {
            var _this = this;

            if (typeof Object.assign !== 'function') {
              (function () {
                Object.assign = function (target) {
                  if (target === undefined || target === null) {
                    throw new TypeError('Cannot convert undefined or null to object');
                  }

                  var output = Object(target);

                  for (var index = 1; index < arguments.length; index++) {
                    var _source = arguments[index];

                    if (_source !== undefined && _source !== null) {
                      for (var nextKey in _source) {
                        if (_source.hasOwnProperty(nextKey)) {
                          output[nextKey] = _source[nextKey];
                        }
                      }
                    }
                  }

                  return output;
                };
              })();
            }

            var output = Object.assign({}, target);

            if (this.isObject(target) && this.isObject(source)) {
              Object.keys(source).forEach(function (key) {
                if (_this.isObject(source[key])) {
                  if (!(key in target)) {
                    Object.assign(output, _defineProperty({}, key, source[key]));
                  } else {
                    output[key] = _this.extend(target[key], source[key]);
                  }
                } else {
                  Object.assign(output, _defineProperty({}, key, source[key]));
                }
              });
            }

            return output;
          },
        },
        {
          key: 'extendArray',
          value: function extendArray(arrToExtend, resultArr) {
            var extendedArr = [];
            arrToExtend.map(function (item) {
              extendedArr.push(Utils.extend(resultArr, item));
            });
            arrToExtend = extendedArr;
            return arrToExtend;
          }, // If month counter exceeds 12, it starts again from 1
        },
        {
          key: 'monthMod',
          value: function monthMod(month) {
            return month % 12;
          },
        },
        {
          key: 'clone',
          value: function clone(source) {
            if (Utils.is('Array', source)) {
              var cloneResult = [];

              for (var i = 0; i < source.length; i++) {
                cloneResult[i] = this.clone(source[i]);
              }

              return cloneResult;
            } else if (Utils.is('Null', source)) {
              // fixes an issue where null values were converted to {}
              return null;
            } else if (Utils.is('Date', source)) {
              return source;
            } else if (_typeof(source) === 'object') {
              var _cloneResult = {};

              for (var prop in source) {
                if (source.hasOwnProperty(prop)) {
                  _cloneResult[prop] = this.clone(source[prop]);
                }
              }

              return _cloneResult;
            } else {
              return source;
            }
          },
        },
        {
          key: 'log10',
          value: function log10(x) {
            return Math.log(x) / Math.LN10;
          },
        },
        {
          key: 'roundToBase10',
          value: function roundToBase10(x) {
            return Math.pow(10, Math.floor(Math.log10(x)));
          },
        },
        {
          key: 'roundToBase',
          value: function roundToBase(x, base) {
            return Math.pow(base, Math.floor(Math.log(x) / Math.log(base)));
          },
        },
        {
          key: 'parseNumber',
          value: function parseNumber(val) {
            if (val === null) return val;
            return parseFloat(val);
          },
        },
        {
          key: 'randomId',
          value: function randomId() {
            return (Math.random() + 1).toString(36).substring(4);
          },
        },
        {
          key: 'noExponents',
          value: function noExponents(val) {
            var data = String(val).split(/[eE]/);
            if (data.length === 1) return data[0];
            var z = '',
              sign = val < 0 ? '-' : '',
              str = data[0].replace('.', ''),
              mag = Number(data[1]) + 1;

            if (mag < 0) {
              z = sign + '0.';

              while (mag++) {
                z += '0';
              }

              return z + str.replace(/^-/, '');
            }

            mag -= str.length;

            while (mag--) {
              z += '0';
            }

            return str + z;
          },
        },
        {
          key: 'getDimensions',
          value: function getDimensions(el) {
            var computedStyle = getComputedStyle(el, null);
            var elementHeight = el.clientHeight;
            var elementWidth = el.clientWidth;
            elementHeight -=
              parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);
            elementWidth -=
              parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);
            return [elementWidth, elementHeight];
          },
        },
        {
          key: 'getBoundingClientRect',
          value: function getBoundingClientRect(element) {
            var rect = element.getBoundingClientRect();
            return {
              top: rect.top,
              right: rect.right,
              bottom: rect.bottom,
              left: rect.left,
              width: element.clientWidth,
              height: element.clientHeight,
              x: rect.left,
              y: rect.top,
            };
          },
        },
        {
          key: 'getLargestStringFromArr',
          value: function getLargestStringFromArr(arr) {
            return arr.reduce(function (a, b) {
              if (Array.isArray(b)) {
                b = b.reduce(function (aa, bb) {
                  return aa.length > bb.length ? aa : bb;
                });
              }

              return a.length > b.length ? a : b;
            }, 0);
          }, // http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb#answer-12342275
        },
        {
          key: 'hexToRgba',
          value: function hexToRgba() {
            var hex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#999999';
            var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.6;

            if (hex.substring(0, 1) !== '#') {
              hex = '#999999';
            }

            var h = hex.replace('#', '');
            h = h.match(new RegExp('(.{' + h.length / 3 + '})', 'g'));

            for (var i = 0; i < h.length; i++) {
              h[i] = parseInt(h[i].length === 1 ? h[i] + h[i] : h[i], 16);
            }

            if (typeof opacity !== 'undefined') h.push(opacity);
            return 'rgba(' + h.join(',') + ')';
          },
        },
        {
          key: 'getOpacityFromRGBA',
          value: function getOpacityFromRGBA(rgba) {
            return parseFloat(rgba.replace(/^.*,(.+)\)/, '$1'));
          },
        },
        {
          key: 'rgb2hex',
          value: function rgb2hex(rgb) {
            rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
            return rgb && rgb.length === 4
              ? '#' +
                  ('0' + parseInt(rgb[1], 10).toString(16)).slice(-2) +
                  ('0' + parseInt(rgb[2], 10).toString(16)).slice(-2) +
                  ('0' + parseInt(rgb[3], 10).toString(16)).slice(-2)
              : '';
          },
        },
        {
          key: 'isColorHex',
          value: function isColorHex(color) {
            return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(color);
          },
        },
        {
          key: 'getPolygonPos',
          value: function getPolygonPos(size, dataPointsLen) {
            var dotsArray = [];
            var angle = (Math.PI * 2) / dataPointsLen;

            for (var i = 0; i < dataPointsLen; i++) {
              var curPos = {};
              curPos.x = size * Math.sin(i * angle);
              curPos.y = -size * Math.cos(i * angle);
              dotsArray.push(curPos);
            }

            return dotsArray;
          },
        },
        {
          key: 'polarToCartesian',
          value: function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
            var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;
            return {
              x: centerX + radius * Math.cos(angleInRadians),
              y: centerY + radius * Math.sin(angleInRadians),
            };
          },
        },
        {
          key: 'escapeString',
          value: function escapeString(str) {
            var escapeWith =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';
            var newStr = str.toString().slice();
            newStr = newStr.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi, escapeWith);
            return newStr;
          },
        },
        {
          key: 'negToZero',
          value: function negToZero(val) {
            return val < 0 ? 0 : val;
          },
        },
        {
          key: 'moveIndexInArray',
          value: function moveIndexInArray(arr, old_index, new_index) {
            if (new_index >= arr.length) {
              var k = new_index - arr.length + 1;

              while (k--) {
                arr.push(undefined);
              }
            }

            arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
            return arr;
          },
        },
        {
          key: 'extractNumber',
          value: function extractNumber(s) {
            return parseFloat(s.replace(/[^\d.]*/g, ''));
          },
        },
        {
          key: 'findAncestor',
          value: function findAncestor(el, cls) {
            while ((el = el.parentElement) && !el.classList.contains(cls)) {}

            return el;
          },
        },
        {
          key: 'setELstyles',
          value: function setELstyles(el, styles) {
            for (var key in styles) {
              if (styles.hasOwnProperty(key)) {
                el.style.key = styles[key];
              }
            }
          },
        },
        {
          key: 'isNumber',
          value: function isNumber(value) {
            return (
              !isNaN(value) && parseFloat(Number(value)) === value && !isNaN(parseInt(value, 10))
            );
          },
        },
        {
          key: 'isFloat',
          value: function isFloat(n) {
            return Number(n) === n && n % 1 !== 0;
          },
        },
        {
          key: 'isSafari',
          value: function isSafari() {
            return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
          },
        },
        {
          key: 'isFirefox',
          value: function isFirefox() {
            return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
          },
        },
        {
          key: 'isIE11',
          value: function isIE11() {
            if (
              window.navigator.userAgent.indexOf('MSIE') !== -1 ||
              window.navigator.appVersion.indexOf('Trident/') > -1
            ) {
              return true;
            }
          },
        },
        {
          key: 'isIE',
          value: function isIE() {
            var ua = window.navigator.userAgent;
            var msie = ua.indexOf('MSIE ');

            if (msie > 0) {
              // IE 10 or older => return version number
              return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
            }

            var trident = ua.indexOf('Trident/');

            if (trident > 0) {
              // IE 11 => return version number
              var rv = ua.indexOf('rv:');
              return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
            }

            var edge = ua.indexOf('Edge/');

            if (edge > 0) {
              // Edge (IE 12+) => return version number
              return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
            } // other browser

            return false;
          },
        },
      ]
    );

    return Utils;
  })();

  /**
   * ApexCharts Animation Class.
   *
   * @module Animations
   **/

  var Animations = /*#__PURE__*/ (function () {
    function Animations(ctx) {
      _classCallCheck(this, Animations);

      this.ctx = ctx;
      this.w = ctx.w;
      this.setEasingFunctions();
    }

    _createClass(Animations, [
      {
        key: 'setEasingFunctions',
        value: function setEasingFunctions() {
          var easing;
          if (this.w.globals.easing) return;
          var userDefinedEasing = this.w.config.chart.animations.easing;

          switch (userDefinedEasing) {
            case 'linear': {
              easing = '-';
              break;
            }

            case 'easein': {
              easing = '<';
              break;
            }

            case 'easeout': {
              easing = '>';
              break;
            }

            case 'easeinout': {
              easing = '<>';
              break;
            }

            case 'swing': {
              easing = function easing(pos) {
                var s = 1.70158;
                var ret = (pos -= 1) * pos * ((s + 1) * pos + s) + 1;
                return ret;
              };

              break;
            }

            case 'bounce': {
              easing = function easing(pos) {
                var ret = '';

                if (pos < 1 / 2.75) {
                  ret = 7.5625 * pos * pos;
                } else if (pos < 2 / 2.75) {
                  ret = 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;
                } else if (pos < 2.5 / 2.75) {
                  ret = 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;
                } else {
                  ret = 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;
                }

                return ret;
              };

              break;
            }

            case 'elastic': {
              easing = function easing(pos) {
                if (pos === !!pos) return pos;
                return Math.pow(2, -10 * pos) * Math.sin(((pos - 0.075) * (2 * Math.PI)) / 0.3) + 1;
              };

              break;
            }

            default: {
              easing = '<>';
            }
          }

          this.w.globals.easing = easing;
        },
      },
      {
        key: 'animateLine',
        value: function animateLine(el, from, to, speed) {
          el.attr(from).animate(speed).attr(to);
        },
        /*
         ** Animate radius of a circle element
         */
      },
      {
        key: 'animateMarker',
        value: function animateMarker(el, from, to, speed, easing, cb) {
          if (!from) from = 0;
          el.attr({
            r: from,
            width: from,
            height: from,
          })
            .animate(speed, easing)
            .attr({
              r: to,
              width: to.width,
              height: to.height,
            })
            .afterAll(function () {
              cb();
            });
        },
        /*
         ** Animate radius and position of a circle element
         */
      },
      {
        key: 'animateCircle',
        value: function animateCircle(el, from, to, speed, easing) {
          el.attr({
            r: from.r,
            cx: from.cx,
            cy: from.cy,
          })
            .animate(speed, easing)
            .attr({
              r: to.r,
              cx: to.cx,
              cy: to.cy,
            });
        },
        /*
         ** Animate rect properties
         */
      },
      {
        key: 'animateRect',
        value: function animateRect(el, from, to, speed, fn) {
          el.attr(from)
            .animate(speed)
            .attr(to)
            .afterAll(function () {
              return fn();
            });
        },
      },
      {
        key: 'animatePathsGradually',
        value: function animatePathsGradually(params) {
          var el = params.el,
            realIndex = params.realIndex,
            j = params.j,
            fill = params.fill,
            pathFrom = params.pathFrom,
            pathTo = params.pathTo,
            speed = params.speed,
            delay = params.delay;
          var me = this;
          var w = this.w;
          var delayFactor = 0;

          if (w.config.chart.animations.animateGradually.enabled) {
            delayFactor = w.config.chart.animations.animateGradually.delay;
          }

          if (
            w.config.chart.animations.dynamicAnimation.enabled &&
            w.globals.dataChanged &&
            w.config.chart.type !== 'bar'
          ) {
            // disabled due to this bug - https://github.com/apexcharts/vue-apexcharts/issues/75
            delayFactor = 0;
          }

          me.morphSVG(
            el,
            realIndex,
            j,
            w.config.chart.type === 'line' && !w.globals.comboCharts ? 'stroke' : fill,
            pathFrom,
            pathTo,
            speed,
            delay * delayFactor
          );
        },
      },
      {
        key: 'showDelayedElements',
        value: function showDelayedElements() {
          this.w.globals.delayedElements.forEach(function (d) {
            var ele = d.el;
            ele.classList.remove('apexcharts-element-hidden');
          });
        },
      },
      {
        key: 'animationCompleted',
        value: function animationCompleted(el) {
          var w = this.w;
          if (w.globals.animationEnded) return;
          w.globals.animationEnded = true;
          this.showDelayedElements();

          if (typeof w.config.chart.events.animationEnd === 'function') {
            w.config.chart.events.animationEnd(this.ctx, {
              el: el,
              w: w,
            });
          }
        }, // SVG.js animation for morphing one path to another
      },
      {
        key: 'morphSVG',
        value: function morphSVG(el, realIndex, j, fill, pathFrom, pathTo, speed, delay) {
          var _this = this;

          var w = this.w;

          if (!pathFrom) {
            pathFrom = el.attr('pathFrom');
          }

          if (!pathTo) {
            pathTo = el.attr('pathTo');
          }

          var disableAnimationForCorrupPath = function disableAnimationForCorrupPath(path) {
            if (w.config.chart.type === 'radar') {
              // radar chart drops the path to bottom and hence a corrup path looks ugly
              // therefore, disable animation for such a case
              speed = 1;
            }

            return 'M 0 '.concat(w.globals.gridHeight);
          };

          if (!pathFrom || pathFrom.indexOf('undefined') > -1 || pathFrom.indexOf('NaN') > -1) {
            pathFrom = disableAnimationForCorrupPath();
          }

          if (!pathTo || pathTo.indexOf('undefined') > -1 || pathTo.indexOf('NaN') > -1) {
            pathTo = disableAnimationForCorrupPath();
          }

          if (!w.globals.shouldAnimate) {
            speed = 1;
          }

          el.plot(pathFrom)
            .animate(1, w.globals.easing, delay)
            .plot(pathFrom)
            .animate(speed, w.globals.easing, delay)
            .plot(pathTo)
            .afterAll(function () {
              // a flag to indicate that the original mount function can return true now as animation finished here
              if (Utils$1.isNumber(j)) {
                if (
                  j === w.globals.series[w.globals.maxValsInArrayIndex].length - 2 &&
                  w.globals.shouldAnimate
                ) {
                  _this.animationCompleted(el);
                }
              } else if (fill !== 'none' && w.globals.shouldAnimate) {
                if (
                  (!w.globals.comboCharts && realIndex === w.globals.series.length - 1) ||
                  w.globals.comboCharts
                ) {
                  _this.animationCompleted(el);
                }
              }

              _this.showDelayedElements();
            });
        },
      },
    ]);

    return Animations;
  })();

  /**
   * ApexCharts Filters Class for setting hover/active states on the paths.
   *
   * @module Formatters
   **/

  var Filters = /*#__PURE__*/ (function () {
    function Filters(ctx) {
      _classCallCheck(this, Filters);

      this.ctx = ctx;
      this.w = ctx.w;
    } // create a re-usable filter which can be appended other filter effects and applied to multiple elements

    _createClass(Filters, [
      {
        key: 'getDefaultFilter',
        value: function getDefaultFilter(el, i) {
          var w = this.w;
          el.unfilter(true);
          var filter = new window.SVG.Filter();
          filter.size('120%', '180%', '-5%', '-40%');

          if (w.config.states.normal.filter !== 'none') {
            this.applyFilter(
              el,
              i,
              w.config.states.normal.filter.type,
              w.config.states.normal.filter.value
            );
          } else {
            if (w.config.chart.dropShadow.enabled) {
              this.dropShadow(el, w.config.chart.dropShadow, i);
            }
          }
        },
      },
      {
        key: 'addNormalFilter',
        value: function addNormalFilter(el, i) {
          var w = this.w; // revert shadow if it was there
          // but, ignore marker as marker don't have dropshadow yet

          if (
            w.config.chart.dropShadow.enabled &&
            !el.node.classList.contains('apexcharts-marker')
          ) {
            this.dropShadow(el, w.config.chart.dropShadow, i);
          }
        }, // appends dropShadow to the filter object which can be chained with other filter effects
      },
      {
        key: 'addLightenFilter',
        value: function addLightenFilter(el, i, attrs) {
          var _this = this;

          var w = this.w;
          var intensity = attrs.intensity;
          el.unfilter(true);
          var filter = new window.SVG.Filter();
          el.filter(function (add) {
            var shadowAttr = w.config.chart.dropShadow;

            if (shadowAttr.enabled) {
              filter = _this.addShadow(add, i, shadowAttr);
            } else {
              filter = add;
            }

            filter.componentTransfer({
              rgb: {
                type: 'linear',
                slope: 1.5,
                intercept: intensity,
              },
            });
          });
          el.filterer.node.setAttribute('filterUnits', 'userSpaceOnUse');

          this._scaleFilterSize(el.filterer.node);
        }, // appends dropShadow to the filter object which can be chained with other filter effects
      },
      {
        key: 'addDarkenFilter',
        value: function addDarkenFilter(el, i, attrs) {
          var _this2 = this;

          var w = this.w;
          var intensity = attrs.intensity;
          el.unfilter(true);
          var filter = new window.SVG.Filter();
          el.filter(function (add) {
            var shadowAttr = w.config.chart.dropShadow;

            if (shadowAttr.enabled) {
              filter = _this2.addShadow(add, i, shadowAttr);
            } else {
              filter = add;
            }

            filter.componentTransfer({
              rgb: {
                type: 'linear',
                slope: intensity,
              },
            });
          });
          el.filterer.node.setAttribute('filterUnits', 'userSpaceOnUse');

          this._scaleFilterSize(el.filterer.node);
        },
      },
      {
        key: 'applyFilter',
        value: function applyFilter(el, i, filter) {
          var intensity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;

          switch (filter) {
            case 'none': {
              this.addNormalFilter(el, i);
              break;
            }

            case 'lighten': {
              this.addLightenFilter(el, i, {
                intensity: intensity,
              });
              break;
            }

            case 'darken': {
              this.addDarkenFilter(el, i, {
                intensity: intensity,
              });
              break;
            }
          }
        }, // appends dropShadow to the filter object which can be chained with other filter effects
      },
      {
        key: 'addShadow',
        value: function addShadow(add, i, attrs) {
          var blur = attrs.blur,
            top = attrs.top,
            left = attrs.left,
            color = attrs.color,
            opacity = attrs.opacity;
          var shadowBlur = add
            .flood(Array.isArray(color) ? color[i] : color, opacity)
            .composite(add.sourceAlpha, 'in')
            .offset(left, top)
            .gaussianBlur(blur)
            .merge(add.source);
          return add.blend(add.source, shadowBlur);
        }, // directly adds dropShadow to the element and returns the same element.
        // the only way it is different from the addShadow() function is that addShadow is chainable to other filters, while this function discards all filters and add dropShadow
      },
      {
        key: 'dropShadow',
        value: function dropShadow(el, attrs) {
          var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          var top = attrs.top,
            left = attrs.left,
            blur = attrs.blur,
            color = attrs.color,
            opacity = attrs.opacity,
            noUserSpaceOnUse = attrs.noUserSpaceOnUse;
          var w = this.w;
          el.unfilter(true);

          if (Utils$1.isIE() && w.config.chart.type === 'radialBar') {
            // in radialbar charts, dropshadow is clipping actual drawing in IE
            return el;
          }

          color = Array.isArray(color) ? color[i] : color;
          el.filter(function (add) {
            var shadowBlur = null;

            if (Utils$1.isSafari() || Utils$1.isFirefox() || Utils$1.isIE()) {
              // safari/firefox/IE have some alternative way to use this filter
              shadowBlur = add
                .flood(color, opacity)
                .composite(add.sourceAlpha, 'in')
                .offset(left, top)
                .gaussianBlur(blur);
            } else {
              shadowBlur = add
                .flood(color, opacity)
                .composite(add.sourceAlpha, 'in')
                .offset(left, top)
                .gaussianBlur(blur)
                .merge(add.source);
            }

            add.blend(add.source, shadowBlur);
          });

          if (!noUserSpaceOnUse) {
            el.filterer.node.setAttribute('filterUnits', 'userSpaceOnUse');
          }

          this._scaleFilterSize(el.filterer.node);

          return el;
        },
      },
      {
        key: 'setSelectionFilter',
        value: function setSelectionFilter(el, realIndex, dataPointIndex) {
          var w = this.w;

          if (typeof w.globals.selectedDataPoints[realIndex] !== 'undefined') {
            if (w.globals.selectedDataPoints[realIndex].indexOf(dataPointIndex) > -1) {
              el.node.setAttribute('selected', true);
              var activeFilter = w.config.states.active.filter;

              if (activeFilter !== 'none') {
                this.applyFilter(el, realIndex, activeFilter.type, activeFilter.value);
              }
            }
          }
        },
      },
      {
        key: '_scaleFilterSize',
        value: function _scaleFilterSize(el) {
          var setAttributes = function setAttributes(attrs) {
            for (var key in attrs) {
              if (attrs.hasOwnProperty(key)) {
                el.setAttribute(key, attrs[key]);
              }
            }
          };

          setAttributes({
            width: '200%',
            height: '200%',
            x: '-50%',
            y: '-50%',
          });
        },
      },
    ]);

    return Filters;
  })();

  /**
   * ApexCharts Graphics Class for all drawing operations.
   *
   * @module Graphics
   **/

  var Graphics = /*#__PURE__*/ (function () {
    function Graphics(ctx) {
      _classCallCheck(this, Graphics);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(
      Graphics,
      [
        {
          key: 'drawLine',
          value: function drawLine(x1, y1, x2, y2) {
            var lineColor =
              arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '#a8a8a8';
            var dashArray = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
            var strokeWidth =
              arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
            var strokeLineCap =
              arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'butt';
            var w = this.w;
            var line = w.globals.dom.Paper.line().attr({
              x1: x1,
              y1: y1,
              x2: x2,
              y2: y2,
              stroke: lineColor,
              'stroke-dasharray': dashArray,
              'stroke-width': strokeWidth,
              'stroke-linecap': strokeLineCap,
            });
            return line;
          },
        },
        {
          key: 'drawRect',
          value: function drawRect() {
            var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
            var color =
              arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '#fefefe';
            var opacity = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;
            var strokeWidth =
              arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
            var strokeColor =
              arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
            var strokeDashArray =
              arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
            var w = this.w;
            var rect = w.globals.dom.Paper.rect();
            rect.attr({
              x: x1,
              y: y1,
              width: x2 > 0 ? x2 : 0,
              height: y2 > 0 ? y2 : 0,
              rx: radius,
              ry: radius,
              opacity: opacity,
              'stroke-width': strokeWidth !== null ? strokeWidth : 0,
              stroke: strokeColor !== null ? strokeColor : 'none',
              'stroke-dasharray': strokeDashArray,
            }); // fix apexcharts.js#1410

            rect.node.setAttribute('fill', color);
            return rect;
          },
        },
        {
          key: 'drawPolygon',
          value: function drawPolygon(polygonString) {
            var stroke =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#e1e1e1';
            var strokeWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            var fill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'none';
            var w = this.w;
            var polygon = w.globals.dom.Paper.polygon(polygonString).attr({
              fill: fill,
              stroke: stroke,
              'stroke-width': strokeWidth,
            });
            return polygon;
          },
        },
        {
          key: 'drawCircle',
          value: function drawCircle(radius) {
            var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var w = this.w;
            if (radius < 0) radius = 0;
            var c = w.globals.dom.Paper.circle(radius * 2);

            if (attrs !== null) {
              c.attr(attrs);
            }

            return c;
          },
        },
        {
          key: 'drawPath',
          value: function drawPath(_ref) {
            var _ref$d = _ref.d,
              d = _ref$d === void 0 ? '' : _ref$d,
              _ref$stroke = _ref.stroke,
              stroke = _ref$stroke === void 0 ? '#a8a8a8' : _ref$stroke,
              _ref$strokeWidth = _ref.strokeWidth,
              strokeWidth = _ref$strokeWidth === void 0 ? 1 : _ref$strokeWidth,
              fill = _ref.fill,
              _ref$fillOpacity = _ref.fillOpacity,
              fillOpacity = _ref$fillOpacity === void 0 ? 1 : _ref$fillOpacity,
              _ref$strokeOpacity = _ref.strokeOpacity,
              strokeOpacity = _ref$strokeOpacity === void 0 ? 1 : _ref$strokeOpacity,
              classes = _ref.classes,
              _ref$strokeLinecap = _ref.strokeLinecap,
              strokeLinecap = _ref$strokeLinecap === void 0 ? null : _ref$strokeLinecap,
              _ref$strokeDashArray = _ref.strokeDashArray,
              strokeDashArray = _ref$strokeDashArray === void 0 ? 0 : _ref$strokeDashArray;
            var w = this.w;

            if (strokeLinecap === null) {
              strokeLinecap = w.config.stroke.lineCap;
            }

            if (d.indexOf('undefined') > -1 || d.indexOf('NaN') > -1) {
              d = 'M 0 '.concat(w.globals.gridHeight);
            }

            var p = w.globals.dom.Paper.path(d).attr({
              fill: fill,
              'fill-opacity': fillOpacity,
              stroke: stroke,
              'stroke-opacity': strokeOpacity,
              'stroke-linecap': strokeLinecap,
              'stroke-width': strokeWidth,
              'stroke-dasharray': strokeDashArray,
              class: classes,
            });
            return p;
          },
        },
        {
          key: 'group',
          value: function group() {
            var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var w = this.w;
            var g = w.globals.dom.Paper.group();

            if (attrs !== null) {
              g.attr(attrs);
            }

            return g;
          },
        },
        {
          key: 'move',
          value: function move(x, y) {
            var move = ['M', x, y].join(' ');
            return move;
          },
        },
        {
          key: 'line',
          value: function line(x, y) {
            var hORv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var line = null;

            if (hORv === null) {
              line = ['L', x, y].join(' ');
            } else if (hORv === 'H') {
              line = ['H', x].join(' ');
            } else if (hORv === 'V') {
              line = ['V', y].join(' ');
            }

            return line;
          },
        },
        {
          key: 'curve',
          value: function curve(x1, y1, x2, y2, x, y) {
            var curve = ['C', x1, y1, x2, y2, x, y].join(' ');
            return curve;
          },
        },
        {
          key: 'quadraticCurve',
          value: function quadraticCurve(x1, y1, x, y) {
            var curve = ['Q', x1, y1, x, y].join(' ');
            return curve;
          },
        },
        {
          key: 'arc',
          value: function arc(rx, ry, axisRotation, largeArcFlag, sweepFlag, x, y) {
            var relative =
              arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
            var coord = 'A';
            if (relative) coord = 'a';
            var arc = [coord, rx, ry, axisRotation, largeArcFlag, sweepFlag, x, y].join(' ');
            return arc;
          },
          /**
           * @memberof Graphics
           * @param {object}
           *  i = series's index
           *  realIndex = realIndex is series's actual index when it was drawn time. After several redraws, the iterating "i" may change in loops, but realIndex doesn't
           *  pathFrom = existing pathFrom to animateTo
           *  pathTo = new Path to which d attr will be animated from pathFrom to pathTo
           *  stroke = line Color
           *  strokeWidth = width of path Line
           *  fill = it can be gradient, single color, pattern or image
           *  animationDelay = how much to delay when starting animation (in milliseconds)
           *  dataChangeSpeed = for dynamic animations, when data changes
           *  className = class attribute to add
           * @return {object} svg.js path object
           **/
        },
        {
          key: 'renderPaths',
          value: function renderPaths(_ref2) {
            var j = _ref2.j,
              realIndex = _ref2.realIndex,
              pathFrom = _ref2.pathFrom,
              pathTo = _ref2.pathTo,
              stroke = _ref2.stroke,
              strokeWidth = _ref2.strokeWidth,
              strokeLinecap = _ref2.strokeLinecap,
              fill = _ref2.fill,
              animationDelay = _ref2.animationDelay,
              initialSpeed = _ref2.initialSpeed,
              dataChangeSpeed = _ref2.dataChangeSpeed,
              className = _ref2.className,
              _ref2$shouldClipToGri = _ref2.shouldClipToGrid,
              shouldClipToGrid = _ref2$shouldClipToGri === void 0 ? true : _ref2$shouldClipToGri,
              _ref2$bindEventsOnPat = _ref2.bindEventsOnPaths,
              bindEventsOnPaths = _ref2$bindEventsOnPat === void 0 ? true : _ref2$bindEventsOnPat,
              _ref2$drawShadow = _ref2.drawShadow,
              drawShadow = _ref2$drawShadow === void 0 ? true : _ref2$drawShadow;
            var w = this.w;
            var filters = new Filters(this.ctx);
            var anim = new Animations(this.ctx);
            var initialAnim = this.w.config.chart.animations.enabled;
            var dynamicAnim =
              initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
            var d;
            var shouldAnimate = !!(
              (initialAnim && !w.globals.resized) ||
              (dynamicAnim && w.globals.dataChanged && w.globals.shouldAnimate)
            );

            if (shouldAnimate) {
              d = pathFrom;
            } else {
              d = pathTo;
              w.globals.animationEnded = true;
            }

            var strokeDashArrayOpt = w.config.stroke.dashArray;
            var strokeDashArray = 0;

            if (Array.isArray(strokeDashArrayOpt)) {
              strokeDashArray = strokeDashArrayOpt[realIndex];
            } else {
              strokeDashArray = w.config.stroke.dashArray;
            }

            var el = this.drawPath({
              d: d,
              stroke: stroke,
              strokeWidth: strokeWidth,
              fill: fill,
              fillOpacity: 1,
              classes: className,
              strokeLinecap: strokeLinecap,
              strokeDashArray: strokeDashArray,
            });
            el.attr('index', realIndex);

            if (shouldClipToGrid) {
              el.attr({
                'clip-path': 'url(#gridRectMask'.concat(w.globals.cuid, ')'),
              });
            } // const defaultFilter = el.filterer

            if (w.config.states.normal.filter.type !== 'none') {
              filters.getDefaultFilter(el, realIndex);
            } else {
              if (w.config.chart.dropShadow.enabled && drawShadow) {
                if (
                  !w.config.chart.dropShadow.enabledOnSeries ||
                  (w.config.chart.dropShadow.enabledOnSeries &&
                    w.config.chart.dropShadow.enabledOnSeries.indexOf(realIndex) !== -1)
                ) {
                  var shadow = w.config.chart.dropShadow;
                  filters.dropShadow(el, shadow, realIndex);
                }
              }
            }

            if (bindEventsOnPaths) {
              el.node.addEventListener('mouseenter', this.pathMouseEnter.bind(this, el));
              el.node.addEventListener('mouseleave', this.pathMouseLeave.bind(this, el));
              el.node.addEventListener('mousedown', this.pathMouseDown.bind(this, el));
            }

            el.attr({
              pathTo: pathTo,
              pathFrom: pathFrom,
            });
            var defaultAnimateOpts = {
              el: el,
              j: j,
              realIndex: realIndex,
              pathFrom: pathFrom,
              pathTo: pathTo,
              fill: fill,
              strokeWidth: strokeWidth,
              delay: animationDelay,
            };

            if (initialAnim && !w.globals.resized && !w.globals.dataChanged) {
              anim.animatePathsGradually(
                _objectSpread2(
                  _objectSpread2({}, defaultAnimateOpts),
                  {},
                  {
                    speed: initialSpeed,
                  }
                )
              );
            } else {
              if (w.globals.resized || !w.globals.dataChanged) {
                anim.showDelayedElements();
              }
            }

            if (w.globals.dataChanged && dynamicAnim && shouldAnimate) {
              anim.animatePathsGradually(
                _objectSpread2(
                  _objectSpread2({}, defaultAnimateOpts),
                  {},
                  {
                    speed: dataChangeSpeed,
                  }
                )
              );
            }

            return el;
          },
        },
        {
          key: 'drawPattern',
          value: function drawPattern(style, width, height) {
            var stroke =
              arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#a8a8a8';
            var strokeWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
            var w = this.w;
            var p = w.globals.dom.Paper.pattern(width, height, function (add) {
              if (style === 'horizontalLines') {
                add.line(0, 0, height, 0).stroke({
                  color: stroke,
                  width: strokeWidth + 1,
                });
              } else if (style === 'verticalLines') {
                add.line(0, 0, 0, width).stroke({
                  color: stroke,
                  width: strokeWidth + 1,
                });
              } else if (style === 'slantedLines') {
                add.line(0, 0, width, height).stroke({
                  color: stroke,
                  width: strokeWidth,
                });
              } else if (style === 'squares') {
                add.rect(width, height).fill('none').stroke({
                  color: stroke,
                  width: strokeWidth,
                });
              } else if (style === 'circles') {
                add.circle(width).fill('none').stroke({
                  color: stroke,
                  width: strokeWidth,
                });
              }
            });
            return p;
          },
        },
        {
          key: 'drawGradient',
          value: function drawGradient(style, gfrom, gto, opacityFrom, opacityTo) {
            var size = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
            var stops = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
            var colorStops =
              arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
            var i = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
            var w = this.w;
            var g;

            if (gfrom.length < 9 && gfrom.indexOf('#') === 0) {
              // if the hex contains alpha and is of 9 digit, skip the opacity
              gfrom = Utils$1.hexToRgba(gfrom, opacityFrom);
            }

            if (gto.length < 9 && gto.indexOf('#') === 0) {
              gto = Utils$1.hexToRgba(gto, opacityTo);
            }

            var stop1 = 0;
            var stop2 = 1;
            var stop3 = 1;
            var stop4 = null;

            if (stops !== null) {
              stop1 = typeof stops[0] !== 'undefined' ? stops[0] / 100 : 0;
              stop2 = typeof stops[1] !== 'undefined' ? stops[1] / 100 : 1;
              stop3 = typeof stops[2] !== 'undefined' ? stops[2] / 100 : 1;
              stop4 = typeof stops[3] !== 'undefined' ? stops[3] / 100 : null;
            }

            var radial = !!(
              w.config.chart.type === 'donut' ||
              w.config.chart.type === 'pie' ||
              w.config.chart.type === 'polarArea' ||
              w.config.chart.type === 'bubble'
            );

            if (colorStops === null || colorStops.length === 0) {
              g = w.globals.dom.Paper.gradient(radial ? 'radial' : 'linear', function (stop) {
                stop.at(stop1, gfrom, opacityFrom);
                stop.at(stop2, gto, opacityTo);
                stop.at(stop3, gto, opacityTo);

                if (stop4 !== null) {
                  stop.at(stop4, gfrom, opacityFrom);
                }
              });
            } else {
              g = w.globals.dom.Paper.gradient(radial ? 'radial' : 'linear', function (stop) {
                var gradientStops = Array.isArray(colorStops[i]) ? colorStops[i] : colorStops;
                gradientStops.forEach(function (s) {
                  stop.at(s.offset / 100, s.color, s.opacity);
                });
              });
            }

            if (!radial) {
              if (style === 'vertical') {
                g.from(0, 0).to(0, 1);
              } else if (style === 'diagonal') {
                g.from(0, 0).to(1, 1);
              } else if (style === 'horizontal') {
                g.from(0, 1).to(1, 1);
              } else if (style === 'diagonal2') {
                g.from(1, 0).to(0, 1);
              }
            } else {
              var offx = w.globals.gridWidth / 2;
              var offy = w.globals.gridHeight / 2;

              if (w.config.chart.type !== 'bubble') {
                g.attr({
                  gradientUnits: 'userSpaceOnUse',
                  cx: offx,
                  cy: offy,
                  r: size,
                });
              } else {
                g.attr({
                  cx: 0.5,
                  cy: 0.5,
                  r: 0.8,
                  fx: 0.2,
                  fy: 0.2,
                });
              }
            }

            return g;
          },
        },
        {
          key: 'drawText',
          value: function drawText(_ref3) {
            var x = _ref3.x,
              y = _ref3.y,
              text = _ref3.text,
              textAnchor = _ref3.textAnchor,
              fontSize = _ref3.fontSize,
              fontFamily = _ref3.fontFamily,
              fontWeight = _ref3.fontWeight,
              foreColor = _ref3.foreColor,
              opacity = _ref3.opacity,
              _ref3$cssClass = _ref3.cssClass,
              cssClass = _ref3$cssClass === void 0 ? '' : _ref3$cssClass,
              _ref3$isPlainText = _ref3.isPlainText,
              isPlainText = _ref3$isPlainText === void 0 ? true : _ref3$isPlainText;
            var w = this.w;
            if (typeof text === 'undefined') text = '';

            if (!textAnchor) {
              textAnchor = 'start';
            }

            if (!foreColor || !foreColor.length) {
              foreColor = w.config.chart.foreColor;
            }

            fontFamily = fontFamily || w.config.chart.fontFamily;
            fontWeight = fontWeight || 'regular';
            var elText;

            if (Array.isArray(text)) {
              elText = w.globals.dom.Paper.text(function (add) {
                for (var i = 0; i < text.length; i++) {
                  i === 0 ? add.tspan(text[i]) : add.tspan(text[i]).newLine();
                }
              });
            } else {
              elText = isPlainText
                ? w.globals.dom.Paper.plain(text)
                : w.globals.dom.Paper.text(function (add) {
                    return add.tspan(text);
                  });
            }

            elText.attr({
              x: x,
              y: y,
              'text-anchor': textAnchor,
              'dominant-baseline': 'auto',
              'font-size': fontSize,
              'font-family': fontFamily,
              'font-weight': fontWeight,
              fill: foreColor,
              class: 'apexcharts-text ' + cssClass,
            });
            elText.node.style.fontFamily = fontFamily;
            elText.node.style.opacity = opacity;
            return elText;
          },
        },
        {
          key: 'drawMarker',
          value: function drawMarker(x, y, opts) {
            x = x || 0;
            var size = opts.pSize || 0;
            var elPoint = null;

            if (opts.shape === 'square' || opts.shape === 'rect') {
              var radius = opts.pRadius === undefined ? size / 2 : opts.pRadius;

              if (y === null || !size) {
                size = 0;
                radius = 0;
              }

              var nSize = size * 1.2 + radius;
              var p = this.drawRect(nSize, nSize, nSize, nSize, radius);
              p.attr({
                x: x - nSize / 2,
                y: y - nSize / 2,
                cx: x,
                cy: y,
                class: opts.class ? opts.class : '',
                fill: opts.pointFillColor,
                'fill-opacity': opts.pointFillOpacity ? opts.pointFillOpacity : 1,
                stroke: opts.pointStrokeColor,
                'stroke-width': opts.pointStrokeWidth ? opts.pointStrokeWidth : 0,
                'stroke-opacity': opts.pointStrokeOpacity ? opts.pointStrokeOpacity : 1,
              });
              elPoint = p;
            } else if (opts.shape === 'circle' || !opts.shape) {
              if (!Utils$1.isNumber(y)) {
                size = 0;
                y = 0;
              } // let nSize = size - opts.pRadius / 2 < 0 ? 0 : size - opts.pRadius / 2

              elPoint = this.drawCircle(size, {
                cx: x,
                cy: y,
                class: opts.class ? opts.class : '',
                stroke: opts.pointStrokeColor,
                fill: opts.pointFillColor,
                'fill-opacity': opts.pointFillOpacity ? opts.pointFillOpacity : 1,
                'stroke-width': opts.pointStrokeWidth ? opts.pointStrokeWidth : 0,
                'stroke-opacity': opts.pointStrokeOpacity ? opts.pointStrokeOpacity : 1,
              });
            }

            return elPoint;
          },
        },
        {
          key: 'pathMouseEnter',
          value: function pathMouseEnter(path, e) {
            var w = this.w;
            var filters = new Filters(this.ctx);
            var i = parseInt(path.node.getAttribute('index'), 10);
            var j = parseInt(path.node.getAttribute('j'), 10);

            if (typeof w.config.chart.events.dataPointMouseEnter === 'function') {
              w.config.chart.events.dataPointMouseEnter(e, this.ctx, {
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              });
            }

            this.ctx.events.fireEvent('dataPointMouseEnter', [
              e,
              this.ctx,
              {
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              },
            ]);

            if (w.config.states.active.filter.type !== 'none') {
              if (path.node.getAttribute('selected') === 'true') {
                return;
              }
            }

            if (w.config.states.hover.filter.type !== 'none') {
              if (!w.globals.isTouchDevice) {
                var hoverFilter = w.config.states.hover.filter;
                filters.applyFilter(path, i, hoverFilter.type, hoverFilter.value);
              }
            }
          },
        },
        {
          key: 'pathMouseLeave',
          value: function pathMouseLeave(path, e) {
            var w = this.w;
            var filters = new Filters(this.ctx);
            var i = parseInt(path.node.getAttribute('index'), 10);
            var j = parseInt(path.node.getAttribute('j'), 10);

            if (typeof w.config.chart.events.dataPointMouseLeave === 'function') {
              w.config.chart.events.dataPointMouseLeave(e, this.ctx, {
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              });
            }

            this.ctx.events.fireEvent('dataPointMouseLeave', [
              e,
              this.ctx,
              {
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              },
            ]);

            if (w.config.states.active.filter.type !== 'none') {
              if (path.node.getAttribute('selected') === 'true') {
                return;
              }
            }

            if (w.config.states.hover.filter.type !== 'none') {
              filters.getDefaultFilter(path, i);
            }
          },
        },
        {
          key: 'pathMouseDown',
          value: function pathMouseDown(path, e) {
            var w = this.w;
            var filters = new Filters(this.ctx);
            var i = parseInt(path.node.getAttribute('index'), 10);
            var j = parseInt(path.node.getAttribute('j'), 10);
            var selected = 'false';

            if (path.node.getAttribute('selected') === 'true') {
              path.node.setAttribute('selected', 'false');

              if (w.globals.selectedDataPoints[i].indexOf(j) > -1) {
                var index = w.globals.selectedDataPoints[i].indexOf(j);
                w.globals.selectedDataPoints[i].splice(index, 1);
              }
            } else {
              if (
                !w.config.states.active.allowMultipleDataPointsSelection &&
                w.globals.selectedDataPoints.length > 0
              ) {
                w.globals.selectedDataPoints = [];
                var elPaths = w.globals.dom.Paper.select('.apexcharts-series path').members;
                var elCircles = w.globals.dom.Paper.select(
                  '.apexcharts-series circle, .apexcharts-series rect'
                ).members;

                var deSelect = function deSelect(els) {
                  Array.prototype.forEach.call(els, function (el) {
                    el.node.setAttribute('selected', 'false');
                    filters.getDefaultFilter(el, i);
                  });
                };

                deSelect(elPaths);
                deSelect(elCircles);
              }

              path.node.setAttribute('selected', 'true');
              selected = 'true';

              if (typeof w.globals.selectedDataPoints[i] === 'undefined') {
                w.globals.selectedDataPoints[i] = [];
              }

              w.globals.selectedDataPoints[i].push(j);
            }

            if (selected === 'true') {
              var activeFilter = w.config.states.active.filter;

              if (activeFilter !== 'none') {
                filters.applyFilter(path, i, activeFilter.type, activeFilter.value);
              }
            } else {
              if (w.config.states.active.filter.type !== 'none') {
                filters.getDefaultFilter(path, i);
              }
            }

            if (typeof w.config.chart.events.dataPointSelection === 'function') {
              w.config.chart.events.dataPointSelection(e, this.ctx, {
                selectedDataPoints: w.globals.selectedDataPoints,
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              });
            }

            if (e) {
              this.ctx.events.fireEvent('dataPointSelection', [
                e,
                this.ctx,
                {
                  selectedDataPoints: w.globals.selectedDataPoints,
                  seriesIndex: i,
                  dataPointIndex: j,
                  w: w,
                },
              ]);
            }
          },
        },
        {
          key: 'rotateAroundCenter',
          value: function rotateAroundCenter(el) {
            var coord = {};

            if (el && typeof el.getBBox === 'function') {
              coord = el.getBBox();
            }

            var x = coord.x + coord.width / 2;
            var y = coord.y + coord.height / 2;
            return {
              x: x,
              y: y,
            };
          },
        },
        {
          key: 'getTextRects',
          value: function getTextRects(text, fontSize, fontFamily, transform) {
            var useBBox = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
            var w = this.w;
            var virtualText = this.drawText({
              x: -200,
              y: -200,
              text: text,
              textAnchor: 'start',
              fontSize: fontSize,
              fontFamily: fontFamily,
              foreColor: '#fff',
              opacity: 0,
            });

            if (transform) {
              virtualText.attr('transform', transform);
            }

            w.globals.dom.Paper.add(virtualText);
            var rect = virtualText.bbox();

            if (!useBBox) {
              rect = virtualText.node.getBoundingClientRect();
            }

            virtualText.remove();
            return {
              width: rect.width,
              height: rect.height,
            };
          },
          /**
           * append ... to long text
           * http://stackoverflow.com/questions/9241315/trimming-text-to-a-given-pixel-width-in-svg
           * @memberof Graphics
           **/
        },
        {
          key: 'placeTextWithEllipsis',
          value: function placeTextWithEllipsis(textObj, textString, width) {
            if (typeof textObj.getComputedTextLength !== 'function') return;
            textObj.textContent = textString;

            if (textString.length > 0) {
              // ellipsis is needed
              if (textObj.getComputedTextLength() >= width / 1.1) {
                for (var x = textString.length - 3; x > 0; x -= 3) {
                  if (textObj.getSubStringLength(0, x) <= width / 1.1) {
                    textObj.textContent = textString.substring(0, x) + '...';
                    return;
                  }
                }

                textObj.textContent = '.'; // can't place at all
              }
            }
          },
        },
      ],
      [
        {
          key: 'setAttrs',
          value: function setAttrs(el, attrs) {
            for (var key in attrs) {
              if (attrs.hasOwnProperty(key)) {
                el.setAttribute(key, attrs[key]);
              }
            }
          },
        },
      ]
    );

    return Graphics;
  })();

  var Helpers$4 = /*#__PURE__*/ (function () {
    function Helpers(annoCtx) {
      _classCallCheck(this, Helpers);

      this.w = annoCtx.w;
      this.annoCtx = annoCtx;
    }

    _createClass(Helpers, [
      {
        key: 'setOrientations',
        value: function setOrientations(anno) {
          var annoIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var w = this.w;

          if (anno.label.orientation === 'vertical') {
            var i = annoIndex !== null ? annoIndex : 0;
            var xAnno = w.globals.dom.baseEl.querySelector(
              ".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(
                i,
                "']"
              )
            );

            if (xAnno !== null) {
              var xAnnoCoord = xAnno.getBoundingClientRect();
              xAnno.setAttribute('x', parseFloat(xAnno.getAttribute('x')) - xAnnoCoord.height + 4);

              if (anno.label.position === 'top') {
                xAnno.setAttribute('y', parseFloat(xAnno.getAttribute('y')) + xAnnoCoord.width);
              } else {
                xAnno.setAttribute('y', parseFloat(xAnno.getAttribute('y')) - xAnnoCoord.width);
              }

              var annoRotatingCenter = this.annoCtx.graphics.rotateAroundCenter(xAnno);
              var x = annoRotatingCenter.x;
              var y = annoRotatingCenter.y;
              xAnno.setAttribute('transform', 'rotate(-90 '.concat(x, ' ').concat(y, ')'));
            }
          }
        },
      },
      {
        key: 'addBackgroundToAnno',
        value: function addBackgroundToAnno(annoEl, anno) {
          var w = this.w;
          if (
            !annoEl ||
            typeof anno.label.text === 'undefined' ||
            (typeof anno.label.text !== 'undefined' && !String(anno.label.text).trim())
          )
            return null;
          var elGridRect = w.globals.dom.baseEl
            .querySelector('.apexcharts-grid')
            .getBoundingClientRect();
          var coords = annoEl.getBoundingClientRect();
          var pleft = anno.label.style.padding.left;
          var pright = anno.label.style.padding.right;
          var ptop = anno.label.style.padding.top;
          var pbottom = anno.label.style.padding.bottom;

          if (anno.label.orientation === 'vertical') {
            ptop = anno.label.style.padding.left;
            pbottom = anno.label.style.padding.right;
            pleft = anno.label.style.padding.top;
            pright = anno.label.style.padding.bottom;
          }

          var x1 = coords.left - elGridRect.left - pleft;
          var y1 = coords.top - elGridRect.top - ptop;
          var elRect = this.annoCtx.graphics.drawRect(
            x1 - w.globals.barPadForNumericAxis,
            y1,
            coords.width + pleft + pright,
            coords.height + ptop + pbottom,
            anno.label.borderRadius,
            anno.label.style.background,
            1,
            anno.label.borderWidth,
            anno.label.borderColor,
            0
          );

          if (anno.id) {
            elRect.node.classList.add(Utils$1.escapeString(anno.id));
          }

          return elRect;
        },
      },
      {
        key: 'annotationsBackground',
        value: function annotationsBackground() {
          var _this = this;

          var w = this.w;

          var add = function add(anno, i, type) {
            var annoLabel = w.globals.dom.baseEl.querySelector(
              '.apexcharts-'
                .concat(type, '-annotations .apexcharts-')
                .concat(type, "-annotation-label[rel='")
                .concat(i, "']")
            );

            if (annoLabel) {
              var parent = annoLabel.parentNode;

              var elRect = _this.addBackgroundToAnno(annoLabel, anno);

              if (elRect) {
                parent.insertBefore(elRect.node, annoLabel);

                if (anno.label.mouseEnter) {
                  elRect.node.addEventListener(
                    'mouseenter',
                    anno.label.mouseEnter.bind(_this, anno)
                  );
                }

                if (anno.label.mouseLeave) {
                  elRect.node.addEventListener(
                    'mouseleave',
                    anno.label.mouseLeave.bind(_this, anno)
                  );
                }
              }
            }
          };

          w.config.annotations.xaxis.map(function (anno, i) {
            add(anno, i, 'xaxis');
          });
          w.config.annotations.yaxis.map(function (anno, i) {
            add(anno, i, 'yaxis');
          });
          w.config.annotations.points.map(function (anno, i) {
            add(anno, i, 'point');
          });
        },
      },
      {
        key: 'getStringX',
        value: function getStringX(x) {
          var w = this.w;
          var rX = x;

          if (w.config.xaxis.convertedCatToNumeric && w.globals.categoryLabels.length) {
            x = w.globals.categoryLabels.indexOf(x) + 1;
          }

          var catIndex = w.globals.labels.indexOf(x);
          var xLabel = w.globals.dom.baseEl.querySelector(
            '.apexcharts-xaxis-texts-g text:nth-child(' + (catIndex + 1) + ')'
          );

          if (xLabel) {
            rX = parseFloat(xLabel.getAttribute('x'));
          }

          return rX;
        },
      },
    ]);

    return Helpers;
  })();

  var XAnnotations = /*#__PURE__*/ (function () {
    function XAnnotations(annoCtx) {
      _classCallCheck(this, XAnnotations);

      this.w = annoCtx.w;
      this.annoCtx = annoCtx;
      this.invertAxis = this.annoCtx.invertAxis;
    }

    _createClass(XAnnotations, [
      {
        key: 'addXaxisAnnotation',
        value: function addXaxisAnnotation(anno, parent, index) {
          var w = this.w;
          var min = this.invertAxis ? w.globals.minY : w.globals.minX;
          var max = this.invertAxis ? w.globals.maxY : w.globals.maxX;
          var range = this.invertAxis ? w.globals.yRange[0] : w.globals.xRange;
          var x1 = (anno.x - min) / (range / w.globals.gridWidth);

          if (this.annoCtx.inversedReversedAxis) {
            x1 = (max - anno.x) / (range / w.globals.gridWidth);
          }

          var text = anno.label.text;

          if (
            (w.config.xaxis.type === 'category' || w.config.xaxis.convertedCatToNumeric) &&
            !this.invertAxis &&
            !w.globals.dataFormatXNumeric
          ) {
            x1 = this.annoCtx.helpers.getStringX(anno.x);
          }

          var strokeDashArray = anno.strokeDashArray;
          if (!Utils$1.isNumber(x1)) return;

          if (anno.x2 === null || typeof anno.x2 === 'undefined') {
            var line = this.annoCtx.graphics.drawLine(
              x1 + anno.offsetX, // x1
              0 + anno.offsetY, // y1
              x1 + anno.offsetX, // x2
              w.globals.gridHeight + anno.offsetY, // y2
              anno.borderColor, // lineColor
              strokeDashArray, //dashArray
              anno.borderWidth
            );
            parent.appendChild(line.node);

            if (anno.id) {
              line.node.classList.add(anno.id);
            }
          } else {
            var x2 = (anno.x2 - min) / (range / w.globals.gridWidth);

            if (this.annoCtx.inversedReversedAxis) {
              x2 = (max - anno.x2) / (range / w.globals.gridWidth);
            }

            if (
              (w.config.xaxis.type === 'category' || w.config.xaxis.convertedCatToNumeric) &&
              !this.invertAxis &&
              !w.globals.dataFormatXNumeric
            ) {
              x2 = this.annoCtx.helpers.getStringX(anno.x2);
            }

            if (x2 < x1) {
              var temp = x1;
              x1 = x2;
              x2 = temp;
            }

            var rect = this.annoCtx.graphics.drawRect(
              x1 + anno.offsetX, // x1
              0 + anno.offsetY, // y1
              x2 - x1, // x2
              w.globals.gridHeight + anno.offsetY, // y2
              0, // radius
              anno.fillColor, // color
              anno.opacity, // opacity,
              1, // strokeWidth
              anno.borderColor, // strokeColor
              strokeDashArray // stokeDashArray
            );
            rect.node.classList.add('apexcharts-annotation-rect');
            rect.attr('clip-path', 'url(#gridRectMask'.concat(w.globals.cuid, ')'));
            parent.appendChild(rect.node);

            if (anno.id) {
              rect.node.classList.add(anno.id);
            }
          }

          var textY = anno.label.position === 'top' ? 4 : w.globals.gridHeight;
          var textRects = this.annoCtx.graphics.getTextRects(
            text,
            parseFloat(anno.label.style.fontSize)
          );
          var elText = this.annoCtx.graphics.drawText({
            x: x1 + anno.label.offsetX,
            y:
              textY +
              anno.label.offsetY -
              (anno.label.orientation === 'vertical'
                ? anno.label.position === 'top'
                  ? textRects.width / 2 - 12
                  : -textRects.width / 2
                : 0),
            text: text,
            textAnchor: anno.label.textAnchor,
            fontSize: anno.label.style.fontSize,
            fontFamily: anno.label.style.fontFamily,
            fontWeight: anno.label.style.fontWeight,
            foreColor: anno.label.style.color,
            cssClass: 'apexcharts-xaxis-annotation-label '
              .concat(anno.label.style.cssClass, ' ')
              .concat(anno.id ? anno.id : ''),
          });
          elText.attr({
            rel: index,
          });
          parent.appendChild(elText.node); // after placing the annotations on svg, set any vertically placed annotations

          this.annoCtx.helpers.setOrientations(anno, index);
        },
      },
      {
        key: 'drawXAxisAnnotations',
        value: function drawXAxisAnnotations() {
          var _this = this;

          var w = this.w;
          var elg = this.annoCtx.graphics.group({
            class: 'apexcharts-xaxis-annotations',
          });
          w.config.annotations.xaxis.map(function (anno, index) {
            _this.addXaxisAnnotation(anno, elg.node, index);
          });
          return elg;
        },
      },
    ]);

    return XAnnotations;
  })();

  /*
   ** Util functions which are dependent on ApexCharts instance
   */
  var CoreUtils = /*#__PURE__*/ (function () {
    function CoreUtils(ctx) {
      _classCallCheck(this, CoreUtils);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(
      CoreUtils,
      [
        {
          key: 'getStackedSeriesTotals',
          value:
            /**
             * @memberof CoreUtils
             * returns the sum of all individual values in a multiple stacked series
             * Eg. w.globals.series = [[32,33,43,12], [2,3,5,1]]
             *  @return [34,36,48,13]
             **/
            function getStackedSeriesTotals() {
              var w = this.w;
              var total = [];
              if (w.globals.series.length === 0) return total;

              for (var i = 0; i < w.globals.series[w.globals.maxValsInArrayIndex].length; i++) {
                var t = 0;

                for (var j = 0; j < w.globals.series.length; j++) {
                  if (typeof w.globals.series[j][i] !== 'undefined') {
                    t += w.globals.series[j][i];
                  }
                }

                total.push(t);
              }

              w.globals.stackedSeriesTotals = total;
              return total;
            }, // get total of the all values inside all series
        },
        {
          key: 'getSeriesTotalByIndex',
          value: function getSeriesTotalByIndex() {
            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (index === null) {
              // non-plot chart types - pie / donut / circle
              return this.w.config.series.reduce(function (acc, cur) {
                return acc + cur;
              }, 0);
            } else {
              // axis charts - supporting multiple series
              return this.w.globals.series[index].reduce(function (acc, cur) {
                return acc + cur;
              }, 0);
            }
          },
        },
        {
          key: 'isSeriesNull',
          value: function isSeriesNull() {
            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var r = [];

            if (index === null) {
              // non-plot chart types - pie / donut / circle
              r = this.w.config.series.filter(function (d) {
                return d !== null;
              });
            } else {
              // axis charts - supporting multiple series
              r = this.w.config.series[index].data.filter(function (d) {
                return d !== null;
              });
            }

            return r.length === 0;
          },
        },
        {
          key: 'seriesHaveSameValues',
          value: function seriesHaveSameValues(index) {
            return this.w.globals.series[index].every(function (val, i, arr) {
              return val === arr[0];
            });
          },
        },
        {
          key: 'getCategoryLabels',
          value: function getCategoryLabels(labels) {
            var w = this.w;
            var catLabels = labels.slice();

            if (w.config.xaxis.convertedCatToNumeric) {
              catLabels = labels.map(function (i, li) {
                return w.config.xaxis.labels.formatter(i - w.globals.minX + 1);
              });
            }

            return catLabels;
          }, // maxValsInArrayIndex is the index of series[] which has the largest number of items
        },
        {
          key: 'getLargestSeries',
          value: function getLargestSeries() {
            var w = this.w;
            w.globals.maxValsInArrayIndex = w.globals.series
              .map(function (a) {
                return a.length;
              })
              .indexOf(
                Math.max.apply(
                  Math,
                  w.globals.series.map(function (a) {
                    return a.length;
                  })
                )
              );
          },
        },
        {
          key: 'getLargestMarkerSize',
          value: function getLargestMarkerSize() {
            var w = this.w;
            var size = 0;
            w.globals.markers.size.forEach(function (m) {
              size = Math.max(size, m);
            });
            w.globals.markers.largestSize = size;
            return size;
          },
          /**
           * @memberof Core
           * returns the sum of all values in a series
           * Eg. w.globals.series = [[32,33,43,12], [2,3,5,1]]
           *  @return [120, 11]
           **/
        },
        {
          key: 'getSeriesTotals',
          value: function getSeriesTotals() {
            var w = this.w;
            w.globals.seriesTotals = w.globals.series.map(function (ser, index) {
              var total = 0;

              if (Array.isArray(ser)) {
                for (var j = 0; j < ser.length; j++) {
                  total += ser[j];
                }
              } else {
                // for pie/donuts/gauges
                total += ser;
              }

              return total;
            });
          },
        },
        {
          key: 'getSeriesTotalsXRange',
          value: function getSeriesTotalsXRange(minX, maxX) {
            var w = this.w;
            var seriesTotalsXRange = w.globals.series.map(function (ser, index) {
              var total = 0;

              for (var j = 0; j < ser.length; j++) {
                if (w.globals.seriesX[index][j] > minX && w.globals.seriesX[index][j] < maxX) {
                  total += ser[j];
                }
              }

              return total;
            });
            return seriesTotalsXRange;
          },
          /**
           * @memberof CoreUtils
           * returns the percentage value of all individual values which can be used in a 100% stacked series
           * Eg. w.globals.series = [[32, 33, 43, 12], [2, 3, 5, 1]]
           *  @return [[94.11, 91.66, 89.58, 92.30], [5.88, 8.33, 10.41, 7.7]]
           **/
        },
        {
          key: 'getPercentSeries',
          value: function getPercentSeries() {
            var w = this.w;
            w.globals.seriesPercent = w.globals.series.map(function (ser, index) {
              var seriesPercent = [];

              if (Array.isArray(ser)) {
                for (var j = 0; j < ser.length; j++) {
                  var total = w.globals.stackedSeriesTotals[j];
                  var percent = 0;

                  if (total) {
                    percent = (100 * ser[j]) / total;
                  }

                  seriesPercent.push(percent);
                }
              } else {
                var _total = w.globals.seriesTotals.reduce(function (acc, val) {
                  return acc + val;
                }, 0);

                var _percent = (100 * ser) / _total;

                seriesPercent.push(_percent);
              }

              return seriesPercent;
            });
          },
        },
        {
          key: 'getCalculatedRatios',
          value: function getCalculatedRatios() {
            var gl = this.w.globals;
            var yRatio = [];
            var invertedYRatio = 0;
            var xRatio = 0;
            var initialXRatio = 0;
            var invertedXRatio = 0;
            var zRatio = 0;
            var baseLineY = [];
            var baseLineInvertedY = 0.1;
            var baseLineX = 0;
            gl.yRange = [];

            if (gl.isMultipleYAxis) {
              for (var i = 0; i < gl.minYArr.length; i++) {
                gl.yRange.push(Math.abs(gl.minYArr[i] - gl.maxYArr[i]));
                baseLineY.push(0);
              }
            } else {
              gl.yRange.push(Math.abs(gl.minY - gl.maxY));
            }

            gl.xRange = Math.abs(gl.maxX - gl.minX);
            gl.zRange = Math.abs(gl.maxZ - gl.minZ); // multiple y axis

            for (var _i = 0; _i < gl.yRange.length; _i++) {
              yRatio.push(gl.yRange[_i] / gl.gridHeight);
            }

            xRatio = gl.xRange / gl.gridWidth;
            initialXRatio = Math.abs(gl.initialMaxX - gl.initialMinX) / gl.gridWidth;
            invertedYRatio = gl.yRange / gl.gridWidth;
            invertedXRatio = gl.xRange / gl.gridHeight;
            zRatio = (gl.zRange / gl.gridHeight) * 16;

            if (!zRatio) {
              zRatio = 1;
            }

            if (gl.minY !== Number.MIN_VALUE && Math.abs(gl.minY) !== 0) {
              // Negative numbers present in series
              gl.hasNegs = true;
            }

            if (gl.isMultipleYAxis) {
              baseLineY = []; // baseline variables is the 0 of the yaxis which will be needed when there are negatives

              for (var _i2 = 0; _i2 < yRatio.length; _i2++) {
                baseLineY.push(-gl.minYArr[_i2] / yRatio[_i2]);
              }
            } else {
              baseLineY.push(-gl.minY / yRatio[0]);

              if (gl.minY !== Number.MIN_VALUE && Math.abs(gl.minY) !== 0) {
                baseLineInvertedY = -gl.minY / invertedYRatio; // this is for bar chart

                baseLineX = gl.minX / xRatio;
              }
            }

            return {
              yRatio: yRatio,
              invertedYRatio: invertedYRatio,
              zRatio: zRatio,
              xRatio: xRatio,
              initialXRatio: initialXRatio,
              invertedXRatio: invertedXRatio,
              baseLineInvertedY: baseLineInvertedY,
              baseLineY: baseLineY,
              baseLineX: baseLineX,
            };
          },
        },
        {
          key: 'getLogSeries',
          value: function getLogSeries(series) {
            var _this = this;

            var w = this.w;
            w.globals.seriesLog = series.map(function (s, i) {
              if (w.config.yaxis[i] && w.config.yaxis[i].logarithmic) {
                return s.map(function (d) {
                  if (d === null) return null;
                  return _this.getLogVal(d, i);
                });
              } else {
                return s;
              }
            });
            return w.globals.invalidLogScale ? series : w.globals.seriesLog;
          },
        },
        {
          key: 'getLogVal',
          value: function getLogVal(d, yIndex) {
            var w = this.w;
            return (
              (Math.log(d) - Math.log(w.globals.minYArr[yIndex])) /
              (Math.log(w.globals.maxYArr[yIndex]) - Math.log(w.globals.minYArr[yIndex]))
            );
          },
        },
        {
          key: 'getLogYRatios',
          value: function getLogYRatios(yRatio) {
            var _this2 = this;

            var w = this.w;
            var gl = this.w.globals;
            gl.yLogRatio = yRatio.slice();
            gl.logYRange = gl.yRange.map(function (yRange, i) {
              if (w.config.yaxis[i] && _this2.w.config.yaxis[i].logarithmic) {
                var maxY = -Number.MAX_VALUE;
                var minY = Number.MIN_VALUE;
                var range = 1;
                gl.seriesLog.forEach(function (s, si) {
                  s.forEach(function (v) {
                    if (w.config.yaxis[si] && w.config.yaxis[si].logarithmic) {
                      maxY = Math.max(v, maxY);
                      minY = Math.min(v, minY);
                    }
                  });
                });
                range = Math.pow(gl.yRange[i], Math.abs(minY - maxY) / gl.yRange[i]);
                gl.yLogRatio[i] = range / gl.gridHeight;
                return range;
              }
            });
            return gl.invalidLogScale ? yRatio.slice() : gl.yLogRatio;
          }, // Some config objects can be array - and we need to extend them correctly
        },
      ],
      [
        {
          key: 'checkComboSeries',
          value: function checkComboSeries(series) {
            var comboCharts = false;
            var comboBarCount = 0;
            var comboCount = 0; // if user specified a type in series too, turn on comboCharts flag

            if (series.length && typeof series[0].type !== 'undefined') {
              series.forEach(function (s) {
                if (
                  s.type === 'bar' ||
                  s.type === 'column' ||
                  s.type === 'candlestick' ||
                  s.type === 'boxPlot'
                ) {
                  comboBarCount++;
                }

                if (typeof s.type !== 'undefined') {
                  comboCount++;
                }
              });
            }

            if (comboCount > 0) {
              comboCharts = true;
            }

            return {
              comboBarCount: comboBarCount,
              comboCharts: comboCharts,
            };
          },
        },
        {
          key: 'extendArrayProps',
          value: function extendArrayProps(configInstance, options, w) {
            if (options.yaxis) {
              options = configInstance.extendYAxis(options, w);
            }

            if (options.annotations) {
              if (options.annotations.yaxis) {
                options = configInstance.extendYAxisAnnotations(options);
              }

              if (options.annotations.xaxis) {
                options = configInstance.extendXAxisAnnotations(options);
              }

              if (options.annotations.points) {
                options = configInstance.extendPointAnnotations(options);
              }
            }

            return options;
          },
        },
      ]
    );

    return CoreUtils;
  })();

  var YAnnotations = /*#__PURE__*/ (function () {
    function YAnnotations(annoCtx) {
      _classCallCheck(this, YAnnotations);

      this.w = annoCtx.w;
      this.annoCtx = annoCtx;
    }

    _createClass(YAnnotations, [
      {
        key: 'addYaxisAnnotation',
        value: function addYaxisAnnotation(anno, parent, index) {
          var w = this.w;
          var strokeDashArray = anno.strokeDashArray;

          var y1 = this._getY1Y2('y1', anno);

          var y2;
          var text = anno.label.text;

          if (anno.y2 === null || typeof anno.y2 === 'undefined') {
            var line = this.annoCtx.graphics.drawLine(
              0 + anno.offsetX, // x1
              y1 + anno.offsetY, // y1
              this._getYAxisAnnotationWidth(anno), // x2
              y1 + anno.offsetY, // y2
              anno.borderColor, // lineColor
              strokeDashArray, // dashArray
              anno.borderWidth
            );
            parent.appendChild(line.node);

            if (anno.id) {
              line.node.classList.add(anno.id);
            }
          } else {
            y2 = this._getY1Y2('y2', anno);

            if (y2 > y1) {
              var temp = y1;
              y1 = y2;
              y2 = temp;
            }

            var rect = this.annoCtx.graphics.drawRect(
              0 + anno.offsetX, // x1
              y2 + anno.offsetY, // y1
              this._getYAxisAnnotationWidth(anno), // x2
              y1 - y2, // y2
              0, // radius
              anno.fillColor, // color
              anno.opacity, // opacity,
              1, // strokeWidth
              anno.borderColor, // strokeColor
              strokeDashArray // stokeDashArray
            );
            rect.node.classList.add('apexcharts-annotation-rect');
            rect.attr('clip-path', 'url(#gridRectMask'.concat(w.globals.cuid, ')'));
            parent.appendChild(rect.node);

            if (anno.id) {
              rect.node.classList.add(anno.id);
            }
          }

          var textX = anno.label.position === 'right' ? w.globals.gridWidth : 0;
          var elText = this.annoCtx.graphics.drawText({
            x: textX + anno.label.offsetX,
            y: (y2 != null ? y2 : y1) + anno.label.offsetY - 3,
            text: text,
            textAnchor: anno.label.textAnchor,
            fontSize: anno.label.style.fontSize,
            fontFamily: anno.label.style.fontFamily,
            fontWeight: anno.label.style.fontWeight,
            foreColor: anno.label.style.color,
            cssClass: 'apexcharts-yaxis-annotation-label '
              .concat(anno.label.style.cssClass, ' ')
              .concat(anno.id ? anno.id : ''),
          });
          elText.attr({
            rel: index,
          });
          parent.appendChild(elText.node);
        },
      },
      {
        key: '_getY1Y2',
        value: function _getY1Y2(type, anno) {
          var y = type === 'y1' ? anno.y : anno.y2;
          var yP;
          var w = this.w;

          if (this.annoCtx.invertAxis) {
            var catIndex = w.globals.labels.indexOf(y);

            if (w.config.xaxis.convertedCatToNumeric) {
              catIndex = w.globals.categoryLabels.indexOf(y);
            }

            var xLabel = w.globals.dom.baseEl.querySelector(
              '.apexcharts-yaxis-texts-g text:nth-child(' + (catIndex + 1) + ')'
            );

            if (xLabel) {
              yP = parseFloat(xLabel.getAttribute('y'));
            }
          } else {
            var yPos;

            if (w.config.yaxis[anno.yAxisIndex].logarithmic) {
              var coreUtils = new CoreUtils(this.annoCtx.ctx);
              y = coreUtils.getLogVal(y, anno.yAxisIndex);
              yPos = y / w.globals.yLogRatio[anno.yAxisIndex];
            } else {
              yPos =
                (y - w.globals.minYArr[anno.yAxisIndex]) /
                (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);
            }

            yP = w.globals.gridHeight - yPos;

            if (w.config.yaxis[anno.yAxisIndex] && w.config.yaxis[anno.yAxisIndex].reversed) {
              yP = yPos;
            }
          }

          return yP;
        },
      },
      {
        key: '_getYAxisAnnotationWidth',
        value: function _getYAxisAnnotationWidth(anno) {
          // issue apexcharts.js#2009
          var w = this.w;
          var width = w.globals.gridWidth;

          if (anno.width.indexOf('%') > -1) {
            width = (w.globals.gridWidth * parseInt(anno.width, 10)) / 100;
          } else {
            width = parseInt(anno.width, 10);
          }

          return width + anno.offsetX;
        },
      },
      {
        key: 'drawYAxisAnnotations',
        value: function drawYAxisAnnotations() {
          var _this = this;

          var w = this.w;
          var elg = this.annoCtx.graphics.group({
            class: 'apexcharts-yaxis-annotations',
          });
          w.config.annotations.yaxis.map(function (anno, index) {
            _this.addYaxisAnnotation(anno, elg.node, index);
          });
          return elg;
        },
      },
    ]);

    return YAnnotations;
  })();

  var PointAnnotations = /*#__PURE__*/ (function () {
    function PointAnnotations(annoCtx) {
      _classCallCheck(this, PointAnnotations);

      this.w = annoCtx.w;
      this.annoCtx = annoCtx;
    }

    _createClass(PointAnnotations, [
      {
        key: 'addPointAnnotation',
        value: function addPointAnnotation(anno, parent, index) {
          var w = this.w;
          var x = 0;
          var y = 0;
          var pointY = 0;

          if (this.annoCtx.invertAxis) {
            console.warn('Point annotation is not supported in horizontal bar charts.');
          }

          var annoY = parseFloat(anno.y);

          if (
            typeof anno.x === 'string' ||
            w.config.xaxis.type === 'category' ||
            w.config.xaxis.convertedCatToNumeric
          ) {
            var catIndex = w.globals.labels.indexOf(anno.x);

            if (w.config.xaxis.convertedCatToNumeric) {
              catIndex = w.globals.categoryLabels.indexOf(anno.x);
            }

            x = this.annoCtx.helpers.getStringX(anno.x);

            if (anno.y === null) {
              annoY = w.globals.series[anno.seriesIndex][catIndex];
            }
          } else {
            x = (anno.x - w.globals.minX) / (w.globals.xRange / w.globals.gridWidth);
          } // count series assign to the same axis

          var duplicateSeriesName = [];
          var countDuplicateSeriesName = 0;

          for (var i = 0; i <= anno.seriesIndex; i++) {
            var serieName = w.config.yaxis[i].seriesName;
            if (serieName)
              for (var j = i + 1; j <= anno.seriesIndex; j++) {
                if (
                  w.config.yaxis[j].seriesName === serieName &&
                  duplicateSeriesName.indexOf(serieName) === -1
                ) {
                  countDuplicateSeriesName++;
                  duplicateSeriesName.push(serieName);
                }
              }
          }

          var yPos;

          if (w.config.yaxis[anno.yAxisIndex].logarithmic) {
            var coreUtils = new CoreUtils(this.annoCtx.ctx);
            annoY = coreUtils.getLogVal(annoY, anno.yAxisIndex);
            yPos = annoY / w.globals.yLogRatio[anno.yAxisIndex];
          } else {
            // calculate the right position in array for this yAxisIndex
            var actualSerieIndex = anno.yAxisIndex + countDuplicateSeriesName;
            yPos =
              (annoY - w.globals.minYArr[actualSerieIndex]) /
              (w.globals.yRange[actualSerieIndex] / w.globals.gridHeight);
          }

          y =
            w.globals.gridHeight - yPos - parseFloat(anno.label.style.fontSize) - anno.marker.size;
          pointY = w.globals.gridHeight - yPos;

          if (w.config.yaxis[anno.yAxisIndex] && w.config.yaxis[anno.yAxisIndex].reversed) {
            y = yPos + parseFloat(anno.label.style.fontSize) + anno.marker.size;
            pointY = yPos;
          }

          if (!Utils$1.isNumber(x)) return;
          var optsPoints = {
            pSize: anno.marker.size,
            pointStrokeWidth: anno.marker.strokeWidth,
            pointFillColor: anno.marker.fillColor,
            pointStrokeColor: anno.marker.strokeColor,
            shape: anno.marker.shape,
            pRadius: anno.marker.radius,
            class: 'apexcharts-point-annotation-marker '
              .concat(anno.marker.cssClass, ' ')
              .concat(anno.id ? anno.id : ''),
          };
          var point = this.annoCtx.graphics.drawMarker(
            x + anno.marker.offsetX,
            pointY + anno.marker.offsetY,
            optsPoints
          );
          parent.appendChild(point.node);
          var text = anno.label.text ? anno.label.text : '';
          var elText = this.annoCtx.graphics.drawText({
            x: x + anno.label.offsetX,
            y: y + anno.label.offsetY,
            text: text,
            textAnchor: anno.label.textAnchor,
            fontSize: anno.label.style.fontSize,
            fontFamily: anno.label.style.fontFamily,
            fontWeight: anno.label.style.fontWeight,
            foreColor: anno.label.style.color,
            cssClass: 'apexcharts-point-annotation-label '
              .concat(anno.label.style.cssClass, ' ')
              .concat(anno.id ? anno.id : ''),
          });
          elText.attr({
            rel: index,
          });
          parent.appendChild(elText.node); // TODO: deprecate this as we will use custom

          if (anno.customSVG.SVG) {
            var g = this.annoCtx.graphics.group({
              class: 'apexcharts-point-annotations-custom-svg ' + anno.customSVG.cssClass,
            });
            g.attr({
              transform: 'translate('
                .concat(x + anno.customSVG.offsetX, ', ')
                .concat(y + anno.customSVG.offsetY, ')'),
            });
            g.node.innerHTML = anno.customSVG.SVG;
            parent.appendChild(g.node);
          }

          if (anno.image.path) {
            var imgWidth = anno.image.width ? anno.image.width : 20;
            var imgHeight = anno.image.height ? anno.image.height : 20;
            point = this.annoCtx.addImage({
              x: x + anno.image.offsetX - imgWidth / 2,
              y: y + anno.image.offsetY - imgHeight / 2,
              width: imgWidth,
              height: imgHeight,
              path: anno.image.path,
              appendTo: '.apexcharts-point-annotations',
            });
          }

          if (anno.mouseEnter) {
            point.node.addEventListener('mouseenter', anno.mouseEnter.bind(this, anno));
          }

          if (anno.mouseLeave) {
            point.node.addEventListener('mouseleave', anno.mouseLeave.bind(this, anno));
          }
        },
      },
      {
        key: 'drawPointAnnotations',
        value: function drawPointAnnotations() {
          var _this = this;

          var w = this.w;
          var elg = this.annoCtx.graphics.group({
            class: 'apexcharts-point-annotations',
          });
          w.config.annotations.points.map(function (anno, index) {
            _this.addPointAnnotation(anno, elg.node, index);
          });
          return elg;
        },
      },
    ]);

    return PointAnnotations;
  })();

  const name = 'en';
  const options = {
    months: [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December',
    ],
    shortMonths: [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ],
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    toolbar: {
      exportToSVG: 'Download SVG',
      exportToPNG: 'Download PNG',
      exportToCSV: 'Download CSV',
      menu: 'Menu',
      selection: 'Selection',
      selectionZoom: 'Selection Zoom',
      zoomIn: 'Zoom In',
      zoomOut: 'Zoom Out',
      pan: 'Panning',
      reset: 'Reset Zoom',
    },
  };
  var en = {
    name: name,
    options: options,
  };

  var Options = /*#__PURE__*/ (function () {
    function Options() {
      _classCallCheck(this, Options);

      this.yAxis = {
        show: true,
        showAlways: false,
        showForNullSeries: true,
        seriesName: undefined,
        opposite: false,
        reversed: false,
        logarithmic: false,
        logBase: 10,
        tickAmount: undefined,
        forceNiceScale: false,
        max: undefined,
        min: undefined,
        floating: false,
        decimalsInFloat: undefined,
        labels: {
          show: true,
          minWidth: 0,
          maxWidth: 160,
          offsetX: 0,
          offsetY: 0,
          align: undefined,
          rotate: 0,
          padding: 20,
          style: {
            colors: [],
            fontSize: '11px',
            fontWeight: 400,
            fontFamily: undefined,
            cssClass: '',
          },
          formatter: undefined,
        },
        axisBorder: {
          show: false,
          color: '#e0e0e0',
          width: 1,
          offsetX: 0,
          offsetY: 0,
        },
        axisTicks: {
          show: false,
          color: '#e0e0e0',
          width: 6,
          offsetX: 0,
          offsetY: 0,
        },
        title: {
          text: undefined,
          rotate: -90,
          offsetY: 0,
          offsetX: 0,
          style: {
            color: undefined,
            fontSize: '11px',
            fontWeight: 900,
            fontFamily: undefined,
            cssClass: '',
          },
        },
        tooltip: {
          enabled: false,
          offsetX: 0,
        },
        crosshairs: {
          show: true,
          position: 'front',
          stroke: {
            color: '#b6b6b6',
            width: 1,
            dashArray: 0,
          },
        },
      };
      this.pointAnnotation = {
        id: undefined,
        x: 0,
        y: null,
        yAxisIndex: 0,
        seriesIndex: 0,
        mouseEnter: undefined,
        mouseLeave: undefined,
        marker: {
          size: 4,
          fillColor: '#fff',
          strokeWidth: 2,
          strokeColor: '#333',
          shape: 'circle',
          offsetX: 0,
          offsetY: 0,
          radius: 2,
          cssClass: '',
        },
        label: {
          borderColor: '#c2c2c2',
          borderWidth: 1,
          borderRadius: 2,
          text: undefined,
          textAnchor: 'middle',
          offsetX: 0,
          offsetY: 0,
          mouseEnter: undefined,
          mouseLeave: undefined,
          style: {
            background: '#fff',
            color: undefined,
            fontSize: '11px',
            fontFamily: undefined,
            fontWeight: 400,
            cssClass: '',
            padding: {
              left: 5,
              right: 5,
              top: 2,
              bottom: 2,
            },
          },
        },
        customSVG: {
          // this will be deprecated in the next major version as it is going to be replaced with a better alternative below
          SVG: undefined,
          cssClass: undefined,
          offsetX: 0,
          offsetY: 0,
        },
        image: {
          path: undefined,
          width: 20,
          height: 20,
          offsetX: 0,
          offsetY: 0,
        },
      };
      this.yAxisAnnotation = {
        id: undefined,
        y: 0,
        y2: null,
        strokeDashArray: 1,
        fillColor: '#c2c2c2',
        borderColor: '#c2c2c2',
        borderWidth: 1,
        opacity: 0.3,
        offsetX: 0,
        offsetY: 0,
        width: '100%',
        yAxisIndex: 0,
        label: {
          borderColor: '#c2c2c2',
          borderWidth: 1,
          borderRadius: 2,
          text: undefined,
          textAnchor: 'end',
          position: 'right',
          offsetX: 0,
          offsetY: -3,
          mouseEnter: undefined,
          mouseLeave: undefined,
          style: {
            background: '#fff',
            color: undefined,
            fontSize: '11px',
            fontFamily: undefined,
            fontWeight: 400,
            cssClass: '',
            padding: {
              left: 5,
              right: 5,
              top: 2,
              bottom: 2,
            },
          },
        },
      };
      this.xAxisAnnotation = {
        id: undefined,
        x: 0,
        x2: null,
        strokeDashArray: 1,
        fillColor: '#c2c2c2',
        borderColor: '#c2c2c2',
        borderWidth: 1,
        opacity: 0.3,
        offsetX: 0,
        offsetY: 0,
        label: {
          borderColor: '#c2c2c2',
          borderWidth: 1,
          borderRadius: 2,
          text: undefined,
          textAnchor: 'middle',
          orientation: 'vertical',
          position: 'top',
          offsetX: 0,
          offsetY: 0,
          mouseEnter: undefined,
          mouseLeave: undefined,
          style: {
            background: '#fff',
            color: undefined,
            fontSize: '11px',
            fontFamily: undefined,
            fontWeight: 400,
            cssClass: '',
            padding: {
              left: 5,
              right: 5,
              top: 2,
              bottom: 2,
            },
          },
        },
      };
      this.text = {
        x: 0,
        y: 0,
        text: '',
        textAnchor: 'start',
        foreColor: undefined,
        fontSize: '13px',
        fontFamily: undefined,
        fontWeight: 400,
        appendTo: '.apexcharts-annotations',
        backgroundColor: 'transparent',
        borderColor: '#c2c2c2',
        borderRadius: 0,
        borderWidth: 0,
        paddingLeft: 4,
        paddingRight: 4,
        paddingTop: 2,
        paddingBottom: 2,
      };
    }

    _createClass(Options, [
      {
        key: 'init',
        value: function init() {
          return {
            annotations: {
              position: 'front',
              yaxis: [this.yAxisAnnotation],
              xaxis: [this.xAxisAnnotation],
              points: [this.pointAnnotation],
              texts: [],
              images: [],
              shapes: [],
            },
            chart: {
              animations: {
                enabled: true,
                easing: 'easeinout',
                // linear, easeout, easein, easeinout, swing, bounce, elastic
                speed: 800,
                animateGradually: {
                  delay: 150,
                  enabled: true,
                },
                dynamicAnimation: {
                  enabled: true,
                  speed: 350,
                },
              },
              background: 'transparent',
              locales: [en],
              defaultLocale: 'en',
              dropShadow: {
                enabled: false,
                enabledOnSeries: undefined,
                top: 2,
                left: 2,
                blur: 4,
                color: '#000',
                opacity: 0.35,
              },
              events: {
                animationEnd: undefined,
                beforeMount: undefined,
                mounted: undefined,
                updated: undefined,
                click: undefined,
                mouseMove: undefined,
                mouseLeave: undefined,
                legendClick: undefined,
                markerClick: undefined,
                selection: undefined,
                dataPointSelection: undefined,
                dataPointMouseEnter: undefined,
                dataPointMouseLeave: undefined,
                beforeZoom: undefined,
                beforeResetZoom: undefined,
                zoomed: undefined,
                scrolled: undefined,
                brushScrolled: undefined,
              },
              foreColor: '#373d3f',
              fontFamily: 'Helvetica, Arial, sans-serif',
              height: 'auto',
              parentHeightOffset: 15,
              redrawOnParentResize: true,
              redrawOnWindowResize: true,
              id: undefined,
              group: undefined,
              offsetX: 0,
              offsetY: 0,
              selection: {
                enabled: false,
                type: 'x',
                // selectedPoints: undefined, // default datapoints that should be selected automatically
                fill: {
                  color: '#24292e',
                  opacity: 0.1,
                },
                stroke: {
                  width: 1,
                  color: '#24292e',
                  opacity: 0.4,
                  dashArray: 3,
                },
                xaxis: {
                  min: undefined,
                  max: undefined,
                },
                yaxis: {
                  min: undefined,
                  max: undefined,
                },
              },
              sparkline: {
                enabled: false,
              },
              brush: {
                enabled: false,
                autoScaleYaxis: true,
                target: undefined,
              },
              stacked: false,
              stackType: 'normal',
              toolbar: {
                show: true,
                offsetX: 0,
                offsetY: 0,
                tools: {
                  download: true,
                  selection: true,
                  zoom: true,
                  zoomin: true,
                  zoomout: true,
                  pan: true,
                  reset: true,
                  customIcons: [],
                },
                export: {
                  csv: {
                    filename: undefined,
                    columnDelimiter: ',',
                    headerCategory: 'category',
                    headerValue: 'value',
                    dateFormatter: function dateFormatter(timestamp) {
                      return new Date(timestamp).toDateString();
                    },
                  },
                  png: {
                    filename: undefined,
                  },
                  svg: {
                    filename: undefined,
                  },
                },
                autoSelected: 'zoom', // accepts -> zoom, pan, selection
              },
              type: 'line',
              width: '100%',
              zoom: {
                enabled: true,
                type: 'x',
                autoScaleYaxis: false,
                zoomedArea: {
                  fill: {
                    color: '#90CAF9',
                    opacity: 0.4,
                  },
                  stroke: {
                    color: '#0D47A1',
                    opacity: 0.4,
                    width: 1,
                  },
                },
              },
            },
            plotOptions: {
              area: {
                fillTo: 'origin',
              },
              bar: {
                horizontal: false,
                columnWidth: '70%',
                // should be in percent 0 - 100
                barHeight: '70%',
                // should be in percent 0 - 100
                distributed: false,
                borderRadius: 0,
                rangeBarOverlap: true,
                rangeBarGroupRows: false,
                colors: {
                  ranges: [],
                  backgroundBarColors: [],
                  backgroundBarOpacity: 1,
                  backgroundBarRadius: 0,
                },
                dataLabels: {
                  position: 'top',
                  // top, center, bottom
                  maxItems: 100,
                  hideOverflowingLabels: true,
                  orientation: 'horizontal', // TODO: provide stackedLabels for stacked charts which gives additions of values
                },
              },
              bubble: {
                minBubbleRadius: undefined,
                maxBubbleRadius: undefined,
              },
              candlestick: {
                colors: {
                  upward: '#00B746',
                  downward: '#EF403C',
                },
                wick: {
                  useFillColor: true,
                },
              },
              boxPlot: {
                colors: {
                  upper: '#00E396',
                  lower: '#008FFB',
                },
              },
              heatmap: {
                radius: 2,
                enableShades: true,
                shadeIntensity: 0.5,
                reverseNegativeShade: false,
                distributed: false,
                useFillColorAsStroke: false,
                colorScale: {
                  inverse: false,
                  ranges: [],
                  min: undefined,
                  max: undefined,
                },
              },
              treemap: {
                enableShades: true,
                shadeIntensity: 0.5,
                distributed: false,
                reverseNegativeShade: false,
                useFillColorAsStroke: false,
                colorScale: {
                  inverse: false,
                  ranges: [],
                  min: undefined,
                  max: undefined,
                },
              },
              radialBar: {
                inverseOrder: false,
                startAngle: 0,
                endAngle: 360,
                offsetX: 0,
                offsetY: 0,
                hollow: {
                  margin: 5,
                  size: '50%',
                  background: 'transparent',
                  image: undefined,
                  imageWidth: 150,
                  imageHeight: 150,
                  imageOffsetX: 0,
                  imageOffsetY: 0,
                  imageClipped: true,
                  position: 'front',
                  dropShadow: {
                    enabled: false,
                    top: 0,
                    left: 0,
                    blur: 3,
                    color: '#000',
                    opacity: 0.5,
                  },
                },
                track: {
                  show: true,
                  startAngle: undefined,
                  endAngle: undefined,
                  background: '#f2f2f2',
                  strokeWidth: '97%',
                  opacity: 1,
                  margin: 5,
                  // margin is in pixels
                  dropShadow: {
                    enabled: false,
                    top: 0,
                    left: 0,
                    blur: 3,
                    color: '#000',
                    opacity: 0.5,
                  },
                },
                dataLabels: {
                  show: true,
                  name: {
                    show: true,
                    fontSize: '16px',
                    fontFamily: undefined,
                    fontWeight: 600,
                    color: undefined,
                    offsetY: 0,
                    formatter: function formatter(val) {
                      return val;
                    },
                  },
                  value: {
                    show: true,
                    fontSize: '14px',
                    fontFamily: undefined,
                    fontWeight: 400,
                    color: undefined,
                    offsetY: 16,
                    formatter: function formatter(val) {
                      return val + '%';
                    },
                  },
                  total: {
                    show: false,
                    label: 'Total',
                    fontSize: '16px',
                    fontWeight: 600,
                    fontFamily: undefined,
                    color: undefined,
                    formatter: function formatter(w) {
                      return (
                        w.globals.seriesTotals.reduce(function (a, b) {
                          return a + b;
                        }, 0) /
                          w.globals.series.length +
                        '%'
                      );
                    },
                  },
                },
              },
              pie: {
                customScale: 1,
                offsetX: 0,
                offsetY: 0,
                startAngle: 0,
                endAngle: 360,
                expandOnClick: true,
                dataLabels: {
                  // These are the percentage values which are displayed on slice
                  offset: 0,
                  // offset by which labels will move outside
                  minAngleToShowLabel: 10,
                },
                donut: {
                  size: '65%',
                  background: 'transparent',
                  labels: {
                    // These are the inner labels appearing inside donut
                    show: false,
                    name: {
                      show: true,
                      fontSize: '16px',
                      fontFamily: undefined,
                      fontWeight: 600,
                      color: undefined,
                      offsetY: -10,
                      formatter: function formatter(val) {
                        return val;
                      },
                    },
                    value: {
                      show: true,
                      fontSize: '20px',
                      fontFamily: undefined,
                      fontWeight: 400,
                      color: undefined,
                      offsetY: 10,
                      formatter: function formatter(val) {
                        return val;
                      },
                    },
                    total: {
                      show: false,
                      showAlways: false,
                      label: 'Total',
                      fontSize: '16px',
                      fontWeight: 400,
                      fontFamily: undefined,
                      color: undefined,
                      formatter: function formatter(w) {
                        return w.globals.seriesTotals.reduce(function (a, b) {
                          return a + b;
                        }, 0);
                      },
                    },
                  },
                },
              },
              polarArea: {
                rings: {
                  strokeWidth: 1,
                  strokeColor: '#e8e8e8',
                },
                spokes: {
                  strokeWidth: 1,
                  connectorColors: '#e8e8e8',
                },
              },
              radar: {
                size: undefined,
                offsetX: 0,
                offsetY: 0,
                polygons: {
                  // strokeColor: '#e8e8e8', // should be deprecated in the minor version i.e 3.2
                  strokeWidth: 1,
                  strokeColors: '#e8e8e8',
                  connectorColors: '#e8e8e8',
                  fill: {
                    colors: undefined,
                  },
                },
              },
            },
            colors: undefined,
            dataLabels: {
              enabled: true,
              enabledOnSeries: undefined,
              formatter: function formatter(val) {
                return val !== null ? val : '';
              },
              textAnchor: 'middle',
              distributed: false,
              offsetX: 0,
              offsetY: 0,
              style: {
                fontSize: '12px',
                fontFamily: undefined,
                fontWeight: 600,
                colors: undefined,
              },
              background: {
                enabled: true,
                foreColor: '#fff',
                borderRadius: 2,
                padding: 4,
                opacity: 0.9,
                borderWidth: 1,
                borderColor: '#fff',
                dropShadow: {
                  enabled: false,
                  top: 1,
                  left: 1,
                  blur: 1,
                  color: '#000',
                  opacity: 0.45,
                },
              },
              dropShadow: {
                enabled: false,
                top: 1,
                left: 1,
                blur: 1,
                color: '#000',
                opacity: 0.45,
              },
            },
            fill: {
              type: 'solid',
              colors: undefined,
              // array of colors
              opacity: 0.85,
              gradient: {
                shade: 'dark',
                type: 'horizontal',
                shadeIntensity: 0.5,
                gradientToColors: undefined,
                inverseColors: true,
                opacityFrom: 1,
                opacityTo: 1,
                stops: [0, 50, 100],
                colorStops: [],
              },
              image: {
                src: [],
                width: undefined,
                // optional
                height: undefined, // optional
              },
              pattern: {
                style: 'squares',
                // String | Array of Strings
                width: 6,
                height: 6,
                strokeWidth: 2,
              },
            },
            forecastDataPoints: {
              count: 0,
              fillOpacity: 0.5,
              strokeWidth: undefined,
              dashArray: 4,
            },
            grid: {
              show: true,
              borderColor: '#e0e0e0',
              strokeDashArray: 0,
              position: 'back',
              xaxis: {
                lines: {
                  show: false,
                },
              },
              yaxis: {
                lines: {
                  show: true,
                },
              },
              row: {
                colors: undefined,
                // takes as array which will be repeated on rows
                opacity: 0.5,
              },
              column: {
                colors: undefined,
                // takes an array which will be repeated on columns
                opacity: 0.5,
              },
              padding: {
                top: 0,
                right: 10,
                bottom: 0,
                left: 12,
              },
            },
            labels: [],
            legend: {
              show: true,
              showForSingleSeries: false,
              showForNullSeries: true,
              showForZeroSeries: true,
              floating: false,
              position: 'bottom',
              // whether to position legends in 1 of 4
              // direction - top, bottom, left, right
              horizontalAlign: 'center',
              // when position top/bottom, you can specify whether to align legends left, right or center
              inverseOrder: false,
              fontSize: '12px',
              fontFamily: undefined,
              fontWeight: 400,
              width: undefined,
              height: undefined,
              formatter: undefined,
              tooltipHoverFormatter: undefined,
              offsetX: -20,
              offsetY: 4,
              customLegendItems: [],
              labels: {
                colors: undefined,
                useSeriesColors: false,
              },
              markers: {
                width: 12,
                height: 12,
                strokeWidth: 0,
                fillColors: undefined,
                strokeColor: '#fff',
                radius: 12,
                customHTML: undefined,
                offsetX: 0,
                offsetY: 0,
                onClick: undefined,
              },
              itemMargin: {
                horizontal: 5,
                vertical: 2,
              },
              onItemClick: {
                toggleDataSeries: true,
              },
              onItemHover: {
                highlightDataSeries: true,
              },
            },
            markers: {
              discrete: [],
              size: 0,
              colors: undefined,
              //strokeColor: '#fff', // TODO: deprecate in major version 4.0
              strokeColors: '#fff',
              strokeWidth: 2,
              strokeOpacity: 0.9,
              strokeDashArray: 0,
              fillOpacity: 1,
              shape: 'circle',
              width: 8,
              // only applicable when shape is rect/square
              height: 8,
              // only applicable when shape is rect/square
              radius: 2,
              offsetX: 0,
              offsetY: 0,
              onClick: undefined,
              onDblClick: undefined,
              showNullDataPoints: true,
              hover: {
                size: undefined,
                sizeOffset: 3,
              },
            },
            noData: {
              text: undefined,
              align: 'center',
              verticalAlign: 'middle',
              offsetX: 0,
              offsetY: 0,
              style: {
                color: undefined,
                fontSize: '14px',
                fontFamily: undefined,
              },
            },
            responsive: [],
            // breakpoints should follow ascending order 400, then 700, then 1000
            series: undefined,
            states: {
              normal: {
                filter: {
                  type: 'none',
                  value: 0,
                },
              },
              hover: {
                filter: {
                  type: 'lighten',
                  value: 0.1,
                },
              },
              active: {
                allowMultipleDataPointsSelection: false,
                filter: {
                  type: 'darken',
                  value: 0.5,
                },
              },
            },
            title: {
              text: undefined,
              align: 'left',
              margin: 5,
              offsetX: 0,
              offsetY: 0,
              floating: false,
              style: {
                fontSize: '14px',
                fontWeight: 900,
                fontFamily: undefined,
                color: undefined,
              },
            },
            subtitle: {
              text: undefined,
              align: 'left',
              margin: 5,
              offsetX: 0,
              offsetY: 30,
              floating: false,
              style: {
                fontSize: '12px',
                fontWeight: 400,
                fontFamily: undefined,
                color: undefined,
              },
            },
            stroke: {
              show: true,
              curve: 'smooth',
              // "smooth" / "straight" / "stepline"
              lineCap: 'butt',
              // round, butt , square
              width: 2,
              colors: undefined,
              // array of colors
              dashArray: 0, // single value or array of values
            },
            tooltip: {
              enabled: true,
              enabledOnSeries: undefined,
              shared: true,
              followCursor: false,
              // when disabled, the tooltip will show on top of the series instead of mouse position
              intersect: false,
              // when enabled, tooltip will only show when user directly hovers over point
              inverseOrder: false,
              custom: undefined,
              fillSeriesColor: false,
              theme: 'light',
              style: {
                fontSize: '12px',
                fontFamily: undefined,
              },
              onDatasetHover: {
                highlightDataSeries: false,
              },
              x: {
                // x value
                show: true,
                format: 'dd MMM',
                // dd/MM, dd MMM yy, dd MMM yyyy
                formatter: undefined, // a custom user supplied formatter function
              },
              y: {
                formatter: undefined,
                title: {
                  formatter: function formatter(seriesName) {
                    return seriesName ? seriesName + ': ' : '';
                  },
                },
              },
              z: {
                formatter: undefined,
                title: 'Size: ',
              },
              marker: {
                show: true,
                fillColors: undefined,
              },
              items: {
                display: 'flex',
              },
              fixed: {
                enabled: false,
                position: 'topRight',
                // topRight, topLeft, bottomRight, bottomLeft
                offsetX: 0,
                offsetY: 0,
              },
            },
            xaxis: {
              type: 'category',
              categories: [],
              convertedCatToNumeric: false,
              // internal property which should not be altered outside
              offsetX: 0,
              offsetY: 0,
              overwriteCategories: undefined,
              labels: {
                show: true,
                rotate: -45,
                rotateAlways: false,
                hideOverlappingLabels: true,
                trim: false,
                minHeight: undefined,
                maxHeight: 120,
                showDuplicates: true,
                style: {
                  colors: [],
                  fontSize: '12px',
                  fontWeight: 400,
                  fontFamily: undefined,
                  cssClass: '',
                },
                offsetX: 0,
                offsetY: 0,
                format: undefined,
                formatter: undefined,
                // custom formatter function which will override format
                datetimeUTC: true,
                datetimeFormatter: {
                  year: 'yyyy',
                  month: "MMM 'yy",
                  day: 'dd MMM',
                  hour: 'HH:mm',
                  minute: 'HH:mm:ss',
                  second: 'HH:mm:ss',
                },
              },
              axisBorder: {
                show: true,
                color: '#e0e0e0',
                width: '100%',
                height: 1,
                offsetX: 0,
                offsetY: 0,
              },
              axisTicks: {
                show: true,
                color: '#e0e0e0',
                height: 6,
                offsetX: 0,
                offsetY: 0,
              },
              tickAmount: undefined,
              tickPlacement: 'on',
              min: undefined,
              max: undefined,
              range: undefined,
              floating: false,
              decimalsInFloat: undefined,
              position: 'bottom',
              title: {
                text: undefined,
                offsetX: 0,
                offsetY: 0,
                style: {
                  color: undefined,
                  fontSize: '12px',
                  fontWeight: 900,
                  fontFamily: undefined,
                  cssClass: '',
                },
              },
              crosshairs: {
                show: true,
                width: 1,
                // tickWidth/barWidth or an integer
                position: 'back',
                opacity: 0.9,
                stroke: {
                  color: '#b6b6b6',
                  width: 1,
                  dashArray: 3,
                },
                fill: {
                  type: 'solid',
                  // solid, gradient
                  color: '#B1B9C4',
                  gradient: {
                    colorFrom: '#D8E3F0',
                    colorTo: '#BED1E6',
                    stops: [0, 100],
                    opacityFrom: 0.4,
                    opacityTo: 0.5,
                  },
                },
                dropShadow: {
                  enabled: false,
                  left: 0,
                  top: 0,
                  blur: 1,
                  opacity: 0.4,
                },
              },
              tooltip: {
                enabled: true,
                offsetY: 0,
                formatter: undefined,
                style: {
                  fontSize: '12px',
                  fontFamily: undefined,
                },
              },
            },
            yaxis: this.yAxis,
            theme: {
              mode: 'light',
              palette: 'palette1',
              // If defined, it will overwrite globals.colors variable
              monochrome: {
                // monochrome allows you to select just 1 color and fill out the rest with light/dark shade (intensity can be selected)
                enabled: false,
                color: '#008FFB',
                shadeTo: 'light',
                shadeIntensity: 0.65,
              },
            },
          };
        },
      },
    ]);

    return Options;
  })();

  /**
   * ApexCharts Annotations Class for drawing lines/rects on both xaxis and yaxis.
   *
   * @module Annotations
   **/

  var Annotations = /*#__PURE__*/ (function () {
    function Annotations(ctx) {
      _classCallCheck(this, Annotations);

      this.ctx = ctx;
      this.w = ctx.w;
      this.graphics = new Graphics(this.ctx);

      if (this.w.globals.isBarHorizontal) {
        this.invertAxis = true;
      }

      this.helpers = new Helpers$4(this);
      this.xAxisAnnotations = new XAnnotations(this);
      this.yAxisAnnotations = new YAnnotations(this);
      this.pointsAnnotations = new PointAnnotations(this);

      if (this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed) {
        this.inversedReversedAxis = true;
      }

      this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
    }

    _createClass(Annotations, [
      {
        key: 'drawAxesAnnotations',
        value: function drawAxesAnnotations() {
          var w = this.w;

          if (w.globals.axisCharts) {
            var yAnnotations = this.yAxisAnnotations.drawYAxisAnnotations();
            var xAnnotations = this.xAxisAnnotations.drawXAxisAnnotations();
            var pointAnnotations = this.pointsAnnotations.drawPointAnnotations();
            var initialAnim = w.config.chart.animations.enabled;
            var annoArray = [yAnnotations, xAnnotations, pointAnnotations];
            var annoElArray = [xAnnotations.node, yAnnotations.node, pointAnnotations.node];

            for (var i = 0; i < 3; i++) {
              w.globals.dom.elGraphical.add(annoArray[i]);

              if (initialAnim && !w.globals.resized && !w.globals.dataChanged) {
                // fixes apexcharts/apexcharts.js#685
                if (
                  w.config.chart.type !== 'scatter' &&
                  w.config.chart.type !== 'bubble' &&
                  w.globals.dataPoints > 1
                ) {
                  annoElArray[i].classList.add('apexcharts-element-hidden');
                }
              }

              w.globals.delayedElements.push({
                el: annoElArray[i],
                index: 0,
              });
            } // background sizes needs to be calculated after text is drawn, so calling them last

            this.helpers.annotationsBackground();
          }
        },
      },
      {
        key: 'drawImageAnnos',
        value: function drawImageAnnos() {
          var _this = this;

          var w = this.w;
          w.config.annotations.images.map(function (s, index) {
            _this.addImage(s, index);
          });
        },
      },
      {
        key: 'drawTextAnnos',
        value: function drawTextAnnos() {
          var _this2 = this;

          var w = this.w;
          w.config.annotations.texts.map(function (t, index) {
            _this2.addText(t, index);
          });
        },
      },
      {
        key: 'addXaxisAnnotation',
        value: function addXaxisAnnotation(anno, parent, index) {
          this.xAxisAnnotations.addXaxisAnnotation(anno, parent, index);
        },
      },
      {
        key: 'addYaxisAnnotation',
        value: function addYaxisAnnotation(anno, parent, index) {
          this.yAxisAnnotations.addYaxisAnnotation(anno, parent, index);
        },
      },
      {
        key: 'addPointAnnotation',
        value: function addPointAnnotation(anno, parent, index) {
          this.pointsAnnotations.addPointAnnotation(anno, parent, index);
        },
      },
      {
        key: 'addText',
        value: function addText(params, index) {
          var x = params.x,
            y = params.y,
            text = params.text,
            textAnchor = params.textAnchor,
            foreColor = params.foreColor,
            fontSize = params.fontSize,
            fontFamily = params.fontFamily,
            fontWeight = params.fontWeight,
            cssClass = params.cssClass,
            backgroundColor = params.backgroundColor,
            borderWidth = params.borderWidth,
            strokeDashArray = params.strokeDashArray,
            borderRadius = params.borderRadius,
            borderColor = params.borderColor,
            _params$appendTo = params.appendTo,
            appendTo = _params$appendTo === void 0 ? '.apexcharts-annotations' : _params$appendTo,
            _params$paddingLeft = params.paddingLeft,
            paddingLeft = _params$paddingLeft === void 0 ? 4 : _params$paddingLeft,
            _params$paddingRight = params.paddingRight,
            paddingRight = _params$paddingRight === void 0 ? 4 : _params$paddingRight,
            _params$paddingBottom = params.paddingBottom,
            paddingBottom = _params$paddingBottom === void 0 ? 2 : _params$paddingBottom,
            _params$paddingTop = params.paddingTop,
            paddingTop = _params$paddingTop === void 0 ? 2 : _params$paddingTop;
          var w = this.w;
          var elText = this.graphics.drawText({
            x: x,
            y: y,
            text: text,
            textAnchor: textAnchor || 'start',
            fontSize: fontSize || '12px',
            fontWeight: fontWeight || 'regular',
            fontFamily: fontFamily || w.config.chart.fontFamily,
            foreColor: foreColor || w.config.chart.foreColor,
            cssClass: 'apexcharts-text ' + cssClass ? cssClass : '',
          });
          var parent = w.globals.dom.baseEl.querySelector(appendTo);

          if (parent) {
            parent.appendChild(elText.node);
          }

          var textRect = elText.bbox();

          if (text) {
            var elRect = this.graphics.drawRect(
              textRect.x - paddingLeft,
              textRect.y - paddingTop,
              textRect.width + paddingLeft + paddingRight,
              textRect.height + paddingBottom + paddingTop,
              borderRadius,
              backgroundColor ? backgroundColor : 'transparent',
              1,
              borderWidth,
              borderColor,
              strokeDashArray
            );
            parent.insertBefore(elRect.node, elText.node);
          }
        },
      },
      {
        key: 'addImage',
        value: function addImage(params, index) {
          var w = this.w;
          var path = params.path,
            _params$x = params.x,
            x = _params$x === void 0 ? 0 : _params$x,
            _params$y = params.y,
            y = _params$y === void 0 ? 0 : _params$y,
            _params$width = params.width,
            width = _params$width === void 0 ? 20 : _params$width,
            _params$height = params.height,
            height = _params$height === void 0 ? 20 : _params$height,
            _params$appendTo2 = params.appendTo,
            appendTo = _params$appendTo2 === void 0 ? '.apexcharts-annotations' : _params$appendTo2;
          var img = w.globals.dom.Paper.image(path);
          img.size(width, height).move(x, y);
          var parent = w.globals.dom.baseEl.querySelector(appendTo);

          if (parent) {
            parent.appendChild(img.node);
          }

          return img;
        }, // The addXaxisAnnotation method requires a parent class, and user calling this method externally on the chart instance may not specify parent, hence a different method
      },
      {
        key: 'addXaxisAnnotationExternal',
        value: function addXaxisAnnotationExternal(params, pushToMemory, context) {
          this.addAnnotationExternal({
            params: params,
            pushToMemory: pushToMemory,
            context: context,
            type: 'xaxis',
            contextMethod: context.addXaxisAnnotation,
          });
          return context;
        },
      },
      {
        key: 'addYaxisAnnotationExternal',
        value: function addYaxisAnnotationExternal(params, pushToMemory, context) {
          this.addAnnotationExternal({
            params: params,
            pushToMemory: pushToMemory,
            context: context,
            type: 'yaxis',
            contextMethod: context.addYaxisAnnotation,
          });
          return context;
        },
      },
      {
        key: 'addPointAnnotationExternal',
        value: function addPointAnnotationExternal(params, pushToMemory, context) {
          if (typeof this.invertAxis === 'undefined') {
            this.invertAxis = context.w.globals.isBarHorizontal;
          }

          this.addAnnotationExternal({
            params: params,
            pushToMemory: pushToMemory,
            context: context,
            type: 'point',
            contextMethod: context.addPointAnnotation,
          });
          return context;
        },
      },
      {
        key: 'addAnnotationExternal',
        value: function addAnnotationExternal(_ref) {
          var params = _ref.params,
            pushToMemory = _ref.pushToMemory,
            context = _ref.context,
            type = _ref.type,
            contextMethod = _ref.contextMethod;
          var me = context;
          var w = me.w;
          var parent = w.globals.dom.baseEl.querySelector(
            '.apexcharts-'.concat(type, '-annotations')
          );
          var index = parent.childNodes.length + 1;
          var options = new Options();
          var axesAnno = Object.assign(
            {},
            type === 'xaxis'
              ? options.xAxisAnnotation
              : type === 'yaxis'
              ? options.yAxisAnnotation
              : options.pointAnnotation
          );
          var anno = Utils$1.extend(axesAnno, params);

          switch (type) {
            case 'xaxis':
              this.addXaxisAnnotation(anno, parent, index);
              break;

            case 'yaxis':
              this.addYaxisAnnotation(anno, parent, index);
              break;

            case 'point':
              this.addPointAnnotation(anno, parent, index);
              break;
          } // add background

          var axesAnnoLabel = w.globals.dom.baseEl.querySelector(
            '.apexcharts-'
              .concat(type, '-annotations .apexcharts-')
              .concat(type, "-annotation-label[rel='")
              .concat(index, "']")
          );
          var elRect = this.helpers.addBackgroundToAnno(axesAnnoLabel, anno);

          if (elRect) {
            parent.insertBefore(elRect.node, axesAnnoLabel);
          }

          if (pushToMemory) {
            w.globals.memory.methodsToExec.push({
              context: me,
              id: anno.id ? anno.id : Utils$1.randomId(),
              method: contextMethod,
              label: 'addAnnotation',
              params: params,
            });
          }

          return context;
        },
      },
      {
        key: 'clearAnnotations',
        value: function clearAnnotations(ctx) {
          var w = ctx.w;
          var annos = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations'
          ); // annotations added externally should be cleared out too

          w.globals.memory.methodsToExec.map(function (m, i) {
            if (m.label === 'addText' || m.label === 'addAnnotation') {
              w.globals.memory.methodsToExec.splice(i, 1);
            }
          });
          annos = Utils$1.listToArray(annos); // delete the DOM elements

          Array.prototype.forEach.call(annos, function (a) {
            while (a.firstChild) {
              a.removeChild(a.firstChild);
            }
          });
        },
      },
      {
        key: 'removeAnnotation',
        value: function removeAnnotation(ctx, id) {
          var w = ctx.w;
          var annos = w.globals.dom.baseEl.querySelectorAll('.'.concat(id));

          if (annos) {
            w.globals.memory.methodsToExec.map(function (m, i) {
              if (m.id === id) {
                w.globals.memory.methodsToExec.splice(i, 1);
              }
            });
            Array.prototype.forEach.call(annos, function (a) {
              a.parentElement.removeChild(a);
            });
          }
        },
      },
    ]);

    return Annotations;
  })();

  /**
   * ApexCharts Fill Class for setting fill options of the paths.
   *
   * @module Fill
   **/

  var Fill = /*#__PURE__*/ (function () {
    function Fill(ctx) {
      _classCallCheck(this, Fill);

      this.ctx = ctx;
      this.w = ctx.w;
      this.opts = null;
      this.seriesIndex = 0;
    }

    _createClass(Fill, [
      {
        key: 'clippedImgArea',
        value: function clippedImgArea(params) {
          var w = this.w;
          var cnf = w.config;
          var svgW = parseInt(w.globals.gridWidth, 10);
          var svgH = parseInt(w.globals.gridHeight, 10);
          var size = svgW > svgH ? svgW : svgH;
          var fillImg = params.image;
          var imgWidth = 0;
          var imgHeight = 0;

          if (typeof params.width === 'undefined' && typeof params.height === 'undefined') {
            if (cnf.fill.image.width !== undefined && cnf.fill.image.height !== undefined) {
              imgWidth = cnf.fill.image.width + 1;
              imgHeight = cnf.fill.image.height;
            } else {
              imgWidth = size + 1;
              imgHeight = size;
            }
          } else {
            imgWidth = params.width;
            imgHeight = params.height;
          }

          var elPattern = document.createElementNS(w.globals.SVGNS, 'pattern');
          Graphics.setAttrs(elPattern, {
            id: params.patternID,
            patternUnits: params.patternUnits ? params.patternUnits : 'userSpaceOnUse',
            width: imgWidth + 'px',
            height: imgHeight + 'px',
          });
          var elImage = document.createElementNS(w.globals.SVGNS, 'image');
          elPattern.appendChild(elImage);
          elImage.setAttributeNS(window.SVG.xlink, 'href', fillImg);
          Graphics.setAttrs(elImage, {
            x: 0,
            y: 0,
            preserveAspectRatio: 'none',
            width: imgWidth + 'px',
            height: imgHeight + 'px',
          });
          elImage.style.opacity = params.opacity;
          w.globals.dom.elDefs.node.appendChild(elPattern);
        },
      },
      {
        key: 'getSeriesIndex',
        value: function getSeriesIndex(opts) {
          var w = this.w;

          if (
            ((w.config.chart.type === 'bar' || w.config.chart.type === 'rangeBar') &&
              w.config.plotOptions.bar.distributed) ||
            w.config.chart.type === 'heatmap' ||
            w.config.chart.type === 'treemap'
          ) {
            this.seriesIndex = opts.seriesNumber;
          } else {
            this.seriesIndex = opts.seriesNumber % w.globals.series.length;
          }

          return this.seriesIndex;
        },
      },
      {
        key: 'fillPath',
        value: function fillPath(opts) {
          var w = this.w;
          this.opts = opts;
          var cnf = this.w.config;
          var pathFill;
          var patternFill, gradientFill;
          this.seriesIndex = this.getSeriesIndex(opts);
          var fillColors = this.getFillColors();
          var fillColor = fillColors[this.seriesIndex]; //override fillcolor if user inputted color with data

          if (w.globals.seriesColors[this.seriesIndex] !== undefined) {
            fillColor = w.globals.seriesColors[this.seriesIndex];
          }

          if (typeof fillColor === 'function') {
            fillColor = fillColor({
              seriesIndex: this.seriesIndex,
              dataPointIndex: opts.dataPointIndex,
              value: opts.value,
              w: w,
            });
          }

          var fillType = this.getFillType(this.seriesIndex);
          var fillOpacity = Array.isArray(cnf.fill.opacity)
            ? cnf.fill.opacity[this.seriesIndex]
            : cnf.fill.opacity;

          if (opts.color) {
            fillColor = opts.color;
          }

          var defaultColor = fillColor;

          if (fillColor.indexOf('rgb') === -1) {
            if (fillColor.length < 9) {
              // if the hex contains alpha and is of 9 digit, skip the opacity
              defaultColor = Utils$1.hexToRgba(fillColor, fillOpacity);
            }
          } else {
            if (fillColor.indexOf('rgba') > -1) {
              fillOpacity = Utils$1.getOpacityFromRGBA(fillColor);
            }
          }

          if (opts.opacity) fillOpacity = opts.opacity;

          if (fillType === 'pattern') {
            patternFill = this.handlePatternFill(patternFill, fillColor, fillOpacity, defaultColor);
          }

          if (fillType === 'gradient') {
            gradientFill = this.handleGradientFill(fillColor, fillOpacity, this.seriesIndex);
          }

          if (fillType === 'image') {
            var imgSrc = cnf.fill.image.src;
            var patternID = opts.patternID ? opts.patternID : '';
            this.clippedImgArea({
              opacity: fillOpacity,
              image: Array.isArray(imgSrc)
                ? opts.seriesNumber < imgSrc.length
                  ? imgSrc[opts.seriesNumber]
                  : imgSrc[0]
                : imgSrc,
              width: opts.width ? opts.width : undefined,
              height: opts.height ? opts.height : undefined,
              patternUnits: opts.patternUnits,
              patternID: 'pattern'
                .concat(w.globals.cuid)
                .concat(opts.seriesNumber + 1)
                .concat(patternID),
            });
            pathFill = 'url(#pattern'
              .concat(w.globals.cuid)
              .concat(opts.seriesNumber + 1)
              .concat(patternID, ')');
          } else if (fillType === 'gradient') {
            pathFill = gradientFill;
          } else if (fillType === 'pattern') {
            pathFill = patternFill;
          } else {
            pathFill = defaultColor;
          } // override pattern/gradient if opts.solid is true

          if (opts.solid) {
            pathFill = defaultColor;
          }

          return pathFill;
        },
      },
      {
        key: 'getFillType',
        value: function getFillType(seriesIndex) {
          var w = this.w;

          if (Array.isArray(w.config.fill.type)) {
            return w.config.fill.type[seriesIndex];
          } else {
            return w.config.fill.type;
          }
        },
      },
      {
        key: 'getFillColors',
        value: function getFillColors() {
          var w = this.w;
          var cnf = w.config;
          var opts = this.opts;
          var fillColors = [];

          if (w.globals.comboCharts) {
            if (w.config.series[this.seriesIndex].type === 'line') {
              if (Array.isArray(w.globals.stroke.colors)) {
                fillColors = w.globals.stroke.colors;
              } else {
                fillColors.push(w.globals.stroke.colors);
              }
            } else {
              if (Array.isArray(w.globals.fill.colors)) {
                fillColors = w.globals.fill.colors;
              } else {
                fillColors.push(w.globals.fill.colors);
              }
            }
          } else {
            if (cnf.chart.type === 'line') {
              if (Array.isArray(w.globals.stroke.colors)) {
                fillColors = w.globals.stroke.colors;
              } else {
                fillColors.push(w.globals.stroke.colors);
              }
            } else {
              if (Array.isArray(w.globals.fill.colors)) {
                fillColors = w.globals.fill.colors;
              } else {
                fillColors.push(w.globals.fill.colors);
              }
            }
          } // colors passed in arguments

          if (typeof opts.fillColors !== 'undefined') {
            fillColors = [];

            if (Array.isArray(opts.fillColors)) {
              fillColors = opts.fillColors.slice();
            } else {
              fillColors.push(opts.fillColors);
            }
          }

          return fillColors;
        },
      },
      {
        key: 'handlePatternFill',
        value: function handlePatternFill(patternFill, fillColor, fillOpacity, defaultColor) {
          var cnf = this.w.config;
          var opts = this.opts;
          var graphics = new Graphics(this.ctx);
          var patternStrokeWidth =
            cnf.fill.pattern.strokeWidth === undefined
              ? Array.isArray(cnf.stroke.width)
                ? cnf.stroke.width[this.seriesIndex]
                : cnf.stroke.width
              : Array.isArray(cnf.fill.pattern.strokeWidth)
              ? cnf.fill.pattern.strokeWidth[this.seriesIndex]
              : cnf.fill.pattern.strokeWidth;
          var patternLineColor = fillColor;

          if (Array.isArray(cnf.fill.pattern.style)) {
            if (typeof cnf.fill.pattern.style[opts.seriesNumber] !== 'undefined') {
              var pf = graphics.drawPattern(
                cnf.fill.pattern.style[opts.seriesNumber],
                cnf.fill.pattern.width,
                cnf.fill.pattern.height,
                patternLineColor,
                patternStrokeWidth,
                fillOpacity
              );
              patternFill = pf;
            } else {
              patternFill = defaultColor;
            }
          } else {
            patternFill = graphics.drawPattern(
              cnf.fill.pattern.style,
              cnf.fill.pattern.width,
              cnf.fill.pattern.height,
              patternLineColor,
              patternStrokeWidth,
              fillOpacity
            );
          }

          return patternFill;
        },
      },
      {
        key: 'handleGradientFill',
        value: function handleGradientFill(fillColor, fillOpacity, i) {
          var cnf = this.w.config;
          var opts = this.opts;
          var graphics = new Graphics(this.ctx);
          var utils = new Utils$1();
          var type = cnf.fill.gradient.type;
          var gradientFrom = fillColor;
          var gradientTo;
          var opacityFrom =
            cnf.fill.gradient.opacityFrom === undefined
              ? fillOpacity
              : Array.isArray(cnf.fill.gradient.opacityFrom)
              ? cnf.fill.gradient.opacityFrom[i]
              : cnf.fill.gradient.opacityFrom;

          if (gradientFrom.indexOf('rgba') > -1) {
            opacityFrom = Utils$1.getOpacityFromRGBA(gradientFrom);
          }

          var opacityTo =
            cnf.fill.gradient.opacityTo === undefined
              ? fillOpacity
              : Array.isArray(cnf.fill.gradient.opacityTo)
              ? cnf.fill.gradient.opacityTo[i]
              : cnf.fill.gradient.opacityTo;

          if (
            cnf.fill.gradient.gradientToColors === undefined ||
            cnf.fill.gradient.gradientToColors.length === 0
          ) {
            if (cnf.fill.gradient.shade === 'dark') {
              gradientTo = utils.shadeColor(
                parseFloat(cnf.fill.gradient.shadeIntensity) * -1,
                fillColor.indexOf('rgb') > -1 ? Utils$1.rgb2hex(fillColor) : fillColor
              );
            } else {
              gradientTo = utils.shadeColor(
                parseFloat(cnf.fill.gradient.shadeIntensity),
                fillColor.indexOf('rgb') > -1 ? Utils$1.rgb2hex(fillColor) : fillColor
              );
            }
          } else {
            if (cnf.fill.gradient.gradientToColors[opts.seriesNumber]) {
              var gToColor = cnf.fill.gradient.gradientToColors[opts.seriesNumber];
              gradientTo = gToColor;

              if (gToColor.indexOf('rgba') > -1) {
                opacityTo = Utils$1.getOpacityFromRGBA(gToColor);
              }
            } else {
              gradientTo = fillColor;
            }
          }

          if (cnf.fill.gradient.inverseColors) {
            var t = gradientFrom;
            gradientFrom = gradientTo;
            gradientTo = t;
          }

          if (gradientFrom.indexOf('rgb') > -1) {
            gradientFrom = Utils$1.rgb2hex(gradientFrom);
          }

          if (gradientTo.indexOf('rgb') > -1) {
            gradientTo = Utils$1.rgb2hex(gradientTo);
          }

          return graphics.drawGradient(
            type,
            gradientFrom,
            gradientTo,
            opacityFrom,
            opacityTo,
            opts.size,
            cnf.fill.gradient.stops,
            cnf.fill.gradient.colorStops,
            i
          );
        },
      },
    ]);

    return Fill;
  })();

  /**
   * ApexCharts Markers Class for drawing points on y values in axes charts.
   *
   * @module Markers
   **/

  var Markers = /*#__PURE__*/ (function () {
    function Markers(ctx, opts) {
      _classCallCheck(this, Markers);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(Markers, [
      {
        key: 'setGlobalMarkerSize',
        value: function setGlobalMarkerSize() {
          var w = this.w;
          w.globals.markers.size = Array.isArray(w.config.markers.size)
            ? w.config.markers.size
            : [w.config.markers.size];

          if (w.globals.markers.size.length > 0) {
            if (w.globals.markers.size.length < w.globals.series.length + 1) {
              for (var i = 0; i <= w.globals.series.length; i++) {
                if (typeof w.globals.markers.size[i] === 'undefined') {
                  w.globals.markers.size.push(w.globals.markers.size[0]);
                }
              }
            }
          } else {
            w.globals.markers.size = w.config.series.map(function (s) {
              return w.config.markers.size;
            });
          }
        },
      },
      {
        key: 'plotChartMarkers',
        value: function plotChartMarkers(pointsPos, seriesIndex, j, pSize) {
          var alwaysDrawMarker =
            arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
          var w = this.w;
          var i = seriesIndex;
          var p = pointsPos;
          var elPointsWrap = null;
          var graphics = new Graphics(this.ctx);
          var point;

          if (w.globals.markers.size[seriesIndex] > 0 || alwaysDrawMarker) {
            elPointsWrap = graphics.group({
              class: alwaysDrawMarker ? '' : 'apexcharts-series-markers',
            });
            elPointsWrap.attr('clip-path', 'url(#gridRectMarkerMask'.concat(w.globals.cuid, ')'));
          }

          if (Array.isArray(p.x)) {
            for (var q = 0; q < p.x.length; q++) {
              var dataPointIndex = j; // a small hack as we have 2 points for the first val to connect it

              if (j === 1 && q === 0) dataPointIndex = 0;
              if (j === 1 && q === 1) dataPointIndex = 1;
              var PointClasses = 'apexcharts-marker';

              if (
                (w.config.chart.type === 'line' || w.config.chart.type === 'area') &&
                !w.globals.comboCharts &&
                !w.config.tooltip.intersect
              ) {
                PointClasses += ' no-pointer-events';
              }

              var shouldMarkerDraw = Array.isArray(w.config.markers.size)
                ? w.globals.markers.size[seriesIndex] > 0
                : w.config.markers.size > 0;

              if (shouldMarkerDraw || alwaysDrawMarker) {
                if (Utils$1.isNumber(p.y[q])) {
                  PointClasses += ' w'.concat(Utils$1.randomId());
                } else {
                  PointClasses = 'apexcharts-nullpoint';
                }

                var opts = this.getMarkerConfig({
                  cssClass: PointClasses,
                  seriesIndex: seriesIndex,
                  dataPointIndex: dataPointIndex,
                });

                if (w.config.series[i].data[dataPointIndex]) {
                  if (w.config.series[i].data[dataPointIndex].fillColor) {
                    opts.pointFillColor = w.config.series[i].data[dataPointIndex].fillColor;
                  }

                  if (w.config.series[i].data[dataPointIndex].strokeColor) {
                    opts.pointStrokeColor = w.config.series[i].data[dataPointIndex].strokeColor;
                  }
                }

                if (pSize) {
                  opts.pSize = pSize;
                }

                point = graphics.drawMarker(p.x[q], p.y[q], opts);
                point.attr('rel', dataPointIndex);
                point.attr('j', dataPointIndex);
                point.attr('index', seriesIndex);
                point.node.setAttribute('default-marker-size', opts.pSize);
                var filters = new Filters(this.ctx);
                filters.setSelectionFilter(point, seriesIndex, dataPointIndex);
                this.addEvents(point);

                if (elPointsWrap) {
                  elPointsWrap.add(point);
                }
              } else {
                // dynamic array creation - multidimensional
                if (typeof w.globals.pointsArray[seriesIndex] === 'undefined')
                  w.globals.pointsArray[seriesIndex] = [];
                w.globals.pointsArray[seriesIndex].push([p.x[q], p.y[q]]);
              }
            }
          }

          return elPointsWrap;
        },
      },
      {
        key: 'getMarkerConfig',
        value: function getMarkerConfig(_ref) {
          var cssClass = _ref.cssClass,
            seriesIndex = _ref.seriesIndex,
            _ref$dataPointIndex = _ref.dataPointIndex,
            dataPointIndex = _ref$dataPointIndex === void 0 ? null : _ref$dataPointIndex,
            _ref$finishRadius = _ref.finishRadius,
            finishRadius = _ref$finishRadius === void 0 ? null : _ref$finishRadius;
          var w = this.w;
          var pStyle = this.getMarkerStyle(seriesIndex);
          var pSize = w.globals.markers.size[seriesIndex];
          var m = w.config.markers; // discrete markers is an option where user can specify a particular marker with different shape, size and color

          if (dataPointIndex !== null && m.discrete.length) {
            m.discrete.map(function (marker) {
              if (marker.seriesIndex === seriesIndex && marker.dataPointIndex === dataPointIndex) {
                pStyle.pointStrokeColor = marker.strokeColor;
                pStyle.pointFillColor = marker.fillColor;
                pSize = marker.size;
                pStyle.pointShape = marker.shape;
              }
            });
          }

          return {
            pSize: finishRadius === null ? pSize : finishRadius,
            pRadius: m.radius,
            width: Array.isArray(m.width) ? m.width[seriesIndex] : m.width,
            height: Array.isArray(m.height) ? m.height[seriesIndex] : m.height,
            pointStrokeWidth: Array.isArray(m.strokeWidth)
              ? m.strokeWidth[seriesIndex]
              : m.strokeWidth,
            pointStrokeColor: pStyle.pointStrokeColor,
            pointFillColor: pStyle.pointFillColor,
            shape: pStyle.pointShape || (Array.isArray(m.shape) ? m.shape[seriesIndex] : m.shape),
            class: cssClass,
            pointStrokeOpacity: Array.isArray(m.strokeOpacity)
              ? m.strokeOpacity[seriesIndex]
              : m.strokeOpacity,
            pointStrokeDashArray: Array.isArray(m.strokeDashArray)
              ? m.strokeDashArray[seriesIndex]
              : m.strokeDashArray,
            pointFillOpacity: Array.isArray(m.fillOpacity)
              ? m.fillOpacity[seriesIndex]
              : m.fillOpacity,
            seriesIndex: seriesIndex,
          };
        },
      },
      {
        key: 'addEvents',
        value: function addEvents(circle) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          circle.node.addEventListener(
            'mouseenter',
            graphics.pathMouseEnter.bind(this.ctx, circle)
          );
          circle.node.addEventListener(
            'mouseleave',
            graphics.pathMouseLeave.bind(this.ctx, circle)
          );
          circle.node.addEventListener('mousedown', graphics.pathMouseDown.bind(this.ctx, circle));
          circle.node.addEventListener('click', w.config.markers.onClick);
          circle.node.addEventListener('dblclick', w.config.markers.onDblClick);
          circle.node.addEventListener(
            'touchstart',
            graphics.pathMouseDown.bind(this.ctx, circle),
            {
              passive: true,
            }
          );
        },
      },
      {
        key: 'getMarkerStyle',
        value: function getMarkerStyle(seriesIndex) {
          var w = this.w;
          var colors = w.globals.markers.colors;
          var strokeColors = w.config.markers.strokeColor || w.config.markers.strokeColors;
          var pointStrokeColor = Array.isArray(strokeColors)
            ? strokeColors[seriesIndex]
            : strokeColors;
          var pointFillColor = Array.isArray(colors) ? colors[seriesIndex] : colors;
          return {
            pointStrokeColor: pointStrokeColor,
            pointFillColor: pointFillColor,
          };
        },
      },
    ]);

    return Markers;
  })();

  /**
   * ApexCharts Scatter Class.
   * This Class also handles bubbles chart as currently there is no major difference in drawing them,
   * @module Scatter
   **/

  var Scatter = /*#__PURE__*/ (function () {
    function Scatter(ctx) {
      _classCallCheck(this, Scatter);

      this.ctx = ctx;
      this.w = ctx.w;
      this.initialAnim = this.w.config.chart.animations.enabled;
      this.dynamicAnim =
        this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
    }

    _createClass(Scatter, [
      {
        key: 'draw',
        value: function draw(elSeries, j, opts) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var realIndex = opts.realIndex;
          var pointsPos = opts.pointsPos;
          var zRatio = opts.zRatio;
          var elPointsMain = opts.elParent;
          var elPointsWrap = graphics.group({
            class: 'apexcharts-series-markers apexcharts-series-'.concat(w.config.chart.type),
          });
          elPointsWrap.attr('clip-path', 'url(#gridRectMarkerMask'.concat(w.globals.cuid, ')'));

          if (Array.isArray(pointsPos.x)) {
            for (var q = 0; q < pointsPos.x.length; q++) {
              var dataPointIndex = j + 1;
              var shouldDraw = true; // a small hack as we have 2 points for the first val to connect it

              if (j === 0 && q === 0) dataPointIndex = 0;
              if (j === 0 && q === 1) dataPointIndex = 1;
              var radius = 0;
              var finishRadius = w.globals.markers.size[realIndex];

              if (zRatio !== Infinity) {
                // means we have a bubble
                finishRadius = w.globals.seriesZ[realIndex][dataPointIndex] / zRatio;
                var bubble = w.config.plotOptions.bubble;

                if (bubble.minBubbleRadius && finishRadius < bubble.minBubbleRadius) {
                  finishRadius = bubble.minBubbleRadius;
                }

                if (bubble.maxBubbleRadius && finishRadius > bubble.maxBubbleRadius) {
                  finishRadius = bubble.maxBubbleRadius;
                }
              }

              if (!w.config.chart.animations.enabled) {
                radius = finishRadius;
              }

              var x = pointsPos.x[q];
              var y = pointsPos.y[q];
              radius = radius || 0;

              if (
                y === null ||
                typeof w.globals.series[realIndex][dataPointIndex] === 'undefined'
              ) {
                shouldDraw = false;
              }

              if (shouldDraw) {
                var point = this.drawPoint(
                  x,
                  y,
                  radius,
                  finishRadius,
                  realIndex,
                  dataPointIndex,
                  j
                );
                elPointsWrap.add(point);
              }

              elPointsMain.add(elPointsWrap);
            }
          }
        },
      },
      {
        key: 'drawPoint',
        value: function drawPoint(x, y, radius, finishRadius, realIndex, dataPointIndex, j) {
          var w = this.w;
          var i = realIndex;
          var anim = new Animations(this.ctx);
          var filters = new Filters(this.ctx);
          var fill = new Fill(this.ctx);
          var markers = new Markers(this.ctx);
          var graphics = new Graphics(this.ctx);
          var markerConfig = markers.getMarkerConfig({
            cssClass: 'apexcharts-marker',
            seriesIndex: i,
            dataPointIndex: dataPointIndex,
            finishRadius:
              w.config.chart.type === 'bubble' ||
              (w.globals.comboCharts &&
                w.config.series[realIndex] &&
                w.config.series[realIndex].type === 'bubble')
                ? finishRadius
                : null,
          });
          finishRadius = markerConfig.pSize;
          var pathFillCircle = fill.fillPath({
            seriesNumber: realIndex,
            dataPointIndex: dataPointIndex,
            color: markerConfig.pointFillColor,
            patternUnits: 'objectBoundingBox',
            value: w.globals.series[realIndex][j],
          });
          var el;

          if (markerConfig.shape === 'circle') {
            el = graphics.drawCircle(radius);
          } else if (markerConfig.shape === 'square' || markerConfig.shape === 'rect') {
            el = graphics.drawRect(
              0,
              0,
              markerConfig.width - markerConfig.pointStrokeWidth / 2,
              markerConfig.height - markerConfig.pointStrokeWidth / 2,
              markerConfig.pRadius
            );
          }

          if (w.config.series[i].data[dataPointIndex]) {
            if (w.config.series[i].data[dataPointIndex].fillColor) {
              pathFillCircle = w.config.series[i].data[dataPointIndex].fillColor;
            }
          }

          el.attr({
            x: x - markerConfig.width / 2 - markerConfig.pointStrokeWidth / 2,
            y: y - markerConfig.height / 2 - markerConfig.pointStrokeWidth / 2,
            cx: x,
            cy: y,
            fill: pathFillCircle,
            'fill-opacity': markerConfig.pointFillOpacity,
            stroke: markerConfig.pointStrokeColor,
            r: finishRadius,
            'stroke-width': markerConfig.pointStrokeWidth,
            'stroke-dasharray': markerConfig.pointStrokeDashArray,
            'stroke-opacity': markerConfig.pointStrokeOpacity,
          });

          if (w.config.chart.dropShadow.enabled) {
            var dropShadow = w.config.chart.dropShadow;
            filters.dropShadow(el, dropShadow, realIndex);
          }

          if (this.initialAnim && !w.globals.dataChanged && !w.globals.resized) {
            var speed = w.config.chart.animations.speed;
            anim.animateMarker(
              el,
              0,
              markerConfig.shape === 'circle'
                ? finishRadius
                : {
                    width: markerConfig.width,
                    height: markerConfig.height,
                  },
              speed,
              w.globals.easing,
              function () {
                window.setTimeout(function () {
                  anim.animationCompleted(el);
                }, 100);
              }
            );
          } else {
            w.globals.animationEnded = true;
          }

          if (w.globals.dataChanged && markerConfig.shape === 'circle') {
            if (this.dynamicAnim) {
              var _speed = w.config.chart.animations.dynamicAnimation.speed;
              var prevX, prevY, prevR;
              var prevPathJ = null;
              prevPathJ =
                w.globals.previousPaths[realIndex] && w.globals.previousPaths[realIndex][j];

              if (typeof prevPathJ !== 'undefined' && prevPathJ !== null) {
                // series containing less elements will ignore these values and revert to 0
                prevX = prevPathJ.x;
                prevY = prevPathJ.y;
                prevR = typeof prevPathJ.r !== 'undefined' ? prevPathJ.r : finishRadius;
              }

              for (var cs = 0; cs < w.globals.collapsedSeries.length; cs++) {
                if (w.globals.collapsedSeries[cs].index === realIndex) {
                  _speed = 1;
                  finishRadius = 0;
                }
              }

              if (x === 0 && y === 0) finishRadius = 0;
              anim.animateCircle(
                el,
                {
                  cx: prevX,
                  cy: prevY,
                  r: prevR,
                },
                {
                  cx: x,
                  cy: y,
                  r: finishRadius,
                },
                _speed,
                w.globals.easing
              );
            } else {
              el.attr({
                r: finishRadius,
              });
            }
          }

          el.attr({
            rel: dataPointIndex,
            j: dataPointIndex,
            index: realIndex,
            'default-marker-size': finishRadius,
          });
          filters.setSelectionFilter(el, realIndex, dataPointIndex);
          markers.addEvents(el);
          el.node.classList.add('apexcharts-marker');
          return el;
        },
      },
      {
        key: 'centerTextInBubble',
        value: function centerTextInBubble(y) {
          var w = this.w;
          y = y + parseInt(w.config.dataLabels.style.fontSize, 10) / 4;
          return {
            y: y,
          };
        },
      },
    ]);

    return Scatter;
  })();

  /**
   * ApexCharts DataLabels Class for drawing dataLabels on Axes based Charts.
   *
   * @module DataLabels
   **/

  var DataLabels = /*#__PURE__*/ (function () {
    function DataLabels(ctx) {
      _classCallCheck(this, DataLabels);

      this.ctx = ctx;
      this.w = ctx.w;
    } // When there are many datalabels to be printed, and some of them overlaps each other in the same series, this method will take care of that
    // Also, when datalabels exceeds the drawable area and get clipped off, we need to adjust and move some pixels to make them visible again

    _createClass(DataLabels, [
      {
        key: 'dataLabelsCorrection',
        value: function dataLabelsCorrection(
          x,
          y,
          val,
          i,
          dataPointIndex,
          alwaysDrawDataLabel,
          fontSize
        ) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var drawnextLabel = false; //

          var textRects = graphics.getTextRects(val, fontSize);
          var width = textRects.width;
          var height = textRects.height;
          if (y < 0) y = 0;
          if (y > w.globals.gridHeight + height) y = w.globals.gridHeight + height / 2; // first value in series, so push an empty array

          if (typeof w.globals.dataLabelsRects[i] === 'undefined')
            w.globals.dataLabelsRects[i] = []; // then start pushing actual rects in that sub-array

          w.globals.dataLabelsRects[i].push({
            x: x,
            y: y,
            width: width,
            height: height,
          });
          var len = w.globals.dataLabelsRects[i].length - 2;
          var lastDrawnIndex =
            typeof w.globals.lastDrawnDataLabelsIndexes[i] !== 'undefined'
              ? w.globals.lastDrawnDataLabelsIndexes[i][
                  w.globals.lastDrawnDataLabelsIndexes[i].length - 1
                ]
              : 0;

          if (typeof w.globals.dataLabelsRects[i][len] !== 'undefined') {
            var lastDataLabelRect = w.globals.dataLabelsRects[i][lastDrawnIndex];

            if (
              // next label forward and x not intersecting
              x > lastDataLabelRect.x + lastDataLabelRect.width + 2 ||
              y > lastDataLabelRect.y + lastDataLabelRect.height + 2 ||
              x + width < lastDataLabelRect.x // next label is going to be drawn backwards
            ) {
              // the 2 indexes don't override, so OK to draw next label
              drawnextLabel = true;
            }
          }

          if (dataPointIndex === 0 || alwaysDrawDataLabel) {
            drawnextLabel = true;
          }

          return {
            x: x,
            y: y,
            textRects: textRects,
            drawnextLabel: drawnextLabel,
          };
        },
      },
      {
        key: 'drawDataLabel',
        value: function drawDataLabel(pos, i, j) {
          var _this = this;
          var strokeWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;
          // this method handles line, area, bubble, scatter charts as those charts contains markers/points which have pre-defined x/y positions
          // all other charts like radar / bars / heatmaps will define their own drawDataLabel routine
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var dataLabelsConfig = w.config.dataLabels;
          var x = 0;
          var y = 0;
          var dataPointIndex = j;
          var elDataLabelsWrap = null;

          if (!dataLabelsConfig.enabled || !Array.isArray(pos.x)) {
            return elDataLabelsWrap;
          }

          elDataLabelsWrap = graphics.group({
            class: 'apexcharts-data-labels',
          });

          for (var q = 0; q < pos.x.length; q++) {
            x = pos.x[q] + dataLabelsConfig.offsetX;
            y = pos.y[q] + dataLabelsConfig.offsetY + strokeWidth;

            if (!isNaN(x)) {
              // a small hack as we have 2 points for the first val to connect it
              if (j === 1 && q === 0) dataPointIndex = 0;
              if (j === 1 && q === 1) dataPointIndex = 1;
              var val = w.globals.series[i][dataPointIndex];
              var text = '';

              var getText = function getText(v) {
                return w.config.dataLabels.formatter(v, {
                  ctx: _this.ctx,
                  seriesIndex: i,
                  dataPointIndex: dataPointIndex,
                  w: w,
                });
              };

              if (w.config.chart.type === 'bubble') {
                val = w.globals.seriesZ[i][dataPointIndex];
                text = getText(val);
                y = pos.y[q];
                var scatter = new Scatter(this.ctx);
                var centerTextInBubbleCoords = scatter.centerTextInBubble(y, i, dataPointIndex);
                y = centerTextInBubbleCoords.y;
              } else {
                if (typeof val !== 'undefined') {
                  text = getText(val);
                }
              }

              this.plotDataLabelsText({
                x: x,
                y: y,
                text: text,
                i: i,
                j: dataPointIndex,
                parent: elDataLabelsWrap,
                offsetCorrection: true,
                dataLabelsConfig: w.config.dataLabels,
              });
            }
          }

          return elDataLabelsWrap;
        },
      },
      {
        key: 'plotDataLabelsText',
        value: function plotDataLabelsText(opts) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var x = opts.x,
            y = opts.y,
            i = opts.i,
            j = opts.j,
            text = opts.text,
            textAnchor = opts.textAnchor,
            fontSize = opts.fontSize,
            parent = opts.parent,
            dataLabelsConfig = opts.dataLabelsConfig,
            color = opts.color,
            alwaysDrawDataLabel = opts.alwaysDrawDataLabel,
            offsetCorrection = opts.offsetCorrection;

          if (Array.isArray(w.config.dataLabels.enabledOnSeries)) {
            if (w.config.dataLabels.enabledOnSeries.indexOf(i) < 0) {
              return;
            }
          }

          var correctedLabels = {
            x: x,
            y: y,
            drawnextLabel: true,
            textRects: null,
          };

          if (offsetCorrection) {
            correctedLabels = this.dataLabelsCorrection(
              x,
              y,
              text,
              i,
              j,
              alwaysDrawDataLabel,
              parseInt(dataLabelsConfig.style.fontSize, 10)
            );
          } // when zoomed, we don't need to correct labels offsets,
          // but if normally, labels get cropped, correct them

          if (!w.globals.zoomed) {
            x = correctedLabels.x;
            y = correctedLabels.y;
          }

          if (correctedLabels.textRects) {
            // fixes #2264
            if (
              x < -10 - correctedLabels.textRects.width ||
              x > w.globals.gridWidth + correctedLabels.textRects.width + 10
            ) {
              // datalabels fall outside drawing area, so draw a blank label
              text = '';
            }
          }

          var dataLabelColor = w.globals.dataLabels.style.colors[i];

          if (
            ((w.config.chart.type === 'bar' || w.config.chart.type === 'rangeBar') &&
              w.config.plotOptions.bar.distributed) ||
            w.config.dataLabels.distributed
          ) {
            dataLabelColor = w.globals.dataLabels.style.colors[j];
          }

          if (typeof dataLabelColor === 'function') {
            dataLabelColor = dataLabelColor({
              series: w.globals.series,
              seriesIndex: i,
              dataPointIndex: j,
              w: w,
            });
          }

          if (color) {
            dataLabelColor = color;
          }

          var offX = dataLabelsConfig.offsetX;
          var offY = dataLabelsConfig.offsetY;

          if (w.config.chart.type === 'bar' || w.config.chart.type === 'rangeBar') {
            // for certain chart types, we handle offsets while calculating datalabels pos
            // why? because bars/column may have negative values and based on that
            // offsets becomes reversed
            offX = 0;
            offY = 0;
          }

          if (correctedLabels.drawnextLabel) {
            if (typeof text !== 'undefined' && String(text).trim().length) {
              var dataLabelText = graphics.drawText({
                width: 100,
                height: parseInt(dataLabelsConfig.style.fontSize, 10),
                x: x + offX,
                y: y + offY,
                foreColor: dataLabelColor,
                textAnchor: textAnchor || dataLabelsConfig.textAnchor,
                text: text,
                fontSize: fontSize || dataLabelsConfig.style.fontSize,
                fontFamily: dataLabelsConfig.style.fontFamily,
                fontWeight: dataLabelsConfig.style.fontWeight || 'normal',
              });
              dataLabelText.attr({
                class: 'apexcharts-datalabel',
                cx: x,
                cy: y,
              });

              if (dataLabelsConfig.dropShadow.enabled) {
                var textShadow = dataLabelsConfig.dropShadow;
                var filters = new Filters(this.ctx);
                filters.dropShadow(dataLabelText, textShadow);
              }

              parent.add(dataLabelText);

              if (typeof w.globals.lastDrawnDataLabelsIndexes[i] === 'undefined') {
                w.globals.lastDrawnDataLabelsIndexes[i] = [];
              }

              w.globals.lastDrawnDataLabelsIndexes[i].push(j);
            }
          }
        },
      },
      {
        key: 'addBackgroundToDataLabel',
        value: function addBackgroundToDataLabel(el, coords) {
          var w = this.w;
          var bCnf = w.config.dataLabels.background;
          var paddingH = bCnf.padding;
          var paddingV = bCnf.padding / 2;
          var width = coords.width;
          var height = coords.height;
          var graphics = new Graphics(this.ctx);
          var elRect = graphics.drawRect(
            coords.x - paddingH,
            coords.y - paddingV / 2,
            width + paddingH * 2,
            height + paddingV,
            bCnf.borderRadius,
            w.config.chart.background === 'transparent' ? '#fff' : w.config.chart.background,
            bCnf.opacity,
            bCnf.borderWidth,
            bCnf.borderColor
          );

          if (bCnf.dropShadow.enabled) {
            var filters = new Filters(this.ctx);
            filters.dropShadow(elRect, bCnf.dropShadow);
          }

          return elRect;
        },
      },
      {
        key: 'dataLabelsBackground',
        value: function dataLabelsBackground() {
          var w = this.w;
          if (w.config.chart.type === 'bubble') return;
          var elDataLabels = w.globals.dom.baseEl.querySelectorAll('.apexcharts-datalabels text');

          for (var i = 0; i < elDataLabels.length; i++) {
            var el = elDataLabels[i];
            var coords = el.getBBox();
            var elRect = null;

            if (coords.width && coords.height) {
              elRect = this.addBackgroundToDataLabel(el, coords);
            }

            if (elRect) {
              el.parentNode.insertBefore(elRect.node, el);
              var background = el.getAttribute('fill');
              var shouldAnim =
                w.config.chart.animations.enabled && !w.globals.resized && !w.globals.dataChanged;

              if (shouldAnim) {
                elRect.animate().attr({
                  fill: background,
                });
              } else {
                elRect.attr({
                  fill: background,
                });
              }

              el.setAttribute('fill', w.config.dataLabels.background.foreColor);
            }
          }
        },
      },
      {
        key: 'bringForward',
        value: function bringForward() {
          var w = this.w;
          var elDataLabelsNodes = w.globals.dom.baseEl.querySelectorAll('.apexcharts-datalabels');
          var elSeries = w.globals.dom.baseEl.querySelector('.apexcharts-plot-series:last-child');

          for (var i = 0; i < elDataLabelsNodes.length; i++) {
            if (elSeries) {
              elSeries.insertBefore(elDataLabelsNodes[i], elSeries.nextSibling);
            }
          }
        },
      },
    ]);

    return DataLabels;
  })();

  var BarDataLabels = /*#__PURE__*/ (function () {
    function BarDataLabels(barCtx) {
      _classCallCheck(this, BarDataLabels);

      this.w = barCtx.w;
      this.barCtx = barCtx;
    }
    /** handleBarDataLabels is used to calculate the positions for the data-labels
     * It also sets the element's data attr for bars and calls drawCalculatedBarDataLabels()
     * After calculating, it also calls the function to draw data labels
     * @memberof Bar
     * @param {object} {barProps} most of the bar properties used throughout the bar
     * drawing function
     * @return {object} dataLabels node-element which you can append later
     **/

    _createClass(BarDataLabels, [
      {
        key: 'handleBarDataLabels',
        value: function handleBarDataLabels(opts) {
          var x = opts.x,
            y = opts.y,
            y1 = opts.y1,
            y2 = opts.y2,
            i = opts.i,
            j = opts.j,
            realIndex = opts.realIndex,
            series = opts.series,
            barHeight = opts.barHeight,
            barWidth = opts.barWidth,
            barYPosition = opts.barYPosition,
            visibleSeries = opts.visibleSeries,
            renderedPath = opts.renderedPath;
          var w = this.w;
          var graphics = new Graphics(this.barCtx.ctx);
          var strokeWidth = Array.isArray(this.barCtx.strokeWidth)
            ? this.barCtx.strokeWidth[realIndex]
            : this.barCtx.strokeWidth;
          var bcx = x + parseFloat(barWidth * visibleSeries);
          var bcy = y + parseFloat(barHeight * visibleSeries);

          if (w.globals.isXNumeric && !w.globals.isBarHorizontal) {
            bcx = x + parseFloat(barWidth * (visibleSeries + 1));
            bcy = y + parseFloat(barHeight * (visibleSeries + 1)) - strokeWidth;
          }

          var dataLabels = null;
          var dataLabelsX = x;
          var dataLabelsY = y;
          var dataLabelsPos = {};
          var dataLabelsConfig = w.config.dataLabels;
          var barDataLabelsConfig = this.barCtx.barOptions.dataLabels;

          if (typeof barYPosition !== 'undefined' && this.barCtx.isRangeBar) {
            bcy = barYPosition;
            dataLabelsY = barYPosition;
          }

          var offX = dataLabelsConfig.offsetX;
          var offY = dataLabelsConfig.offsetY;
          var textRects = {
            width: 0,
            height: 0,
          };

          if (w.config.dataLabels.enabled) {
            var yLabel = this.barCtx.series[i][j];
            textRects = graphics.getTextRects(
              w.globals.yLabelFormatters[0](yLabel),
              parseFloat(dataLabelsConfig.style.fontSize)
            );
          }

          var params = {
            x: x,
            y: y,
            i: i,
            j: j,
            renderedPath: renderedPath,
            bcx: bcx,
            bcy: bcy,
            barHeight: barHeight,
            barWidth: barWidth,
            textRects: textRects,
            strokeWidth: strokeWidth,
            dataLabelsX: dataLabelsX,
            dataLabelsY: dataLabelsY,
            barDataLabelsConfig: barDataLabelsConfig,
            offX: offX,
            offY: offY,
          };

          if (this.barCtx.isHorizontal) {
            dataLabelsPos = this.calculateBarsDataLabelsPosition(params);
          } else {
            dataLabelsPos = this.calculateColumnsDataLabelsPosition(params);
          }

          renderedPath.attr({
            cy: dataLabelsPos.bcy,
            cx: dataLabelsPos.bcx,
            j: j,
            val: series[i][j],
            barHeight: barHeight,
            barWidth: barWidth,
          });
          dataLabels = this.drawCalculatedDataLabels({
            x: dataLabelsPos.dataLabelsX,
            y: dataLabelsPos.dataLabelsY,
            val: this.barCtx.isRangeBar ? [y1, y2] : series[i][j],
            i: realIndex,
            j: j,
            barWidth: barWidth,
            barHeight: barHeight,
            textRects: textRects,
            dataLabelsConfig: dataLabelsConfig,
          });
          return dataLabels;
        },
      },
      {
        key: 'calculateColumnsDataLabelsPosition',
        value: function calculateColumnsDataLabelsPosition(opts) {
          var w = this.w;
          var i = opts.i,
            j = opts.j,
            y = opts.y,
            bcx = opts.bcx,
            barWidth = opts.barWidth,
            barHeight = opts.barHeight,
            textRects = opts.textRects,
            dataLabelsY = opts.dataLabelsY,
            barDataLabelsConfig = opts.barDataLabelsConfig,
            strokeWidth = opts.strokeWidth,
            offX = opts.offX,
            offY = opts.offY;
          var dataLabelsX;
          barHeight = Math.abs(barHeight);
          var vertical = w.config.plotOptions.bar.dataLabels.orientation === 'vertical';
          bcx = bcx - strokeWidth / 2;
          var dataPointsDividedWidth = w.globals.gridWidth / w.globals.dataPoints;

          if (w.globals.isXNumeric) {
            dataLabelsX = bcx - barWidth / 2 + offX;
          } else {
            dataLabelsX = bcx - dataPointsDividedWidth + barWidth / 2 + offX;
          }

          if (vertical) {
            var offsetDLX = 2;
            dataLabelsX = dataLabelsX + textRects.height / 2 - strokeWidth / 2 - offsetDLX;
          }

          var valIsNegative = this.barCtx.series[i][j] < 0;
          var newY = y;

          if (this.barCtx.isReversed) {
            newY = y - barHeight + (valIsNegative ? barHeight * 2 : 0);
            y = y - barHeight;
          }

          switch (barDataLabelsConfig.position) {
            case 'center':
              if (vertical) {
                if (valIsNegative) {
                  dataLabelsY = newY + barHeight / 2 + offY;
                } else {
                  dataLabelsY = newY + barHeight / 2 - offY;
                }
              } else {
                if (valIsNegative) {
                  dataLabelsY = newY - barHeight / 2 + textRects.height / 2 + offY;
                } else {
                  dataLabelsY = newY + barHeight / 2 + textRects.height / 2 - offY;
                }
              }

              break;

            case 'bottom':
              if (vertical) {
                if (valIsNegative) {
                  dataLabelsY = newY + barHeight + offY;
                } else {
                  dataLabelsY = newY + barHeight - offY;
                }
              } else {
                if (valIsNegative) {
                  dataLabelsY = newY - barHeight + textRects.height + strokeWidth + offY;
                } else {
                  dataLabelsY = newY + barHeight - textRects.height / 2 + strokeWidth - offY;
                }
              }

              break;

            case 'top':
              if (vertical) {
                if (valIsNegative) {
                  dataLabelsY = newY + offY;
                } else {
                  dataLabelsY = newY - offY;
                }
              } else {
                if (valIsNegative) {
                  dataLabelsY = newY - textRects.height / 2 - offY;
                } else {
                  dataLabelsY = newY + textRects.height + offY;
                }
              }

              break;
          }

          if (!w.config.chart.stacked) {
            if (dataLabelsY < 0) {
              dataLabelsY = 0 + strokeWidth;
            } else if (dataLabelsY + textRects.height / 3 > w.globals.gridHeight) {
              dataLabelsY = w.globals.gridHeight - strokeWidth;
            }
          }

          return {
            bcx: bcx,
            bcy: y,
            dataLabelsX: dataLabelsX,
            dataLabelsY: dataLabelsY,
          };
        },
      },
      {
        key: 'calculateBarsDataLabelsPosition',
        value: function calculateBarsDataLabelsPosition(opts) {
          var w = this.w;
          var x = opts.x,
            i = opts.i,
            j = opts.j,
            bcy = opts.bcy,
            barHeight = opts.barHeight,
            barWidth = opts.barWidth,
            textRects = opts.textRects,
            dataLabelsX = opts.dataLabelsX,
            strokeWidth = opts.strokeWidth,
            barDataLabelsConfig = opts.barDataLabelsConfig,
            offX = opts.offX,
            offY = opts.offY;
          var dataPointsDividedHeight = w.globals.gridHeight / w.globals.dataPoints;
          barWidth = Math.abs(barWidth);
          var dataLabelsY =
            bcy -
            (this.barCtx.isRangeBar ? 0 : dataPointsDividedHeight) +
            barHeight / 2 +
            textRects.height / 2 +
            offY -
            3;
          var valIsNegative = this.barCtx.series[i][j] < 0;
          var newX = x;

          if (this.barCtx.isReversed) {
            newX = x + barWidth - (valIsNegative ? barWidth * 2 : 0);
            x = w.globals.gridWidth - barWidth;
          }

          switch (barDataLabelsConfig.position) {
            case 'center':
              if (valIsNegative) {
                dataLabelsX = newX + barWidth / 2 - offX;
              } else {
                dataLabelsX = Math.max(textRects.width / 2, newX - barWidth / 2) + offX;
              }

              break;

            case 'bottom':
              if (valIsNegative) {
                dataLabelsX =
                  newX + barWidth - strokeWidth - Math.round(textRects.width / 2) - offX;
              } else {
                dataLabelsX =
                  newX - barWidth + strokeWidth + Math.round(textRects.width / 2) + offX;
              }

              break;

            case 'top':
              if (valIsNegative) {
                dataLabelsX = newX - strokeWidth + Math.round(textRects.width / 2) - offX;
              } else {
                dataLabelsX = newX - strokeWidth - Math.round(textRects.width / 2) + offX;
              }

              break;
          }

          if (!w.config.chart.stacked) {
            if (dataLabelsX < 0) {
              dataLabelsX = dataLabelsX + textRects.width + strokeWidth;
            } else if (dataLabelsX + textRects.width / 2 > w.globals.gridWidth) {
              dataLabelsX = w.globals.gridWidth - textRects.width - strokeWidth;
            }
          }

          return {
            bcx: x,
            bcy: bcy,
            dataLabelsX: dataLabelsX,
            dataLabelsY: dataLabelsY,
          };
        },
      },
      {
        key: 'drawCalculatedDataLabels',
        value: function drawCalculatedDataLabels(_ref) {
          var x = _ref.x,
            y = _ref.y,
            val = _ref.val,
            i = _ref.i,
            j = _ref.j,
            textRects = _ref.textRects,
            barHeight = _ref.barHeight,
            barWidth = _ref.barWidth,
            dataLabelsConfig = _ref.dataLabelsConfig;
          var w = this.w;
          var rotate = 'rotate(0)';
          if (w.config.plotOptions.bar.dataLabels.orientation === 'vertical')
            rotate = 'rotate(-90, '.concat(x, ', ').concat(y, ')');
          var dataLabels = new DataLabels(this.barCtx.ctx);
          var graphics = new Graphics(this.barCtx.ctx);
          var formatter = dataLabelsConfig.formatter;
          var elDataLabelsWrap = null;
          var isSeriesNotCollapsed = w.globals.collapsedSeriesIndices.indexOf(i) > -1;

          if (dataLabelsConfig.enabled && !isSeriesNotCollapsed) {
            elDataLabelsWrap = graphics.group({
              class: 'apexcharts-data-labels',
              transform: rotate,
            });
            var text = '';

            if (typeof val !== 'undefined') {
              text = formatter(val, {
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              });
            }

            var valIsNegative = w.globals.series[i][j] < 0;
            var position = w.config.plotOptions.bar.dataLabels.position;

            if (w.config.plotOptions.bar.dataLabels.orientation === 'vertical') {
              if (position === 'top') {
                if (valIsNegative) dataLabelsConfig.textAnchor = 'end';
                else dataLabelsConfig.textAnchor = 'start';
              }

              if (position === 'center') {
                dataLabelsConfig.textAnchor = 'middle';
              }

              if (position === 'bottom') {
                if (valIsNegative) dataLabelsConfig.textAnchor = 'end';
                else dataLabelsConfig.textAnchor = 'start';
              }
            }

            if (this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) {
              // hide the datalabel if it cannot fit into the rect
              var txRect = graphics.getTextRects(text, parseFloat(dataLabelsConfig.style.fontSize));

              if (barWidth < txRect.width) {
                text = '';
              }
            }

            if (w.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) {
              // if there is not enough space to draw the label in the bar/column rect, check hideOverflowingLabels property to prevent overflowing on wrong rect
              // Note: This issue is only seen in stacked charts
              if (this.barCtx.isHorizontal) {
                if (textRects.width / 1.6 > Math.abs(barWidth)) {
                  text = '';
                }
              } else {
                if (textRects.height / 1.6 > Math.abs(barHeight)) {
                  text = '';
                }
              }
            }

            var modifiedDataLabelsConfig = _objectSpread2({}, dataLabelsConfig);

            if (this.barCtx.isHorizontal) {
              if (val < 0) {
                if (dataLabelsConfig.textAnchor === 'start') {
                  modifiedDataLabelsConfig.textAnchor = 'end';
                } else if (dataLabelsConfig.textAnchor === 'end') {
                  modifiedDataLabelsConfig.textAnchor = 'start';
                }
              }
            }

            dataLabels.plotDataLabelsText({
              x: x,
              y: y,
              text: text,
              i: i,
              j: j,
              parent: elDataLabelsWrap,
              dataLabelsConfig: modifiedDataLabelsConfig,
              alwaysDrawDataLabel: true,
              offsetCorrection: true,
            });
          }

          return elDataLabelsWrap;
        },
      },
    ]);

    return BarDataLabels;
  })();

  /**
   * ApexCharts Series Class for interaction with the Series of the chart.
   *
   * @module Series
   **/

  var Series = /*#__PURE__*/ (function () {
    function Series(ctx) {
      _classCallCheck(this, Series);

      this.ctx = ctx;
      this.w = ctx.w;
      this.legendInactiveClass = 'legend-mouseover-inactive';
    }

    _createClass(Series, [
      {
        key: 'getAllSeriesEls',
        value: function getAllSeriesEls() {
          return this.w.globals.dom.baseEl.getElementsByClassName('apexcharts-series');
        },
      },
      {
        key: 'getSeriesByName',
        value: function getSeriesByName(seriesName) {
          return this.w.globals.dom.baseEl.querySelector(
            ".apexcharts-inner .apexcharts-series[seriesName='".concat(
              Utils$1.escapeString(seriesName),
              "']"
            )
          );
        },
      },
      {
        key: 'isSeriesHidden',
        value: function isSeriesHidden(seriesName) {
          var targetElement = this.getSeriesByName(seriesName);
          var realIndex = parseInt(targetElement.getAttribute('data:realIndex'), 10);
          var isHidden = targetElement.classList.contains('apexcharts-series-collapsed');
          return {
            isHidden: isHidden,
            realIndex: realIndex,
          };
        },
      },
      {
        key: 'addCollapsedClassToSeries',
        value: function addCollapsedClassToSeries(elSeries, index) {
          var w = this.w;

          function iterateOnAllCollapsedSeries(series) {
            for (var cs = 0; cs < series.length; cs++) {
              if (series[cs].index === index) {
                elSeries.node.classList.add('apexcharts-series-collapsed');
              }
            }
          }

          iterateOnAllCollapsedSeries(w.globals.collapsedSeries);
          iterateOnAllCollapsedSeries(w.globals.ancillaryCollapsedSeries);
        },
      },
      {
        key: 'toggleSeries',
        value: function toggleSeries(seriesName) {
          var isSeriesHidden = this.isSeriesHidden(seriesName);
          this.ctx.legend.legendHelpers.toggleDataSeries(
            isSeriesHidden.realIndex,
            isSeriesHidden.isHidden
          );
          return isSeriesHidden.isHidden;
        },
      },
      {
        key: 'showSeries',
        value: function showSeries(seriesName) {
          var isSeriesHidden = this.isSeriesHidden(seriesName);

          if (isSeriesHidden.isHidden) {
            this.ctx.legend.legendHelpers.toggleDataSeries(isSeriesHidden.realIndex, true);
          }
        },
      },
      {
        key: 'hideSeries',
        value: function hideSeries(seriesName) {
          var isSeriesHidden = this.isSeriesHidden(seriesName);

          if (!isSeriesHidden.isHidden) {
            this.ctx.legend.legendHelpers.toggleDataSeries(isSeriesHidden.realIndex, false);
          }
        },
      },
      {
        key: 'resetSeries',
        value: function resetSeries() {
          var shouldUpdateChart =
            arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
          var shouldResetZoom =
            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          var shouldResetCollapsed =
            arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
          var w = this.w;
          var series = Utils$1.clone(w.globals.initialSeries);
          w.globals.previousPaths = [];

          if (shouldResetCollapsed) {
            w.globals.collapsedSeries = [];
            w.globals.ancillaryCollapsedSeries = [];
            w.globals.collapsedSeriesIndices = [];
            w.globals.ancillaryCollapsedSeriesIndices = [];
          } else {
            series = this.emptyCollapsedSeries(series);
          }

          w.config.series = series;

          if (shouldUpdateChart) {
            if (shouldResetZoom) {
              w.globals.zoomed = false;
              this.ctx.updateHelpers.revertDefaultAxisMinMax();
            }

            this.ctx.updateHelpers._updateSeries(
              series,
              w.config.chart.animations.dynamicAnimation.enabled
            );
          }
        },
      },
      {
        key: 'emptyCollapsedSeries',
        value: function emptyCollapsedSeries(series) {
          var w = this.w;

          for (var i = 0; i < series.length; i++) {
            if (w.globals.collapsedSeriesIndices.indexOf(i) > -1) {
              series[i].data = [];
            }
          }

          return series;
        },
      },
      {
        key: 'toggleSeriesOnHover',
        value: function toggleSeriesOnHover(e, targetElement) {
          var w = this.w;
          if (!targetElement) targetElement = e.target;
          var allSeriesEls = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-series, .apexcharts-datalabels'
          );

          if (e.type === 'mousemove') {
            var seriesCnt = parseInt(targetElement.getAttribute('rel'), 10) - 1;
            var seriesEl = null;
            var dataLabelEl = null;

            if (w.globals.axisCharts || w.config.chart.type === 'radialBar') {
              if (w.globals.axisCharts) {
                seriesEl = w.globals.dom.baseEl.querySelector(
                  ".apexcharts-series[data\\:realIndex='".concat(seriesCnt, "']")
                );
                dataLabelEl = w.globals.dom.baseEl.querySelector(
                  ".apexcharts-datalabels[data\\:realIndex='".concat(seriesCnt, "']")
                );
              } else {
                seriesEl = w.globals.dom.baseEl.querySelector(
                  ".apexcharts-series[rel='".concat(seriesCnt + 1, "']")
                );
              }
            } else {
              seriesEl = w.globals.dom.baseEl.querySelector(
                ".apexcharts-series[rel='".concat(seriesCnt + 1, "'] path")
              );
            }

            for (var se = 0; se < allSeriesEls.length; se++) {
              allSeriesEls[se].classList.add(this.legendInactiveClass);
            }

            if (seriesEl !== null) {
              if (!w.globals.axisCharts) {
                seriesEl.parentNode.classList.remove(this.legendInactiveClass);
              }

              seriesEl.classList.remove(this.legendInactiveClass);

              if (dataLabelEl !== null) {
                dataLabelEl.classList.remove(this.legendInactiveClass);
              }
            }
          } else if (e.type === 'mouseout') {
            for (var _se = 0; _se < allSeriesEls.length; _se++) {
              allSeriesEls[_se].classList.remove(this.legendInactiveClass);
            }
          }
        },
      },
      {
        key: 'highlightRangeInSeries',
        value: function highlightRangeInSeries(e, targetElement) {
          var _this = this;

          var w = this.w;
          var allHeatMapElements =
            w.globals.dom.baseEl.getElementsByClassName('apexcharts-heatmap-rect');

          var activeInactive = function activeInactive(action) {
            for (var i = 0; i < allHeatMapElements.length; i++) {
              allHeatMapElements[i].classList[action](_this.legendInactiveClass);
            }
          };

          var removeInactiveClassFromHoveredRange = function removeInactiveClassFromHoveredRange(
            range
          ) {
            for (var i = 0; i < allHeatMapElements.length; i++) {
              var val = parseInt(allHeatMapElements[i].getAttribute('val'), 10);

              if (val >= range.from && val <= range.to) {
                allHeatMapElements[i].classList.remove(_this.legendInactiveClass);
              }
            }
          };

          if (e.type === 'mousemove') {
            var seriesCnt = parseInt(targetElement.getAttribute('rel'), 10) - 1;
            activeInactive('add');
            var range = w.config.plotOptions.heatmap.colorScale.ranges[seriesCnt];
            removeInactiveClassFromHoveredRange(range);
          } else if (e.type === 'mouseout') {
            activeInactive('remove');
          }
        },
      },
      {
        key: 'getActiveConfigSeriesIndex',
        value: function getActiveConfigSeriesIndex() {
          var ignoreBars =
            arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';
          var w = this.w;
          var activeIndex = 0;

          if (w.config.series.length > 1) {
            // active series flag is required to know if user has not deactivated via legend click
            var activeSeriesIndex = w.config.series.map(function (s, index) {
              var hasBars = false;

              if (ignoreBars) {
                hasBars =
                  w.config.series[index].type === 'bar' || w.config.series[index].type === 'column';
              }

              return s.data && s.data.length > 0 && !hasBars ? index : -1;
            });

            for (
              var a = order === 'asc' ? 0 : activeSeriesIndex.length - 1;
              order === 'asc' ? a < activeSeriesIndex.length : a >= 0;
              order === 'asc' ? a++ : a--
            ) {
              if (activeSeriesIndex[a] !== -1) {
                activeIndex = activeSeriesIndex[a];
                break;
              }
            }
          }

          return activeIndex;
        },
      },
      {
        key: 'getPreviousPaths',
        value: function getPreviousPaths() {
          var w = this.w;
          w.globals.previousPaths = [];

          function pushPaths(seriesEls, i, type) {
            var paths = seriesEls[i].childNodes;
            var dArr = {
              type: type,
              paths: [],
              realIndex: seriesEls[i].getAttribute('data:realIndex'),
            };

            for (var j = 0; j < paths.length; j++) {
              if (paths[j].hasAttribute('pathTo')) {
                var d = paths[j].getAttribute('pathTo');
                dArr.paths.push({
                  d: d,
                });
              }
            }

            w.globals.previousPaths.push(dArr);
          }

          var getPaths = function getPaths(chartType) {
            return w.globals.dom.baseEl.querySelectorAll(
              '.apexcharts-'.concat(chartType, '-series .apexcharts-series')
            );
          };

          var chartTypes = ['line', 'area', 'bar', 'rangebar', 'candlestick', 'radar'];
          chartTypes.forEach(function (type) {
            var paths = getPaths(type);

            for (var p = 0; p < paths.length; p++) {
              pushPaths(paths, p, type);
            }
          });
          this.handlePrevBubbleScatterPaths('bubble');
          this.handlePrevBubbleScatterPaths('scatter');
          var heatTreeSeries = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-'.concat(w.config.chart.type, ' .apexcharts-series')
          );

          if (heatTreeSeries.length > 0) {
            var _loop = function _loop(h) {
              var seriesEls = w.globals.dom.baseEl.querySelectorAll(
                '.apexcharts-'
                  .concat(w.config.chart.type, " .apexcharts-series[data\\:realIndex='")
                  .concat(h, "'] rect")
              );
              var dArr = [];

              var _loop2 = function _loop2(i) {
                var getAttr = function getAttr(x) {
                  return seriesEls[i].getAttribute(x);
                };

                var rect = {
                  x: parseFloat(getAttr('x')),
                  y: parseFloat(getAttr('y')),
                  width: parseFloat(getAttr('width')),
                  height: parseFloat(getAttr('height')),
                };
                dArr.push({
                  rect: rect,
                  color: seriesEls[i].getAttribute('color'),
                });
              };

              for (var i = 0; i < seriesEls.length; i++) {
                _loop2(i);
              }

              w.globals.previousPaths.push(dArr);
            };

            for (var h = 0; h < heatTreeSeries.length; h++) {
              _loop(h);
            }
          }

          if (!w.globals.axisCharts) {
            // for non-axis charts (i.e., circular charts, pathFrom is not usable. We need whole series)
            w.globals.previousPaths = w.globals.series;
          }
        },
      },
      {
        key: 'handlePrevBubbleScatterPaths',
        value: function handlePrevBubbleScatterPaths(type) {
          var w = this.w;
          var paths = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-'.concat(type, '-series .apexcharts-series')
          );

          if (paths.length > 0) {
            for (var s = 0; s < paths.length; s++) {
              var seriesEls = w.globals.dom.baseEl.querySelectorAll(
                '.apexcharts-'
                  .concat(type, "-series .apexcharts-series[data\\:realIndex='")
                  .concat(s, "'] circle")
              );
              var dArr = [];

              for (var i = 0; i < seriesEls.length; i++) {
                dArr.push({
                  x: seriesEls[i].getAttribute('cx'),
                  y: seriesEls[i].getAttribute('cy'),
                  r: seriesEls[i].getAttribute('r'),
                });
              }

              w.globals.previousPaths.push(dArr);
            }
          }
        },
      },
      {
        key: 'clearPreviousPaths',
        value: function clearPreviousPaths() {
          var w = this.w;
          w.globals.previousPaths = [];
          w.globals.allSeriesCollapsed = false;
        },
      },
      {
        key: 'handleNoData',
        value: function handleNoData() {
          var w = this.w;
          var me = this;
          var noDataOpts = w.config.noData;
          var graphics = new Graphics(me.ctx);
          var x = w.globals.svgWidth / 2;
          var y = w.globals.svgHeight / 2;
          var textAnchor = 'middle';
          w.globals.noData = true;
          w.globals.animationEnded = true;

          if (noDataOpts.align === 'left') {
            x = 10;
            textAnchor = 'start';
          } else if (noDataOpts.align === 'right') {
            x = w.globals.svgWidth - 10;
            textAnchor = 'end';
          }

          if (noDataOpts.verticalAlign === 'top') {
            y = 50;
          } else if (noDataOpts.verticalAlign === 'bottom') {
            y = w.globals.svgHeight - 50;
          }

          x = x + noDataOpts.offsetX;
          y = y + parseInt(noDataOpts.style.fontSize, 10) + 2 + noDataOpts.offsetY;

          if (noDataOpts.text !== undefined && noDataOpts.text !== '') {
            var titleText = graphics.drawText({
              x: x,
              y: y,
              text: noDataOpts.text,
              textAnchor: textAnchor,
              fontSize: noDataOpts.style.fontSize,
              fontFamily: noDataOpts.style.fontFamily,
              foreColor: noDataOpts.style.color,
              opacity: 1,
              class: 'apexcharts-text-nodata',
            });
            w.globals.dom.Paper.add(titleText);
          }
        }, // When user clicks on legends, the collapsed series is filled with [0,0,0,...,0]
        // This is because we don't want to alter the series' length as it is used at many places
      },
      {
        key: 'setNullSeriesToZeroValues',
        value: function setNullSeriesToZeroValues(series) {
          var w = this.w;

          for (var sl = 0; sl < series.length; sl++) {
            if (series[sl].length === 0) {
              for (var j = 0; j < series[w.globals.maxValsInArrayIndex].length; j++) {
                series[sl].push(0);
              }
            }
          }

          return series;
        },
      },
      {
        key: 'hasAllSeriesEqualX',
        value: function hasAllSeriesEqualX() {
          var equalLen = true;
          var w = this.w;
          var filteredSerX = this.filteredSeriesX();

          for (var i = 0; i < filteredSerX.length - 1; i++) {
            if (filteredSerX[i][0] !== filteredSerX[i + 1][0]) {
              equalLen = false;
              break;
            }
          }

          w.globals.allSeriesHasEqualX = equalLen;
          return equalLen;
        },
      },
      {
        key: 'filteredSeriesX',
        value: function filteredSeriesX() {
          var w = this.w;
          var filteredSeriesX = w.globals.seriesX.map(function (ser) {
            return ser.length > 0 ? ser : [];
          });
          return filteredSeriesX;
        },
      },
    ]);

    return Series;
  })();

  var Helpers$3 = /*#__PURE__*/ (function () {
    function Helpers(barCtx) {
      _classCallCheck(this, Helpers);

      this.w = barCtx.w;
      this.barCtx = barCtx;
    }

    _createClass(Helpers, [
      {
        key: 'initVariables',
        value: function initVariables(series) {
          var w = this.w;
          this.barCtx.series = series;
          this.barCtx.totalItems = 0;
          this.barCtx.seriesLen = 0;
          this.barCtx.visibleI = -1; // visible Series

          this.barCtx.visibleItems = 1; // number of visible bars after user zoomed in/out

          for (var sl = 0; sl < series.length; sl++) {
            if (series[sl].length > 0) {
              this.barCtx.seriesLen = this.barCtx.seriesLen + 1;
              this.barCtx.totalItems += series[sl].length;
            }

            if (w.globals.isXNumeric) {
              // get max visible items
              for (var j = 0; j < series[sl].length; j++) {
                if (
                  w.globals.seriesX[sl][j] > w.globals.minX &&
                  w.globals.seriesX[sl][j] < w.globals.maxX
                ) {
                  this.barCtx.visibleItems++;
                }
              }
            } else {
              this.barCtx.visibleItems = w.globals.dataPoints;
            }
          }

          if (this.barCtx.seriesLen === 0) {
            // A small adjustment when combo charts are used
            this.barCtx.seriesLen = 1;
          }

          this.barCtx.zeroSerieses = [];
          this.barCtx.radiusOnSeriesNumber = series.length - 1; // which series to draw ending shape on

          if (!w.globals.comboCharts) {
            this.checkZeroSeries({
              series: series,
            });
          }
        },
      },
      {
        key: 'initialPositions',
        value: function initialPositions() {
          var w = this.w;
          var x, y, yDivision, xDivision, barHeight, barWidth, zeroH, zeroW;
          var dataPoints = w.globals.dataPoints;

          if (this.barCtx.isRangeBar) {
            // timeline rangebar chart
            dataPoints = w.globals.labels.length;
          }

          var seriesLen = this.barCtx.seriesLen;

          if (w.config.plotOptions.bar.rangeBarGroupRows) {
            seriesLen = 1;
          }

          if (this.barCtx.isHorizontal) {
            // height divided into equal parts
            yDivision = w.globals.gridHeight / dataPoints;
            barHeight = yDivision / seriesLen;

            if (w.globals.isXNumeric) {
              yDivision = w.globals.gridHeight / this.barCtx.totalItems;
              barHeight = yDivision / this.barCtx.seriesLen;
            }

            barHeight = (barHeight * parseInt(this.barCtx.barOptions.barHeight, 10)) / 100;
            zeroW =
              this.barCtx.baseLineInvertedY +
              w.globals.padHorizontal +
              (this.barCtx.isReversed ? w.globals.gridWidth : 0) -
              (this.barCtx.isReversed ? this.barCtx.baseLineInvertedY * 2 : 0);
            y = (yDivision - barHeight * this.barCtx.seriesLen) / 2;
          } else {
            // width divided into equal parts
            xDivision = w.globals.gridWidth / this.barCtx.visibleItems;

            if (w.config.xaxis.convertedCatToNumeric) {
              xDivision = w.globals.gridWidth / w.globals.dataPoints;
            }

            barWidth =
              ((xDivision / this.barCtx.seriesLen) *
                parseInt(this.barCtx.barOptions.columnWidth, 10)) /
              100;

            if (w.globals.isXNumeric) {
              // max barwidth should be equal to minXDiff to avoid overlap
              var xRatio = this.barCtx.xRatio;

              if (w.config.xaxis.convertedCatToNumeric) {
                xRatio = this.barCtx.initialXRatio;
              }

              if (
                w.globals.minXDiff &&
                w.globals.minXDiff !== 0.5 &&
                w.globals.minXDiff / xRatio > 0
              ) {
                xDivision = w.globals.minXDiff / xRatio;
              }

              barWidth =
                ((xDivision / this.barCtx.seriesLen) *
                  parseInt(this.barCtx.barOptions.columnWidth, 10)) /
                100;

              if (barWidth < 1) {
                barWidth = 1;
              }
            }

            zeroH =
              w.globals.gridHeight -
              this.barCtx.baseLineY[this.barCtx.yaxisIndex] -
              (this.barCtx.isReversed ? w.globals.gridHeight : 0) +
              (this.barCtx.isReversed ? this.barCtx.baseLineY[this.barCtx.yaxisIndex] * 2 : 0);
            x = w.globals.padHorizontal + (xDivision - barWidth * this.barCtx.seriesLen) / 2;
          }

          return {
            x: x,
            y: y,
            yDivision: yDivision,
            xDivision: xDivision,
            barHeight: barHeight,
            barWidth: barWidth,
            zeroH: zeroH,
            zeroW: zeroW,
          };
        },
      },
      {
        key: 'getPathFillColor',
        value: function getPathFillColor(series, i, j, realIndex) {
          var w = this.w;
          var fill = new Fill(this.barCtx.ctx);
          var fillColor = null;
          var seriesNumber = this.barCtx.barOptions.distributed ? j : i;

          if (this.barCtx.barOptions.colors.ranges.length > 0) {
            var colorRange = this.barCtx.barOptions.colors.ranges;
            colorRange.map(function (range) {
              if (series[i][j] >= range.from && series[i][j] <= range.to) {
                fillColor = range.color;
              }
            });
          }

          if (w.config.series[i].data[j] && w.config.series[i].data[j].fillColor) {
            fillColor = w.config.series[i].data[j].fillColor;
          }

          var pathFill = fill.fillPath({
            seriesNumber: this.barCtx.barOptions.distributed ? seriesNumber : realIndex,
            dataPointIndex: j,
            color: fillColor,
            value: series[i][j],
          });
          return pathFill;
        },
      },
      {
        key: 'getStrokeWidth',
        value: function getStrokeWidth(i, j, realIndex) {
          var strokeWidth = 0;
          var w = this.w;

          if (
            typeof this.barCtx.series[i][j] === 'undefined' ||
            this.barCtx.series[i][j] === null
          ) {
            this.barCtx.isNullValue = true;
          } else {
            this.barCtx.isNullValue = false;
          }

          if (w.config.stroke.show) {
            if (!this.barCtx.isNullValue) {
              strokeWidth = Array.isArray(this.barCtx.strokeWidth)
                ? this.barCtx.strokeWidth[realIndex]
                : this.barCtx.strokeWidth;
            }
          }

          return strokeWidth;
        },
      },
      {
        key: 'barBackground',
        value: function barBackground(_ref) {
          var j = _ref.j,
            i = _ref.i,
            x1 = _ref.x1,
            x2 = _ref.x2,
            y1 = _ref.y1,
            y2 = _ref.y2,
            elSeries = _ref.elSeries;
          var w = this.w;
          var graphics = new Graphics(this.barCtx.ctx);
          var sr = new Series(this.barCtx.ctx);
          var activeSeriesIndex = sr.getActiveConfigSeriesIndex();

          if (
            this.barCtx.barOptions.colors.backgroundBarColors.length > 0 &&
            activeSeriesIndex === i
          ) {
            if (j >= this.barCtx.barOptions.colors.backgroundBarColors.length) {
              j -= this.barCtx.barOptions.colors.backgroundBarColors.length;
            }

            var bcolor = this.barCtx.barOptions.colors.backgroundBarColors[j];
            var rect = graphics.drawRect(
              typeof x1 !== 'undefined' ? x1 : 0,
              typeof y1 !== 'undefined' ? y1 : 0,
              typeof x2 !== 'undefined' ? x2 : w.globals.gridWidth,
              typeof y2 !== 'undefined' ? y2 : w.globals.gridHeight,
              this.barCtx.barOptions.colors.backgroundBarRadius,
              bcolor,
              this.barCtx.barOptions.colors.backgroundBarOpacity
            );
            elSeries.add(rect);
            rect.node.classList.add('apexcharts-backgroundBar');
          }
        },
      },
      {
        key: 'getColumnPaths',
        value: function getColumnPaths(_ref2) {
          var barWidth = _ref2.barWidth,
            barXPosition = _ref2.barXPosition,
            yRatio = _ref2.yRatio,
            y1 = _ref2.y1,
            y2 = _ref2.y2,
            strokeWidth = _ref2.strokeWidth,
            series = _ref2.series,
            realIndex = _ref2.realIndex,
            i = _ref2.i,
            j = _ref2.j,
            w = _ref2.w;
          var graphics = new Graphics(this.barCtx.ctx);
          strokeWidth = Array.isArray(strokeWidth) ? strokeWidth[realIndex] : strokeWidth;
          if (!strokeWidth) strokeWidth = 0;
          var shapeOpts = {
            barWidth: barWidth,
            strokeWidth: strokeWidth,
            yRatio: yRatio,
            barXPosition: barXPosition,
            y1: y1,
            y2: y2,
          };
          var newPath = this.getRoundedBars(w, shapeOpts, series, i, j);
          var x1 = barXPosition;
          var x2 = barXPosition + barWidth;
          var pathTo = graphics.move(x1, y1);
          var pathFrom = graphics.move(x1, y1);
          var sl = graphics.line(x2 - strokeWidth, y1);

          if (w.globals.previousPaths.length > 0) {
            pathFrom = this.barCtx.getPreviousPath(realIndex, j, false);
          }

          pathTo =
            pathTo +
            graphics.line(x1, newPath.y2) +
            newPath.pathWithRadius +
            graphics.line(x2 - strokeWidth, newPath.y2) +
            sl +
            sl +
            'z'; // the lines in pathFrom are repeated to equal it to the points of pathTo
          // this is to avoid weird animation (bug in svg.js)

          pathFrom =
            pathFrom + graphics.line(x1, y1) + sl + sl + sl + sl + sl + graphics.line(x1, y1);

          if (w.config.chart.stacked) {
            this.barCtx.yArrj.push(newPath.y2);
            this.barCtx.yArrjF.push(Math.abs(y1 - newPath.y2));
            this.barCtx.yArrjVal.push(this.barCtx.series[i][j]);
          }

          return {
            pathTo: pathTo,
            pathFrom: pathFrom,
          };
        },
      },
      {
        key: 'getBarpaths',
        value: function getBarpaths(_ref3) {
          var barYPosition = _ref3.barYPosition,
            barHeight = _ref3.barHeight,
            x1 = _ref3.x1,
            x2 = _ref3.x2,
            strokeWidth = _ref3.strokeWidth,
            series = _ref3.series,
            realIndex = _ref3.realIndex,
            i = _ref3.i,
            j = _ref3.j,
            w = _ref3.w;
          var graphics = new Graphics(this.barCtx.ctx);
          strokeWidth = Array.isArray(strokeWidth) ? strokeWidth[realIndex] : strokeWidth;
          if (!strokeWidth) strokeWidth = 0;
          var shapeOpts = {
            barHeight: barHeight,
            strokeWidth: strokeWidth,
            barYPosition: barYPosition,
            x2: x2,
            x1: x1,
          };
          var newPath = this.getRoundedBars(w, shapeOpts, series, i, j);
          var pathTo = graphics.move(x1, barYPosition);
          var pathFrom = graphics.move(x1, barYPosition);

          if (w.globals.previousPaths.length > 0) {
            pathFrom = this.barCtx.getPreviousPath(realIndex, j, false);
          }

          var y1 = barYPosition;
          var y2 = barYPosition + barHeight;
          var sl = graphics.line(x1, y2 - strokeWidth);
          pathTo =
            pathTo +
            graphics.line(newPath.x2, y1) +
            newPath.pathWithRadius +
            graphics.line(newPath.x2, y2 - strokeWidth) +
            sl +
            sl +
            'z';
          pathFrom =
            pathFrom + graphics.line(x1, y1) + sl + sl + sl + sl + sl + graphics.line(x1, y1);

          if (w.config.chart.stacked) {
            this.barCtx.xArrj.push(newPath.x2);
            this.barCtx.xArrjF.push(Math.abs(x1 - newPath.x2));
            this.barCtx.xArrjVal.push(this.barCtx.series[i][j]);
          }

          return {
            pathTo: pathTo,
            pathFrom: pathFrom,
          };
        },
        /** getRoundedBars draws border radius for bars/columns
         * @memberof Bar
         * @param {object} w - chart context
         * @param {object} opts - consists several properties like barHeight/barWidth
         * @param {array} series - global primary series
         * @param {int} i - current iterating series's index
         * @param {int} j - series's j of i
         * @return {object} pathWithRadius - ending shape path string
         *         newY/newX - which is calculated from existing x/y based on rounded border
         **/
      },
      {
        key: 'getRoundedBars',
        value: function getRoundedBars(w, opts, series, i, j) {
          var graphics = new Graphics(this.barCtx.ctx);
          var radius = 0;
          var borderRadius = w.config.plotOptions.bar.borderRadius;
          var borderRadiusIsArray = Array.isArray(borderRadius);

          if (borderRadiusIsArray) {
            var radiusIndex = i > borderRadius.length - 1 ? borderRadius.length - 1 : i;
            radius = borderRadius[radiusIndex];
          } else {
            radius = borderRadius;
          }

          if (
            w.config.chart.stacked &&
            series.length > 1 &&
            i !== this.barCtx.radiusOnSeriesNumber &&
            !borderRadiusIsArray
          ) {
            radius = 0;
          }

          if (this.barCtx.isHorizontal) {
            var pathWithRadius = '';
            var x2 = opts.x2;

            if (Math.abs(opts.x1 - opts.x2) < radius) {
              radius = Math.abs(opts.x1 - opts.x2);
            }

            if (typeof series[i][j] !== 'undefined' || series[i][j] !== null) {
              var inverse = this.barCtx.isReversed ? series[i][j] > 0 : series[i][j] < 0;
              if (inverse) radius = radius * -1;
              x2 = x2 - radius;
              pathWithRadius =
                graphics.quadraticCurve(
                  x2 + radius,
                  opts.barYPosition,
                  x2 + radius,
                  opts.barYPosition + (!inverse ? radius : radius * -1)
                ) +
                graphics.line(
                  x2 + radius,
                  opts.barYPosition +
                    opts.barHeight -
                    opts.strokeWidth -
                    (!inverse ? radius : radius * -1)
                ) +
                graphics.quadraticCurve(
                  x2 + radius,
                  opts.barYPosition + opts.barHeight - opts.strokeWidth,
                  x2,
                  opts.barYPosition + opts.barHeight - opts.strokeWidth
                );
            }

            return {
              pathWithRadius: pathWithRadius,
              x2: x2,
            };
          } else {
            var _pathWithRadius = '';
            var y2 = opts.y2;

            if (Math.abs(opts.y1 - opts.y2) < radius) {
              radius = Math.abs(opts.y1 - opts.y2);
            }

            if (typeof series[i][j] !== 'undefined' || series[i][j] !== null) {
              var _inverse = series[i][j] < 0;

              if (_inverse) radius = radius * -1;
              y2 = y2 + radius;
              _pathWithRadius =
                graphics.quadraticCurve(
                  opts.barXPosition,
                  y2 - radius,
                  opts.barXPosition + (!_inverse ? radius : radius * -1),
                  y2 - radius
                ) +
                graphics.line(
                  opts.barXPosition +
                    opts.barWidth -
                    opts.strokeWidth -
                    (!_inverse ? radius : radius * -1),
                  y2 - radius
                ) +
                graphics.quadraticCurve(
                  opts.barXPosition + opts.barWidth - opts.strokeWidth,
                  y2 - radius,
                  opts.barXPosition + opts.barWidth - opts.strokeWidth,
                  y2
                );
            }

            return {
              pathWithRadius: _pathWithRadius,
              y2: y2,
            };
          }
        },
      },
      {
        key: 'checkZeroSeries',
        value: function checkZeroSeries(_ref4) {
          var series = _ref4.series;
          var w = this.w;

          for (var zs = 0; zs < series.length; zs++) {
            var total = 0;

            for (var zsj = 0; zsj < series[w.globals.maxValsInArrayIndex].length; zsj++) {
              total += series[zs][zsj];
            }

            if (total === 0) {
              this.barCtx.zeroSerieses.push(zs);
            }
          } // After getting all zeroserieses, we need to ensure whether radiusOnSeriesNumber is not in that zeroseries array

          for (var s = series.length - 1; s >= 0; s--) {
            if (this.barCtx.zeroSerieses.indexOf(s) > -1 && s === this.radiusOnSeriesNumber) {
              this.barCtx.radiusOnSeriesNumber -= 1;
            }
          }

          for (var _s = series.length - 1; _s >= 0; _s--) {
            if (w.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber) > -1) {
              this.barCtx.radiusOnSeriesNumber -= 1;
            }
          }
        },
      },
      {
        key: 'getXForValue',
        value: function getXForValue(value, zeroW) {
          var zeroPositionForNull =
            arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
          var xForVal = zeroPositionForNull ? zeroW : null;

          if (typeof value !== 'undefined' && value !== null) {
            xForVal =
              zeroW +
              value / this.barCtx.invertedYRatio -
              (this.barCtx.isReversed ? value / this.barCtx.invertedYRatio : 0) * 2;
          }

          return xForVal;
        },
      },
      {
        key: 'getYForValue',
        value: function getYForValue(value, zeroH) {
          var zeroPositionForNull =
            arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
          var yForVal = zeroPositionForNull ? zeroH : null;

          if (typeof value !== 'undefined' && value !== null) {
            yForVal =
              zeroH -
              value / this.barCtx.yRatio[this.barCtx.yaxisIndex] +
              (this.barCtx.isReversed ? value / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0) * 2;
          }

          return yForVal;
        },
      },
      {
        key: 'getGoalValues',
        value: function getGoalValues(type, zeroW, zeroH, i, j) {
          var _this = this;

          var w = this.w;
          var goals = [];

          if (
            w.globals.seriesGoals[i] &&
            w.globals.seriesGoals[i][j] &&
            Array.isArray(w.globals.seriesGoals[i][j])
          ) {
            w.globals.seriesGoals[i][j].forEach(function (goal) {
              var _goals$push;

              goals.push(
                ((_goals$push = {}),
                _defineProperty(
                  _goals$push,
                  type,
                  type === 'x'
                    ? _this.getXForValue(goal.value, zeroW, false)
                    : _this.getYForValue(goal.value, zeroH, false)
                ),
                _defineProperty(_goals$push, 'attrs', goal),
                _goals$push)
              );
            });
          }

          return goals;
        },
      },
      {
        key: 'drawGoalLine',
        value: function drawGoalLine(_ref5) {
          var barXPosition = _ref5.barXPosition,
            barYPosition = _ref5.barYPosition,
            goalX = _ref5.goalX,
            goalY = _ref5.goalY,
            barWidth = _ref5.barWidth,
            barHeight = _ref5.barHeight;
          var graphics = new Graphics(this.barCtx.ctx);
          var lineGroup = graphics.group({
            className: 'apexcharts-bar-goals-groups',
          });
          var line = null;

          if (this.barCtx.isHorizontal) {
            if (Array.isArray(goalX)) {
              goalX.forEach(function (goal) {
                var sHeight =
                  typeof goal.attrs.strokeHeight !== 'undefined'
                    ? goal.attrs.strokeHeight
                    : barHeight / 2;
                var y = barYPosition + sHeight + barHeight / 2;
                line = graphics.drawLine(
                  goal.x,
                  y - sHeight * 2,
                  goal.x,
                  y,
                  goal.attrs.strokeColor ? goal.attrs.strokeColor : undefined,
                  goal.attrs.strokeDashArray,
                  goal.attrs.strokeWidth ? goal.attrs.strokeWidth : 2,
                  goal.attrs.strokeLineCap
                );
                lineGroup.add(line);
              });
            }
          } else {
            if (Array.isArray(goalY)) {
              goalY.forEach(function (goal) {
                var sWidth =
                  typeof goal.attrs.strokeWidth !== 'undefined'
                    ? goal.attrs.strokeWidth
                    : barWidth / 2;
                var x = barXPosition + sWidth + barWidth / 2;
                line = graphics.drawLine(
                  x - sWidth * 2,
                  goal.y,
                  x,
                  goal.y,
                  goal.attrs.strokeColor ? goal.attrs.strokeColor : undefined,
                  goal.attrs.strokeDashArray,
                  goal.attrs.strokeHeight ? goal.attrs.strokeHeight : 2,
                  goal.attrs.strokeLineCap
                );
                lineGroup.add(line);
              });
            }
          }

          return lineGroup;
        },
      },
    ]);

    return Helpers;
  })();

  /**
   * ApexCharts Bar Class responsible for drawing both Columns and Bars.
   *
   * @module Bar
   **/

  var Bar = /*#__PURE__*/ (function () {
    function Bar(ctx, xyRatios) {
      _classCallCheck(this, Bar);

      this.ctx = ctx;
      this.w = ctx.w;
      var w = this.w;
      this.barOptions = w.config.plotOptions.bar;
      this.isHorizontal = this.barOptions.horizontal;
      this.strokeWidth = w.config.stroke.width;
      this.isNullValue = false;
      this.isRangeBar = w.globals.seriesRangeBar.length && this.isHorizontal;
      this.xyRatios = xyRatios;

      if (this.xyRatios !== null) {
        this.xRatio = xyRatios.xRatio;
        this.initialXRatio = xyRatios.initialXRatio;
        this.yRatio = xyRatios.yRatio;
        this.invertedXRatio = xyRatios.invertedXRatio;
        this.invertedYRatio = xyRatios.invertedYRatio;
        this.baseLineY = xyRatios.baseLineY;
        this.baseLineInvertedY = xyRatios.baseLineInvertedY;
      }

      this.yaxisIndex = 0;
      this.seriesLen = 0;
      this.barHelpers = new Helpers$3(this);
    }
    /** primary draw method which is called on bar object
     * @memberof Bar
     * @param {array} series - user supplied series values
     * @param {int} seriesIndex - the index by which series will be drawn on the svg
     * @return {node} element which is supplied to parent chart draw method for appending
     **/

    _createClass(Bar, [
      {
        key: 'draw',
        value: function draw(series, seriesIndex) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var coreUtils = new CoreUtils(this.ctx, w);
          series = coreUtils.getLogSeries(series);
          this.series = series;
          this.yRatio = coreUtils.getLogYRatios(this.yRatio);
          this.barHelpers.initVariables(series);
          var ret = graphics.group({
            class: 'apexcharts-bar-series apexcharts-plot-series',
          });

          if (w.config.dataLabels.enabled) {
            if (this.totalItems > this.barOptions.dataLabels.maxItems) {
              console.warn(
                'WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.'
              );
            }
          }

          for (var i = 0, bc = 0; i < series.length; i++, bc++) {
            var x = void 0,
              y = void 0,
              xDivision = void 0,
              // xDivision is the GRIDWIDTH divided by number of datapoints (columns)
              yDivision = void 0,
              // yDivision is the GRIDHEIGHT divided by number of datapoints (bars)
              zeroH = void 0,
              // zeroH is the baseline where 0 meets y axis
              zeroW = void 0; // zeroW is the baseline where 0 meets x axis

            var yArrj = []; // hold y values of current iterating series

            var xArrj = []; // hold x values of current iterating series

            var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn

            var elSeries = graphics.group({
              class: 'apexcharts-series',
              rel: i + 1,
              seriesName: Utils$1.escapeString(w.globals.seriesNames[realIndex]),
              'data:realIndex': realIndex,
            });
            this.ctx.series.addCollapsedClassToSeries(elSeries, realIndex);

            if (series[i].length > 0) {
              this.visibleI = this.visibleI + 1;
            }

            var barHeight = 0;
            var barWidth = 0;

            if (this.yRatio.length > 1) {
              this.yaxisIndex = realIndex;
            }

            this.isReversed =
              w.config.yaxis[this.yaxisIndex] && w.config.yaxis[this.yaxisIndex].reversed;
            var initPositions = this.barHelpers.initialPositions();
            y = initPositions.y;
            barHeight = initPositions.barHeight;
            yDivision = initPositions.yDivision;
            zeroW = initPositions.zeroW;
            x = initPositions.x;
            barWidth = initPositions.barWidth;
            xDivision = initPositions.xDivision;
            zeroH = initPositions.zeroH;

            if (!this.horizontal) {
              xArrj.push(x + barWidth / 2);
            } // eldatalabels

            var elDataLabelsWrap = graphics.group({
              class: 'apexcharts-datalabels',
              'data:realIndex': realIndex,
            });
            var elGoalsMarkers = graphics.group({
              class: 'apexcharts-bar-goals-markers',
              style: 'pointer-events: none',
            });

            for (var j = 0; j < w.globals.dataPoints; j++) {
              var strokeWidth = this.barHelpers.getStrokeWidth(i, j, realIndex);
              var paths = null;
              var pathsParams = {
                indexes: {
                  i: i,
                  j: j,
                  realIndex: realIndex,
                  bc: bc,
                },
                x: x,
                y: y,
                strokeWidth: strokeWidth,
                elSeries: elSeries,
              };

              if (this.isHorizontal) {
                paths = this.drawBarPaths(
                  _objectSpread2(
                    _objectSpread2({}, pathsParams),
                    {},
                    {
                      barHeight: barHeight,
                      zeroW: zeroW,
                      yDivision: yDivision,
                    }
                  )
                );
                barWidth = this.series[i][j] / this.invertedYRatio;
              } else {
                paths = this.drawColumnPaths(
                  _objectSpread2(
                    _objectSpread2({}, pathsParams),
                    {},
                    {
                      xDivision: xDivision,
                      barWidth: barWidth,
                      zeroH: zeroH,
                    }
                  )
                );
                barHeight = this.series[i][j] / this.yRatio[this.yaxisIndex];
              }

              var barGoalLine = this.barHelpers.drawGoalLine({
                barXPosition: paths.barXPosition,
                barYPosition: paths.barYPosition,
                goalX: paths.goalX,
                goalY: paths.goalY,
                barHeight: barHeight,
                barWidth: barWidth,
              });

              if (barGoalLine) {
                elGoalsMarkers.add(barGoalLine);
              }

              y = paths.y;
              x = paths.x; // push current X

              if (j > 0) {
                xArrj.push(x + barWidth / 2);
              }

              yArrj.push(y);
              var pathFill = this.barHelpers.getPathFillColor(series, i, j, realIndex);
              this.renderSeries({
                realIndex: realIndex,
                pathFill: pathFill,
                j: j,
                i: i,
                pathFrom: paths.pathFrom,
                pathTo: paths.pathTo,
                strokeWidth: strokeWidth,
                elSeries: elSeries,
                x: x,
                y: y,
                series: series,
                barHeight: barHeight,
                barWidth: barWidth,
                elDataLabelsWrap: elDataLabelsWrap,
                elGoalsMarkers: elGoalsMarkers,
                visibleSeries: this.visibleI,
                type: 'bar',
              });
            } // push all x val arrays into main xArr

            w.globals.seriesXvalues[realIndex] = xArrj;
            w.globals.seriesYvalues[realIndex] = yArrj;
            ret.add(elSeries);
          }

          return ret;
        },
      },
      {
        key: 'renderSeries',
        value: function renderSeries(_ref) {
          var realIndex = _ref.realIndex,
            pathFill = _ref.pathFill,
            lineFill = _ref.lineFill,
            j = _ref.j,
            i = _ref.i,
            pathFrom = _ref.pathFrom,
            pathTo = _ref.pathTo,
            strokeWidth = _ref.strokeWidth,
            elSeries = _ref.elSeries,
            x = _ref.x,
            y = _ref.y,
            y1 = _ref.y1,
            y2 = _ref.y2,
            series = _ref.series,
            barHeight = _ref.barHeight,
            barWidth = _ref.barWidth,
            barYPosition = _ref.barYPosition,
            elDataLabelsWrap = _ref.elDataLabelsWrap,
            elGoalsMarkers = _ref.elGoalsMarkers,
            visibleSeries = _ref.visibleSeries,
            type = _ref.type;
          var w = this.w;
          var graphics = new Graphics(this.ctx);

          if (!lineFill) {
            /* fix apexcharts#341 */
            lineFill = this.barOptions.distributed
              ? w.globals.stroke.colors[j]
              : w.globals.stroke.colors[realIndex];
          }

          if (w.config.series[i].data[j] && w.config.series[i].data[j].strokeColor) {
            lineFill = w.config.series[i].data[j].strokeColor;
          }

          if (this.isNullValue) {
            pathFill = 'none';
          }

          var delay =
            ((j / w.config.chart.animations.animateGradually.delay) *
              (w.config.chart.animations.speed / w.globals.dataPoints)) /
            2.4;
          var renderedPath = graphics.renderPaths({
            i: i,
            j: j,
            realIndex: realIndex,
            pathFrom: pathFrom,
            pathTo: pathTo,
            stroke: lineFill,
            strokeWidth: strokeWidth,
            strokeLineCap: w.config.stroke.lineCap,
            fill: pathFill,
            animationDelay: delay,
            initialSpeed: w.config.chart.animations.speed,
            dataChangeSpeed: w.config.chart.animations.dynamicAnimation.speed,
            className: 'apexcharts-'.concat(type, '-area'),
          });
          renderedPath.attr('clip-path', 'url(#gridRectMask'.concat(w.globals.cuid, ')'));
          var forecast = w.config.forecastDataPoints;

          if (forecast.count > 0) {
            if (j >= w.globals.dataPoints - forecast.count) {
              renderedPath.node.setAttribute('stroke-dasharray', forecast.dashArray);
              renderedPath.node.setAttribute('stroke-width', forecast.strokeWidth);
              renderedPath.node.setAttribute('fill-opacity', forecast.fillOpacity);
            }
          }

          if (typeof y1 !== 'undefined' && typeof y2 !== 'undefined') {
            renderedPath.attr('data-range-y1', y1);
            renderedPath.attr('data-range-y2', y2);
          }

          var filters = new Filters(this.ctx);
          filters.setSelectionFilter(renderedPath, realIndex, j);
          elSeries.add(renderedPath);
          var barDataLabels = new BarDataLabels(this);
          var dataLabels = barDataLabels.handleBarDataLabels({
            x: x,
            y: y,
            y1: y1,
            y2: y2,
            i: i,
            j: j,
            series: series,
            realIndex: realIndex,
            barHeight: barHeight,
            barWidth: barWidth,
            barYPosition: barYPosition,
            renderedPath: renderedPath,
            visibleSeries: visibleSeries,
          });

          if (dataLabels !== null) {
            elDataLabelsWrap.add(dataLabels);
          }

          elSeries.add(elDataLabelsWrap);

          if (elGoalsMarkers) {
            elSeries.add(elGoalsMarkers);
          }

          return elSeries;
        },
      },
      {
        key: 'drawBarPaths',
        value: function drawBarPaths(_ref2) {
          var indexes = _ref2.indexes,
            barHeight = _ref2.barHeight,
            strokeWidth = _ref2.strokeWidth,
            zeroW = _ref2.zeroW,
            x = _ref2.x,
            y = _ref2.y,
            yDivision = _ref2.yDivision,
            elSeries = _ref2.elSeries;
          var w = this.w;
          var i = indexes.i;
          var j = indexes.j;

          if (w.globals.isXNumeric) {
            y = (w.globals.seriesX[i][j] - w.globals.minX) / this.invertedXRatio - barHeight;
          }

          var barYPosition = y + barHeight * this.visibleI;
          x = this.barHelpers.getXForValue(this.series[i][j], zeroW);
          var paths = this.barHelpers.getBarpaths({
            barYPosition: barYPosition,
            barHeight: barHeight,
            x1: zeroW,
            x2: x,
            strokeWidth: strokeWidth,
            series: this.series,
            realIndex: indexes.realIndex,
            i: i,
            j: j,
            w: w,
          });

          if (!w.globals.isXNumeric) {
            y = y + yDivision;
          }

          this.barHelpers.barBackground({
            j: j,
            i: i,
            y1: barYPosition - barHeight * this.visibleI,
            y2: barHeight * this.seriesLen,
            elSeries: elSeries,
          });
          return {
            pathTo: paths.pathTo,
            pathFrom: paths.pathFrom,
            x: x,
            y: y,
            goalX: this.barHelpers.getGoalValues('x', zeroW, null, i, j),
            barYPosition: barYPosition,
          };
        },
      },
      {
        key: 'drawColumnPaths',
        value: function drawColumnPaths(_ref3) {
          var indexes = _ref3.indexes,
            x = _ref3.x,
            y = _ref3.y,
            xDivision = _ref3.xDivision,
            barWidth = _ref3.barWidth,
            zeroH = _ref3.zeroH,
            strokeWidth = _ref3.strokeWidth,
            elSeries = _ref3.elSeries;
          var w = this.w;
          var realIndex = indexes.realIndex;
          var i = indexes.i;
          var j = indexes.j;
          var bc = indexes.bc;

          if (w.globals.isXNumeric) {
            var sxI = realIndex;

            if (!w.globals.seriesX[realIndex].length) {
              sxI = w.globals.maxValsInArrayIndex;
            }

            x =
              (w.globals.seriesX[sxI][j] - w.globals.minX) / this.xRatio -
              (barWidth * this.seriesLen) / 2;
          }

          var barXPosition = x + barWidth * this.visibleI;
          y = this.barHelpers.getYForValue(this.series[i][j], zeroH);
          var paths = this.barHelpers.getColumnPaths({
            barXPosition: barXPosition,
            barWidth: barWidth,
            y1: zeroH,
            y2: y,
            strokeWidth: strokeWidth,
            series: this.series,
            realIndex: indexes.realIndex,
            i: i,
            j: j,
            w: w,
          });

          if (!w.globals.isXNumeric) {
            x = x + xDivision;
          }

          this.barHelpers.barBackground({
            bc: bc,
            j: j,
            i: i,
            x1: barXPosition - strokeWidth / 2 - barWidth * this.visibleI,
            x2: barWidth * this.seriesLen + strokeWidth / 2,
            elSeries: elSeries,
          });
          return {
            pathTo: paths.pathTo,
            pathFrom: paths.pathFrom,
            x: x,
            y: y,
            goalY: this.barHelpers.getGoalValues('y', null, zeroH, i, j),
            barXPosition: barXPosition,
          };
        },
        /** getPreviousPath is a common function for bars/columns which is used to get previous paths when data changes.
         * @memberof Bar
         * @param {int} realIndex - current iterating i
         * @param {int} j - current iterating series's j index
         * @return {string} pathFrom is the string which will be appended in animations
         **/
      },
      {
        key: 'getPreviousPath',
        value: function getPreviousPath(realIndex, j) {
          var w = this.w;
          var pathFrom;

          for (var pp = 0; pp < w.globals.previousPaths.length; pp++) {
            var gpp = w.globals.previousPaths[pp];

            if (
              gpp.paths &&
              gpp.paths.length > 0 &&
              parseInt(gpp.realIndex, 10) === parseInt(realIndex, 10)
            ) {
              if (typeof w.globals.previousPaths[pp].paths[j] !== 'undefined') {
                pathFrom = w.globals.previousPaths[pp].paths[j].d;
              }
            }
          }

          return pathFrom;
        },
      },
    ]);

    return Bar;
  })();

  /**
   * DateTime Class to manipulate datetime values.
   *
   * @module DateTime
   **/

  var DateTime = /*#__PURE__*/ (function () {
    function DateTime(ctx) {
      _classCallCheck(this, DateTime);

      this.ctx = ctx;
      this.w = ctx.w;
      this.months31 = [1, 3, 5, 7, 8, 10, 12];
      this.months30 = [2, 4, 6, 9, 11];
      this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
    }

    _createClass(DateTime, [
      {
        key: 'isValidDate',
        value: function isValidDate(date) {
          return !isNaN(this.parseDate(date));
        },
      },
      {
        key: 'getTimeStamp',
        value: function getTimeStamp(dateStr) {
          if (!Date.parse(dateStr)) {
            return dateStr;
          }

          var utc = this.w.config.xaxis.labels.datetimeUTC;
          return !utc
            ? new Date(dateStr).getTime()
            : new Date(new Date(dateStr).toISOString().substr(0, 25)).getTime();
        },
      },
      {
        key: 'getDate',
        value: function getDate(timestamp) {
          var utc = this.w.config.xaxis.labels.datetimeUTC;
          return utc ? new Date(new Date(timestamp).toUTCString()) : new Date(timestamp);
        },
      },
      {
        key: 'parseDate',
        value: function parseDate(dateStr) {
          var parsed = Date.parse(dateStr);

          if (!isNaN(parsed)) {
            return this.getTimeStamp(dateStr);
          }

          var output = Date.parse(dateStr.replace(/-/g, '/').replace(/[a-z]+/gi, ' '));
          output = this.getTimeStamp(output);
          return output;
        }, // This fixes the difference of x-axis labels between chrome/safari
        // Fixes #1726, #1544, #1485, #1255
      },
      {
        key: 'parseDateWithTimezone',
        value: function parseDateWithTimezone(dateStr) {
          return Date.parse(dateStr.replace(/-/g, '/').replace(/[a-z]+/gi, ' '));
        }, // http://stackoverflow.com/questions/14638018/current-time-formatting-with-javascript#answer-14638191
      },
      {
        key: 'formatDate',
        value: function formatDate(date, format) {
          var locale = this.w.globals.locale;
          var utc = this.w.config.xaxis.labels.datetimeUTC;
          var MMMM = ['\x00'].concat(_toConsumableArray(locale.months));
          var MMM = ['\x01'].concat(_toConsumableArray(locale.shortMonths));
          var dddd = ['\x02'].concat(_toConsumableArray(locale.days));
          var ddd = ['\x03'].concat(_toConsumableArray(locale.shortDays));

          function ii(i, len) {
            var s = i + '';
            len = len || 2;

            while (s.length < len) {
              s = '0' + s;
            }

            return s;
          }

          var y = utc ? date.getUTCFullYear() : date.getFullYear();
          format = format.replace(/(^|[^\\])yyyy+/g, '$1' + y);
          format = format.replace(/(^|[^\\])yy/g, '$1' + y.toString().substr(2, 2));
          format = format.replace(/(^|[^\\])y/g, '$1' + y);
          var M = (utc ? date.getUTCMonth() : date.getMonth()) + 1;
          format = format.replace(/(^|[^\\])MMMM+/g, '$1' + MMMM[0]);
          format = format.replace(/(^|[^\\])MMM/g, '$1' + MMM[0]);
          format = format.replace(/(^|[^\\])MM/g, '$1' + ii(M));
          format = format.replace(/(^|[^\\])M/g, '$1' + M);
          var d = utc ? date.getUTCDate() : date.getDate();
          format = format.replace(/(^|[^\\])dddd+/g, '$1' + dddd[0]);
          format = format.replace(/(^|[^\\])ddd/g, '$1' + ddd[0]);
          format = format.replace(/(^|[^\\])dd/g, '$1' + ii(d));
          format = format.replace(/(^|[^\\])d/g, '$1' + d);
          var H = utc ? date.getUTCHours() : date.getHours();
          format = format.replace(/(^|[^\\])HH+/g, '$1' + ii(H));
          format = format.replace(/(^|[^\\])H/g, '$1' + H);
          var h = H > 12 ? H - 12 : H === 0 ? 12 : H;
          format = format.replace(/(^|[^\\])hh+/g, '$1' + ii(h));
          format = format.replace(/(^|[^\\])h/g, '$1' + h);
          var m = utc ? date.getUTCMinutes() : date.getMinutes();
          format = format.replace(/(^|[^\\])mm+/g, '$1' + ii(m));
          format = format.replace(/(^|[^\\])m/g, '$1' + m);
          var s = utc ? date.getUTCSeconds() : date.getSeconds();
          format = format.replace(/(^|[^\\])ss+/g, '$1' + ii(s));
          format = format.replace(/(^|[^\\])s/g, '$1' + s);
          var f = utc ? date.getUTCMilliseconds() : date.getMilliseconds();
          format = format.replace(/(^|[^\\])fff+/g, '$1' + ii(f, 3));
          f = Math.round(f / 10);
          format = format.replace(/(^|[^\\])ff/g, '$1' + ii(f));
          f = Math.round(f / 10);
          format = format.replace(/(^|[^\\])f/g, '$1' + f);
          var T = H < 12 ? 'AM' : 'PM';
          format = format.replace(/(^|[^\\])TT+/g, '$1' + T);
          format = format.replace(/(^|[^\\])T/g, '$1' + T.charAt(0));
          var t = T.toLowerCase();
          format = format.replace(/(^|[^\\])tt+/g, '$1' + t);
          format = format.replace(/(^|[^\\])t/g, '$1' + t.charAt(0));
          var tz = -date.getTimezoneOffset();
          var K = utc || !tz ? 'Z' : tz > 0 ? '+' : '-';

          if (!utc) {
            tz = Math.abs(tz);
            var tzHrs = Math.floor(tz / 60);
            var tzMin = tz % 60;
            K += ii(tzHrs) + ':' + ii(tzMin);
          }

          format = format.replace(/(^|[^\\])K/g, '$1' + K);
          var day = (utc ? date.getUTCDay() : date.getDay()) + 1;
          format = format.replace(new RegExp(dddd[0], 'g'), dddd[day]);
          format = format.replace(new RegExp(ddd[0], 'g'), ddd[day]);
          format = format.replace(new RegExp(MMMM[0], 'g'), MMMM[M]);
          format = format.replace(new RegExp(MMM[0], 'g'), MMM[M]);
          format = format.replace(/\\(.)/g, '$1');
          return format;
        },
      },
      {
        key: 'getTimeUnitsfromTimestamp',
        value: function getTimeUnitsfromTimestamp(minX, maxX, utc) {
          var w = this.w;

          if (w.config.xaxis.min !== undefined) {
            minX = w.config.xaxis.min;
          }

          if (w.config.xaxis.max !== undefined) {
            maxX = w.config.xaxis.max;
          }

          var tsMin = this.getDate(minX);
          var tsMax = this.getDate(maxX);
          var minD = this.formatDate(tsMin, 'yyyy MM dd HH mm ss fff').split(' ');
          var maxD = this.formatDate(tsMax, 'yyyy MM dd HH mm ss fff').split(' ');
          return {
            minMillisecond: parseInt(minD[6], 10),
            maxMillisecond: parseInt(maxD[6], 10),
            minSecond: parseInt(minD[5], 10),
            maxSecond: parseInt(maxD[5], 10),
            minMinute: parseInt(minD[4], 10),
            maxMinute: parseInt(maxD[4], 10),
            minHour: parseInt(minD[3], 10),
            maxHour: parseInt(maxD[3], 10),
            minDate: parseInt(minD[2], 10),
            maxDate: parseInt(maxD[2], 10),
            minMonth: parseInt(minD[1], 10) - 1,
            maxMonth: parseInt(maxD[1], 10) - 1,
            minYear: parseInt(minD[0], 10),
            maxYear: parseInt(maxD[0], 10),
          };
        },
      },
      {
        key: 'isLeapYear',
        value: function isLeapYear(year) {
          return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        },
      },
      {
        key: 'calculcateLastDaysOfMonth',
        value: function calculcateLastDaysOfMonth(month, year, subtract) {
          var days = this.determineDaysOfMonths(month, year); // whatever days we get, subtract the number of days asked

          return days - subtract;
        },
      },
      {
        key: 'determineDaysOfYear',
        value: function determineDaysOfYear(year) {
          var days = 365;

          if (this.isLeapYear(year)) {
            days = 366;
          }

          return days;
        },
      },
      {
        key: 'determineRemainingDaysOfYear',
        value: function determineRemainingDaysOfYear(year, month, date) {
          var dayOfYear = this.daysCntOfYear[month] + date;
          if (month > 1 && this.isLeapYear()) dayOfYear++;
          return dayOfYear;
        },
      },
      {
        key: 'determineDaysOfMonths',
        value: function determineDaysOfMonths(month, year) {
          var days = 30;
          month = Utils$1.monthMod(month);

          switch (true) {
            case this.months30.indexOf(month) > -1:
              if (month === 2) {
                if (this.isLeapYear(year)) {
                  days = 29;
                } else {
                  days = 28;
                }
              }

              break;

            case this.months31.indexOf(month) > -1:
              days = 31;
              break;

            default:
              days = 31;
              break;
          }

          return days;
        },
      },
    ]);

    return DateTime;
  })();

  /**
   * ApexCharts RangeBar Class responsible for drawing Range/Timeline Bars.
   *
   * @module RangeBar
   **/

  var RangeBar = /*#__PURE__*/ (function (_Bar) {
    _inherits(RangeBar, _Bar);

    var _super = _createSuper(RangeBar);

    function RangeBar() {
      _classCallCheck(this, RangeBar);

      return _super.apply(this, arguments);
    }

    _createClass(RangeBar, [
      {
        key: 'draw',
        value: function draw(series, seriesIndex) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          this.rangeBarOptions = this.w.config.plotOptions.rangeBar;
          this.series = series;
          this.seriesRangeStart = w.globals.seriesRangeStart;
          this.seriesRangeEnd = w.globals.seriesRangeEnd;
          this.barHelpers.initVariables(series);
          var ret = graphics.group({
            class: 'apexcharts-rangebar-series apexcharts-plot-series',
          });

          for (var i = 0; i < series.length; i++) {
            var x = void 0,
              y = void 0,
              xDivision = void 0,
              // xDivision is the GRIDWIDTH divided by number of datapoints (columns)
              yDivision = void 0,
              // yDivision is the GRIDHEIGHT divided by number of datapoints (bars)
              zeroH = void 0,
              // zeroH is the baseline where 0 meets y axis
              zeroW = void 0; // zeroW is the baseline where 0 meets x axis

            var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn

            var elSeries = graphics.group({
              class: 'apexcharts-series',
              seriesName: Utils$1.escapeString(w.globals.seriesNames[realIndex]),
              rel: i + 1,
              'data:realIndex': realIndex,
            });
            this.ctx.series.addCollapsedClassToSeries(elSeries, realIndex);

            if (series[i].length > 0) {
              this.visibleI = this.visibleI + 1;
            }

            var barHeight = 0;
            var barWidth = 0;

            if (this.yRatio.length > 1) {
              this.yaxisIndex = realIndex;
            }

            var initPositions = this.barHelpers.initialPositions();
            y = initPositions.y;
            zeroW = initPositions.zeroW;
            x = initPositions.x;
            barWidth = initPositions.barWidth;
            xDivision = initPositions.xDivision;
            zeroH = initPositions.zeroH; // eldatalabels

            var elDataLabelsWrap = graphics.group({
              class: 'apexcharts-datalabels',
              'data:realIndex': realIndex,
            });
            var elGoalsMarkers = graphics.group({
              class: 'apexcharts-rangebar-goals-markers',
              style: 'pointer-events: none',
            });

            for (var j = 0; j < w.globals.dataPoints; j++) {
              var strokeWidth = this.barHelpers.getStrokeWidth(i, j, realIndex);
              var y1 = this.seriesRangeStart[i][j];
              var y2 = this.seriesRangeEnd[i][j];
              var paths = null;
              var barYPosition = null;
              var params = {
                x: x,
                y: y,
                strokeWidth: strokeWidth,
                elSeries: elSeries,
              };
              yDivision = initPositions.yDivision;
              barHeight = initPositions.barHeight;

              if (this.isHorizontal) {
                barYPosition = y + barHeight * this.visibleI;
                var seriesLen = this.seriesLen;

                if (w.config.plotOptions.bar.rangeBarGroupRows) {
                  seriesLen = 1;
                }

                var srty = (yDivision - barHeight * seriesLen) / 2;

                if (typeof w.config.series[i].data[j] === 'undefined') {
                  // no data exists for further indexes, hence we need to get out the innr loop.
                  // As we are iterating over total datapoints, there is a possiblity the series might not have data for j index
                  break;
                }

                if (w.config.series[i].data[j].x) {
                  var positions = this.detectOverlappingBars({
                    i: i,
                    j: j,
                    barYPosition: barYPosition,
                    srty: srty,
                    barHeight: barHeight,
                    yDivision: yDivision,
                    initPositions: initPositions,
                  });
                  barHeight = positions.barHeight;
                  barYPosition = positions.barYPosition;
                }

                paths = this.drawRangeBarPaths(
                  _objectSpread2(
                    {
                      indexes: {
                        i: i,
                        j: j,
                        realIndex: realIndex,
                      },
                      barHeight: barHeight,
                      barYPosition: barYPosition,
                      zeroW: zeroW,
                      yDivision: yDivision,
                      y1: y1,
                      y2: y2,
                    },
                    params
                  )
                );
                barWidth = paths.barWidth;
              } else {
                paths = this.drawRangeColumnPaths(
                  _objectSpread2(
                    {
                      indexes: {
                        i: i,
                        j: j,
                        realIndex: realIndex,
                      },
                      zeroH: zeroH,
                      barWidth: barWidth,
                      xDivision: xDivision,
                    },
                    params
                  )
                );
                barHeight = paths.barHeight;
              }

              var barGoalLine = this.barHelpers.drawGoalLine({
                barXPosition: paths.barXPosition,
                barYPosition: barYPosition,
                goalX: paths.goalX,
                goalY: paths.goalY,
                barHeight: barHeight,
                barWidth: barWidth,
              });

              if (barGoalLine) {
                elGoalsMarkers.add(barGoalLine);
              }

              y = paths.y;
              x = paths.x;
              var pathFill = this.barHelpers.getPathFillColor(series, i, j, realIndex);
              var lineFill = w.globals.stroke.colors[realIndex];
              this.renderSeries({
                realIndex: realIndex,
                pathFill: pathFill,
                lineFill: lineFill,
                j: j,
                i: i,
                x: x,
                y: y,
                y1: y1,
                y2: y2,
                pathFrom: paths.pathFrom,
                pathTo: paths.pathTo,
                strokeWidth: strokeWidth,
                elSeries: elSeries,
                series: series,
                barHeight: barHeight,
                barYPosition: barYPosition,
                barWidth: barWidth,
                elDataLabelsWrap: elDataLabelsWrap,
                elGoalsMarkers: elGoalsMarkers,
                visibleSeries: this.visibleI,
                type: 'rangebar',
              });
            }

            ret.add(elSeries);
          }

          return ret;
        },
      },
      {
        key: 'detectOverlappingBars',
        value: function detectOverlappingBars(_ref) {
          var i = _ref.i,
            j = _ref.j,
            barYPosition = _ref.barYPosition,
            srty = _ref.srty,
            barHeight = _ref.barHeight,
            yDivision = _ref.yDivision,
            initPositions = _ref.initPositions;
          var w = this.w;
          var overlaps = [];
          var rangeName = w.config.series[i].data[j].rangeName;
          var labelX = w.config.series[i].data[j].x;
          var rowIndex = w.globals.labels.indexOf(labelX);
          var overlappedIndex = w.globals.seriesRangeBar[i].findIndex(function (tx) {
            return tx.x === labelX && tx.overlaps.length > 0;
          });

          if (w.config.plotOptions.bar.rangeBarGroupRows) {
            barYPosition = srty + yDivision * rowIndex;
          } else {
            barYPosition = srty + barHeight * this.visibleI + yDivision * rowIndex;
          }

          if (overlappedIndex > -1 && !w.config.plotOptions.bar.rangeBarOverlap) {
            overlaps = w.globals.seriesRangeBar[i][overlappedIndex].overlaps;

            if (overlaps.indexOf(rangeName) > -1) {
              barHeight = initPositions.barHeight / overlaps.length;
              barYPosition =
                barHeight * this.visibleI +
                (yDivision * (100 - parseInt(this.barOptions.barHeight, 10))) / 100 / 2 +
                barHeight * (this.visibleI + overlaps.indexOf(rangeName)) +
                yDivision * rowIndex;
            }
          }

          return {
            barYPosition: barYPosition,
            barHeight: barHeight,
          };
        },
      },
      {
        key: 'drawRangeColumnPaths',
        value: function drawRangeColumnPaths(_ref2) {
          var indexes = _ref2.indexes,
            x = _ref2.x;
          _ref2.strokeWidth;
          var xDivision = _ref2.xDivision,
            barWidth = _ref2.barWidth,
            zeroH = _ref2.zeroH;
          var w = this.w;
          var i = indexes.i;
          var j = indexes.j;
          var yRatio = this.yRatio[this.yaxisIndex];
          var realIndex = indexes.realIndex;
          var range = this.getRangeValue(realIndex, j);
          var y1 = Math.min(range.start, range.end);
          var y2 = Math.max(range.start, range.end);

          if (w.globals.isXNumeric) {
            x = (w.globals.seriesX[i][j] - w.globals.minX) / this.xRatio - barWidth / 2;
          }

          var barXPosition = x + barWidth * this.visibleI;

          if (typeof this.series[i][j] === 'undefined' || this.series[i][j] === null) {
            y1 = zeroH;
          } else {
            y1 = zeroH - y1 / yRatio;
            y2 = zeroH - y2 / yRatio;
          }

          var barHeight = Math.abs(y2 - y1);
          var paths = this.barHelpers.getColumnPaths({
            barXPosition: barXPosition,
            barWidth: barWidth,
            y1: y1,
            y2: y2,
            strokeWidth: this.strokeWidth,
            series: this.seriesRangeEnd,
            realIndex: indexes.realIndex,
            i: realIndex,
            j: j,
            w: w,
          });

          if (!w.globals.isXNumeric) {
            x = x + xDivision;
          }

          return {
            pathTo: paths.pathTo,
            pathFrom: paths.pathFrom,
            barHeight: barHeight,
            x: x,
            y: y2,
            goalY: this.barHelpers.getGoalValues('y', null, zeroH, i, j),
            barXPosition: barXPosition,
          };
        },
      },
      {
        key: 'drawRangeBarPaths',
        value: function drawRangeBarPaths(_ref3) {
          var indexes = _ref3.indexes,
            y = _ref3.y,
            y1 = _ref3.y1,
            y2 = _ref3.y2,
            yDivision = _ref3.yDivision,
            barHeight = _ref3.barHeight,
            barYPosition = _ref3.barYPosition,
            zeroW = _ref3.zeroW;
          var w = this.w;
          var x1 = zeroW + y1 / this.invertedYRatio;
          var x2 = zeroW + y2 / this.invertedYRatio;
          var barWidth = Math.abs(x2 - x1);
          var paths = this.barHelpers.getBarpaths({
            barYPosition: barYPosition,
            barHeight: barHeight,
            x1: x1,
            x2: x2,
            strokeWidth: this.strokeWidth,
            series: this.seriesRangeEnd,
            i: indexes.realIndex,
            realIndex: indexes.realIndex,
            j: indexes.j,
            w: w,
          });

          if (!w.globals.isXNumeric) {
            y = y + yDivision;
          }

          return {
            pathTo: paths.pathTo,
            pathFrom: paths.pathFrom,
            barWidth: barWidth,
            x: x2,
            goalX: this.barHelpers.getGoalValues('x', zeroW, null, indexes.realIndex, indexes.j),
            y: y,
          };
        },
      },
      {
        key: 'getRangeValue',
        value: function getRangeValue(i, j) {
          var w = this.w;
          return {
            start: w.globals.seriesRangeStart[i][j],
            end: w.globals.seriesRangeEnd[i][j],
          };
        },
      },
      {
        key: 'getTooltipValues',
        value: function getTooltipValues(_ref4) {
          var ctx = _ref4.ctx,
            seriesIndex = _ref4.seriesIndex,
            dataPointIndex = _ref4.dataPointIndex,
            y1 = _ref4.y1,
            y2 = _ref4.y2,
            w = _ref4.w;
          var start = w.globals.seriesRangeStart[seriesIndex][dataPointIndex];
          var end = w.globals.seriesRangeEnd[seriesIndex][dataPointIndex];
          var ylabel = w.globals.labels[dataPointIndex];
          var seriesName = w.config.series[seriesIndex].name
            ? w.config.series[seriesIndex].name
            : '';
          var yLbFormatter = w.config.tooltip.y.formatter;
          var yLbTitleFormatter = w.config.tooltip.y.title.formatter;
          var opts = {
            w: w,
            seriesIndex: seriesIndex,
            dataPointIndex: dataPointIndex,
            start: start,
            end: end,
          };

          if (typeof yLbTitleFormatter === 'function') {
            seriesName = yLbTitleFormatter(seriesName, opts);
          }

          if (Number.isFinite(y1) && Number.isFinite(y2)) {
            start = y1;
            end = y2;

            if (w.config.series[seriesIndex].data[dataPointIndex].x) {
              ylabel = w.config.series[seriesIndex].data[dataPointIndex].x + ':';
            }

            if (typeof yLbFormatter === 'function') {
              ylabel = yLbFormatter(ylabel, opts);
            }
          }

          var startVal = '';
          var endVal = '';
          var color = w.globals.colors[seriesIndex];

          if (w.config.tooltip.x.formatter === undefined) {
            if (w.config.xaxis.type === 'datetime') {
              var datetimeObj = new DateTime(ctx);
              startVal = datetimeObj.formatDate(
                datetimeObj.getDate(start),
                w.config.tooltip.x.format
              );
              endVal = datetimeObj.formatDate(datetimeObj.getDate(end), w.config.tooltip.x.format);
            } else {
              startVal = start;
              endVal = end;
            }
          } else {
            startVal = w.config.tooltip.x.formatter(start);
            endVal = w.config.tooltip.x.formatter(end);
          }

          return {
            start: start,
            end: end,
            startVal: startVal,
            endVal: endVal,
            ylabel: ylabel,
            color: color,
            seriesName: seriesName,
          };
        },
      },
      {
        key: 'buildCustomTooltipHTML',
        value: function buildCustomTooltipHTML(_ref5) {
          var color = _ref5.color,
            seriesName = _ref5.seriesName,
            ylabel = _ref5.ylabel,
            start = _ref5.start,
            end = _ref5.end;
          return (
            '<div class="apexcharts-tooltip-rangebar">' +
            '<div> <span class="series-name" style="color: ' +
            color +
            '">' +
            (seriesName ? seriesName : '') +
            '</span></div>' +
            '<div> <span class="category">' +
            ylabel +
            ' </span> <span class="value start-value">' +
            start +
            '</span> <span class="separator">-</span> <span class="value end-value">' +
            end +
            '</span></div>' +
            '</div>'
          );
        },
      },
    ]);

    return RangeBar;
  })(Bar);

  /**
   * ApexCharts Default Class for setting default options for all chart types.
   *
   * @module Defaults
   **/

  var Defaults = /*#__PURE__*/ (function () {
    function Defaults(opts) {
      _classCallCheck(this, Defaults);

      this.opts = opts;
    }

    _createClass(Defaults, [
      {
        key: 'line',
        value: function line() {
          return {
            chart: {
              animations: {
                easing: 'swing',
              },
            },
            dataLabels: {
              enabled: false,
            },
            stroke: {
              width: 5,
              curve: 'straight',
            },
            markers: {
              size: 0,
              hover: {
                sizeOffset: 6,
              },
            },
            xaxis: {
              crosshairs: {
                width: 1,
              },
            },
          };
        },
      },
      {
        key: 'sparkline',
        value: function sparkline(defaults) {
          this.opts.yaxis[0].show = false;
          this.opts.yaxis[0].title.text = '';
          this.opts.yaxis[0].axisBorder.show = false;
          this.opts.yaxis[0].axisTicks.show = false;
          this.opts.yaxis[0].floating = true;
          var ret = {
            grid: {
              show: false,
              padding: {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0,
              },
            },
            legend: {
              show: false,
            },
            xaxis: {
              labels: {
                show: false,
              },
              tooltip: {
                enabled: false,
              },
              axisBorder: {
                show: false,
              },
              axisTicks: {
                show: false,
              },
            },
            chart: {
              toolbar: {
                show: false,
              },
              zoom: {
                enabled: false,
              },
            },
            dataLabels: {
              enabled: false,
            },
          };
          return Utils$1.extend(defaults, ret);
        },
      },
      {
        key: 'bar',
        value: function bar() {
          return {
            chart: {
              stacked: false,
              animations: {
                easing: 'swing',
              },
            },
            plotOptions: {
              bar: {
                dataLabels: {
                  position: 'center',
                },
              },
            },
            dataLabels: {
              style: {
                colors: ['#fff'],
              },
              background: {
                enabled: false,
              },
            },
            stroke: {
              width: 0,
              lineCap: 'round',
            },
            fill: {
              opacity: 0.85,
            },
            legend: {
              markers: {
                shape: 'square',
                radius: 2,
                size: 8,
              },
            },
            tooltip: {
              shared: false,
              intersect: true,
            },
            xaxis: {
              tooltip: {
                enabled: false,
              },
              tickPlacement: 'between',
              crosshairs: {
                width: 'barWidth',
                position: 'back',
                fill: {
                  type: 'gradient',
                },
                dropShadow: {
                  enabled: false,
                },
                stroke: {
                  width: 0,
                },
              },
            },
          };
        },
      },
      {
        key: 'candlestick',
        value: function candlestick() {
          var _this = this;

          return {
            stroke: {
              width: 1,
              colors: ['#333'],
            },
            fill: {
              opacity: 1,
            },
            dataLabels: {
              enabled: false,
            },
            tooltip: {
              shared: true,
              custom: function custom(_ref) {
                var seriesIndex = _ref.seriesIndex,
                  dataPointIndex = _ref.dataPointIndex,
                  w = _ref.w;
                return _this._getBoxTooltip(
                  w,
                  seriesIndex,
                  dataPointIndex,
                  ['Open', 'High', '', 'Low', 'Close'],
                  'candlestick'
                );
              },
            },
            states: {
              active: {
                filter: {
                  type: 'none',
                },
              },
            },
            xaxis: {
              crosshairs: {
                width: 1,
              },
            },
          };
        },
      },
      {
        key: 'boxPlot',
        value: function boxPlot() {
          var _this2 = this;

          return {
            chart: {
              animations: {
                dynamicAnimation: {
                  enabled: false,
                },
              },
            },
            stroke: {
              width: 1,
              colors: ['#24292e'],
            },
            dataLabels: {
              enabled: false,
            },
            tooltip: {
              shared: true,
              custom: function custom(_ref2) {
                var seriesIndex = _ref2.seriesIndex,
                  dataPointIndex = _ref2.dataPointIndex,
                  w = _ref2.w;
                return _this2._getBoxTooltip(
                  w,
                  seriesIndex,
                  dataPointIndex,
                  ['Minimum', 'Q1', 'Median', 'Q3', 'Maximum'],
                  'boxPlot'
                );
              },
            },
            markers: {
              size: 5,
              strokeWidth: 1,
              strokeColors: '#111',
            },
            xaxis: {
              crosshairs: {
                width: 1,
              },
            },
          };
        },
      },
      {
        key: 'rangeBar',
        value: function rangeBar() {
          var handleTimelineTooltip = function handleTimelineTooltip(opts) {
            var rangeCtx = new RangeBar(opts.ctx, null);

            var _rangeCtx$getTooltipV = rangeCtx.getTooltipValues(opts),
              color = _rangeCtx$getTooltipV.color,
              seriesName = _rangeCtx$getTooltipV.seriesName,
              ylabel = _rangeCtx$getTooltipV.ylabel,
              startVal = _rangeCtx$getTooltipV.startVal,
              endVal = _rangeCtx$getTooltipV.endVal;

            return rangeCtx.buildCustomTooltipHTML({
              color: color,
              seriesName: seriesName,
              ylabel: ylabel,
              start: startVal,
              end: endVal,
            });
          };

          var handleRangeColumnTooltip = function handleRangeColumnTooltip(opts) {
            var rangeCtx = new RangeBar(opts.ctx, null);

            var _rangeCtx$getTooltipV2 = rangeCtx.getTooltipValues(opts),
              color = _rangeCtx$getTooltipV2.color,
              seriesName = _rangeCtx$getTooltipV2.seriesName,
              ylabel = _rangeCtx$getTooltipV2.ylabel,
              start = _rangeCtx$getTooltipV2.start,
              end = _rangeCtx$getTooltipV2.end;

            return rangeCtx.buildCustomTooltipHTML({
              color: color,
              seriesName: seriesName,
              ylabel: ylabel,
              start: start,
              end: end,
            });
          };

          return {
            stroke: {
              width: 0,
              lineCap: 'square',
            },
            plotOptions: {
              bar: {
                borderRadius: 0,
                dataLabels: {
                  position: 'center',
                },
              },
            },
            dataLabels: {
              enabled: false,
              formatter: function formatter(val, _ref3) {
                _ref3.ctx;
                var seriesIndex = _ref3.seriesIndex,
                  dataPointIndex = _ref3.dataPointIndex,
                  w = _ref3.w;
                var start = w.globals.seriesRangeStart[seriesIndex][dataPointIndex];
                var end = w.globals.seriesRangeEnd[seriesIndex][dataPointIndex];
                return end - start;
              },
              background: {
                enabled: false,
              },
              style: {
                colors: ['#fff'],
              },
            },
            tooltip: {
              shared: false,
              followCursor: true,
              custom: function custom(opts) {
                if (
                  opts.w.config.plotOptions &&
                  opts.w.config.plotOptions.bar &&
                  opts.w.config.plotOptions.bar.horizontal
                ) {
                  return handleTimelineTooltip(opts);
                } else {
                  return handleRangeColumnTooltip(opts);
                }
              },
            },
            xaxis: {
              tickPlacement: 'between',
              tooltip: {
                enabled: false,
              },
              crosshairs: {
                stroke: {
                  width: 0,
                },
              },
            },
          };
        },
      },
      {
        key: 'area',
        value: function area() {
          return {
            stroke: {
              width: 4,
            },
            fill: {
              type: 'gradient',
              gradient: {
                inverseColors: false,
                shade: 'light',
                type: 'vertical',
                opacityFrom: 0.65,
                opacityTo: 0.5,
                stops: [0, 100, 100],
              },
            },
            markers: {
              size: 0,
              hover: {
                sizeOffset: 6,
              },
            },
            tooltip: {
              followCursor: false,
            },
          };
        },
      },
      {
        key: 'brush',
        value: function brush(defaults) {
          var ret = {
            chart: {
              toolbar: {
                autoSelected: 'selection',
                show: false,
              },
              zoom: {
                enabled: false,
              },
            },
            dataLabels: {
              enabled: false,
            },
            stroke: {
              width: 1,
            },
            tooltip: {
              enabled: false,
            },
            xaxis: {
              tooltip: {
                enabled: false,
              },
            },
          };
          return Utils$1.extend(defaults, ret);
        },
      },
      {
        key: 'stacked100',
        value: function stacked100(opts) {
          opts.dataLabels = opts.dataLabels || {};
          opts.dataLabels.formatter = opts.dataLabels.formatter || undefined;
          var existingDataLabelFormatter = opts.dataLabels.formatter;
          opts.yaxis.forEach(function (yaxe, index) {
            opts.yaxis[index].min = 0;
            opts.yaxis[index].max = 100;
          });
          var isBar = opts.chart.type === 'bar';

          if (isBar) {
            opts.dataLabels.formatter =
              existingDataLabelFormatter ||
              function (val) {
                if (typeof val === 'number') {
                  return val ? val.toFixed(0) + '%' : val;
                }

                return val;
              };
          }

          return opts;
        }, // This function removes the left and right spacing in chart for line/area/scatter if xaxis type = category for those charts by converting xaxis = numeric. Numeric/Datetime xaxis prevents the unnecessary spacing in the left/right of the chart area
      },
      {
        key: 'convertCatToNumeric',
        value: function convertCatToNumeric(opts) {
          opts.xaxis.convertedCatToNumeric = true;
          return opts;
        },
      },
      {
        key: 'convertCatToNumericXaxis',
        value: function convertCatToNumericXaxis(opts, ctx, cats) {
          opts.xaxis.type = 'numeric';
          opts.xaxis.labels = opts.xaxis.labels || {};

          opts.xaxis.labels.formatter =
            opts.xaxis.labels.formatter ||
            function (val) {
              return Utils$1.isNumber(val) ? Math.floor(val) : val;
            };

          var defaultFormatter = opts.xaxis.labels.formatter;
          var labels =
            opts.xaxis.categories && opts.xaxis.categories.length
              ? opts.xaxis.categories
              : opts.labels;

          if (cats && cats.length) {
            labels = cats.map(function (c) {
              return Array.isArray(c) ? c : String(c);
            });
          }

          if (labels && labels.length) {
            opts.xaxis.labels.formatter = function (val) {
              return Utils$1.isNumber(val)
                ? defaultFormatter(labels[Math.floor(val) - 1])
                : defaultFormatter(val);
            };
          }

          opts.xaxis.categories = [];
          opts.labels = [];
          opts.xaxis.tickAmount = opts.xaxis.tickAmount || 'dataPoints';
          return opts;
        },
      },
      {
        key: 'bubble',
        value: function bubble() {
          return {
            dataLabels: {
              style: {
                colors: ['#fff'],
              },
            },
            tooltip: {
              shared: false,
              intersect: true,
            },
            xaxis: {
              crosshairs: {
                width: 0,
              },
            },
            fill: {
              type: 'solid',
              gradient: {
                shade: 'light',
                inverse: true,
                shadeIntensity: 0.55,
                opacityFrom: 0.4,
                opacityTo: 0.8,
              },
            },
          };
        },
      },
      {
        key: 'scatter',
        value: function scatter() {
          return {
            dataLabels: {
              enabled: false,
            },
            tooltip: {
              shared: false,
              intersect: true,
            },
            markers: {
              size: 6,
              strokeWidth: 1,
              hover: {
                sizeOffset: 2,
              },
            },
          };
        },
      },
      {
        key: 'heatmap',
        value: function heatmap() {
          return {
            chart: {
              stacked: false,
            },
            fill: {
              opacity: 1,
            },
            dataLabels: {
              style: {
                colors: ['#fff'],
              },
            },
            stroke: {
              colors: ['#fff'],
            },
            tooltip: {
              followCursor: true,
              marker: {
                show: false,
              },
              x: {
                show: false,
              },
            },
            legend: {
              position: 'top',
              markers: {
                shape: 'square',
                size: 10,
                offsetY: 2,
              },
            },
            grid: {
              padding: {
                right: 20,
              },
            },
          };
        },
      },
      {
        key: 'treemap',
        value: function treemap() {
          return {
            chart: {
              zoom: {
                enabled: false,
              },
            },
            dataLabels: {
              style: {
                fontSize: 14,
                fontWeight: 600,
                colors: ['#fff'],
              },
            },
            stroke: {
              show: true,
              width: 2,
              colors: ['#fff'],
            },
            legend: {
              show: false,
            },
            fill: {
              gradient: {
                stops: [0, 100],
              },
            },
            tooltip: {
              followCursor: true,
              x: {
                show: false,
              },
            },
            grid: {
              padding: {
                left: 0,
                right: 0,
              },
            },
            xaxis: {
              crosshairs: {
                show: false,
              },
              tooltip: {
                enabled: false,
              },
            },
          };
        },
      },
      {
        key: 'pie',
        value: function pie() {
          return {
            chart: {
              toolbar: {
                show: false,
              },
            },
            plotOptions: {
              pie: {
                donut: {
                  labels: {
                    show: false,
                  },
                },
              },
            },
            dataLabels: {
              formatter: function formatter(val) {
                return val.toFixed(1) + '%';
              },
              style: {
                colors: ['#fff'],
              },
              background: {
                enabled: false,
              },
              dropShadow: {
                enabled: true,
              },
            },
            stroke: {
              colors: ['#fff'],
            },
            fill: {
              opacity: 1,
              gradient: {
                shade: 'light',
                stops: [0, 100],
              },
            },
            tooltip: {
              theme: 'dark',
              fillSeriesColor: true,
            },
            legend: {
              position: 'right',
            },
          };
        },
      },
      {
        key: 'donut',
        value: function donut() {
          return {
            chart: {
              toolbar: {
                show: false,
              },
            },
            dataLabels: {
              formatter: function formatter(val) {
                return val.toFixed(1) + '%';
              },
              style: {
                colors: ['#fff'],
              },
              background: {
                enabled: false,
              },
              dropShadow: {
                enabled: true,
              },
            },
            stroke: {
              colors: ['#fff'],
            },
            fill: {
              opacity: 1,
              gradient: {
                shade: 'light',
                shadeIntensity: 0.35,
                stops: [80, 100],
                opacityFrom: 1,
                opacityTo: 1,
              },
            },
            tooltip: {
              theme: 'dark',
              fillSeriesColor: true,
            },
            legend: {
              position: 'right',
            },
          };
        },
      },
      {
        key: 'polarArea',
        value: function polarArea() {
          this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount
            ? this.opts.yaxis[0].tickAmount
            : 6;
          return {
            chart: {
              toolbar: {
                show: false,
              },
            },
            dataLabels: {
              formatter: function formatter(val) {
                return val.toFixed(1) + '%';
              },
              enabled: false,
            },
            stroke: {
              show: true,
              width: 2,
            },
            fill: {
              opacity: 0.7,
            },
            tooltip: {
              theme: 'dark',
              fillSeriesColor: true,
            },
            legend: {
              position: 'right',
            },
          };
        },
      },
      {
        key: 'radar',
        value: function radar() {
          this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY
            ? this.opts.yaxis[0].labels.offsetY
            : 6;
          return {
            dataLabels: {
              enabled: false,
              style: {
                fontSize: '11px',
              },
            },
            stroke: {
              width: 2,
            },
            markers: {
              size: 3,
              strokeWidth: 1,
              strokeOpacity: 1,
            },
            fill: {
              opacity: 0.2,
            },
            tooltip: {
              shared: false,
              intersect: true,
              followCursor: true,
            },
            grid: {
              show: false,
            },
            xaxis: {
              labels: {
                formatter: function formatter(val) {
                  return val;
                },
                style: {
                  colors: ['#a8a8a8'],
                  fontSize: '11px',
                },
              },
              tooltip: {
                enabled: false,
              },
              crosshairs: {
                show: false,
              },
            },
          };
        },
      },
      {
        key: 'radialBar',
        value: function radialBar() {
          return {
            chart: {
              animations: {
                dynamicAnimation: {
                  enabled: true,
                  speed: 800,
                },
              },
              toolbar: {
                show: false,
              },
            },
            fill: {
              gradient: {
                shade: 'dark',
                shadeIntensity: 0.4,
                inverseColors: false,
                type: 'diagonal2',
                opacityFrom: 1,
                opacityTo: 1,
                stops: [70, 98, 100],
              },
            },
            legend: {
              show: false,
              position: 'right',
            },
            tooltip: {
              enabled: false,
              fillSeriesColor: true,
            },
          };
        },
      },
      {
        key: '_getBoxTooltip',
        value: function _getBoxTooltip(w, seriesIndex, dataPointIndex, labels, chartType) {
          var o = w.globals.seriesCandleO[seriesIndex][dataPointIndex];
          var h = w.globals.seriesCandleH[seriesIndex][dataPointIndex];
          var m = w.globals.seriesCandleM[seriesIndex][dataPointIndex];
          var l = w.globals.seriesCandleL[seriesIndex][dataPointIndex];
          var c = w.globals.seriesCandleC[seriesIndex][dataPointIndex];

          if (
            w.config.series[seriesIndex].type &&
            w.config.series[seriesIndex].type !== chartType
          ) {
            return '<div class="apexcharts-custom-tooltip">\n          '
              .concat(
                w.config.series[seriesIndex].name
                  ? w.config.series[seriesIndex].name
                  : 'series-' + (seriesIndex + 1),
                ': <strong>'
              )
              .concat(w.globals.series[seriesIndex][dataPointIndex], '</strong>\n        </div>');
          } else {
            return (
              '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(
                w.config.chart.type,
                '">'
              ) +
              '<div>'.concat(labels[0], ': <span class="value">') +
              o +
              '</span></div>' +
              '<div>'.concat(labels[1], ': <span class="value">') +
              h +
              '</span></div>' +
              (m ? '<div>'.concat(labels[2], ': <span class="value">') + m + '</span></div>' : '') +
              '<div>'.concat(labels[3], ': <span class="value">') +
              l +
              '</span></div>' +
              '<div>'.concat(labels[4], ': <span class="value">') +
              c +
              '</span></div>' +
              '</div>'
            );
          }
        },
      },
    ]);

    return Defaults;
  })();

  /**
   * ApexCharts Config Class for extending user options with pre-defined ApexCharts config.
   *
   * @module Config
   **/

  var Config = /*#__PURE__*/ (function () {
    function Config(opts) {
      _classCallCheck(this, Config);

      this.opts = opts;
    }

    _createClass(Config, [
      {
        key: 'init',
        value: function init(_ref) {
          var responsiveOverride = _ref.responsiveOverride;
          var opts = this.opts;
          var options = new Options();
          var defaults = new Defaults(opts);
          this.chartType = opts.chart.type;

          if (this.chartType === 'histogram') {
            // technically, a histogram can be drawn by a column chart with no spaces in between
            opts.chart.type = 'bar';
            opts = Utils$1.extend(
              {
                plotOptions: {
                  bar: {
                    columnWidth: '99.99%',
                  },
                },
              },
              opts
            );
          }

          opts = this.extendYAxis(opts);
          opts = this.extendAnnotations(opts);
          var config = options.init();
          var newDefaults = {};

          if (opts && _typeof(opts) === 'object') {
            var chartDefaults = {};
            var chartTypes = [
              'line',
              'area',
              'bar',
              'candlestick',
              'boxPlot',
              'rangeBar',
              'histogram',
              'bubble',
              'scatter',
              'heatmap',
              'treemap',
              'pie',
              'polarArea',
              'donut',
              'radar',
              'radialBar',
            ];

            if (chartTypes.indexOf(opts.chart.type) !== -1) {
              chartDefaults = defaults[opts.chart.type]();
            } else {
              chartDefaults = defaults.line();
            }

            if (opts.chart.brush && opts.chart.brush.enabled) {
              chartDefaults = defaults.brush(chartDefaults);
            }

            if (opts.chart.stacked && opts.chart.stackType === '100%') {
              opts = defaults.stacked100(opts);
            } // If user has specified a dark theme, make the tooltip dark too

            this.checkForDarkTheme(window.Apex); // check global window Apex options

            this.checkForDarkTheme(opts); // check locally passed options

            opts.xaxis = opts.xaxis || window.Apex.xaxis || {}; // an important boolean needs to be set here
            // otherwise all the charts will have this flag set to true window.Apex.xaxis is set globally

            if (!responsiveOverride) {
              opts.xaxis.convertedCatToNumeric = false;
            }

            opts = this.checkForCatToNumericXAxis(this.chartType, chartDefaults, opts);

            if (
              (opts.chart.sparkline && opts.chart.sparkline.enabled) ||
              (window.Apex.chart &&
                window.Apex.chart.sparkline &&
                window.Apex.chart.sparkline.enabled)
            ) {
              chartDefaults = defaults.sparkline(chartDefaults);
            }

            newDefaults = Utils$1.extend(config, chartDefaults);
          } // config should cascade in this fashion
          // default-config < global-apex-variable-config < user-defined-config
          // get GLOBALLY defined options and merge with the default config

          var mergedWithDefaultConfig = Utils$1.extend(newDefaults, window.Apex); // get the merged config and extend with user defined config

          config = Utils$1.extend(mergedWithDefaultConfig, opts); // some features are not supported. those mismatches should be handled

          config = this.handleUserInputErrors(config);
          return config;
        },
      },
      {
        key: 'checkForCatToNumericXAxis',
        value: function checkForCatToNumericXAxis(chartType, chartDefaults, opts) {
          var defaults = new Defaults(opts);
          var isBarHorizontal =
            (chartType === 'bar' || chartType === 'boxPlot') &&
            opts.plotOptions &&
            opts.plotOptions.bar &&
            opts.plotOptions.bar.horizontal;
          var unsupportedZoom =
            chartType === 'pie' ||
            chartType === 'polarArea' ||
            chartType === 'donut' ||
            chartType === 'radar' ||
            chartType === 'radialBar' ||
            chartType === 'heatmap';
          var notNumericXAxis = opts.xaxis.type !== 'datetime' && opts.xaxis.type !== 'numeric';
          var tickPlacement = opts.xaxis.tickPlacement
            ? opts.xaxis.tickPlacement
            : chartDefaults.xaxis && chartDefaults.xaxis.tickPlacement;

          if (
            !isBarHorizontal &&
            !unsupportedZoom &&
            notNumericXAxis &&
            tickPlacement !== 'between'
          ) {
            opts = defaults.convertCatToNumeric(opts);
          }

          return opts;
        },
      },
      {
        key: 'extendYAxis',
        value: function extendYAxis(opts, w) {
          var options = new Options();

          if (
            typeof opts.yaxis === 'undefined' ||
            !opts.yaxis ||
            (Array.isArray(opts.yaxis) && opts.yaxis.length === 0)
          ) {
            opts.yaxis = {};
          } // extend global yaxis config (only if object is provided / not an array)

          if (
            opts.yaxis.constructor !== Array &&
            window.Apex.yaxis &&
            window.Apex.yaxis.constructor !== Array
          ) {
            opts.yaxis = Utils$1.extend(opts.yaxis, window.Apex.yaxis);
          } // as we can't extend nested object's array with extend, we need to do it first
          // user can provide either an array or object in yaxis config

          if (opts.yaxis.constructor !== Array) {
            // convert the yaxis to array if user supplied object
            opts.yaxis = [Utils$1.extend(options.yAxis, opts.yaxis)];
          } else {
            opts.yaxis = Utils$1.extendArray(opts.yaxis, options.yAxis);
          }

          var isLogY = false;
          opts.yaxis.forEach(function (y) {
            if (y.logarithmic) {
              isLogY = true;
            }
          });
          var series = opts.series;

          if (w && !series) {
            series = w.config.series;
          } // A logarithmic chart works correctly when each series has a corresponding y-axis
          // If this is not the case, we manually create yaxis for multi-series log chart

          if (isLogY && series.length !== opts.yaxis.length && series.length) {
            opts.yaxis = series.map(function (s, i) {
              if (!s.name) {
                series[i].name = 'series-'.concat(i + 1);
              }

              if (opts.yaxis[i]) {
                opts.yaxis[i].seriesName = series[i].name;
                return opts.yaxis[i];
              } else {
                var newYaxis = Utils$1.extend(options.yAxis, opts.yaxis[0]);
                newYaxis.show = false;
                return newYaxis;
              }
            });
          }

          if (isLogY && series.length > 1 && series.length !== opts.yaxis.length) {
            console.warn(
              'A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both.'
            );
          }

          return opts;
        }, // annotations also accepts array, so we need to extend them manually
      },
      {
        key: 'extendAnnotations',
        value: function extendAnnotations(opts) {
          if (typeof opts.annotations === 'undefined') {
            opts.annotations = {};
            opts.annotations.yaxis = [];
            opts.annotations.xaxis = [];
            opts.annotations.points = [];
          }

          opts = this.extendYAxisAnnotations(opts);
          opts = this.extendXAxisAnnotations(opts);
          opts = this.extendPointAnnotations(opts);
          return opts;
        },
      },
      {
        key: 'extendYAxisAnnotations',
        value: function extendYAxisAnnotations(opts) {
          var options = new Options();
          opts.annotations.yaxis = Utils$1.extendArray(
            typeof opts.annotations.yaxis !== 'undefined' ? opts.annotations.yaxis : [],
            options.yAxisAnnotation
          );
          return opts;
        },
      },
      {
        key: 'extendXAxisAnnotations',
        value: function extendXAxisAnnotations(opts) {
          var options = new Options();
          opts.annotations.xaxis = Utils$1.extendArray(
            typeof opts.annotations.xaxis !== 'undefined' ? opts.annotations.xaxis : [],
            options.xAxisAnnotation
          );
          return opts;
        },
      },
      {
        key: 'extendPointAnnotations',
        value: function extendPointAnnotations(opts) {
          var options = new Options();
          opts.annotations.points = Utils$1.extendArray(
            typeof opts.annotations.points !== 'undefined' ? opts.annotations.points : [],
            options.pointAnnotation
          );
          return opts;
        },
      },
      {
        key: 'checkForDarkTheme',
        value: function checkForDarkTheme(opts) {
          if (opts.theme && opts.theme.mode === 'dark') {
            if (!opts.tooltip) {
              opts.tooltip = {};
            }

            if (opts.tooltip.theme !== 'light') {
              opts.tooltip.theme = 'dark';
            }

            if (!opts.chart.foreColor) {
              opts.chart.foreColor = '#f6f7f8';
            }

            if (!opts.chart.background) {
              opts.chart.background = '#424242';
            }

            if (!opts.theme.palette) {
              opts.theme.palette = 'palette4';
            }
          }
        },
      },
      {
        key: 'handleUserInputErrors',
        value: function handleUserInputErrors(opts) {
          var config = opts; // conflicting tooltip option. intersect makes sure to focus on 1 point at a time. Shared cannot be used along with it

          if (config.tooltip.shared && config.tooltip.intersect) {
            throw new Error(
              'tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.'
            );
          }

          if (config.chart.type === 'bar' && config.plotOptions.bar.horizontal) {
            // No multiple yaxis for bars
            if (config.yaxis.length > 1) {
              throw new Error(
                'Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false'
              );
            } // if yaxis is reversed in horizontal bar chart, you should draw the y-axis on right side

            if (config.yaxis[0].reversed) {
              config.yaxis[0].opposite = true;
            }

            config.xaxis.tooltip.enabled = false; // no xaxis tooltip for horizontal bar

            config.yaxis[0].tooltip.enabled = false; // no xaxis tooltip for horizontal bar

            config.chart.zoom.enabled = false; // no zooming for horz bars
          }

          if (config.chart.type === 'bar' || config.chart.type === 'rangeBar') {
            if (config.tooltip.shared) {
              if (config.xaxis.crosshairs.width === 'barWidth' && config.series.length > 1) {
                config.xaxis.crosshairs.width = 'tickWidth';
              }
            }
          }

          if (config.chart.type === 'candlestick' || config.chart.type === 'boxPlot') {
            if (config.yaxis[0].reversed) {
              console.warn(
                'Reversed y-axis in '.concat(config.chart.type, ' chart is not supported.')
              );
              config.yaxis[0].reversed = false;
            }
          } // if user supplied array for stroke width, it will only be applicable to line/area charts, for any other charts, revert back to Number

          if (Array.isArray(config.stroke.width)) {
            if (config.chart.type !== 'line' && config.chart.type !== 'area') {
              console.warn(
                'stroke.width option accepts array only for line and area charts. Reverted back to Number'
              );
              config.stroke.width = config.stroke.width[0];
            }
          }

          return config;
        },
      },
    ]);

    return Config;
  })();

  var Globals = /*#__PURE__*/ (function () {
    function Globals() {
      _classCallCheck(this, Globals);
    }

    _createClass(Globals, [
      {
        key: 'initGlobalVars',
        value: function initGlobalVars(gl) {
          gl.series = []; // the MAIN series array (y values)

          gl.seriesCandleO = [];
          gl.seriesCandleH = [];
          gl.seriesCandleM = [];
          gl.seriesCandleL = [];
          gl.seriesCandleC = [];
          gl.seriesRangeStart = [];
          gl.seriesRangeEnd = [];
          gl.seriesRangeBar = [];
          gl.seriesPercent = [];
          gl.seriesGoals = [];
          gl.seriesX = [];
          gl.seriesZ = [];
          gl.seriesNames = [];
          gl.seriesTotals = [];
          gl.seriesLog = [];
          gl.seriesColors = [];
          gl.stackedSeriesTotals = [];
          gl.seriesXvalues = []; // we will need this in tooltip (it's x position)
          // when we will have unequal x values, we will need
          // some way to get x value depending on mouse pointer

          gl.seriesYvalues = []; // we will need this when deciding which series
          // user hovered on

          gl.labels = [];
          gl.categoryLabels = [];
          gl.timescaleLabels = [];
          gl.noLabelsProvided = false;
          gl.resizeTimer = null;
          gl.selectionResizeTimer = null;
          gl.delayedElements = [];
          gl.pointsArray = [];
          gl.dataLabelsRects = [];
          gl.isXNumeric = false;
          gl.xaxisLabelsCount = 0;
          gl.skipLastTimelinelabel = false;
          gl.skipFirstTimelinelabel = false;
          gl.isDataXYZ = false;
          gl.isMultiLineX = false;
          gl.isMultipleYAxis = false;
          gl.maxY = -Number.MAX_VALUE;
          gl.minY = Number.MIN_VALUE;
          gl.minYArr = [];
          gl.maxYArr = [];
          gl.maxX = -Number.MAX_VALUE;
          gl.minX = Number.MAX_VALUE;
          gl.initialMaxX = -Number.MAX_VALUE;
          gl.initialMinX = Number.MAX_VALUE;
          gl.maxDate = 0;
          gl.minDate = Number.MAX_VALUE;
          gl.minZ = Number.MAX_VALUE;
          gl.maxZ = -Number.MAX_VALUE;
          gl.minXDiff = Number.MAX_VALUE;
          gl.yAxisScale = [];
          gl.xAxisScale = null;
          gl.xAxisTicksPositions = [];
          gl.yLabelsCoords = [];
          gl.yTitleCoords = [];
          gl.barPadForNumericAxis = 0;
          gl.padHorizontal = 0;
          gl.xRange = 0;
          gl.yRange = [];
          gl.zRange = 0;
          gl.dataPoints = 0;
          gl.xTickAmount = 0;
        },
      },
      {
        key: 'globalVars',
        value: function globalVars(config) {
          return {
            chartID: null,
            // chart ID - apexcharts-cuid
            cuid: null,
            // chart ID - random numbers excluding "apexcharts" part
            events: {
              beforeMount: [],
              mounted: [],
              updated: [],
              clicked: [],
              selection: [],
              dataPointSelection: [],
              zoomed: [],
              scrolled: [],
            },
            colors: [],
            clientX: null,
            clientY: null,
            fill: {
              colors: [],
            },
            stroke: {
              colors: [],
            },
            dataLabels: {
              style: {
                colors: [],
              },
            },
            radarPolygons: {
              fill: {
                colors: [],
              },
            },
            markers: {
              colors: [],
              size: config.markers.size,
              largestSize: 0,
            },
            animationEnded: false,
            isTouchDevice: 'ontouchstart' in window || navigator.msMaxTouchPoints,
            isDirty: false,
            // chart has been updated after the initial render. This is different than dataChanged property. isDirty means user manually called some method to update
            isExecCalled: false,
            // whether user updated the chart through the exec method
            initialConfig: null,
            // we will store the first config user has set to go back when user finishes interactions like zooming and come out of it
            initialSeries: [],
            lastXAxis: [],
            lastYAxis: [],
            columnSeries: null,
            labels: [],
            // store the text to draw on x axis
            // Don't mutate the labels, many things including tooltips depends on it!
            timescaleLabels: [],
            // store the timescaleLabels Labels in another variable
            noLabelsProvided: false,
            // if user didn't provide any categories/labels or x values, fallback to 1,2,3,4...
            allSeriesCollapsed: false,
            collapsedSeries: [],
            // when user collapses a series, it goes into this array
            collapsedSeriesIndices: [],
            // this stores the index of the collapsedSeries instead of whole object for quick access
            ancillaryCollapsedSeries: [],
            // when user collapses an "alwaysVisible" series, it goes into this array
            ancillaryCollapsedSeriesIndices: [],
            // this stores the index of the ancillaryCollapsedSeries whose y-axis is always visible
            risingSeries: [],
            // when user re-opens a collapsed series, it goes here
            dataFormatXNumeric: false,
            // boolean value to indicate user has passed numeric x values
            capturedSeriesIndex: -1,
            capturedDataPointIndex: -1,
            selectedDataPoints: [],
            goldenPadding: 35,
            // this value is used at a lot of places for spacing purpose
            invalidLogScale: false,
            // if a user enabled log scale but the data provided is not valid to generate a log scale, turn on this flag
            ignoreYAxisIndexes: [],
            // when series are being collapsed in multiple y axes, ignore certain index
            yAxisSameScaleIndices: [],
            maxValsInArrayIndex: 0,
            radialSize: 0,
            selection: undefined,
            zoomEnabled:
              config.chart.toolbar.autoSelected === 'zoom' &&
              config.chart.toolbar.tools.zoom &&
              config.chart.zoom.enabled,
            panEnabled:
              config.chart.toolbar.autoSelected === 'pan' && config.chart.toolbar.tools.pan,
            selectionEnabled:
              config.chart.toolbar.autoSelected === 'selection' &&
              config.chart.toolbar.tools.selection,
            yaxis: null,
            mousedown: false,
            lastClientPosition: {},
            // don't reset this variable this the chart is destroyed. It is used to detect right or left mousemove in panning
            visibleXRange: undefined,
            yValueDecimal: 0,
            // are there floating numbers in the series. If yes, this represent the len of the decimals
            total: 0,
            SVGNS: 'http://www.w3.org/2000/svg',
            // svg namespace
            svgWidth: 0,
            // the whole svg width
            svgHeight: 0,
            // the whole svg height
            noData: false,
            // whether there is any data to display or not
            locale: {},
            // the current locale values will be preserved here for global access
            dom: {},
            // for storing all dom nodes in this particular property
            memory: {
              methodsToExec: [],
            },
            shouldAnimate: true,
            skipLastTimelinelabel: false,
            // when last label is cropped, skip drawing it
            skipFirstTimelinelabel: false,
            // when first label is cropped, skip drawing it
            delayedElements: [],
            // element which appear after animation has finished
            axisCharts: true,
            // chart type = line or area or bar
            // (refer them also as plot charts in the code)
            isDataXYZ: false,
            // bool: data was provided in a {[x,y,z]} pattern
            resized: false,
            // bool: user has resized
            resizeTimer: null,
            // timeout function to make a small delay before
            // drawing when user resized
            comboCharts: false,
            // bool: whether it's a combination of line/column
            dataChanged: false,
            // bool: has data changed dynamically
            previousPaths: [],
            // array: when data is changed, it will animate from
            // previous paths
            allSeriesHasEqualX: true,
            pointsArray: [],
            // store the points positions here to draw later on hover
            // format is - [[x,y],[x,y]... [x,y]]
            dataLabelsRects: [],
            // store the positions of datalabels to prevent collision
            lastDrawnDataLabelsIndexes: [],
            hasNullValues: false,
            // bool: whether series contains null values
            easing: null,
            // function: animation effect to apply
            zoomed: false,
            // whether user has zoomed or not
            gridWidth: 0,
            // drawable width of actual graphs (series paths)
            gridHeight: 0,
            // drawable height of actual graphs (series paths)
            rotateXLabels: false,
            defaultLabels: false,
            xLabelFormatter: undefined,
            // formatter for x axis labels
            yLabelFormatters: [],
            xaxisTooltipFormatter: undefined,
            // formatter for x axis tooltip
            ttKeyFormatter: undefined,
            ttVal: undefined,
            ttZFormatter: undefined,
            LINE_HEIGHT_RATIO: 1.618,
            xAxisLabelsHeight: 0,
            xAxisLabelsWidth: 0,
            yAxisLabelsWidth: 0,
            scaleX: 1,
            scaleY: 1,
            translateX: 0,
            translateY: 0,
            translateYAxisX: [],
            yAxisWidths: [],
            translateXAxisY: 0,
            translateXAxisX: 0,
            tooltip: null,
          };
        },
      },
      {
        key: 'init',
        value: function init(config) {
          var globals = this.globalVars(config);
          this.initGlobalVars(globals);
          globals.initialConfig = Utils$1.extend({}, config);
          globals.initialSeries = Utils$1.clone(config.series);
          globals.lastXAxis = Utils$1.clone(globals.initialConfig.xaxis);
          globals.lastYAxis = Utils$1.clone(globals.initialConfig.yaxis);
          return globals;
        },
      },
    ]);

    return Globals;
  })();

  /**
   * ApexCharts Base Class for extending user options with pre-defined ApexCharts config.
   *
   * @module Base
   **/

  var Base = /*#__PURE__*/ (function () {
    function Base(opts) {
      _classCallCheck(this, Base);

      this.opts = opts;
    }

    _createClass(Base, [
      {
        key: 'init',
        value: function init() {
          var config = new Config(this.opts).init({
            responsiveOverride: false,
          });
          var globals = new Globals().init(config);
          var w = {
            config: config,
            globals: globals,
          };
          return w;
        },
      },
    ]);

    return Base;
  })();

  var Data = /*#__PURE__*/ (function () {
    function Data(ctx) {
      _classCallCheck(this, Data);

      this.ctx = ctx;
      this.w = ctx.w;
      this.twoDSeries = [];
      this.threeDSeries = [];
      this.twoDSeriesX = [];
      this.seriesGoals = [];
      this.coreUtils = new CoreUtils(this.ctx);
    }

    _createClass(Data, [
      {
        key: 'isMultiFormat',
        value: function isMultiFormat() {
          return this.isFormatXY() || this.isFormat2DArray();
        }, // given format is [{x, y}, {x, y}]
      },
      {
        key: 'isFormatXY',
        value: function isFormatXY() {
          var series = this.w.config.series.slice();
          var sr = new Series(this.ctx);
          this.activeSeriesIndex = sr.getActiveConfigSeriesIndex();

          if (
            typeof series[this.activeSeriesIndex].data !== 'undefined' &&
            series[this.activeSeriesIndex].data.length > 0 &&
            series[this.activeSeriesIndex].data[0] !== null &&
            typeof series[this.activeSeriesIndex].data[0].x !== 'undefined' &&
            series[this.activeSeriesIndex].data[0] !== null
          ) {
            return true;
          }
        }, // given format is [[x, y], [x, y]]
      },
      {
        key: 'isFormat2DArray',
        value: function isFormat2DArray() {
          var series = this.w.config.series.slice();
          var sr = new Series(this.ctx);
          this.activeSeriesIndex = sr.getActiveConfigSeriesIndex();

          if (
            typeof series[this.activeSeriesIndex].data !== 'undefined' &&
            series[this.activeSeriesIndex].data.length > 0 &&
            typeof series[this.activeSeriesIndex].data[0] !== 'undefined' &&
            series[this.activeSeriesIndex].data[0] !== null &&
            series[this.activeSeriesIndex].data[0].constructor === Array
          ) {
            return true;
          }
        },
      },
      {
        key: 'handleFormat2DArray',
        value: function handleFormat2DArray(ser, i) {
          var cnf = this.w.config;
          var gl = this.w.globals;
          var isBoxPlot = cnf.chart.type === 'boxPlot' || cnf.series[i].type === 'boxPlot';

          for (var j = 0; j < ser[i].data.length; j++) {
            if (typeof ser[i].data[j][1] !== 'undefined') {
              if (
                Array.isArray(ser[i].data[j][1]) &&
                ser[i].data[j][1].length === 4 &&
                !isBoxPlot
              ) {
                // candlestick nested ohlc format
                this.twoDSeries.push(Utils$1.parseNumber(ser[i].data[j][1][3]));
              } else if (ser[i].data[j].length >= 5) {
                // candlestick non-nested ohlc format
                this.twoDSeries.push(Utils$1.parseNumber(ser[i].data[j][4]));
              } else {
                this.twoDSeries.push(Utils$1.parseNumber(ser[i].data[j][1]));
              }

              gl.dataFormatXNumeric = true;
            }

            if (cnf.xaxis.type === 'datetime') {
              // if timestamps are provided and xaxis type is datetime,
              var ts = new Date(ser[i].data[j][0]);
              ts = new Date(ts).getTime();
              this.twoDSeriesX.push(ts);
            } else {
              this.twoDSeriesX.push(ser[i].data[j][0]);
            }
          }

          for (var _j = 0; _j < ser[i].data.length; _j++) {
            if (typeof ser[i].data[_j][2] !== 'undefined') {
              this.threeDSeries.push(ser[i].data[_j][2]);
              gl.isDataXYZ = true;
            }
          }
        },
      },
      {
        key: 'handleFormatXY',
        value: function handleFormatXY(ser, i) {
          var cnf = this.w.config;
          var gl = this.w.globals;
          var dt = new DateTime(this.ctx);
          var activeI = i;

          if (gl.collapsedSeriesIndices.indexOf(i) > -1) {
            // fix #368
            activeI = this.activeSeriesIndex;
          } // get series

          for (var j = 0; j < ser[i].data.length; j++) {
            if (typeof ser[i].data[j].y !== 'undefined') {
              if (Array.isArray(ser[i].data[j].y)) {
                this.twoDSeries.push(
                  Utils$1.parseNumber(ser[i].data[j].y[ser[i].data[j].y.length - 1])
                );
              } else {
                this.twoDSeries.push(Utils$1.parseNumber(ser[i].data[j].y));
              }
            }

            if (
              typeof ser[i].data[j].goals !== 'undefined' &&
              Array.isArray(ser[i].data[j].goals)
            ) {
              if (typeof this.seriesGoals[i] === 'undefined') {
                this.seriesGoals[i] = [];
              }

              this.seriesGoals[i].push(ser[i].data[j].goals);
            } else {
              if (typeof this.seriesGoals[i] === 'undefined') {
                this.seriesGoals[i] = [];
              }

              this.seriesGoals[i].push(null);
            }
          } // get seriesX

          for (var _j2 = 0; _j2 < ser[activeI].data.length; _j2++) {
            var isXString = typeof ser[activeI].data[_j2].x === 'string';
            var isXArr = Array.isArray(ser[activeI].data[_j2].x);
            var isXDate = !isXArr && !!dt.isValidDate(ser[activeI].data[_j2].x.toString());

            if (isXString || isXDate) {
              // user supplied '01/01/2017' or a date string (a JS date object is not supported)
              if (isXString || cnf.xaxis.convertedCatToNumeric) {
                var isRangeColumn = gl.isBarHorizontal && gl.isRangeData;

                if (cnf.xaxis.type === 'datetime' && !isRangeColumn) {
                  this.twoDSeriesX.push(dt.parseDate(ser[activeI].data[_j2].x));
                } else {
                  // a category and not a numeric x value
                  this.fallbackToCategory = true;
                  this.twoDSeriesX.push(ser[activeI].data[_j2].x);
                }
              } else {
                if (cnf.xaxis.type === 'datetime') {
                  this.twoDSeriesX.push(dt.parseDate(ser[activeI].data[_j2].x.toString()));
                } else {
                  gl.dataFormatXNumeric = true;
                  gl.isXNumeric = true;
                  this.twoDSeriesX.push(parseFloat(ser[activeI].data[_j2].x));
                }
              }
            } else if (isXArr) {
              // a multiline label described in array format
              this.fallbackToCategory = true;
              this.twoDSeriesX.push(ser[activeI].data[_j2].x);
            } else {
              // a numeric value in x property
              gl.isXNumeric = true;
              gl.dataFormatXNumeric = true;
              this.twoDSeriesX.push(ser[activeI].data[_j2].x);
            }
          }

          if (ser[i].data[0] && typeof ser[i].data[0].z !== 'undefined') {
            for (var t = 0; t < ser[i].data.length; t++) {
              this.threeDSeries.push(ser[i].data[t].z);
            }

            gl.isDataXYZ = true;
          }
        },
      },
      {
        key: 'handleRangeData',
        value: function handleRangeData(ser, i) {
          var gl = this.w.globals;
          var range = {};

          if (this.isFormat2DArray()) {
            range = this.handleRangeDataFormat('array', ser, i);
          } else if (this.isFormatXY()) {
            range = this.handleRangeDataFormat('xy', ser, i);
          }

          gl.seriesRangeStart.push(range.start);
          gl.seriesRangeEnd.push(range.end);
          gl.seriesRangeBar.push(range.rangeUniques); // check for overlaps to avoid clashes in a timeline chart

          gl.seriesRangeBar.forEach(function (sr, si) {
            if (sr) {
              sr.forEach(function (sarr, sarri) {
                sarr.y.forEach(function (arr, arri) {
                  for (var sri = 0; sri < sarr.y.length; sri++) {
                    if (arri !== sri) {
                      var range1y1 = arr.y1;
                      var range1y2 = arr.y2;
                      var range2y1 = sarr.y[sri].y1;
                      var range2y2 = sarr.y[sri].y2;

                      if (range1y1 <= range2y2 && range2y1 <= range1y2) {
                        if (sarr.overlaps.indexOf(arr.rangeName) < 0) {
                          sarr.overlaps.push(arr.rangeName);
                        }

                        if (sarr.overlaps.indexOf(sarr.y[sri].rangeName) < 0) {
                          sarr.overlaps.push(sarr.y[sri].rangeName);
                        }
                      }
                    }
                  }
                });
              });
            }
          });
          return range;
        },
      },
      {
        key: 'handleCandleStickBoxData',
        value: function handleCandleStickBoxData(ser, i) {
          var gl = this.w.globals;
          var ohlc = {};

          if (this.isFormat2DArray()) {
            ohlc = this.handleCandleStickBoxDataFormat('array', ser, i);
          } else if (this.isFormatXY()) {
            ohlc = this.handleCandleStickBoxDataFormat('xy', ser, i);
          }

          gl.seriesCandleO[i] = ohlc.o;
          gl.seriesCandleH[i] = ohlc.h;
          gl.seriesCandleM[i] = ohlc.m;
          gl.seriesCandleL[i] = ohlc.l;
          gl.seriesCandleC[i] = ohlc.c;
          return ohlc;
        },
      },
      {
        key: 'handleRangeDataFormat',
        value: function handleRangeDataFormat(format, ser, i) {
          var rangeStart = [];
          var rangeEnd = [];
          var uniqueKeys = ser[i].data
            .filter(function (thing, index, self) {
              return (
                index ===
                self.findIndex(function (t) {
                  return t.x === thing.x;
                })
              );
            })
            .map(function (r, index) {
              return {
                x: r.x,
                overlaps: [],
                y: [],
              };
            });
          var err =
            'Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts';
          var serObj = new Series(this.ctx);
          var activeIndex = serObj.getActiveConfigSeriesIndex();

          if (format === 'array') {
            if (ser[activeIndex].data[0][1].length !== 2) {
              throw new Error(err);
            }

            for (var j = 0; j < ser[i].data.length; j++) {
              rangeStart.push(ser[i].data[j][1][0]);
              rangeEnd.push(ser[i].data[j][1][1]);
            }
          } else if (format === 'xy') {
            if (ser[activeIndex].data[0].y.length !== 2) {
              throw new Error(err);
            }

            var _loop = function _loop(_j3) {
              var id = Utils$1.randomId();
              var x = ser[i].data[_j3].x;
              var y = {
                y1: ser[i].data[_j3].y[0],
                y2: ser[i].data[_j3].y[1],
                rangeName: id,
              }; // mutating config object by adding a new property
              // TODO: As this is specifically for timeline rangebar charts, update the docs mentioning the series only supports xy format

              ser[i].data[_j3].rangeName = id;
              var uI = uniqueKeys.findIndex(function (t) {
                return t.x === x;
              });
              uniqueKeys[uI].y.push(y);
              rangeStart.push(y.y1);
              rangeEnd.push(y.y2);
            };

            for (var _j3 = 0; _j3 < ser[i].data.length; _j3++) {
              _loop(_j3);
            }
          }

          return {
            start: rangeStart,
            end: rangeEnd,
            rangeUniques: uniqueKeys,
          };
        },
      },
      {
        key: 'handleCandleStickBoxDataFormat',
        value: function handleCandleStickBoxDataFormat(format, ser, i) {
          var w = this.w;
          var isBoxPlot =
            w.config.chart.type === 'boxPlot' || w.config.series[i].type === 'boxPlot';
          var serO = [];
          var serH = [];
          var serM = [];
          var serL = [];
          var serC = [];

          if (format === 'array') {
            if (
              (isBoxPlot && ser[i].data[0].length === 6) ||
              (!isBoxPlot && ser[i].data[0].length === 5)
            ) {
              for (var j = 0; j < ser[i].data.length; j++) {
                serO.push(ser[i].data[j][1]);
                serH.push(ser[i].data[j][2]);

                if (isBoxPlot) {
                  serM.push(ser[i].data[j][3]);
                  serL.push(ser[i].data[j][4]);
                  serC.push(ser[i].data[j][5]);
                } else {
                  serL.push(ser[i].data[j][3]);
                  serC.push(ser[i].data[j][4]);
                }
              }
            } else {
              for (var _j4 = 0; _j4 < ser[i].data.length; _j4++) {
                if (Array.isArray(ser[i].data[_j4][1])) {
                  serO.push(ser[i].data[_j4][1][0]);
                  serH.push(ser[i].data[_j4][1][1]);

                  if (isBoxPlot) {
                    serM.push(ser[i].data[_j4][1][2]);
                    serL.push(ser[i].data[_j4][1][3]);
                    serC.push(ser[i].data[_j4][1][4]);
                  } else {
                    serL.push(ser[i].data[_j4][1][2]);
                    serC.push(ser[i].data[_j4][1][3]);
                  }
                }
              }
            }
          } else if (format === 'xy') {
            for (var _j5 = 0; _j5 < ser[i].data.length; _j5++) {
              if (Array.isArray(ser[i].data[_j5].y)) {
                serO.push(ser[i].data[_j5].y[0]);
                serH.push(ser[i].data[_j5].y[1]);

                if (isBoxPlot) {
                  serM.push(ser[i].data[_j5].y[2]);
                  serL.push(ser[i].data[_j5].y[3]);
                  serC.push(ser[i].data[_j5].y[4]);
                } else {
                  serL.push(ser[i].data[_j5].y[2]);
                  serC.push(ser[i].data[_j5].y[3]);
                }
              }
            }
          }

          return {
            o: serO,
            h: serH,
            m: serM,
            l: serL,
            c: serC,
          };
        },
      },
      {
        key: 'parseDataAxisCharts',
        value: function parseDataAxisCharts(ser) {
          var _this = this;

          var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.ctx;
          var cnf = this.w.config;
          var gl = this.w.globals;
          var dt = new DateTime(ctx);
          var xlabels = cnf.labels.length > 0 ? cnf.labels.slice() : cnf.xaxis.categories.slice();
          gl.isRangeBar = cnf.chart.type === 'rangeBar' && gl.isBarHorizontal;

          var handleDates = function handleDates() {
            for (var j = 0; j < xlabels.length; j++) {
              if (typeof xlabels[j] === 'string') {
                // user provided date strings
                var isDate = dt.isValidDate(xlabels[j]);

                if (isDate) {
                  _this.twoDSeriesX.push(dt.parseDate(xlabels[j]));
                } else {
                  throw new Error(
                    'You have provided invalid Date format. Please provide a valid JavaScript Date'
                  );
                }
              } else {
                // user provided timestamps
                _this.twoDSeriesX.push(xlabels[j]);
              }
            }
          };

          for (var i = 0; i < ser.length; i++) {
            this.twoDSeries = [];
            this.twoDSeriesX = [];
            this.threeDSeries = [];

            if (typeof ser[i].data === 'undefined') {
              console.error(
                "It is a possibility that you may have not included 'data' property in series."
              );
              return;
            }

            if (
              cnf.chart.type === 'rangeBar' ||
              cnf.chart.type === 'rangeArea' ||
              ser[i].type === 'rangeBar' ||
              ser[i].type === 'rangeArea'
            ) {
              gl.isRangeData = true;
              this.handleRangeData(ser, i);
            }

            if (this.isMultiFormat()) {
              if (this.isFormat2DArray()) {
                this.handleFormat2DArray(ser, i);
              } else if (this.isFormatXY()) {
                this.handleFormatXY(ser, i);
              }

              if (
                cnf.chart.type === 'candlestick' ||
                ser[i].type === 'candlestick' ||
                cnf.chart.type === 'boxPlot' ||
                ser[i].type === 'boxPlot'
              ) {
                this.handleCandleStickBoxData(ser, i);
              }

              gl.series.push(this.twoDSeries);
              gl.labels.push(this.twoDSeriesX);
              gl.seriesX.push(this.twoDSeriesX);
              gl.seriesGoals = this.seriesGoals;

              if (i === this.activeSeriesIndex && !this.fallbackToCategory) {
                gl.isXNumeric = true;
              }
            } else {
              if (cnf.xaxis.type === 'datetime') {
                // user didn't supplied [{x,y}] or [[x,y]], but single array in data.
                // Also labels/categories were supplied differently
                gl.isXNumeric = true;
                handleDates();
                gl.seriesX.push(this.twoDSeriesX);
              } else if (cnf.xaxis.type === 'numeric') {
                gl.isXNumeric = true;

                if (xlabels.length > 0) {
                  this.twoDSeriesX = xlabels;
                  gl.seriesX.push(this.twoDSeriesX);
                }
              }

              gl.labels.push(this.twoDSeriesX);
              var singleArray = ser[i].data.map(function (d) {
                return Utils$1.parseNumber(d);
              });
              gl.series.push(singleArray);
            }

            gl.seriesZ.push(this.threeDSeries);

            if (ser[i].name !== undefined) {
              gl.seriesNames.push(ser[i].name);
            } else {
              gl.seriesNames.push('series-' + parseInt(i + 1, 10));
            } // overrided default color if user inputs color with series data

            if (ser[i].color !== undefined) {
              gl.seriesColors.push(ser[i].color);
            } else {
              gl.seriesColors.push(undefined);
            }
          }

          return this.w;
        },
      },
      {
        key: 'parseDataNonAxisCharts',
        value: function parseDataNonAxisCharts(ser) {
          var gl = this.w.globals;
          var cnf = this.w.config;
          gl.series = ser.slice();
          gl.seriesNames = cnf.labels.slice();

          for (var i = 0; i < gl.series.length; i++) {
            if (gl.seriesNames[i] === undefined) {
              gl.seriesNames.push('series-' + (i + 1));
            }
          }

          return this.w;
        },
        /** User possibly set string categories in xaxis.categories or labels prop
         * Or didn't set xaxis labels at all - in which case we manually do it.
         * If user passed series data as [[3, 2], [4, 5]] or [{ x: 3, y: 55 }],
         * this shouldn't be called
         * @param {array} ser - the series which user passed to the config
         */
      },
      {
        key: 'handleExternalLabelsData',
        value: function handleExternalLabelsData(ser) {
          var cnf = this.w.config;
          var gl = this.w.globals;

          if (cnf.xaxis.categories.length > 0) {
            // user provided labels in xaxis.category prop
            gl.labels = cnf.xaxis.categories;
          } else if (cnf.labels.length > 0) {
            // user provided labels in labels props
            gl.labels = cnf.labels.slice();
          } else if (this.fallbackToCategory) {
            // user provided labels in x prop in [{ x: 3, y: 55 }] data, and those labels are already stored in gl.labels[0], so just re-arrange the gl.labels array
            gl.labels = gl.labels[0];

            if (gl.seriesRangeBar.length) {
              gl.seriesRangeBar.map(function (srt) {
                srt.forEach(function (sr) {
                  if (gl.labels.indexOf(sr.x) < 0 && sr.x) {
                    gl.labels.push(sr.x);
                  }
                });
              });
              gl.labels = gl.labels.filter(function (elem, pos, arr) {
                return arr.indexOf(elem) === pos;
              });
            }

            if (cnf.xaxis.convertedCatToNumeric) {
              var defaults = new Defaults(cnf);
              defaults.convertCatToNumericXaxis(cnf, this.ctx, gl.seriesX[0]);

              this._generateExternalLabels(ser);
            }
          } else {
            this._generateExternalLabels(ser);
          }
        },
      },
      {
        key: '_generateExternalLabels',
        value: function _generateExternalLabels(ser) {
          var gl = this.w.globals;
          var cnf = this.w.config; // user didn't provided any labels, fallback to 1-2-3-4-5

          var labelArr = [];

          if (gl.axisCharts) {
            if (gl.series.length > 0) {
              for (var i = 0; i < gl.series[gl.maxValsInArrayIndex].length; i++) {
                labelArr.push(i + 1);
              }
            }

            gl.seriesX = []; // create gl.seriesX as it will be used in calculations of x positions

            for (var _i = 0; _i < ser.length; _i++) {
              gl.seriesX.push(labelArr);
            } // turn on the isXNumeric flag to allow minX and maxX to function properly

            gl.isXNumeric = true;
          } // no series to pull labels from, put a 0-10 series
          // possibly, user collapsed all series. Hence we can't work with above calc

          if (labelArr.length === 0) {
            labelArr = gl.axisCharts
              ? []
              : gl.series.map(function (gls, glsi) {
                  return glsi + 1;
                });

            for (var _i2 = 0; _i2 < ser.length; _i2++) {
              gl.seriesX.push(labelArr);
            }
          } // Finally, pass the labelArr in gl.labels which will be printed on x-axis

          gl.labels = labelArr;

          if (cnf.xaxis.convertedCatToNumeric) {
            gl.categoryLabels = labelArr.map(function (l) {
              return cnf.xaxis.labels.formatter(l);
            });
          } // Turn on this global flag to indicate no labels were provided by user

          gl.noLabelsProvided = true;
        }, // Segregate user provided data into appropriate vars
      },
      {
        key: 'parseData',
        value: function parseData(ser) {
          var w = this.w;
          var cnf = w.config;
          var gl = w.globals;
          this.excludeCollapsedSeriesInYAxis(); // If we detected string in X prop of series, we fallback to category x-axis

          this.fallbackToCategory = false;
          this.ctx.core.resetGlobals();
          this.ctx.core.isMultipleY();

          if (gl.axisCharts) {
            // axisCharts includes line / area / column / scatter
            this.parseDataAxisCharts(ser);
          } else {
            // non-axis charts are pie / donut
            this.parseDataNonAxisCharts(ser);
          }

          this.coreUtils.getLargestSeries(); // set Null values to 0 in all series when user hides/shows some series

          if (cnf.chart.type === 'bar' && cnf.chart.stacked) {
            var series = new Series(this.ctx);
            gl.series = series.setNullSeriesToZeroValues(gl.series);
          }

          this.coreUtils.getSeriesTotals();

          if (gl.axisCharts) {
            this.coreUtils.getStackedSeriesTotals();
          }

          this.coreUtils.getPercentSeries();

          if (
            !gl.dataFormatXNumeric &&
            (!gl.isXNumeric ||
              (cnf.xaxis.type === 'numeric' &&
                cnf.labels.length === 0 &&
                cnf.xaxis.categories.length === 0))
          ) {
            // x-axis labels couldn't be detected; hence try searching every option in config
            this.handleExternalLabelsData(ser);
          } // check for multiline xaxis

          var catLabels = this.coreUtils.getCategoryLabels(gl.labels);

          for (var l = 0; l < catLabels.length; l++) {
            if (Array.isArray(catLabels[l])) {
              gl.isMultiLineX = true;
              break;
            }
          }
        },
      },
      {
        key: 'excludeCollapsedSeriesInYAxis',
        value: function excludeCollapsedSeriesInYAxis() {
          var _this2 = this;

          var w = this.w;
          w.globals.ignoreYAxisIndexes = w.globals.collapsedSeries.map(function (collapsed, i) {
            // fix issue #1215
            // if stacked, not returning collapsed.index to preserve yaxis
            if (_this2.w.globals.isMultipleYAxis && !w.config.chart.stacked) {
              return collapsed.index;
            }
          });
        },
      },
    ]);

    return Data;
  })();

  /**
   * ApexCharts Formatter Class for setting value formatters for axes as well as tooltips.
   *
   * @module Formatters
   **/

  var Formatters = /*#__PURE__*/ (function () {
    function Formatters(ctx) {
      _classCallCheck(this, Formatters);

      this.ctx = ctx;
      this.w = ctx.w;
      this.tooltipKeyFormat = 'dd MMM';
    }

    _createClass(Formatters, [
      {
        key: 'xLabelFormat',
        value: function xLabelFormat(fn, val, timestamp, opts) {
          var w = this.w;

          if (w.config.xaxis.type === 'datetime') {
            if (w.config.xaxis.labels.formatter === undefined) {
              // if user has not specified a custom formatter, use the default tooltip.x.format
              if (w.config.tooltip.x.formatter === undefined) {
                var datetimeObj = new DateTime(this.ctx);
                return datetimeObj.formatDate(datetimeObj.getDate(val), w.config.tooltip.x.format);
              }
            }
          }

          return fn(val, timestamp, opts);
        },
      },
      {
        key: 'defaultGeneralFormatter',
        value: function defaultGeneralFormatter(val) {
          if (Array.isArray(val)) {
            return val.map(function (v) {
              return v;
            });
          } else {
            return val;
          }
        },
      },
      {
        key: 'defaultYFormatter',
        value: function defaultYFormatter(v, yaxe, i) {
          var w = this.w;

          if (Utils$1.isNumber(v)) {
            if (w.globals.yValueDecimal !== 0) {
              v = v.toFixed(
                yaxe.decimalsInFloat !== undefined ? yaxe.decimalsInFloat : w.globals.yValueDecimal
              );
            } else if (w.globals.maxYArr[i] - w.globals.minYArr[i] < 5) {
              v = v.toFixed(1);
            } else {
              v = v.toFixed(0);
            }
          }

          return v;
        },
      },
      {
        key: 'setLabelFormatters',
        value: function setLabelFormatters() {
          var _this = this;

          var w = this.w;

          w.globals.xaxisTooltipFormatter = function (val) {
            return _this.defaultGeneralFormatter(val);
          };

          w.globals.ttKeyFormatter = function (val) {
            return _this.defaultGeneralFormatter(val);
          };

          w.globals.ttZFormatter = function (val) {
            return val;
          };

          w.globals.legendFormatter = function (val) {
            return _this.defaultGeneralFormatter(val);
          }; // formatter function will always overwrite format property

          if (w.config.xaxis.labels.formatter !== undefined) {
            w.globals.xLabelFormatter = w.config.xaxis.labels.formatter;
          } else {
            w.globals.xLabelFormatter = function (val) {
              if (Utils$1.isNumber(val)) {
                if (!w.config.xaxis.convertedCatToNumeric && w.config.xaxis.type === 'numeric') {
                  if (Utils$1.isNumber(w.config.xaxis.decimalsInFloat)) {
                    return val.toFixed(w.config.xaxis.decimalsInFloat);
                  } else {
                    var diff = w.globals.maxX - w.globals.minX;

                    if (diff > 0 && diff < 100) {
                      return val.toFixed(1);
                    }

                    return val.toFixed(0);
                  }
                }

                if (w.globals.isBarHorizontal) {
                  var range = w.globals.maxY - w.globals.minYArr;

                  if (range < 4) {
                    return val.toFixed(1);
                  }
                }

                return val.toFixed(0);
              }

              return val;
            };
          }

          if (typeof w.config.tooltip.x.formatter === 'function') {
            w.globals.ttKeyFormatter = w.config.tooltip.x.formatter;
          } else {
            w.globals.ttKeyFormatter = w.globals.xLabelFormatter;
          }

          if (typeof w.config.xaxis.tooltip.formatter === 'function') {
            w.globals.xaxisTooltipFormatter = w.config.xaxis.tooltip.formatter;
          }

          if (Array.isArray(w.config.tooltip.y)) {
            w.globals.ttVal = w.config.tooltip.y;
          } else {
            if (w.config.tooltip.y.formatter !== undefined) {
              w.globals.ttVal = w.config.tooltip.y;
            }
          }

          if (w.config.tooltip.z.formatter !== undefined) {
            w.globals.ttZFormatter = w.config.tooltip.z.formatter;
          } // legend formatter - if user wants to append any global values of series to legend text

          if (w.config.legend.formatter !== undefined) {
            w.globals.legendFormatter = w.config.legend.formatter;
          } // formatter function will always overwrite format property

          w.config.yaxis.forEach(function (yaxe, i) {
            if (yaxe.labels.formatter !== undefined) {
              w.globals.yLabelFormatters[i] = yaxe.labels.formatter;
            } else {
              w.globals.yLabelFormatters[i] = function (val) {
                if (!w.globals.xyCharts) return val;

                if (Array.isArray(val)) {
                  return val.map(function (v) {
                    return _this.defaultYFormatter(v, yaxe, i);
                  });
                } else {
                  return _this.defaultYFormatter(val, yaxe, i);
                }
              };
            }
          });
          return w.globals;
        },
      },
      {
        key: 'heatmapLabelFormatters',
        value: function heatmapLabelFormatters() {
          var w = this.w;

          if (w.config.chart.type === 'heatmap') {
            w.globals.yAxisScale[0].result = w.globals.seriesNames.slice(); //  get the longest string from the labels array and also apply label formatter to it

            var longest = w.globals.seriesNames.reduce(function (a, b) {
              return a.length > b.length ? a : b;
            }, 0);
            w.globals.yAxisScale[0].niceMax = longest;
            w.globals.yAxisScale[0].niceMin = longest;
          }
        },
      },
    ]);

    return Formatters;
  })();

  var AxesUtils = /*#__PURE__*/ (function () {
    function AxesUtils(ctx) {
      _classCallCheck(this, AxesUtils);

      this.ctx = ctx;
      this.w = ctx.w;
    } // Based on the formatter function, get the label text and position

    _createClass(AxesUtils, [
      {
        key: 'getLabel',
        value: function getLabel(labels, timescaleLabels, x, i) {
          var drawnLabels = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
          var fontSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '12px';
          var w = this.w;
          var rawLabel = typeof labels[i] === 'undefined' ? '' : labels[i];
          var label = rawLabel;
          var xlbFormatter = w.globals.xLabelFormatter;
          var customFormatter = w.config.xaxis.labels.formatter;
          var isBold = false;
          var xFormat = new Formatters(this.ctx);
          var timestamp = rawLabel;
          label = xFormat.xLabelFormat(xlbFormatter, rawLabel, timestamp, {
            i: i,
            dateFormatter: new DateTime(this.ctx).formatDate,
            w: w,
          });

          if (customFormatter !== undefined) {
            label = customFormatter(rawLabel, labels[i], {
              i: i,
              dateFormatter: new DateTime(this.ctx).formatDate,
              w: w,
            });
          }

          var determineHighestUnit = function determineHighestUnit(unit) {
            var highestUnit = null;
            timescaleLabels.forEach(function (t) {
              if (t.unit === 'month') {
                highestUnit = 'year';
              } else if (t.unit === 'day') {
                highestUnit = 'month';
              } else if (t.unit === 'hour') {
                highestUnit = 'day';
              } else if (t.unit === 'minute') {
                highestUnit = 'hour';
              }
            });
            return highestUnit === unit;
          };

          if (timescaleLabels.length > 0) {
            isBold = determineHighestUnit(timescaleLabels[i].unit);
            x = timescaleLabels[i].position;
            label = timescaleLabels[i].value;
          } else {
            if (w.config.xaxis.type === 'datetime' && customFormatter === undefined) {
              label = '';
            }
          }

          if (typeof label === 'undefined') label = '';
          label = Array.isArray(label) ? label : label.toString();
          var graphics = new Graphics(this.ctx);
          var textRect = {};

          if (w.globals.rotateXLabels) {
            textRect = graphics.getTextRects(
              label,
              parseInt(fontSize, 10),
              null,
              'rotate('.concat(w.config.xaxis.labels.rotate, ' 0 0)'),
              false
            );
          } else {
            textRect = graphics.getTextRects(label, parseInt(fontSize, 10));
          }

          var allowDuplicatesInTimeScale =
            !w.config.xaxis.labels.showDuplicates && this.ctx.timeScale;

          if (
            !Array.isArray(label) &&
            (label.indexOf('NaN') === 0 ||
              label.toLowerCase().indexOf('invalid') === 0 ||
              label.toLowerCase().indexOf('infinity') >= 0 ||
              (drawnLabels.indexOf(label) >= 0 && allowDuplicatesInTimeScale))
          ) {
            label = '';
          }

          return {
            x: x,
            text: label,
            textRect: textRect,
            isBold: isBold,
          };
        },
      },
      {
        key: 'checkLabelBasedOnTickamount',
        value: function checkLabelBasedOnTickamount(i, label, labelsLen) {
          var w = this.w;
          var ticks = w.config.xaxis.tickAmount;
          if (ticks === 'dataPoints') ticks = Math.round(w.globals.gridWidth / 120);
          if (ticks > labelsLen) return label;
          var tickMultiple = Math.round(labelsLen / (ticks + 1));

          if (i % tickMultiple === 0) {
            return label;
          } else {
            label.text = '';
          }

          return label;
        },
      },
      {
        key: 'checkForOverflowingLabels',
        value: function checkForOverflowingLabels(
          i,
          label,
          labelsLen,
          drawnLabels,
          drawnLabelsRects
        ) {
          var w = this.w;

          if (i === 0) {
            // check if first label is being truncated
            if (w.globals.skipFirstTimelinelabel) {
              label.text = '';
            }
          }

          if (i === labelsLen - 1) {
            // check if last label is being truncated
            if (w.globals.skipLastTimelinelabel) {
              label.text = '';
            }
          }

          if (w.config.xaxis.labels.hideOverlappingLabels && drawnLabels.length > 0) {
            var prev = drawnLabelsRects[drawnLabelsRects.length - 1];

            if (
              label.x <
              prev.textRect.width /
                (w.globals.rotateXLabels ? Math.abs(w.config.xaxis.labels.rotate) / 12 : 1.01) +
                prev.x
            ) {
              label.text = '';
            }
          }

          return label;
        },
      },
      {
        key: 'checkForReversedLabels',
        value: function checkForReversedLabels(i, labels) {
          var w = this.w;

          if (w.config.yaxis[i] && w.config.yaxis[i].reversed) {
            labels.reverse();
          }

          return labels;
        },
      },
      {
        key: 'isYAxisHidden',
        value: function isYAxisHidden(index) {
          var w = this.w;
          var coreUtils = new CoreUtils(this.ctx);
          return (
            !w.config.yaxis[index].show ||
            (!w.config.yaxis[index].showForNullSeries &&
              coreUtils.isSeriesNull(index) &&
              w.globals.collapsedSeriesIndices.indexOf(index) === -1)
          );
        }, // get the label color for y-axis
        // realIndex is the actual series index, while i is the tick Index
      },
      {
        key: 'getYAxisForeColor',
        value: function getYAxisForeColor(yColors, realIndex) {
          var w = this.w;

          if (Array.isArray(yColors) && w.globals.yAxisScale[realIndex]) {
            this.ctx.theme.pushExtraColors(
              yColors,
              w.globals.yAxisScale[realIndex].result.length,
              false
            );
          }

          return yColors;
        },
      },
      {
        key: 'drawYAxisTicks',
        value: function drawYAxisTicks(
          x,
          tickAmount,
          axisBorder,
          axisTicks,
          realIndex,
          labelsDivider,
          elYaxis
        ) {
          var w = this.w;
          var graphics = new Graphics(this.ctx); // initial label position = 0;

          var t = w.globals.translateY;

          if (axisTicks.show && tickAmount > 0) {
            if (w.config.yaxis[realIndex].opposite === true) x = x + axisTicks.width;

            for (var i = tickAmount; i >= 0; i--) {
              var tY = t + tickAmount / 10 + w.config.yaxis[realIndex].labels.offsetY - 1;

              if (w.globals.isBarHorizontal) {
                tY = labelsDivider * i;
              }

              if (w.config.chart.type === 'heatmap') {
                tY = tY + labelsDivider / 2;
              }

              var elTick = graphics.drawLine(
                x + axisBorder.offsetX - axisTicks.width + axisTicks.offsetX,
                tY + axisTicks.offsetY,
                x + axisBorder.offsetX + axisTicks.offsetX,
                tY + axisTicks.offsetY,
                axisTicks.color
              );
              elYaxis.add(elTick);
              t = t + labelsDivider;
            }
          }
        },
      },
    ]);

    return AxesUtils;
  })();

  var Exports = /*#__PURE__*/ (function () {
    function Exports(ctx) {
      _classCallCheck(this, Exports);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(Exports, [
      {
        key: 'scaleSvgNode',
        value: function scaleSvgNode(svg, scale) {
          // get current both width and height of the svg
          var svgWidth = parseFloat(svg.getAttributeNS(null, 'width'));
          var svgHeight = parseFloat(svg.getAttributeNS(null, 'height')); // set new width and height based on the scale

          svg.setAttributeNS(null, 'width', svgWidth * scale);
          svg.setAttributeNS(null, 'height', svgHeight * scale);
          svg.setAttributeNS(null, 'viewBox', '0 0 ' + svgWidth + ' ' + svgHeight);
        },
      },
      {
        key: 'fixSvgStringForIe11',
        value: function fixSvgStringForIe11(svgData) {
          // IE11 generates broken SVG that we have to fix by using regex
          if (!Utils$1.isIE11()) {
            // not IE11 - noop
            return svgData.replace(/&nbsp;/g, '&#160;');
          } // replace second occurrence of "xmlns" attribute with "xmlns:xlink" with correct url + add xmlns:svgjs

          var nXmlnsSeen = 0;
          var result = svgData.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, function (match) {
            nXmlnsSeen++;
            return nXmlnsSeen === 2
              ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"'
              : match;
          }); // remove the invalid empty namespace declarations

          result = result.replace(/xmlns:NS\d+=""/g, ''); // remove these broken namespaces from attributes

          result = result.replace(/NS\d+:(\w+:\w+=")/g, '$1');
          return result;
        },
      },
      {
        key: 'getSvgString',
        value: function getSvgString(scale) {
          var svgString = this.w.globals.dom.Paper.svg(); // in case the scale is different than 1, the svg needs to be rescaled

          if (scale !== 1) {
            // clone the svg node so it remains intact in the UI
            var svgNode = this.w.globals.dom.Paper.node.cloneNode(true); // scale the image

            this.scaleSvgNode(svgNode, scale); // get the string representation of the svgNode

            svgString = new XMLSerializer().serializeToString(svgNode);
          }

          return this.fixSvgStringForIe11(svgString);
        },
      },
      {
        key: 'cleanup',
        value: function cleanup() {
          var w = this.w; // hide some elements to avoid printing them on exported svg

          var xcrosshairs = w.globals.dom.baseEl.getElementsByClassName('apexcharts-xcrosshairs');
          var ycrosshairs = w.globals.dom.baseEl.getElementsByClassName('apexcharts-ycrosshairs');
          var zoomSelectionRects = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-zoom-rect, .apexcharts-selection-rect'
          );
          Array.prototype.forEach.call(zoomSelectionRects, function (z) {
            z.setAttribute('width', 0);
          });

          if (xcrosshairs && xcrosshairs[0]) {
            xcrosshairs[0].setAttribute('x', -500);
            xcrosshairs[0].setAttribute('x1', -500);
            xcrosshairs[0].setAttribute('x2', -500);
          }

          if (ycrosshairs && ycrosshairs[0]) {
            ycrosshairs[0].setAttribute('y', -100);
            ycrosshairs[0].setAttribute('y1', -100);
            ycrosshairs[0].setAttribute('y2', -100);
          }
        },
      },
      {
        key: 'svgUrl',
        value: function svgUrl() {
          this.cleanup();
          var svgData = this.getSvgString();
          var svgBlob = new Blob([svgData], {
            type: 'image/svg+xml;charset=utf-8',
          });
          return URL.createObjectURL(svgBlob);
        },
      },
      {
        key: 'dataURI',
        value: function dataURI(options) {
          var _this = this;

          return new Promise(function (resolve) {
            var w = _this.w;
            var scale = options ? options.scale || options.width / w.globals.svgWidth : 1;

            _this.cleanup();

            var canvas = document.createElement('canvas');
            canvas.width = w.globals.svgWidth * scale;
            canvas.height = parseInt(w.globals.dom.elWrap.style.height, 10) * scale; // because of resizeNonAxisCharts

            var canvasBg =
              w.config.chart.background === 'transparent' ? '#fff' : w.config.chart.background;
            var ctx = canvas.getContext('2d');
            ctx.fillStyle = canvasBg;
            ctx.fillRect(0, 0, canvas.width * scale, canvas.height * scale);

            var svgData = _this.getSvgString(scale);

            if (window.canvg && Utils$1.isIE11()) {
              // use canvg as a polyfill to workaround ie11 considering a canvas with loaded svg 'unsafe'
              // without ignoreClear we lose our background color; without ignoreDimensions some grid lines become invisible
              var v = window.canvg.Canvg.fromString(ctx, svgData, {
                ignoreClear: true,
                ignoreDimensions: true,
              }); // render the svg to canvas

              v.start();
              var blob = canvas.msToBlob(); // dispose - missing this will cause a memory leak

              v.stop();
              resolve({
                blob: blob,
              });
            } else {
              var svgUrl = 'data:image/svg+xml,' + encodeURIComponent(svgData);
              var img = new Image();
              img.crossOrigin = 'anonymous';

              img.onload = function () {
                ctx.drawImage(img, 0, 0);

                if (canvas.msToBlob) {
                  // IE and Edge can't navigate to data urls, so we return the blob instead
                  var _blob = canvas.msToBlob();

                  resolve({
                    blob: _blob,
                  });
                } else {
                  var imgURI = canvas.toDataURL('image/png');
                  resolve({
                    imgURI: imgURI,
                  });
                }
              };

              img.src = svgUrl;
            }
          });
        },
      },
      {
        key: 'exportToSVG',
        value: function exportToSVG() {
          this.triggerDownload(
            this.svgUrl(),
            this.w.config.chart.toolbar.export.svg.filename,
            '.svg'
          );
        },
      },
      {
        key: 'exportToPng',
        value: function exportToPng() {
          var _this2 = this;

          this.dataURI().then(function (_ref) {
            var imgURI = _ref.imgURI,
              blob = _ref.blob;

            if (blob) {
              navigator.msSaveOrOpenBlob(blob, _this2.w.globals.chartID + '.png');
            } else {
              _this2.triggerDownload(
                imgURI,
                _this2.w.config.chart.toolbar.export.png.filename,
                '.png'
              );
            }
          });
        },
      },
      {
        key: 'exportToCSV',
        value: function exportToCSV(_ref2) {
          var _this3 = this;

          var series = _ref2.series,
            columnDelimiter = _ref2.columnDelimiter,
            _ref2$lineDelimiter = _ref2.lineDelimiter,
            lineDelimiter = _ref2$lineDelimiter === void 0 ? '\n' : _ref2$lineDelimiter;
          var w = this.w;
          var columns = [];
          var rows = [];
          var result = '';
          var universalBOM = '\uFEFF';

          var isTimeStamp = function isTimeStamp(num) {
            return w.config.xaxis.type === 'datetime' && String(num).length >= 10;
          };

          var dataFormat = new Data(this.ctx);
          var axesUtils = new AxesUtils(this.ctx);

          var getCat = function getCat(i) {
            var cat = ''; // pie / donut/ radial

            if (!w.globals.axisCharts) {
              cat = w.config.labels[i];
            } else {
              // xy charts
              // non datetime
              if (w.config.xaxis.type === 'category' || w.config.xaxis.convertedCatToNumeric) {
                if (w.globals.isBarHorizontal) {
                  var lbFormatter = w.globals.yLabelFormatters[0];
                  var sr = new Series(_this3.ctx);
                  var activeSeries = sr.getActiveConfigSeriesIndex();
                  cat = lbFormatter(w.globals.labels[i], {
                    seriesIndex: activeSeries,
                    dataPointIndex: i,
                    w: w,
                  });
                } else {
                  cat = axesUtils.getLabel(w.globals.labels, w.globals.timescaleLabels, 0, i).text;
                }
              } // datetime, but labels specified in categories or labels

              if (w.config.xaxis.type === 'datetime') {
                if (w.config.xaxis.categories.length) {
                  cat = w.config.xaxis.categories[i];
                } else if (w.config.labels.length) {
                  cat = w.config.labels[i];
                }
              }
            }

            if (Array.isArray(cat)) {
              cat = cat.join(' ');
            }

            return Utils$1.isNumber(cat) ? cat : cat.split(columnDelimiter).join('');
          };

          var handleAxisRowsColumns = function handleAxisRowsColumns(s, sI) {
            if (columns.length && sI === 0) {
              rows.push(columns.join(columnDelimiter));
            }

            if (s.data && s.data.length) {
              for (var i = 0; i < s.data.length; i++) {
                columns = [];
                var cat = getCat(i);

                if (!cat) {
                  if (dataFormat.isFormatXY()) {
                    cat = series[sI].data[i].x;
                  } else if (dataFormat.isFormat2DArray()) {
                    cat = series[sI].data[i] ? series[sI].data[i][0] : '';
                  }
                }

                if (sI === 0) {
                  columns.push(
                    isTimeStamp(cat)
                      ? w.config.chart.toolbar.export.csv.dateFormatter(cat)
                      : Utils$1.isNumber(cat)
                      ? cat
                      : cat.split(columnDelimiter).join('')
                  );

                  for (var ci = 0; ci < w.globals.series.length; ci++) {
                    columns.push(w.globals.series[ci][i]);
                  }
                }

                if (w.config.chart.type === 'candlestick' || (s.type && s.type === 'candlestick')) {
                  columns.pop();
                  columns.push(w.globals.seriesCandleO[sI][i]);
                  columns.push(w.globals.seriesCandleH[sI][i]);
                  columns.push(w.globals.seriesCandleL[sI][i]);
                  columns.push(w.globals.seriesCandleC[sI][i]);
                }

                if (w.config.chart.type === 'boxPlot' || (s.type && s.type === 'boxPlot')) {
                  columns.pop();
                  columns.push(w.globals.seriesCandleO[sI][i]);
                  columns.push(w.globals.seriesCandleH[sI][i]);
                  columns.push(w.globals.seriesCandleM[sI][i]);
                  columns.push(w.globals.seriesCandleL[sI][i]);
                  columns.push(w.globals.seriesCandleC[sI][i]);
                }

                if (w.config.chart.type === 'rangeBar') {
                  columns.pop();
                  columns.push(w.globals.seriesRangeStart[sI][i]);
                  columns.push(w.globals.seriesRangeEnd[sI][i]);
                }

                if (columns.length) {
                  rows.push(columns.join(columnDelimiter));
                }
              }
            }
          };

          columns.push(w.config.chart.toolbar.export.csv.headerCategory);
          series.map(function (s, sI) {
            var sname = s.name ? s.name : 'series-'.concat(sI);

            if (w.globals.axisCharts) {
              columns.push(
                sname.split(columnDelimiter).join('')
                  ? sname.split(columnDelimiter).join('')
                  : 'series-'.concat(sI)
              );
            }
          });

          if (!w.globals.axisCharts) {
            columns.push(w.config.chart.toolbar.export.csv.headerValue);
            rows.push(columns.join(columnDelimiter));
          }

          series.map(function (s, sI) {
            if (w.globals.axisCharts) {
              handleAxisRowsColumns(s, sI);
            } else {
              columns = [];
              columns.push(w.globals.labels[sI].split(columnDelimiter).join(''));
              columns.push(w.globals.series[sI]);
              rows.push(columns.join(columnDelimiter));
            }
          });
          result += rows.join(lineDelimiter);
          this.triggerDownload(
            'data:text/csv; charset=utf-8,' + encodeURIComponent(universalBOM + result),
            w.config.chart.toolbar.export.csv.filename,
            '.csv'
          );
        },
      },
      {
        key: 'triggerDownload',
        value: function triggerDownload(href, filename, ext) {
          var downloadLink = document.createElement('a');
          downloadLink.href = href;
          downloadLink.download = (filename ? filename : this.w.globals.chartID) + ext;
          document.body.appendChild(downloadLink);
          downloadLink.click();
          document.body.removeChild(downloadLink);
        },
      },
    ]);

    return Exports;
  })();

  /**
   * ApexCharts XAxis Class for drawing X-Axis.
   *
   * @module XAxis
   **/

  var XAxis = /*#__PURE__*/ (function () {
    function XAxis(ctx) {
      _classCallCheck(this, XAxis);

      this.ctx = ctx;
      this.w = ctx.w;
      var w = this.w;
      this.axesUtils = new AxesUtils(ctx);
      this.xaxisLabels = w.globals.labels.slice();

      if (w.globals.timescaleLabels.length > 0 && !w.globals.isBarHorizontal) {
        //  timeline labels are there and chart is not rangeabr timeline
        this.xaxisLabels = w.globals.timescaleLabels.slice();
      }

      if (w.config.xaxis.overwriteCategories) {
        this.xaxisLabels = w.config.xaxis.overwriteCategories;
      }

      this.drawnLabels = [];
      this.drawnLabelsRects = [];

      if (w.config.xaxis.position === 'top') {
        this.offY = 0;
      } else {
        this.offY = w.globals.gridHeight + 1;
      }

      this.offY = this.offY + w.config.xaxis.axisBorder.offsetY;
      this.isCategoryBarHorizontal =
        w.config.chart.type === 'bar' && w.config.plotOptions.bar.horizontal;
      this.xaxisFontSize = w.config.xaxis.labels.style.fontSize;
      this.xaxisFontFamily = w.config.xaxis.labels.style.fontFamily;
      this.xaxisForeColors = w.config.xaxis.labels.style.colors;
      this.xaxisBorderWidth = w.config.xaxis.axisBorder.width;

      if (this.isCategoryBarHorizontal) {
        this.xaxisBorderWidth = w.config.yaxis[0].axisBorder.width.toString();
      }

      if (this.xaxisBorderWidth.indexOf('%') > -1) {
        this.xaxisBorderWidth = (w.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10)) / 100;
      } else {
        this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10);
      }

      this.xaxisBorderHeight = w.config.xaxis.axisBorder.height; // For bars, we will only consider single y xais,
      // as we are not providing multiple yaxis for bar charts

      this.yaxis = w.config.yaxis[0];
    }

    _createClass(XAxis, [
      {
        key: 'drawXaxis',
        value: function drawXaxis() {
          var _this = this;

          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var elXaxis = graphics.group({
            class: 'apexcharts-xaxis',
            transform: 'translate('
              .concat(w.config.xaxis.offsetX, ', ')
              .concat(w.config.xaxis.offsetY, ')'),
          });
          var elXaxisTexts = graphics.group({
            class: 'apexcharts-xaxis-texts-g',
            transform: 'translate('
              .concat(w.globals.translateXAxisX, ', ')
              .concat(w.globals.translateXAxisY, ')'),
          });
          elXaxis.add(elXaxisTexts);
          var colWidth; // initial x Position (keep adding column width in the loop)

          var xPos = w.globals.padHorizontal;
          var labels = [];

          for (var i = 0; i < this.xaxisLabels.length; i++) {
            labels.push(this.xaxisLabels[i]);
          }

          var labelsLen = labels.length;

          if (w.globals.isXNumeric) {
            var len = labelsLen > 1 ? labelsLen - 1 : labelsLen;
            colWidth = w.globals.gridWidth / len;
            xPos = xPos + colWidth / 2 + w.config.xaxis.labels.offsetX;
          } else {
            colWidth = w.globals.gridWidth / labels.length;
            xPos = xPos + colWidth + w.config.xaxis.labels.offsetX;
          }

          var _loop = function _loop(_i) {
            var x = xPos - colWidth / 2 + w.config.xaxis.labels.offsetX;

            if (
              _i === 0 &&
              labelsLen === 1 &&
              colWidth / 2 === xPos &&
              w.globals.dataPoints === 1
            ) {
              // single datapoint
              x = w.globals.gridWidth / 2;
            }

            var label = _this.axesUtils.getLabel(
              labels,
              w.globals.timescaleLabels,
              x,
              _i,
              _this.drawnLabels,
              _this.xaxisFontSize
            );

            var offsetYCorrection = 28;

            if (w.globals.rotateXLabels) {
              offsetYCorrection = 22;
            }

            var isCategoryTickAmounts =
              typeof w.config.xaxis.tickAmount !== 'undefined' &&
              w.config.xaxis.tickAmount !== 'dataPoints' &&
              w.config.xaxis.type !== 'datetime';

            if (isCategoryTickAmounts) {
              label = _this.axesUtils.checkLabelBasedOnTickamount(_i, label, labelsLen);
            } else {
              label = _this.axesUtils.checkForOverflowingLabels(
                _i,
                label,
                labelsLen,
                _this.drawnLabels,
                _this.drawnLabelsRects
              );
            }

            var getCatForeColor = function getCatForeColor() {
              return w.config.xaxis.convertedCatToNumeric
                ? _this.xaxisForeColors[w.globals.minX + _i - 1]
                : _this.xaxisForeColors[_i];
            };

            if (label.text) {
              w.globals.xaxisLabelsCount++;
            }

            if (w.config.xaxis.labels.show) {
              var elText = graphics.drawText({
                x: label.x,
                y:
                  _this.offY +
                  w.config.xaxis.labels.offsetY +
                  offsetYCorrection -
                  (w.config.xaxis.position === 'top'
                    ? w.globals.xAxisHeight + w.config.xaxis.axisTicks.height - 2
                    : 0),
                text: label.text,
                textAnchor: 'middle',
                fontWeight: label.isBold ? 600 : w.config.xaxis.labels.style.fontWeight,
                fontSize: _this.xaxisFontSize,
                fontFamily: _this.xaxisFontFamily,
                foreColor: Array.isArray(_this.xaxisForeColors)
                  ? getCatForeColor()
                  : _this.xaxisForeColors,
                isPlainText: false,
                cssClass: 'apexcharts-xaxis-label ' + w.config.xaxis.labels.style.cssClass,
              });
              elXaxisTexts.add(elText);
              var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');
              elTooltipTitle.textContent = Array.isArray(label.text)
                ? label.text.join(' ')
                : label.text;
              elText.node.appendChild(elTooltipTitle);

              if (label.text !== '') {
                _this.drawnLabels.push(label.text);

                _this.drawnLabelsRects.push(label);
              }
            }

            xPos = xPos + colWidth;
          };

          for (var _i = 0; _i <= labelsLen - 1; _i++) {
            _loop(_i);
          }

          if (w.config.xaxis.title.text !== undefined) {
            var elXaxisTitle = graphics.group({
              class: 'apexcharts-xaxis-title',
            });
            var elXAxisTitleText = graphics.drawText({
              x: w.globals.gridWidth / 2 + w.config.xaxis.title.offsetX,
              y:
                this.offY +
                parseFloat(this.xaxisFontSize) +
                w.globals.xAxisLabelsHeight +
                w.config.xaxis.title.offsetY,
              text: w.config.xaxis.title.text,
              textAnchor: 'middle',
              fontSize: w.config.xaxis.title.style.fontSize,
              fontFamily: w.config.xaxis.title.style.fontFamily,
              fontWeight: w.config.xaxis.title.style.fontWeight,
              foreColor: w.config.xaxis.title.style.color,
              cssClass: 'apexcharts-xaxis-title-text ' + w.config.xaxis.title.style.cssClass,
            });
            elXaxisTitle.add(elXAxisTitleText);
            elXaxis.add(elXaxisTitle);
          }

          if (w.config.xaxis.axisBorder.show) {
            var offX = w.globals.barPadForNumericAxis;
            var elHorzLine = graphics.drawLine(
              w.globals.padHorizontal + w.config.xaxis.axisBorder.offsetX - offX,
              this.offY,
              this.xaxisBorderWidth + offX,
              this.offY,
              w.config.xaxis.axisBorder.color,
              0,
              this.xaxisBorderHeight
            );
            elXaxis.add(elHorzLine);
          }

          return elXaxis;
        }, // this actually becomes the vertical axis (for bar charts)
      },
      {
        key: 'drawXaxisInversed',
        value: function drawXaxisInversed(realIndex) {
          var _this2 = this;

          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var translateYAxisX = w.config.yaxis[0].opposite
            ? w.globals.translateYAxisX[realIndex]
            : 0;
          var elYaxis = graphics.group({
            class: 'apexcharts-yaxis apexcharts-xaxis-inversed',
            rel: realIndex,
          });
          var elYaxisTexts = graphics.group({
            class: 'apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g',
            transform: 'translate(' + translateYAxisX + ', 0)',
          });
          elYaxis.add(elYaxisTexts);
          var colHeight; // initial x Position (keep adding column width in the loop)

          var yPos;
          var labels = [];

          if (w.config.yaxis[realIndex].show) {
            for (var i = 0; i < this.xaxisLabels.length; i++) {
              labels.push(this.xaxisLabels[i]);
            }
          }

          colHeight = w.globals.gridHeight / labels.length;
          yPos = -(colHeight / 2.2);
          var lbFormatter = w.globals.yLabelFormatters[0];
          var ylabels = w.config.yaxis[0].labels;

          if (ylabels.show) {
            var _loop2 = function _loop2(_i2) {
              var label = typeof labels[_i2] === 'undefined' ? '' : labels[_i2];
              label = lbFormatter(label, {
                seriesIndex: realIndex,
                dataPointIndex: _i2,
                w: w,
              });

              var yColors = _this2.axesUtils.getYAxisForeColor(ylabels.style.colors, realIndex);

              var getForeColor = function getForeColor() {
                return Array.isArray(yColors) ? yColors[_i2] : yColors;
              };

              var multiY = 0;

              if (Array.isArray(label)) {
                multiY = (label.length / 2) * parseInt(ylabels.style.fontSize, 10);
              }

              var elLabel = graphics.drawText({
                x: ylabels.offsetX - 15,
                y: yPos + colHeight + ylabels.offsetY - multiY,
                text: label,
                textAnchor: _this2.yaxis.opposite ? 'start' : 'end',
                foreColor: getForeColor(),
                fontSize: ylabels.style.fontSize,
                fontFamily: ylabels.style.fontFamily,
                fontWeight: ylabels.style.fontWeight,
                isPlainText: false,
                cssClass: 'apexcharts-yaxis-label ' + ylabels.style.cssClass,
              });
              elYaxisTexts.add(elLabel);
              var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');
              elTooltipTitle.textContent = Array.isArray(label) ? label.join(' ') : label;
              elLabel.node.appendChild(elTooltipTitle);

              if (w.config.yaxis[realIndex].labels.rotate !== 0) {
                var labelRotatingCenter = graphics.rotateAroundCenter(elLabel.node);
                elLabel.node.setAttribute(
                  'transform',
                  'rotate('
                    .concat(w.config.yaxis[realIndex].labels.rotate, ' 0 ')
                    .concat(labelRotatingCenter.y, ')')
                );
              }

              yPos = yPos + colHeight;
            };

            for (var _i2 = 0; _i2 <= labels.length - 1; _i2++) {
              _loop2(_i2);
            }
          }

          if (w.config.yaxis[0].title.text !== undefined) {
            var elXaxisTitle = graphics.group({
              class: 'apexcharts-yaxis-title apexcharts-xaxis-title-inversed',
              transform: 'translate(' + translateYAxisX + ', 0)',
            });
            var elXAxisTitleText = graphics.drawText({
              x: 0,
              y: w.globals.gridHeight / 2,
              text: w.config.yaxis[0].title.text,
              textAnchor: 'middle',
              foreColor: w.config.yaxis[0].title.style.color,
              fontSize: w.config.yaxis[0].title.style.fontSize,
              fontWeight: w.config.yaxis[0].title.style.fontWeight,
              fontFamily: w.config.yaxis[0].title.style.fontFamily,
              cssClass: 'apexcharts-yaxis-title-text ' + w.config.yaxis[0].title.style.cssClass,
            });
            elXaxisTitle.add(elXAxisTitleText);
            elYaxis.add(elXaxisTitle);
          }

          var offX = 0;

          if (this.isCategoryBarHorizontal && w.config.yaxis[0].opposite) {
            offX = w.globals.gridWidth;
          }

          var axisBorder = w.config.xaxis.axisBorder;

          if (axisBorder.show) {
            var elVerticalLine = graphics.drawLine(
              w.globals.padHorizontal + axisBorder.offsetX + offX,
              1 + axisBorder.offsetY,
              w.globals.padHorizontal + axisBorder.offsetX + offX,
              w.globals.gridHeight + axisBorder.offsetY,
              axisBorder.color,
              0
            );
            elYaxis.add(elVerticalLine);
          }

          if (w.config.yaxis[0].axisTicks.show) {
            this.axesUtils.drawYAxisTicks(
              offX,
              labels.length,
              w.config.yaxis[0].axisBorder,
              w.config.yaxis[0].axisTicks,
              0,
              colHeight,
              elYaxis
            );
          }

          return elYaxis;
        },
      },
      {
        key: 'drawXaxisTicks',
        value: function drawXaxisTicks(x1, appendToElement) {
          var w = this.w;
          var x2 = x1;
          if (x1 < 0 || x1 - 2 > w.globals.gridWidth) return;
          var y1 = this.offY + w.config.xaxis.axisTicks.offsetY;
          var y2 = y1 + w.config.xaxis.axisTicks.height;

          if (w.config.xaxis.position === 'top') {
            y2 = y1 - w.config.xaxis.axisTicks.height;
          }

          if (w.config.xaxis.axisTicks.show) {
            var graphics = new Graphics(this.ctx);
            var line = graphics.drawLine(
              x1 + w.config.xaxis.axisTicks.offsetX,
              y1 + w.config.xaxis.offsetY,
              x2 + w.config.xaxis.axisTicks.offsetX,
              y2 + w.config.xaxis.offsetY,
              w.config.xaxis.axisTicks.color
            ); // we are not returning anything, but appending directly to the element passed in param

            appendToElement.add(line);
            line.node.classList.add('apexcharts-xaxis-tick');
          }
        },
      },
      {
        key: 'getXAxisTicksPositions',
        value: function getXAxisTicksPositions() {
          var w = this.w;
          var xAxisTicksPositions = [];
          var xCount = this.xaxisLabels.length;
          var x1 = w.globals.padHorizontal;

          if (w.globals.timescaleLabels.length > 0) {
            for (var i = 0; i < xCount; i++) {
              x1 = this.xaxisLabels[i].position;
              xAxisTicksPositions.push(x1);
            }
          } else {
            var xCountForCategoryCharts = xCount;

            for (var _i3 = 0; _i3 < xCountForCategoryCharts; _i3++) {
              var x1Count = xCountForCategoryCharts;

              if (w.globals.isXNumeric && w.config.chart.type !== 'bar') {
                x1Count -= 1;
              }

              x1 = x1 + w.globals.gridWidth / x1Count;
              xAxisTicksPositions.push(x1);
            }
          }

          return xAxisTicksPositions;
        }, // to rotate x-axis labels or to put ... for longer text in xaxis
      },
      {
        key: 'xAxisLabelCorrections',
        value: function xAxisLabelCorrections() {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var xAxis = w.globals.dom.baseEl.querySelector('.apexcharts-xaxis-texts-g');
          var xAxisTexts = w.globals.dom.baseEl.querySelectorAll('.apexcharts-xaxis-texts-g text');
          var yAxisTextsInversed = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-yaxis-inversed text'
          );
          var xAxisTextsInversed = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-xaxis-inversed-texts-g text tspan'
          );

          if (w.globals.rotateXLabels || w.config.xaxis.labels.rotateAlways) {
            for (var xat = 0; xat < xAxisTexts.length; xat++) {
              var textRotatingCenter = graphics.rotateAroundCenter(xAxisTexts[xat]);
              textRotatingCenter.y = textRotatingCenter.y - 1; // + tickWidth/4;

              textRotatingCenter.x = textRotatingCenter.x + 1;
              xAxisTexts[xat].setAttribute(
                'transform',
                'rotate('
                  .concat(w.config.xaxis.labels.rotate, ' ')
                  .concat(textRotatingCenter.x, ' ')
                  .concat(textRotatingCenter.y, ')')
              );
              xAxisTexts[xat].setAttribute('text-anchor', 'end');
              var offsetHeight = 10;
              xAxis.setAttribute('transform', 'translate(0, '.concat(-offsetHeight, ')'));
              var tSpan = xAxisTexts[xat].childNodes;

              if (w.config.xaxis.labels.trim) {
                Array.prototype.forEach.call(tSpan, function (ts) {
                  graphics.placeTextWithEllipsis(
                    ts,
                    ts.textContent,
                    w.globals.xAxisLabelsHeight - (w.config.legend.position === 'bottom' ? 20 : 10)
                  );
                });
              }
            }
          } else {
            (function () {
              var width = w.globals.gridWidth / (w.globals.labels.length + 1);

              for (var _xat = 0; _xat < xAxisTexts.length; _xat++) {
                var _tSpan = xAxisTexts[_xat].childNodes;

                if (w.config.xaxis.labels.trim && w.config.xaxis.type !== 'datetime') {
                  Array.prototype.forEach.call(_tSpan, function (ts) {
                    graphics.placeTextWithEllipsis(ts, ts.textContent, width);
                  });
                }
              }
            })();
          }

          if (yAxisTextsInversed.length > 0) {
            // truncate rotated y axis in bar chart (x axis)
            var firstLabelPosX = yAxisTextsInversed[yAxisTextsInversed.length - 1].getBBox();
            var lastLabelPosX = yAxisTextsInversed[0].getBBox();

            if (firstLabelPosX.x < -20) {
              yAxisTextsInversed[yAxisTextsInversed.length - 1].parentNode.removeChild(
                yAxisTextsInversed[yAxisTextsInversed.length - 1]
              );
            }

            if (
              lastLabelPosX.x + lastLabelPosX.width > w.globals.gridWidth &&
              !w.globals.isBarHorizontal
            ) {
              yAxisTextsInversed[0].parentNode.removeChild(yAxisTextsInversed[0]);
            } // truncate rotated x axis in bar chart (y axis)

            for (var _xat2 = 0; _xat2 < xAxisTextsInversed.length; _xat2++) {
              graphics.placeTextWithEllipsis(
                xAxisTextsInversed[_xat2],
                xAxisTextsInversed[_xat2].textContent,
                w.config.yaxis[0].labels.maxWidth -
                  parseFloat(w.config.yaxis[0].title.style.fontSize) * 2 -
                  20
              );
            }
          }
        }, // renderXAxisBands() {
        //   let w = this.w;
        //   let plotBand = document.createElementNS(w.globals.SVGNS, 'rect')
        //   w.globals.dom.elGraphical.add(plotBand)
        // }
      },
    ]);

    return XAxis;
  })();

  /**
   * ApexCharts Grid Class for drawing Cartesian Grid.
   *
   * @module Grid
   **/

  var Grid = /*#__PURE__*/ (function () {
    function Grid(ctx) {
      _classCallCheck(this, Grid);

      this.ctx = ctx;
      this.w = ctx.w;
      var w = this.w;
      this.xaxisLabels = w.globals.labels.slice();
      this.axesUtils = new AxesUtils(ctx);
      this.isRangeBar = w.globals.seriesRangeBar.length;

      if (w.globals.timescaleLabels.length > 0) {
        //  timescaleLabels labels are there
        this.xaxisLabels = w.globals.timescaleLabels.slice();
      }
    } // when using sparklines or when showing no grid, we need to have a grid area which is reused at many places for other calculations as well

    _createClass(Grid, [
      {
        key: 'drawGridArea',
        value: function drawGridArea() {
          var elGrid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var w = this.w;
          var graphics = new Graphics(this.ctx);

          if (elGrid === null) {
            elGrid = graphics.group({
              class: 'apexcharts-grid',
            });
          }

          var elVerticalLine = graphics.drawLine(
            w.globals.padHorizontal,
            1,
            w.globals.padHorizontal,
            w.globals.gridHeight,
            'transparent'
          );
          var elHorzLine = graphics.drawLine(
            w.globals.padHorizontal,
            w.globals.gridHeight,
            w.globals.gridWidth,
            w.globals.gridHeight,
            'transparent'
          );
          elGrid.add(elHorzLine);
          elGrid.add(elVerticalLine);
          return elGrid;
        },
      },
      {
        key: 'drawGrid',
        value: function drawGrid() {
          var gl = this.w.globals;
          var elgrid = null;

          if (gl.axisCharts) {
            // grid is drawn after xaxis and yaxis are drawn
            elgrid = this.renderGrid();
            this.drawGridArea(elgrid.el);
          }

          return elgrid;
        }, // This mask will clip off overflowing graphics from the drawable area
      },
      {
        key: 'createGridMask',
        value: function createGridMask() {
          var w = this.w;
          var gl = w.globals;
          var graphics = new Graphics(this.ctx);
          var strokeSize = Array.isArray(w.config.stroke.width) ? 0 : w.config.stroke.width;

          if (Array.isArray(w.config.stroke.width)) {
            var strokeMaxSize = 0;
            w.config.stroke.width.forEach(function (m) {
              strokeMaxSize = Math.max(strokeMaxSize, m);
            });
            strokeSize = strokeMaxSize;
          }

          gl.dom.elGridRectMask = document.createElementNS(gl.SVGNS, 'clipPath');
          gl.dom.elGridRectMask.setAttribute('id', 'gridRectMask'.concat(gl.cuid));
          gl.dom.elGridRectMarkerMask = document.createElementNS(gl.SVGNS, 'clipPath');
          gl.dom.elGridRectMarkerMask.setAttribute('id', 'gridRectMarkerMask'.concat(gl.cuid));
          gl.dom.elForecastMask = document.createElementNS(gl.SVGNS, 'clipPath');
          gl.dom.elForecastMask.setAttribute('id', 'forecastMask'.concat(gl.cuid));
          gl.dom.elNonForecastMask = document.createElementNS(gl.SVGNS, 'clipPath');
          gl.dom.elNonForecastMask.setAttribute('id', 'nonForecastMask'.concat(gl.cuid)); // let barHalfWidth = 0

          var type = w.config.chart.type;
          var hasBar =
            type === 'bar' ||
            type === 'rangeBar' ||
            type === 'candlestick' ||
            type === 'boxPlot' ||
            w.globals.comboBarCount > 0;
          var barWidthLeft = 0;
          var barWidthRight = 0;

          if (hasBar && w.globals.isXNumeric && !w.globals.isBarHorizontal) {
            barWidthLeft = w.config.grid.padding.left;
            barWidthRight = w.config.grid.padding.right;

            if (gl.barPadForNumericAxis > barWidthLeft) {
              barWidthLeft = gl.barPadForNumericAxis;
              barWidthRight = gl.barPadForNumericAxis;
            }
          }

          gl.dom.elGridRect = graphics.drawRect(
            -strokeSize / 2 - barWidthLeft - 2,
            -strokeSize / 2,
            gl.gridWidth + strokeSize + barWidthRight + barWidthLeft + 4,
            gl.gridHeight + strokeSize,
            0,
            '#fff'
          );
          var coreUtils = new CoreUtils(this);
          coreUtils.getLargestMarkerSize();
          var markerSize = w.globals.markers.largestSize + 1;
          gl.dom.elGridRectMarker = graphics.drawRect(
            -markerSize * 2,
            -markerSize * 2,
            gl.gridWidth + markerSize * 4,
            gl.gridHeight + markerSize * 4,
            0,
            '#fff'
          );
          gl.dom.elGridRectMask.appendChild(gl.dom.elGridRect.node);
          gl.dom.elGridRectMarkerMask.appendChild(gl.dom.elGridRectMarker.node);
          var defs = gl.dom.baseEl.querySelector('defs');
          defs.appendChild(gl.dom.elGridRectMask);
          defs.appendChild(gl.dom.elForecastMask);
          defs.appendChild(gl.dom.elNonForecastMask);
          defs.appendChild(gl.dom.elGridRectMarkerMask);
        },
      },
      {
        key: '_drawGridLines',
        value: function _drawGridLines(_ref) {
          var i = _ref.i,
            x1 = _ref.x1,
            y1 = _ref.y1,
            x2 = _ref.x2,
            y2 = _ref.y2,
            xCount = _ref.xCount,
            parent = _ref.parent;
          var w = this.w;

          var shouldDraw = function shouldDraw() {
            if (i === 0 && w.globals.skipFirstTimelinelabel) {
              return false;
            }

            if (
              i === xCount - 1 &&
              w.globals.skipLastTimelinelabel &&
              !w.config.xaxis.labels.formatter
            ) {
              return false;
            }

            if (w.config.chart.type === 'radar') {
              return false;
            }

            return true;
          };

          if (shouldDraw()) {
            if (w.config.grid.xaxis.lines.show) {
              this._drawGridLine({
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
                parent: parent,
              });
            }

            var xAxis = new XAxis(this.ctx);
            xAxis.drawXaxisTicks(x1, this.elg);
          }
        },
      },
      {
        key: '_drawGridLine',
        value: function _drawGridLine(_ref2) {
          var x1 = _ref2.x1,
            y1 = _ref2.y1,
            x2 = _ref2.x2,
            y2 = _ref2.y2,
            parent = _ref2.parent;
          var w = this.w;
          var isHorzLine = parent.node.classList.contains('apexcharts-gridlines-horizontal');
          var strokeDashArray = w.config.grid.strokeDashArray;
          var offX = w.globals.barPadForNumericAxis;
          var graphics = new Graphics(this);
          var line = graphics.drawLine(
            x1 - (isHorzLine ? offX : 0),
            y1,
            x2 + (isHorzLine ? offX : 0),
            y2,
            w.config.grid.borderColor,
            strokeDashArray
          );
          line.node.classList.add('apexcharts-gridline');
          parent.add(line);
        },
      },
      {
        key: '_drawGridBandRect',
        value: function _drawGridBandRect(_ref3) {
          var c = _ref3.c,
            x1 = _ref3.x1,
            y1 = _ref3.y1,
            x2 = _ref3.x2,
            y2 = _ref3.y2,
            type = _ref3.type;
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var offX = w.globals.barPadForNumericAxis;
          if (type === 'column' && w.config.xaxis.type === 'datetime') return;
          var color = w.config.grid[type].colors[c];
          var rect = graphics.drawRect(
            x1 - (type === 'row' ? offX : 0),
            y1,
            x2 + (type === 'row' ? offX * 2 : 0),
            y2,
            0,
            color,
            w.config.grid[type].opacity
          );
          this.elg.add(rect);
          rect.attr('clip-path', 'url(#gridRectMask'.concat(w.globals.cuid, ')'));
          rect.node.classList.add('apexcharts-grid-'.concat(type));
        },
      },
      {
        key: '_drawXYLines',
        value: function _drawXYLines(_ref4) {
          var _this = this;

          var xCount = _ref4.xCount,
            tickAmount = _ref4.tickAmount;
          var w = this.w;

          var datetimeLines = function datetimeLines(_ref5) {
            var xC = _ref5.xC,
              x1 = _ref5.x1,
              y1 = _ref5.y1,
              x2 = _ref5.x2,
              y2 = _ref5.y2;

            for (var i = 0; i < xC; i++) {
              x1 = _this.xaxisLabels[i].position;
              x2 = _this.xaxisLabels[i].position;

              _this._drawGridLines({
                i: i,
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
                xCount: xCount,
                parent: _this.elgridLinesV,
              });
            }
          };

          var categoryLines = function categoryLines(_ref6) {
            var xC = _ref6.xC,
              x1 = _ref6.x1,
              y1 = _ref6.y1,
              x2 = _ref6.x2,
              y2 = _ref6.y2;

            if (
              typeof w.config.xaxis.tickAmount !== 'undefined' &&
              w.config.xaxis.tickAmount !== 'dataPoints'
            ) {
              // user has specified tickamount in a category x-axis chart
              var visibleLabels = w.globals.dom.baseEl.querySelectorAll(
                '.apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)'
              );
              visibleLabels.forEach(function (d, i) {
                var textRect = d.getBBox();

                _this._drawGridLines({
                  i: i,
                  x1: textRect.x + textRect.width / 2,
                  y1: y1,
                  x2: textRect.x + textRect.width / 2,
                  y2: y2,
                  xCount: xCount,
                  parent: _this.elgridLinesV,
                });
              });
            } else {
              for (var i = 0; i < xC + (w.globals.isXNumeric ? 0 : 1); i++) {
                if (i === 0 && xC === 1 && w.globals.dataPoints === 1) {
                  // single datapoint
                  x1 = w.globals.gridWidth / 2;
                  x2 = x1;
                }

                _this._drawGridLines({
                  i: i,
                  x1: x1,
                  y1: y1,
                  x2: x2,
                  y2: y2,
                  xCount: xCount,
                  parent: _this.elgridLinesV,
                });

                x1 = x1 + w.globals.gridWidth / (w.globals.isXNumeric ? xC - 1 : xC);
                x2 = x1;
              }
            }
          }; // draw vertical lines

          if (w.config.grid.xaxis.lines.show || w.config.xaxis.axisTicks.show) {
            var x1 = w.globals.padHorizontal;
            var y1 = 0;
            var x2;
            var y2 = w.globals.gridHeight;

            if (w.globals.timescaleLabels.length) {
              datetimeLines({
                xC: xCount,
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
              });
            } else {
              if (w.globals.isXNumeric) {
                xCount = w.globals.xAxisScale.result.length;
              }

              if (w.config.xaxis.convertedCatToNumeric) {
                // in case of a convertedCatToNumeric, some labels might be skipped due to hideOverLapping labels, hence use this var to get the visible ticks
                xCount = w.globals.xaxisLabelsCount;
              }

              categoryLines({
                xC: xCount,
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
              });
            }
          } // draw horizontal lines

          if (w.config.grid.yaxis.lines.show) {
            var _x = 0;
            var _y = 0;
            var _y2 = 0;
            var _x2 = w.globals.gridWidth;
            var tA = tickAmount + 1;

            if (this.isRangeBar) {
              tA = w.globals.labels.length;
            }

            for (var i = 0; i < tA + (this.isRangeBar ? 1 : 0); i++) {
              this._drawGridLine({
                x1: _x,
                y1: _y,
                x2: _x2,
                y2: _y2,
                parent: this.elgridLinesH,
              });

              _y = _y + w.globals.gridHeight / (this.isRangeBar ? tA : tickAmount);
              _y2 = _y;
            }
          }
        },
      },
      {
        key: '_drawInvertedXYLines',
        value: function _drawInvertedXYLines(_ref7) {
          var xCount = _ref7.xCount;
          var w = this.w; // draw vertical lines

          if (w.config.grid.xaxis.lines.show || w.config.xaxis.axisTicks.show) {
            var x1 = w.globals.padHorizontal;
            var y1 = 0;
            var x2;
            var y2 = w.globals.gridHeight;

            for (var i = 0; i < xCount + 1; i++) {
              if (w.config.grid.xaxis.lines.show) {
                this._drawGridLine({
                  x1: x1,
                  y1: y1,
                  x2: x2,
                  y2: y2,
                  parent: this.elgridLinesV,
                });
              }

              var xAxis = new XAxis(this.ctx);
              xAxis.drawXaxisTicks(x1, this.elg);
              x1 = x1 + w.globals.gridWidth / xCount + 0.3;
              x2 = x1;
            }
          } // draw horizontal lines

          if (w.config.grid.yaxis.lines.show) {
            var _x3 = 0;
            var _y3 = 0;
            var _y4 = 0;
            var _x4 = w.globals.gridWidth;

            for (var _i = 0; _i < w.globals.dataPoints + 1; _i++) {
              this._drawGridLine({
                x1: _x3,
                y1: _y3,
                x2: _x4,
                y2: _y4,
                parent: this.elgridLinesH,
              });

              _y3 = _y3 + w.globals.gridHeight / w.globals.dataPoints;
              _y4 = _y3;
            }
          }
        }, // actual grid rendering
      },
      {
        key: 'renderGrid',
        value: function renderGrid() {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          this.elg = graphics.group({
            class: 'apexcharts-grid',
          });
          this.elgridLinesH = graphics.group({
            class: 'apexcharts-gridlines-horizontal',
          });
          this.elgridLinesV = graphics.group({
            class: 'apexcharts-gridlines-vertical',
          });
          this.elg.add(this.elgridLinesH);
          this.elg.add(this.elgridLinesV);

          if (!w.config.grid.show) {
            this.elgridLinesV.hide();
            this.elgridLinesH.hide();
          }

          var yTickAmount = w.globals.yAxisScale.length
            ? w.globals.yAxisScale[0].result.length - 1
            : 5;

          for (var i = 0; i < w.globals.series.length; i++) {
            if (typeof w.globals.yAxisScale[i] !== 'undefined') {
              yTickAmount = w.globals.yAxisScale[i].result.length - 1;
            }

            if (yTickAmount > 2) break;
          }

          var xCount;

          if (!w.globals.isBarHorizontal || this.isRangeBar) {
            xCount = this.xaxisLabels.length;

            if (this.isRangeBar) {
              yTickAmount = w.globals.labels.length;

              if (w.config.xaxis.tickAmount && w.config.xaxis.labels.formatter) {
                xCount = w.config.xaxis.tickAmount;
              }
            }

            this._drawXYLines({
              xCount: xCount,
              tickAmount: yTickAmount,
            });
          } else {
            xCount = yTickAmount; // for horizontal bar chart, get the xaxis tickamount

            yTickAmount = w.globals.xTickAmount;

            this._drawInvertedXYLines({
              xCount: xCount,
              tickAmount: yTickAmount,
            });
          }

          this.drawGridBands(xCount, yTickAmount);
          return {
            el: this.elg,
            xAxisTickWidth: w.globals.gridWidth / xCount,
          };
        },
      },
      {
        key: 'drawGridBands',
        value: function drawGridBands(xCount, tickAmount) {
          var w = this.w; // rows background bands

          if (w.config.grid.row.colors !== undefined && w.config.grid.row.colors.length > 0) {
            var x1 = 0;
            var y1 = 0;
            var y2 = w.globals.gridHeight / tickAmount;
            var x2 = w.globals.gridWidth;

            for (var i = 0, c = 0; i < tickAmount; i++, c++) {
              if (c >= w.config.grid.row.colors.length) {
                c = 0;
              }

              this._drawGridBandRect({
                c: c,
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
                type: 'row',
              });

              y1 = y1 + w.globals.gridHeight / tickAmount;
            }
          } // columns background bands

          if (w.config.grid.column.colors !== undefined && w.config.grid.column.colors.length > 0) {
            var xc =
              !w.globals.isBarHorizontal &&
              (w.config.xaxis.type === 'category' || w.config.xaxis.convertedCatToNumeric)
                ? xCount - 1
                : xCount;
            var _x5 = w.globals.padHorizontal;
            var _y5 = 0;

            var _x6 = w.globals.padHorizontal + w.globals.gridWidth / xc;

            var _y6 = w.globals.gridHeight;

            for (var _i2 = 0, _c = 0; _i2 < xCount; _i2++, _c++) {
              if (_c >= w.config.grid.column.colors.length) {
                _c = 0;
              }

              this._drawGridBandRect({
                c: _c,
                x1: _x5,
                y1: _y5,
                x2: _x6,
                y2: _y6,
                type: 'column',
              });

              _x5 = _x5 + w.globals.gridWidth / xc;
            }
          }
        },
      },
    ]);

    return Grid;
  })();

  var Range$1 = /*#__PURE__*/ (function () {
    function Range(ctx) {
      _classCallCheck(this, Range);

      this.ctx = ctx;
      this.w = ctx.w;
    } // http://stackoverflow.com/questions/326679/choosing-an-attractive-linear-scale-for-a-graphs-y-axiss
    // This routine creates the Y axis values for a graph.

    _createClass(Range, [
      {
        key: 'niceScale',
        value: function niceScale(yMin, yMax) {
          var ticks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
          var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
          var NO_MIN_MAX_PROVIDED = arguments.length > 4 ? arguments[4] : undefined;
          var w = this.w; // Determine Range

          var range = Math.abs(yMax - yMin);
          ticks = this._adjustTicksForSmallRange(ticks, index, range);

          if (ticks === 'dataPoints') {
            ticks = w.globals.dataPoints - 1;
          }

          if (
            (yMin === Number.MIN_VALUE && yMax === 0) ||
            (!Utils$1.isNumber(yMin) && !Utils$1.isNumber(yMax)) ||
            (yMin === Number.MIN_VALUE && yMax === -Number.MAX_VALUE)
          ) {
            // when all values are 0
            yMin = 0;
            yMax = ticks;
            var linearScale = this.linearScale(yMin, yMax, ticks);
            return linearScale;
          }

          if (yMin > yMax) {
            // if somehow due to some wrong config, user sent max less than min,
            // adjust the min/max again
            console.warn('axis.min cannot be greater than axis.max');
            yMax = yMin + 0.1;
          } else if (yMin === yMax) {
            // If yMin and yMax are identical, then
            // adjust the yMin and yMax values to actually
            // make a graph. Also avoids division by zero errors.
            yMin = yMin === 0 ? 0 : yMin - 0.5; // some small value

            yMax = yMax === 0 ? 2 : yMax + 0.5; // some small value
          } // Calculate Min amd Max graphical labels and graph
          // increments.  The number of ticks defaults to
          // 10 which is the SUGGESTED value.  Any tick value
          // entered is used as a suggested value which is
          // adjusted to be a 'pretty' value.
          //
          // Output will be an array of the Y axis values that
          // encompass the Y values.

          var result = [];

          if (
            range < 1 &&
            NO_MIN_MAX_PROVIDED &&
            (w.config.chart.type === 'candlestick' ||
              w.config.series[index].type === 'candlestick' ||
              w.config.chart.type === 'boxPlot' ||
              w.config.series[index].type === 'boxPlot' ||
              w.globals.isRangeData)
          ) {
            /* fix https://github.com/apexcharts/apexcharts.js/issues/430 */
            yMax = yMax * 1.01;
          }

          var tiks = ticks + 1; // Adjust ticks if needed

          if (tiks < 2) {
            tiks = 2;
          } else if (tiks > 2) {
            tiks -= 2;
          } // Get raw step value

          var tempStep = range / tiks; // Calculate pretty step value

          var mag = Math.floor(Utils$1.log10(tempStep));
          var magPow = Math.pow(10, mag);
          var magMsd = Math.round(tempStep / magPow);

          if (magMsd < 1) {
            magMsd = 1;
          }

          var stepSize = magMsd * magPow; // build Y label array.
          // Lower and upper bounds calculations

          var lb = stepSize * Math.floor(yMin / stepSize);
          var ub = stepSize * Math.ceil(yMax / stepSize); // Build array

          var val = lb;

          if (NO_MIN_MAX_PROVIDED && range > 2) {
            while (1) {
              result.push(val);
              val += stepSize;

              if (val > ub) {
                break;
              }
            }

            return {
              result: result,
              niceMin: result[0],
              niceMax: result[result.length - 1],
            };
          } else {
            result = [];
            var v = yMin;
            result.push(v);
            var valuesDivider = Math.abs(yMax - yMin) / ticks;

            for (var i = 0; i <= ticks; i++) {
              v = v + valuesDivider;
              result.push(v);
            }

            if (result[result.length - 2] >= yMax) {
              result.pop();
            }

            return {
              result: result,
              niceMin: result[0],
              niceMax: result[result.length - 1],
            };
          }
        },
      },
      {
        key: 'linearScale',
        value: function linearScale(yMin, yMax) {
          var ticks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
          var index = arguments.length > 3 ? arguments[3] : undefined;
          var range = Math.abs(yMax - yMin);
          ticks = this._adjustTicksForSmallRange(ticks, index, range);

          if (ticks === 'dataPoints') {
            ticks = this.w.globals.dataPoints - 1;
          }

          var step = range / ticks;

          if (ticks === Number.MAX_VALUE) {
            ticks = 10;
            step = 1;
          }

          var result = [];
          var v = yMin;

          while (ticks >= 0) {
            result.push(v);
            v = v + step;
            ticks -= 1;
          }

          return {
            result: result,
            niceMin: result[0],
            niceMax: result[result.length - 1],
          };
        },
      },
      {
        key: 'logarithmicScale',
        value: function logarithmicScale(yMax, base) {
          var logs = [];
          var ticks = Math.ceil(Math.log(yMax) / Math.log(base)) + 1; // Get powers of base up to our max, and then one more

          for (var i = 0; i < ticks; i++) {
            logs.push(Math.pow(base, i));
          }

          return {
            result: logs,
            niceMin: logs[0],
            niceMax: logs[logs.length - 1],
          };
        },
      },
      {
        key: '_adjustTicksForSmallRange',
        value: function _adjustTicksForSmallRange(ticks, index, range) {
          var newTicks = ticks;

          if (
            typeof index !== 'undefined' &&
            this.w.config.yaxis[index].labels.formatter &&
            this.w.config.yaxis[index].tickAmount === undefined
          ) {
            var formattedVal = this.w.config.yaxis[index].labels.formatter(1);

            if (Utils$1.isNumber(Number(formattedVal)) && !Utils$1.isFloat(formattedVal)) {
              newTicks = Math.ceil(range);
            }
          }

          return newTicks < ticks ? newTicks : ticks;
        },
      },
      {
        key: 'setYScaleForIndex',
        value: function setYScaleForIndex(index, minY, maxY) {
          var gl = this.w.globals;
          var cnf = this.w.config;
          var y = gl.isBarHorizontal ? cnf.xaxis : cnf.yaxis[index];

          if (typeof gl.yAxisScale[index] === 'undefined') {
            gl.yAxisScale[index] = [];
          }

          var diff = Math.abs(maxY - minY);

          if (y.logarithmic && diff <= 5) {
            gl.invalidLogScale = true;
          }

          if (y.logarithmic && diff > 5) {
            gl.allSeriesCollapsed = false;
            gl.yAxisScale[index] = this.logarithmicScale(maxY, y.logBase);
          } else {
            if (maxY === -Number.MAX_VALUE || !Utils$1.isNumber(maxY)) {
              // no data in the chart. Either all series collapsed or user passed a blank array
              gl.yAxisScale[index] = this.linearScale(0, 5, 5);
            } else {
              // there is some data. Turn off the allSeriesCollapsed flag
              gl.allSeriesCollapsed = false;

              if ((y.min !== undefined || y.max !== undefined) && !y.forceNiceScale) {
                // fix https://github.com/apexcharts/apexcharts.js/issues/492
                gl.yAxisScale[index] = this.linearScale(minY, maxY, y.tickAmount, index);
              } else {
                var noMinMaxProvided =
                  (cnf.yaxis[index].max === undefined && cnf.yaxis[index].min === undefined) ||
                  cnf.yaxis[index].forceNiceScale;
                gl.yAxisScale[index] = this.niceScale(
                  minY,
                  maxY,
                  y.tickAmount ? y.tickAmount : diff < 5 && diff > 1 ? diff + 1 : 5,
                  index, // fix https://github.com/apexcharts/apexcharts.js/issues/397
                  noMinMaxProvided
                );
              }
            }
          }
        },
      },
      {
        key: 'setXScale',
        value: function setXScale(minX, maxX) {
          var w = this.w;
          var gl = w.globals;
          var x = w.config.xaxis;
          var diff = Math.abs(maxX - minX);

          if (maxX === -Number.MAX_VALUE || !Utils$1.isNumber(maxX)) {
            // no data in the chart. Either all series collapsed or user passed a blank array
            gl.xAxisScale = this.linearScale(0, 5, 5);
          } else {
            gl.xAxisScale = this.linearScale(
              minX,
              maxX,
              x.tickAmount ? x.tickAmount : diff < 5 && diff > 1 ? diff + 1 : 5,
              0
            );
          }

          return gl.xAxisScale;
        },
      },
      {
        key: 'setMultipleYScales',
        value: function setMultipleYScales() {
          var _this = this;

          var gl = this.w.globals;
          var cnf = this.w.config;
          var minYArr = gl.minYArr.concat([]);
          var maxYArr = gl.maxYArr.concat([]);
          var scalesIndices = []; // here, we loop through the yaxis array and find the item which has "seriesName" property

          cnf.yaxis.forEach(function (yaxe, i) {
            var index = i;
            cnf.series.forEach(function (s, si) {
              // if seriesName matches and that series is not collapsed, we use that scale
              // fix issue #1215
              // proceed even if si is in gl.collapsedSeriesIndices
              if (s.name === yaxe.seriesName) {
                index = si;

                if (i !== si) {
                  scalesIndices.push({
                    index: si,
                    similarIndex: i,
                    alreadyExists: true,
                  });
                } else {
                  scalesIndices.push({
                    index: si,
                  });
                }
              }
            });
            var minY = minYArr[index];
            var maxY = maxYArr[index];

            _this.setYScaleForIndex(i, minY, maxY);
          });
          this.sameScaleInMultipleAxes(minYArr, maxYArr, scalesIndices);
        },
      },
      {
        key: 'sameScaleInMultipleAxes',
        value: function sameScaleInMultipleAxes(minYArr, maxYArr, scalesIndices) {
          var _this2 = this;

          var cnf = this.w.config;
          var gl = this.w.globals; // we got the scalesIndices array in the above code, but we need to filter out the items which doesn't have same scales

          var similarIndices = [];
          scalesIndices.forEach(function (scale) {
            if (scale.alreadyExists) {
              if (typeof similarIndices[scale.index] === 'undefined') {
                similarIndices[scale.index] = [];
              }

              similarIndices[scale.index].push(scale.index);
              similarIndices[scale.index].push(scale.similarIndex);
            }
          });

          function intersect(a, b) {
            return a.filter(function (value) {
              return b.indexOf(value) !== -1;
            });
          }

          gl.yAxisSameScaleIndices = similarIndices;
          similarIndices.forEach(function (si, i) {
            similarIndices.forEach(function (sj, j) {
              if (i !== j) {
                if (intersect(si, sj).length > 0) {
                  similarIndices[i] = similarIndices[i].concat(similarIndices[j]);
                }
              }
            });
          }); // then, we remove duplicates from the similarScale array

          var uniqueSimilarIndices = similarIndices.map(function (item) {
            return item.filter(function (i, pos) {
              return item.indexOf(i) === pos;
            });
          }); // sort further to remove whole duplicate arrays later

          var sortedIndices = uniqueSimilarIndices.map(function (s) {
            return s.sort();
          }); // remove undefined items

          similarIndices = similarIndices.filter(function (s) {
            return !!s;
          });
          var indices = sortedIndices.slice();
          var stringIndices = indices.map(function (ind) {
            return JSON.stringify(ind);
          });
          indices = indices.filter(function (ind, p) {
            return stringIndices.indexOf(JSON.stringify(ind)) === p;
          });
          var sameScaleMinYArr = [];
          var sameScaleMaxYArr = [];
          minYArr.forEach(function (minYValue, yi) {
            indices.forEach(function (scale, i) {
              // we compare only the yIndex which exists in the indices array
              if (scale.indexOf(yi) > -1) {
                if (typeof sameScaleMinYArr[i] === 'undefined') {
                  sameScaleMinYArr[i] = [];
                  sameScaleMaxYArr[i] = [];
                }

                sameScaleMinYArr[i].push({
                  key: yi,
                  value: minYValue,
                });
                sameScaleMaxYArr[i].push({
                  key: yi,
                  value: maxYArr[yi],
                });
              }
            });
          });
          var sameScaleMin = Array.apply(null, Array(indices.length)).map(
            Number.prototype.valueOf,
            Number.MIN_VALUE
          );
          var sameScaleMax = Array.apply(null, Array(indices.length)).map(
            Number.prototype.valueOf,
            -Number.MAX_VALUE
          );
          sameScaleMinYArr.forEach(function (s, i) {
            s.forEach(function (sc, j) {
              sameScaleMin[i] = Math.min(sc.value, sameScaleMin[i]);
            });
          });
          sameScaleMaxYArr.forEach(function (s, i) {
            s.forEach(function (sc, j) {
              sameScaleMax[i] = Math.max(sc.value, sameScaleMax[i]);
            });
          });
          minYArr.forEach(function (min, i) {
            sameScaleMaxYArr.forEach(function (s, si) {
              var minY = sameScaleMin[si];
              var maxY = sameScaleMax[si];

              if (cnf.chart.stacked) {
                // for stacked charts, we need to add the values
                maxY = 0;
                s.forEach(function (ind, k) {
                  // fix incorrectly adjust y scale issue #1215
                  if (ind.value !== -Number.MAX_VALUE) {
                    maxY += ind.value;
                  }

                  if (minY !== Number.MIN_VALUE) {
                    minY += sameScaleMinYArr[si][k].value;
                  }
                });
              }

              s.forEach(function (ind, k) {
                if (s[k].key === i) {
                  if (cnf.yaxis[i].min !== undefined) {
                    if (typeof cnf.yaxis[i].min === 'function') {
                      minY = cnf.yaxis[i].min(gl.minY);
                    } else {
                      minY = cnf.yaxis[i].min;
                    }
                  }

                  if (cnf.yaxis[i].max !== undefined) {
                    if (typeof cnf.yaxis[i].max === 'function') {
                      maxY = cnf.yaxis[i].max(gl.maxY);
                    } else {
                      maxY = cnf.yaxis[i].max;
                    }
                  }

                  _this2.setYScaleForIndex(i, minY, maxY);
                }
              });
            });
          });
        }, // experimental feature which scales the y-axis to a min/max based on x-axis range
      },
      {
        key: 'autoScaleY',
        value: function autoScaleY(ctx, yaxis, e) {
          if (!ctx) {
            ctx = this;
          }

          var w = ctx.w;

          if (w.globals.isMultipleYAxis || w.globals.collapsedSeries.length) {
            // The autoScale option for multiple y-axis is turned off as it leads to buggy behavior.
            // Also, when a series is collapsed, it results in incorrect behavior. Hence turned it off for that too - fixes apexcharts.js#795
            console.warn('autoScaleYaxis is not supported in a multi-yaxis chart.');
            return yaxis;
          }

          var seriesX = w.globals.seriesX[0];
          var isStacked = w.config.chart.stacked;
          yaxis.forEach(function (yaxe, yi) {
            var firstXIndex = 0;

            for (var xi = 0; xi < seriesX.length; xi++) {
              if (seriesX[xi] >= e.xaxis.min) {
                firstXIndex = xi;
                break;
              }
            }

            var initialMin = w.globals.minYArr[yi];
            var initialMax = w.globals.maxYArr[yi];
            var min, max;
            var stackedSer = w.globals.stackedSeriesTotals;
            w.globals.series.forEach(function (serie, sI) {
              var firstValue = serie[firstXIndex];

              if (isStacked) {
                firstValue = stackedSer[firstXIndex];
                min = max = firstValue;
                stackedSer.forEach(function (y, yI) {
                  if (seriesX[yI] <= e.xaxis.max && seriesX[yI] >= e.xaxis.min) {
                    if (y > max && y !== null) max = y;
                    if (serie[yI] < min && serie[yI] !== null) min = serie[yI];
                  }
                });
              } else {
                min = max = firstValue;
                serie.forEach(function (y, yI) {
                  if (seriesX[yI] <= e.xaxis.max && seriesX[yI] >= e.xaxis.min) {
                    var valMin = y;
                    var valMax = y;
                    w.globals.series.forEach(function (wS, wSI) {
                      if (y !== null) {
                        valMin = Math.min(wS[yI], valMin);
                        valMax = Math.max(wS[yI], valMax);
                      }
                    });
                    if (valMax > max && valMax !== null) max = valMax;
                    if (valMin < min && valMin !== null) min = valMin;
                  }
                });
              }

              if (min === undefined && max === undefined) {
                min = initialMin;
                max = initialMax;
              }

              min *= min < 0 ? 1.1 : 0.9;
              max *= max < 0 ? 0.9 : 1.1;

              if (max < 0 && max < initialMax) {
                max = initialMax;
              }

              if (min < 0 && min > initialMin) {
                min = initialMin;
              }

              if (yaxis.length > 1) {
                yaxis[sI].min = yaxe.min === undefined ? min : yaxe.min;
                yaxis[sI].max = yaxe.max === undefined ? max : yaxe.max;
              } else {
                yaxis[0].min = yaxe.min === undefined ? min : yaxe.min;
                yaxis[0].max = yaxe.max === undefined ? max : yaxe.max;
              }
            });
          });
          return yaxis;
        },
      },
    ]);

    return Range;
  })();

  /**
   * Range is used to generates values between min and max.
   *
   * @module Range
   **/

  var Range = /*#__PURE__*/ (function () {
    function Range(ctx) {
      _classCallCheck(this, Range);

      this.ctx = ctx;
      this.w = ctx.w;
      this.scales = new Range$1(ctx);
    }

    _createClass(Range, [
      {
        key: 'init',
        value: function init() {
          this.setYRange();
          this.setXRange();
          this.setZRange();
        },
      },
      {
        key: 'getMinYMaxY',
        value: function getMinYMaxY(startingIndex) {
          var lowestY =
            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
          var highestY =
            arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Number.MAX_VALUE;
          var len = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
          var cnf = this.w.config;
          var gl = this.w.globals;
          var maxY = -Number.MAX_VALUE;
          var minY = Number.MIN_VALUE;

          if (len === null) {
            len = startingIndex + 1;
          }

          var series = gl.series;
          var seriesMin = series;
          var seriesMax = series;

          if (cnf.chart.type === 'candlestick') {
            seriesMin = gl.seriesCandleL;
            seriesMax = gl.seriesCandleH;
          } else if (cnf.chart.type === 'boxPlot') {
            seriesMin = gl.seriesCandleO;
            seriesMax = gl.seriesCandleC;
          } else if (gl.isRangeData) {
            seriesMin = gl.seriesRangeStart;
            seriesMax = gl.seriesRangeEnd;
          }

          for (var i = startingIndex; i < len; i++) {
            gl.dataPoints = Math.max(gl.dataPoints, series[i].length);

            for (var j = 0; j < gl.series[i].length; j++) {
              var val = series[i][j];

              if (val !== null && Utils$1.isNumber(val)) {
                if (typeof seriesMax[i][j] !== 'undefined') {
                  maxY = Math.max(maxY, seriesMax[i][j]);
                  lowestY = Math.min(lowestY, seriesMax[i][j]);
                }

                if (typeof seriesMin[i][j] !== 'undefined') {
                  lowestY = Math.min(lowestY, seriesMin[i][j]);
                  highestY = Math.max(highestY, seriesMin[i][j]);
                }

                if (
                  this.w.config.chart.type === 'candlestick' ||
                  this.w.config.chart.type === 'boxPlot'
                ) {
                  if (typeof gl.seriesCandleC[i][j] !== 'undefined') {
                    maxY = Math.max(maxY, gl.seriesCandleO[i][j]);
                    maxY = Math.max(maxY, gl.seriesCandleH[i][j]);
                    maxY = Math.max(maxY, gl.seriesCandleL[i][j]);
                    maxY = Math.max(maxY, gl.seriesCandleC[i][j]);

                    if (this.w.config.chart.type === 'boxPlot') {
                      maxY = Math.max(maxY, gl.seriesCandleM[i][j]);
                    }
                  } // there is a combo chart and the specified series in not either candlestick or boxplot, find the max there

                  if (
                    cnf.series[i].type &&
                    (cnf.series[i].type !== 'candlestick' || cnf.series[i].type !== 'boxPlot')
                  ) {
                    maxY = Math.max(maxY, gl.series[i][j]);
                    lowestY = Math.min(lowestY, gl.series[i][j]);
                  }

                  highestY = maxY;
                }

                if (
                  gl.seriesGoals[i] &&
                  gl.seriesGoals[i][j] &&
                  Array.isArray(gl.seriesGoals[i][j])
                ) {
                  gl.seriesGoals[i][j].forEach(function (g) {
                    if (minY !== Number.MIN_VALUE) {
                      minY = Math.min(minY, g.value);
                      lowestY = minY;
                    }

                    maxY = Math.max(maxY, g.value);
                    highestY = maxY;
                  });
                }

                if (Utils$1.isFloat(val)) {
                  val = Utils$1.noExponents(val);
                  gl.yValueDecimal = Math.max(
                    gl.yValueDecimal,
                    val.toString().split('.')[1].length
                  );
                }

                if (minY > seriesMin[i][j] && seriesMin[i][j] < 0) {
                  minY = seriesMin[i][j];
                }
              } else {
                gl.hasNullValues = true;
              }
            }
          }

          if (cnf.chart.type === 'rangeBar' && gl.seriesRangeStart.length && gl.isBarHorizontal) {
            minY = lowestY;
          }

          if (cnf.chart.type === 'bar') {
            if (minY < 0 && maxY < 0) {
              // all negative values in a bar chart, hence make the max to 0
              maxY = 0;
            }

            if (minY === Number.MIN_VALUE) {
              minY = 0;
            }
          }

          return {
            minY: minY,
            maxY: maxY,
            lowestY: lowestY,
            highestY: highestY,
          };
        },
      },
      {
        key: 'setYRange',
        value: function setYRange() {
          var gl = this.w.globals;
          var cnf = this.w.config;
          gl.maxY = -Number.MAX_VALUE;
          gl.minY = Number.MIN_VALUE;
          var lowestYInAllSeries = Number.MAX_VALUE;

          if (gl.isMultipleYAxis) {
            // we need to get minY and maxY for multiple y axis
            for (var i = 0; i < gl.series.length; i++) {
              var minYMaxYArr = this.getMinYMaxY(i, lowestYInAllSeries, null, i + 1);
              gl.minYArr.push(minYMaxYArr.minY);
              gl.maxYArr.push(minYMaxYArr.maxY);
              lowestYInAllSeries = minYMaxYArr.lowestY;
            }
          } // and then, get the minY and maxY from all series

          var minYMaxY = this.getMinYMaxY(0, lowestYInAllSeries, null, gl.series.length);
          gl.minY = minYMaxY.minY;
          gl.maxY = minYMaxY.maxY;
          lowestYInAllSeries = minYMaxY.lowestY;

          if (cnf.chart.stacked) {
            this._setStackedMinMax();
          } // if the numbers are too big, reduce the range
          // for eg, if number is between 100000-110000, putting 0 as the lowest value is not so good idea. So change the gl.minY for line/area/candlesticks/boxPlot

          if (
            cnf.chart.type === 'line' ||
            cnf.chart.type === 'area' ||
            cnf.chart.type === 'candlestick' ||
            cnf.chart.type === 'boxPlot' ||
            (cnf.chart.type === 'rangeBar' && !gl.isBarHorizontal)
          ) {
            if (
              gl.minY === Number.MIN_VALUE &&
              lowestYInAllSeries !== -Number.MAX_VALUE &&
              lowestYInAllSeries !== gl.maxY // single value possibility
            ) {
              var diff = gl.maxY - lowestYInAllSeries;

              if (
                (lowestYInAllSeries >= 0 && lowestYInAllSeries <= 10) ||
                cnf.yaxis[0].min !== undefined ||
                cnf.yaxis[0].max !== undefined
              ) {
                // if minY is already 0/low value, we don't want to go negatives here - so this check is essential.
                diff = 0;
              }

              gl.minY = lowestYInAllSeries - (diff * 5) / 100;
              /* fix https://github.com/apexcharts/apexcharts.js/issues/614 */

              /* fix https://github.com/apexcharts/apexcharts.js/issues/968 */

              if (lowestYInAllSeries > 0 && gl.minY < 0) {
                gl.minY = 0;
              }
              /* fix https://github.com/apexcharts/apexcharts.js/issues/426 */

              gl.maxY = gl.maxY + (diff * 5) / 100;
            }
          }

          cnf.yaxis.forEach(function (yaxe, index) {
            // override all min/max values by user defined values (y axis)
            if (yaxe.max !== undefined) {
              if (typeof yaxe.max === 'number') {
                gl.maxYArr[index] = yaxe.max;
              } else if (typeof yaxe.max === 'function') {
                // fixes apexcharts.js/issues/2098
                gl.maxYArr[index] = yaxe.max(gl.isMultipleYAxis ? gl.maxYArr[index] : gl.maxY);
              } // gl.maxY is for single y-axis chart, it will be ignored in multi-yaxis

              gl.maxY = gl.maxYArr[index];
            }

            if (yaxe.min !== undefined) {
              if (typeof yaxe.min === 'number') {
                gl.minYArr[index] = yaxe.min;
              } else if (typeof yaxe.min === 'function') {
                // fixes apexcharts.js/issues/2098
                gl.minYArr[index] = yaxe.min(
                  gl.isMultipleYAxis
                    ? gl.minYArr[index] === Number.MIN_VALUE
                      ? 0
                      : gl.minYArr[index]
                    : gl.minY
                );
              } // gl.minY is for single y-axis chart, it will be ignored in multi-yaxis

              gl.minY = gl.minYArr[index];
            }
          }); // for horizontal bar charts, we need to check xaxis min/max as user may have specified there

          if (gl.isBarHorizontal) {
            var minmax = ['min', 'max'];
            minmax.forEach(function (m) {
              if (cnf.xaxis[m] !== undefined && typeof cnf.xaxis[m] === 'number') {
                m === 'min' ? (gl.minY = cnf.xaxis[m]) : (gl.maxY = cnf.xaxis[m]);
              }
            });
          } // for multi y-axis we need different scales for each

          if (gl.isMultipleYAxis) {
            this.scales.setMultipleYScales();
            gl.minY = lowestYInAllSeries;
            gl.yAxisScale.forEach(function (scale, i) {
              gl.minYArr[i] = scale.niceMin;
              gl.maxYArr[i] = scale.niceMax;
            });
          } else {
            this.scales.setYScaleForIndex(0, gl.minY, gl.maxY);
            gl.minY = gl.yAxisScale[0].niceMin;
            gl.maxY = gl.yAxisScale[0].niceMax;
            gl.minYArr[0] = gl.yAxisScale[0].niceMin;
            gl.maxYArr[0] = gl.yAxisScale[0].niceMax;
          }

          return {
            minY: gl.minY,
            maxY: gl.maxY,
            minYArr: gl.minYArr,
            maxYArr: gl.maxYArr,
            yAxisScale: gl.yAxisScale,
          };
        },
      },
      {
        key: 'setXRange',
        value: function setXRange() {
          var gl = this.w.globals;
          var cnf = this.w.config;
          var isXNumeric =
            cnf.xaxis.type === 'numeric' ||
            cnf.xaxis.type === 'datetime' ||
            (cnf.xaxis.type === 'category' && !gl.noLabelsProvided) ||
            gl.noLabelsProvided ||
            gl.isXNumeric;

          var getInitialMinXMaxX = function getInitialMinXMaxX() {
            for (var i = 0; i < gl.series.length; i++) {
              if (gl.labels[i]) {
                for (var j = 0; j < gl.labels[i].length; j++) {
                  if (gl.labels[i][j] !== null && Utils$1.isNumber(gl.labels[i][j])) {
                    gl.maxX = Math.max(gl.maxX, gl.labels[i][j]);
                    gl.initialMaxX = Math.max(gl.maxX, gl.labels[i][j]);
                    gl.minX = Math.min(gl.minX, gl.labels[i][j]);
                    gl.initialMinX = Math.min(gl.minX, gl.labels[i][j]);
                  }
                }
              }
            }
          }; // minX maxX starts here

          if (gl.isXNumeric) {
            getInitialMinXMaxX();
          }

          if (gl.noLabelsProvided) {
            if (cnf.xaxis.categories.length === 0) {
              gl.maxX = gl.labels[gl.labels.length - 1];
              gl.initialMaxX = gl.labels[gl.labels.length - 1];
              gl.minX = 1;
              gl.initialMinX = 1;
            }
          }

          if (gl.isXNumeric || gl.noLabelsProvided || gl.dataFormatXNumeric) {
            var ticks;

            if (cnf.xaxis.tickAmount === undefined) {
              ticks = Math.round(gl.svgWidth / 150); // no labels provided and total number of dataPoints is less than 30

              if (cnf.xaxis.type === 'numeric' && gl.dataPoints < 30) {
                ticks = gl.dataPoints - 1;
              } // this check is for when ticks exceeds total datapoints and that would result in duplicate labels

              if (ticks > gl.dataPoints && gl.dataPoints !== 0) {
                ticks = gl.dataPoints - 1;
              }
            } else if (cnf.xaxis.tickAmount === 'dataPoints') {
              if (gl.series.length > 1) {
                ticks = gl.series[gl.maxValsInArrayIndex].length - 1;
              }

              if (gl.isXNumeric) {
                ticks = gl.maxX - gl.minX - 1;
              }
            } else {
              ticks = cnf.xaxis.tickAmount;
            }

            gl.xTickAmount = ticks; // override all min/max values by user defined values (x axis)

            if (cnf.xaxis.max !== undefined && typeof cnf.xaxis.max === 'number') {
              gl.maxX = cnf.xaxis.max;
            }

            if (cnf.xaxis.min !== undefined && typeof cnf.xaxis.min === 'number') {
              gl.minX = cnf.xaxis.min;
            } // if range is provided, adjust the new minX

            if (cnf.xaxis.range !== undefined) {
              gl.minX = gl.maxX - cnf.xaxis.range;
            }

            if (gl.minX !== Number.MAX_VALUE && gl.maxX !== -Number.MAX_VALUE) {
              if (cnf.xaxis.convertedCatToNumeric && !gl.dataFormatXNumeric) {
                var catScale = [];

                for (var i = gl.minX - 1; i < gl.maxX; i++) {
                  catScale.push(i + 1);
                }

                gl.xAxisScale = {
                  result: catScale,
                  niceMin: catScale[0],
                  niceMax: catScale[catScale.length - 1],
                };
              } else {
                gl.xAxisScale = this.scales.setXScale(gl.minX, gl.maxX);
              }
            } else {
              gl.xAxisScale = this.scales.linearScale(1, ticks, ticks);

              if (gl.noLabelsProvided && gl.labels.length > 0) {
                gl.xAxisScale = this.scales.linearScale(1, gl.labels.length, ticks - 1); // this is the only place seriesX is again mutated

                gl.seriesX = gl.labels.slice();
              }
            } // we will still store these labels as the count for this will be different (to draw grid and labels placement)

            if (isXNumeric) {
              gl.labels = gl.xAxisScale.result.slice();
            }
          }

          if (gl.isBarHorizontal && gl.labels.length) {
            gl.xTickAmount = gl.labels.length;
          } // single dataPoint

          this._handleSingleDataPoint(); // minimum x difference to calculate bar width in numeric bars

          this._getMinXDiff();

          return {
            minX: gl.minX,
            maxX: gl.maxX,
          };
        },
      },
      {
        key: 'setZRange',
        value: function setZRange() {
          // minZ, maxZ starts here
          var gl = this.w.globals;
          if (!gl.isDataXYZ) return;

          for (var i = 0; i < gl.series.length; i++) {
            if (typeof gl.seriesZ[i] !== 'undefined') {
              for (var j = 0; j < gl.seriesZ[i].length; j++) {
                if (gl.seriesZ[i][j] !== null && Utils$1.isNumber(gl.seriesZ[i][j])) {
                  gl.maxZ = Math.max(gl.maxZ, gl.seriesZ[i][j]);
                  gl.minZ = Math.min(gl.minZ, gl.seriesZ[i][j]);
                }
              }
            }
          }
        },
      },
      {
        key: '_handleSingleDataPoint',
        value: function _handleSingleDataPoint() {
          var gl = this.w.globals;
          var cnf = this.w.config;

          if (gl.minX === gl.maxX) {
            var datetimeObj = new DateTime(this.ctx);

            if (cnf.xaxis.type === 'datetime') {
              var newMinX = datetimeObj.getDate(gl.minX);

              if (cnf.xaxis.labels.datetimeUTC) {
                newMinX.setUTCDate(newMinX.getUTCDate() - 2);
              } else {
                newMinX.setDate(newMinX.getDate() - 2);
              }

              gl.minX = new Date(newMinX).getTime();
              var newMaxX = datetimeObj.getDate(gl.maxX);

              if (cnf.xaxis.labels.datetimeUTC) {
                newMaxX.setUTCDate(newMaxX.getUTCDate() + 2);
              } else {
                newMaxX.setDate(newMaxX.getDate() + 2);
              }

              gl.maxX = new Date(newMaxX).getTime();
              console.log(gl.minX, gl.maxX);
            } else if (
              cnf.xaxis.type === 'numeric' ||
              (cnf.xaxis.type === 'category' && !gl.noLabelsProvided)
            ) {
              gl.minX = gl.minX - 2;
              gl.initialMinX = gl.minX;
              gl.maxX = gl.maxX + 2;
              gl.initialMaxX = gl.maxX;
            }
          }
        },
      },
      {
        key: '_getMinXDiff',
        value: function _getMinXDiff() {
          var gl = this.w.globals;

          if (gl.isXNumeric) {
            // get the least x diff if numeric x axis is present
            gl.seriesX.forEach(function (sX, i) {
              if (sX.length === 1) {
                // a small hack to prevent overlapping multiple bars when there is just 1 datapoint in bar series.
                // fix #811
                sX.push(
                  gl.seriesX[gl.maxValsInArrayIndex][gl.seriesX[gl.maxValsInArrayIndex].length - 1]
                );
              } // fix #983 (clone the array to avoid side effects)

              var seriesX = sX.slice();
              seriesX.sort(function (a, b) {
                return a - b;
              });
              seriesX.forEach(function (s, j) {
                if (j > 0) {
                  var xDiff = s - seriesX[j - 1];

                  if (xDiff > 0) {
                    gl.minXDiff = Math.min(xDiff, gl.minXDiff);
                  }
                }
              });

              if (gl.dataPoints === 1 && gl.minXDiff === Number.MAX_VALUE) {
                // fixes apexcharts.js #1221
                gl.minXDiff = 0.5;
              }
            });
          }
        },
      },
      {
        key: '_setStackedMinMax',
        value: function _setStackedMinMax() {
          var gl = this.w.globals; // for stacked charts, we calculate each series's parallel values. i.e, series[0][j] + series[1][j] .... [series[i.length][j]] and get the max out of it

          var stackedPoss = [];
          var stackedNegs = [];

          if (gl.series.length) {
            for (var j = 0; j < gl.series[gl.maxValsInArrayIndex].length; j++) {
              var poss = 0;
              var negs = 0;

              for (var i = 0; i < gl.series.length; i++) {
                if (gl.series[i][j] !== null && Utils$1.isNumber(gl.series[i][j])) {
                  // 0.0001 fixes #185 when values are very small
                  gl.series[i][j] > 0
                    ? (poss = poss + parseFloat(gl.series[i][j]) + 0.0001)
                    : (negs = negs + parseFloat(gl.series[i][j]));
                }

                if (i === gl.series.length - 1) {
                  // push all the totals to the array for future use
                  stackedPoss.push(poss);
                  stackedNegs.push(negs);
                }
              }
            }
          } // get the max/min out of the added parallel values

          for (var z = 0; z < stackedPoss.length; z++) {
            gl.maxY = Math.max(gl.maxY, stackedPoss[z]);
            gl.minY = Math.min(gl.minY, stackedNegs[z]);
          }
        },
      },
    ]);

    return Range;
  })();

  /**
   * ApexCharts YAxis Class for drawing Y-Axis.
   *
   * @module YAxis
   **/

  var YAxis = /*#__PURE__*/ (function () {
    function YAxis(ctx) {
      _classCallCheck(this, YAxis);

      this.ctx = ctx;
      this.w = ctx.w;
      var w = this.w;
      this.xaxisFontSize = w.config.xaxis.labels.style.fontSize;
      this.axisFontFamily = w.config.xaxis.labels.style.fontFamily;
      this.xaxisForeColors = w.config.xaxis.labels.style.colors;
      this.isCategoryBarHorizontal =
        w.config.chart.type === 'bar' && w.config.plotOptions.bar.horizontal;
      this.xAxisoffX = 0;

      if (w.config.xaxis.position === 'bottom') {
        this.xAxisoffX = w.globals.gridHeight;
      }

      this.drawnLabels = [];
      this.axesUtils = new AxesUtils(ctx);
    }

    _createClass(YAxis, [
      {
        key: 'drawYaxis',
        value: function drawYaxis(realIndex) {
          var _this = this;

          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var yaxisStyle = w.config.yaxis[realIndex].labels.style;
          var yaxisFontSize = yaxisStyle.fontSize;
          var yaxisFontFamily = yaxisStyle.fontFamily;
          var yaxisFontWeight = yaxisStyle.fontWeight;
          var elYaxis = graphics.group({
            class: 'apexcharts-yaxis',
            rel: realIndex,
            transform: 'translate(' + w.globals.translateYAxisX[realIndex] + ', 0)',
          });

          if (this.axesUtils.isYAxisHidden(realIndex)) {
            return elYaxis;
          }

          var elYaxisTexts = graphics.group({
            class: 'apexcharts-yaxis-texts-g',
          });
          elYaxis.add(elYaxisTexts);
          var tickAmount = w.globals.yAxisScale[realIndex].result.length - 1; // labelsDivider is simply svg height/number of ticks

          var labelsDivider = w.globals.gridHeight / tickAmount; // initial label position = 0;

          var l = w.globals.translateY;
          var lbFormatter = w.globals.yLabelFormatters[realIndex];
          var labels = w.globals.yAxisScale[realIndex].result.slice();
          labels = this.axesUtils.checkForReversedLabels(realIndex, labels);
          var firstLabel = '';

          if (w.config.yaxis[realIndex].labels.show) {
            var _loop = function _loop(i) {
              var val = labels[i];
              val = lbFormatter(val, i, w);
              var xPad = w.config.yaxis[realIndex].labels.padding;

              if (w.config.yaxis[realIndex].opposite && w.config.yaxis.length !== 0) {
                xPad = xPad * -1;
              }

              var yColors = _this.axesUtils.getYAxisForeColor(yaxisStyle.colors, realIndex);

              var getForeColor = function getForeColor() {
                return Array.isArray(yColors) ? yColors[i] : yColors;
              };

              var label = graphics.drawText({
                x: xPad,
                y: l + tickAmount / 10 + w.config.yaxis[realIndex].labels.offsetY + 1,
                text: val,
                textAnchor: w.config.yaxis[realIndex].opposite ? 'start' : 'end',
                fontSize: yaxisFontSize,
                fontFamily: yaxisFontFamily,
                fontWeight: yaxisFontWeight,
                foreColor: getForeColor(),
                isPlainText: false,
                cssClass: 'apexcharts-yaxis-label ' + yaxisStyle.cssClass,
              });

              if (i === tickAmount) {
                firstLabel = label;
              }

              elYaxisTexts.add(label);
              var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');
              elTooltipTitle.textContent = Array.isArray(val) ? val.join(' ') : val;
              label.node.appendChild(elTooltipTitle);

              if (w.config.yaxis[realIndex].labels.rotate !== 0) {
                var firstabelRotatingCenter = graphics.rotateAroundCenter(firstLabel.node);
                var labelRotatingCenter = graphics.rotateAroundCenter(label.node);
                label.node.setAttribute(
                  'transform',
                  'rotate('
                    .concat(w.config.yaxis[realIndex].labels.rotate, ' ')
                    .concat(firstabelRotatingCenter.x, ' ')
                    .concat(labelRotatingCenter.y, ')')
                );
              }

              l = l + labelsDivider;
            };

            for (var i = tickAmount; i >= 0; i--) {
              _loop(i);
            }
          }

          if (w.config.yaxis[realIndex].title.text !== undefined) {
            var elYaxisTitle = graphics.group({
              class: 'apexcharts-yaxis-title',
            });
            var _x = 0;

            if (w.config.yaxis[realIndex].opposite) {
              _x = w.globals.translateYAxisX[realIndex];
            }

            var elYAxisTitleText = graphics.drawText({
              x: _x,
              y:
                w.globals.gridHeight / 2 +
                w.globals.translateY +
                w.config.yaxis[realIndex].title.offsetY,
              text: w.config.yaxis[realIndex].title.text,
              textAnchor: 'end',
              foreColor: w.config.yaxis[realIndex].title.style.color,
              fontSize: w.config.yaxis[realIndex].title.style.fontSize,
              fontWeight: w.config.yaxis[realIndex].title.style.fontWeight,
              fontFamily: w.config.yaxis[realIndex].title.style.fontFamily,
              cssClass:
                'apexcharts-yaxis-title-text ' + w.config.yaxis[realIndex].title.style.cssClass,
            });
            elYaxisTitle.add(elYAxisTitleText);
            elYaxis.add(elYaxisTitle);
          }

          var axisBorder = w.config.yaxis[realIndex].axisBorder;
          var x = 31 + axisBorder.offsetX;

          if (w.config.yaxis[realIndex].opposite) {
            x = -31 - axisBorder.offsetX;
          }

          if (axisBorder.show) {
            var elVerticalLine = graphics.drawLine(
              x,
              w.globals.translateY + axisBorder.offsetY - 2,
              x,
              w.globals.gridHeight + w.globals.translateY + axisBorder.offsetY + 2,
              axisBorder.color,
              0,
              axisBorder.width
            );
            elYaxis.add(elVerticalLine);
          }

          if (w.config.yaxis[realIndex].axisTicks.show) {
            this.axesUtils.drawYAxisTicks(
              x,
              tickAmount,
              axisBorder,
              w.config.yaxis[realIndex].axisTicks,
              realIndex,
              labelsDivider,
              elYaxis
            );
          }

          return elYaxis;
        }, // This actually becomes horizontal axis (for bar charts)
      },
      {
        key: 'drawYaxisInversed',
        value: function drawYaxisInversed(realIndex) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var elXaxis = graphics.group({
            class: 'apexcharts-xaxis apexcharts-yaxis-inversed',
          });
          var elXaxisTexts = graphics.group({
            class: 'apexcharts-xaxis-texts-g',
            transform: 'translate('
              .concat(w.globals.translateXAxisX, ', ')
              .concat(w.globals.translateXAxisY, ')'),
          });
          elXaxis.add(elXaxisTexts);
          var tickAmount = w.globals.yAxisScale[realIndex].result.length - 1; // labelsDivider is simply svg width/number of ticks

          var labelsDivider = w.globals.gridWidth / tickAmount + 0.1; // initial label position;

          var l = labelsDivider + w.config.xaxis.labels.offsetX;
          var lbFormatter = w.globals.xLabelFormatter;
          var labels = w.globals.yAxisScale[realIndex].result.slice();
          var timescaleLabels = w.globals.timescaleLabels;

          if (timescaleLabels.length > 0) {
            this.xaxisLabels = timescaleLabels.slice();
            labels = timescaleLabels.slice();
            tickAmount = labels.length;
          }

          labels = this.axesUtils.checkForReversedLabels(realIndex, labels);
          var tl = timescaleLabels.length;

          if (w.config.xaxis.labels.show) {
            for (var i = tl ? 0 : tickAmount; tl ? i < tl : i >= 0; tl ? i++ : i--) {
              var val = labels[i];
              val = lbFormatter(val, i, w);
              var x =
                w.globals.gridWidth +
                w.globals.padHorizontal -
                (l - labelsDivider + w.config.xaxis.labels.offsetX);

              if (timescaleLabels.length) {
                var label = this.axesUtils.getLabel(
                  labels,
                  timescaleLabels,
                  x,
                  i,
                  this.drawnLabels,
                  this.xaxisFontSize
                );
                x = label.x;
                val = label.text;
                this.drawnLabels.push(label.text);

                if (i === 0 && w.globals.skipFirstTimelinelabel) {
                  val = '';
                }

                if (i === labels.length - 1 && w.globals.skipLastTimelinelabel) {
                  val = '';
                }
              }

              var elTick = graphics.drawText({
                x: x,
                y:
                  this.xAxisoffX +
                  w.config.xaxis.labels.offsetY +
                  30 -
                  (w.config.xaxis.position === 'top'
                    ? w.globals.xAxisHeight + w.config.xaxis.axisTicks.height - 2
                    : 0),
                text: val,
                textAnchor: 'middle',
                foreColor: Array.isArray(this.xaxisForeColors)
                  ? this.xaxisForeColors[realIndex]
                  : this.xaxisForeColors,
                fontSize: this.xaxisFontSize,
                fontFamily: this.xaxisFontFamily,
                fontWeight: w.config.xaxis.labels.style.fontWeight,
                isPlainText: false,
                cssClass: 'apexcharts-xaxis-label ' + w.config.xaxis.labels.style.cssClass,
              });
              elXaxisTexts.add(elTick);
              elTick.tspan(val);
              var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');
              elTooltipTitle.textContent = val;
              elTick.node.appendChild(elTooltipTitle);
              l = l + labelsDivider;
            }
          }

          this.inversedYAxisTitleText(elXaxis);
          this.inversedYAxisBorder(elXaxis);
          return elXaxis;
        },
      },
      {
        key: 'inversedYAxisBorder',
        value: function inversedYAxisBorder(parent) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var axisBorder = w.config.xaxis.axisBorder;

          if (axisBorder.show) {
            var lineCorrection = 0;

            if (w.config.chart.type === 'bar' && w.globals.isXNumeric) {
              lineCorrection = lineCorrection - 15;
            }

            var elHorzLine = graphics.drawLine(
              w.globals.padHorizontal + lineCorrection + axisBorder.offsetX,
              this.xAxisoffX,
              w.globals.gridWidth,
              this.xAxisoffX,
              axisBorder.color,
              0,
              axisBorder.height
            );
            parent.add(elHorzLine);
          }
        },
      },
      {
        key: 'inversedYAxisTitleText',
        value: function inversedYAxisTitleText(parent) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);

          if (w.config.xaxis.title.text !== undefined) {
            var elYaxisTitle = graphics.group({
              class: 'apexcharts-xaxis-title apexcharts-yaxis-title-inversed',
            });
            var elYAxisTitleText = graphics.drawText({
              x: w.globals.gridWidth / 2 + w.config.xaxis.title.offsetX,
              y:
                this.xAxisoffX +
                parseFloat(this.xaxisFontSize) +
                parseFloat(w.config.xaxis.title.style.fontSize) +
                w.config.xaxis.title.offsetY +
                20,
              text: w.config.xaxis.title.text,
              textAnchor: 'middle',
              fontSize: w.config.xaxis.title.style.fontSize,
              fontFamily: w.config.xaxis.title.style.fontFamily,
              fontWeight: w.config.xaxis.title.style.fontWeight,
              foreColor: w.config.xaxis.title.style.color,
              cssClass: 'apexcharts-xaxis-title-text ' + w.config.xaxis.title.style.cssClass,
            });
            elYaxisTitle.add(elYAxisTitleText);
            parent.add(elYaxisTitle);
          }
        },
      },
      {
        key: 'yAxisTitleRotate',
        value: function yAxisTitleRotate(realIndex, yAxisOpposite) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var yAxisLabelsCoord = {
            width: 0,
            height: 0,
          };
          var yAxisTitleCoord = {
            width: 0,
            height: 0,
          };
          var elYAxisLabelsWrap = w.globals.dom.baseEl.querySelector(
            " .apexcharts-yaxis[rel='".concat(realIndex, "'] .apexcharts-yaxis-texts-g")
          );

          if (elYAxisLabelsWrap !== null) {
            yAxisLabelsCoord = elYAxisLabelsWrap.getBoundingClientRect();
          }

          var yAxisTitle = w.globals.dom.baseEl.querySelector(
            ".apexcharts-yaxis[rel='".concat(realIndex, "'] .apexcharts-yaxis-title text")
          );

          if (yAxisTitle !== null) {
            yAxisTitleCoord = yAxisTitle.getBoundingClientRect();
          }

          if (yAxisTitle !== null) {
            var x = this.xPaddingForYAxisTitle(
              realIndex,
              yAxisLabelsCoord,
              yAxisTitleCoord,
              yAxisOpposite
            );
            yAxisTitle.setAttribute('x', x.xPos - (yAxisOpposite ? 10 : 0));
          }

          if (yAxisTitle !== null) {
            var titleRotatingCenter = graphics.rotateAroundCenter(yAxisTitle);
            yAxisTitle.setAttribute(
              'transform',
              'rotate('
                .concat(
                  yAxisOpposite
                    ? w.config.yaxis[realIndex].title.rotate * -1
                    : w.config.yaxis[realIndex].title.rotate,
                  ' '
                )
                .concat(titleRotatingCenter.x, ' ')
                .concat(titleRotatingCenter.y, ')')
            );
          }
        },
      },
      {
        key: 'xPaddingForYAxisTitle',
        value: function xPaddingForYAxisTitle(
          realIndex,
          yAxisLabelsCoord,
          yAxisTitleCoord,
          yAxisOpposite
        ) {
          var w = this.w;
          var oppositeAxisCount = 0;
          var x = 0;
          var padd = 10;

          if (w.config.yaxis[realIndex].title.text === undefined || realIndex < 0) {
            return {
              xPos: x,
              padd: 0,
            };
          }

          if (yAxisOpposite) {
            x =
              yAxisLabelsCoord.width +
              w.config.yaxis[realIndex].title.offsetX +
              yAxisTitleCoord.width / 2 +
              padd / 2;
            oppositeAxisCount += 1;

            if (oppositeAxisCount === 0) {
              x = x - padd / 2;
            }
          } else {
            x =
              yAxisLabelsCoord.width * -1 +
              w.config.yaxis[realIndex].title.offsetX +
              padd / 2 +
              yAxisTitleCoord.width / 2;

            if (w.globals.isBarHorizontal) {
              padd = 25;
              x = yAxisLabelsCoord.width * -1 - w.config.yaxis[realIndex].title.offsetX - padd;
            }
          }

          return {
            xPos: x,
            padd: padd,
          };
        }, // sets the x position of the y-axis by counting the labels width, title width and any offset
      },
      {
        key: 'setYAxisXPosition',
        value: function setYAxisXPosition(yaxisLabelCoords, yTitleCoords) {
          var w = this.w;
          var xLeft = 0;
          var xRight = 0;
          var leftOffsetX = 18;
          var rightOffsetX = 1;

          if (w.config.yaxis.length > 1) {
            this.multipleYs = true;
          }

          w.config.yaxis.map(function (yaxe, index) {
            var shouldNotDrawAxis =
              w.globals.ignoreYAxisIndexes.indexOf(index) > -1 ||
              !yaxe.show ||
              yaxe.floating ||
              yaxisLabelCoords[index].width === 0;
            var axisWidth = yaxisLabelCoords[index].width + yTitleCoords[index].width;

            if (!yaxe.opposite) {
              xLeft = w.globals.translateX - leftOffsetX;

              if (!shouldNotDrawAxis) {
                leftOffsetX = leftOffsetX + axisWidth + 20;
              }

              w.globals.translateYAxisX[index] = xLeft + yaxe.labels.offsetX;
            } else {
              if (w.globals.isBarHorizontal) {
                xRight = w.globals.gridWidth + w.globals.translateX - 1;
                w.globals.translateYAxisX[index] = xRight - yaxe.labels.offsetX;
              } else {
                xRight = w.globals.gridWidth + w.globals.translateX + rightOffsetX;

                if (!shouldNotDrawAxis) {
                  rightOffsetX = rightOffsetX + axisWidth + 20;
                }

                w.globals.translateYAxisX[index] = xRight - yaxe.labels.offsetX + 20;
              }
            }
          });
        },
      },
      {
        key: 'setYAxisTextAlignments',
        value: function setYAxisTextAlignments() {
          var w = this.w;
          var yaxis = w.globals.dom.baseEl.getElementsByClassName('apexcharts-yaxis');
          yaxis = Utils$1.listToArray(yaxis);
          yaxis.forEach(function (y, index) {
            var yaxe = w.config.yaxis[index]; // proceed only if user has specified alignment

            if (yaxe && yaxe.labels.align !== undefined) {
              var yAxisInner = w.globals.dom.baseEl.querySelector(
                ".apexcharts-yaxis[rel='".concat(index, "'] .apexcharts-yaxis-texts-g")
              );
              var yAxisTexts = w.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-yaxis[rel='".concat(index, "'] .apexcharts-yaxis-label")
              );
              yAxisTexts = Utils$1.listToArray(yAxisTexts);
              var rect = yAxisInner.getBoundingClientRect();

              if (yaxe.labels.align === 'left') {
                yAxisTexts.forEach(function (label, lI) {
                  label.setAttribute('text-anchor', 'start');
                });

                if (!yaxe.opposite) {
                  yAxisInner.setAttribute('transform', 'translate(-'.concat(rect.width, ', 0)'));
                }
              } else if (yaxe.labels.align === 'center') {
                yAxisTexts.forEach(function (label, lI) {
                  label.setAttribute('text-anchor', 'middle');
                });
                yAxisInner.setAttribute(
                  'transform',
                  'translate('.concat((rect.width / 2) * (!yaxe.opposite ? -1 : 1), ', 0)')
                );
              } else if (yaxe.labels.align === 'right') {
                yAxisTexts.forEach(function (label, lI) {
                  label.setAttribute('text-anchor', 'end');
                });

                if (yaxe.opposite) {
                  yAxisInner.setAttribute('transform', 'translate('.concat(rect.width, ', 0)'));
                }
              }
            }
          });
        },
      },
    ]);

    return YAxis;
  })();

  var Events = /*#__PURE__*/ (function () {
    function Events(ctx) {
      _classCallCheck(this, Events);

      this.ctx = ctx;
      this.w = ctx.w;
      this.documentEvent = Utils$1.bind(this.documentEvent, this);
    }

    _createClass(Events, [
      {
        key: 'addEventListener',
        value: function addEventListener(name, handler) {
          var w = this.w;

          if (w.globals.events.hasOwnProperty(name)) {
            w.globals.events[name].push(handler);
          } else {
            w.globals.events[name] = [handler];
          }
        },
      },
      {
        key: 'removeEventListener',
        value: function removeEventListener(name, handler) {
          var w = this.w;

          if (!w.globals.events.hasOwnProperty(name)) {
            return;
          }

          var index = w.globals.events[name].indexOf(handler);

          if (index !== -1) {
            w.globals.events[name].splice(index, 1);
          }
        },
      },
      {
        key: 'fireEvent',
        value: function fireEvent(name, args) {
          var w = this.w;

          if (!w.globals.events.hasOwnProperty(name)) {
            return;
          }

          if (!args || !args.length) {
            args = [];
          }

          var evs = w.globals.events[name];
          var l = evs.length;

          for (var i = 0; i < l; i++) {
            evs[i].apply(null, args);
          }
        },
      },
      {
        key: 'setupEventHandlers',
        value: function setupEventHandlers() {
          var _this = this;

          var w = this.w;
          var me = this.ctx;
          var clickableArea = w.globals.dom.baseEl.querySelector(w.globals.chartClass);
          this.ctx.eventList.forEach(function (event) {
            clickableArea.addEventListener(
              event,
              function (e) {
                var opts = Object.assign({}, w, {
                  seriesIndex: w.globals.capturedSeriesIndex,
                  dataPointIndex: w.globals.capturedDataPointIndex,
                });

                if (e.type === 'mousemove' || e.type === 'touchmove') {
                  if (typeof w.config.chart.events.mouseMove === 'function') {
                    w.config.chart.events.mouseMove(e, me, opts);
                  }
                } else if (e.type === 'mouseleave' || e.type === 'touchleave') {
                  if (typeof w.config.chart.events.mouseLeave === 'function') {
                    w.config.chart.events.mouseLeave(e, me, opts);
                  }
                } else if ((e.type === 'mouseup' && e.which === 1) || e.type === 'touchend') {
                  if (typeof w.config.chart.events.click === 'function') {
                    w.config.chart.events.click(e, me, opts);
                  }

                  me.ctx.events.fireEvent('click', [e, me, opts]);
                }
              },
              {
                capture: false,
                passive: true,
              }
            );
          });
          this.ctx.eventList.forEach(function (event) {
            w.globals.dom.baseEl.addEventListener(event, _this.documentEvent, {
              passive: true,
            });
          });
          this.ctx.core.setupBrushHandler();
        },
      },
      {
        key: 'documentEvent',
        value: function documentEvent(e) {
          var w = this.w;
          var target = e.target.className;

          if (e.type === 'click') {
            var elMenu = w.globals.dom.baseEl.querySelector('.apexcharts-menu');

            if (
              elMenu &&
              elMenu.classList.contains('apexcharts-menu-open') &&
              target !== 'apexcharts-menu-icon'
            ) {
              elMenu.classList.remove('apexcharts-menu-open');
            }
          }

          w.globals.clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;
          w.globals.clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;
        },
      },
    ]);

    return Events;
  })();

  var Localization = /*#__PURE__*/ (function () {
    function Localization(ctx) {
      _classCallCheck(this, Localization);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(Localization, [
      {
        key: 'setCurrentLocaleValues',
        value: function setCurrentLocaleValues(localeName) {
          var locales = this.w.config.chart.locales; // check if user has specified locales in global Apex variable
          // if yes - then extend those with local chart's locale

          if (
            window.Apex.chart &&
            window.Apex.chart.locales &&
            window.Apex.chart.locales.length > 0
          ) {
            locales = this.w.config.chart.locales.concat(window.Apex.chart.locales);
          } // find the locale from the array of locales which user has set (either by chart.defaultLocale or by calling setLocale() method.)

          var selectedLocale = locales.filter(function (c) {
            return c.name === localeName;
          })[0];

          if (selectedLocale) {
            // create a complete locale object by extending defaults so you don't get undefined errors.
            var ret = Utils$1.extend(en, selectedLocale); // store these locale options in global var for ease access

            this.w.globals.locale = ret.options;
          } else {
            throw new Error(
              'Wrong locale name provided. Please make sure you set the correct locale name in options'
            );
          }
        },
      },
    ]);

    return Localization;
  })();

  var Axes = /*#__PURE__*/ (function () {
    function Axes(ctx) {
      _classCallCheck(this, Axes);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(Axes, [
      {
        key: 'drawAxis',
        value: function drawAxis(type, xyRatios) {
          var gl = this.w.globals;
          var cnf = this.w.config;
          var xAxis = new XAxis(this.ctx);
          var yAxis = new YAxis(this.ctx);

          if (gl.axisCharts && type !== 'radar') {
            var elXaxis, elYaxis;

            if (gl.isBarHorizontal) {
              elYaxis = yAxis.drawYaxisInversed(0);
              elXaxis = xAxis.drawXaxisInversed(0);
              gl.dom.elGraphical.add(elXaxis);
              gl.dom.elGraphical.add(elYaxis);
            } else {
              elXaxis = xAxis.drawXaxis();
              gl.dom.elGraphical.add(elXaxis);
              cnf.yaxis.map(function (yaxe, index) {
                if (gl.ignoreYAxisIndexes.indexOf(index) === -1) {
                  elYaxis = yAxis.drawYaxis(index);
                  gl.dom.Paper.add(elYaxis);
                }
              });
            }
          }
        },
      },
    ]);

    return Axes;
  })();

  var Crosshairs = /*#__PURE__*/ (function () {
    function Crosshairs(ctx) {
      _classCallCheck(this, Crosshairs);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(Crosshairs, [
      {
        key: 'drawXCrosshairs',
        value: function drawXCrosshairs() {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var filters = new Filters(this.ctx);
          var crosshairGradient = w.config.xaxis.crosshairs.fill.gradient;
          var crosshairShadow = w.config.xaxis.crosshairs.dropShadow;
          var fillType = w.config.xaxis.crosshairs.fill.type;
          var gradientFrom = crosshairGradient.colorFrom;
          var gradientTo = crosshairGradient.colorTo;
          var opacityFrom = crosshairGradient.opacityFrom;
          var opacityTo = crosshairGradient.opacityTo;
          var stops = crosshairGradient.stops;
          var shadow = 'none';
          var dropShadow = crosshairShadow.enabled;
          var shadowLeft = crosshairShadow.left;
          var shadowTop = crosshairShadow.top;
          var shadowBlur = crosshairShadow.blur;
          var shadowColor = crosshairShadow.color;
          var shadowOpacity = crosshairShadow.opacity;
          var xcrosshairsFill = w.config.xaxis.crosshairs.fill.color;

          if (w.config.xaxis.crosshairs.show) {
            if (fillType === 'gradient') {
              xcrosshairsFill = graphics.drawGradient(
                'vertical',
                gradientFrom,
                gradientTo,
                opacityFrom,
                opacityTo,
                null,
                stops,
                null
              );
            }

            var xcrosshairs = graphics.drawRect();

            if (w.config.xaxis.crosshairs.width === 1) {
              // to prevent drawing 2 lines, convert rect to line
              xcrosshairs = graphics.drawLine();
            }

            var gridHeight = w.globals.gridHeight;

            if (!Utils$1.isNumber(gridHeight) || gridHeight < 0) {
              gridHeight = 0;
            }

            var crosshairsWidth = w.config.xaxis.crosshairs.width;

            if (!Utils$1.isNumber(crosshairsWidth) || crosshairsWidth < 0) {
              crosshairsWidth = 0;
            }

            xcrosshairs.attr({
              class: 'apexcharts-xcrosshairs',
              x: 0,
              y: 0,
              y2: gridHeight,
              width: crosshairsWidth,
              height: gridHeight,
              fill: xcrosshairsFill,
              filter: shadow,
              'fill-opacity': w.config.xaxis.crosshairs.opacity,
              stroke: w.config.xaxis.crosshairs.stroke.color,
              'stroke-width': w.config.xaxis.crosshairs.stroke.width,
              'stroke-dasharray': w.config.xaxis.crosshairs.stroke.dashArray,
            });

            if (dropShadow) {
              xcrosshairs = filters.dropShadow(xcrosshairs, {
                left: shadowLeft,
                top: shadowTop,
                blur: shadowBlur,
                color: shadowColor,
                opacity: shadowOpacity,
              });
            }

            w.globals.dom.elGraphical.add(xcrosshairs);
          }
        },
      },
      {
        key: 'drawYCrosshairs',
        value: function drawYCrosshairs() {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var crosshair = w.config.yaxis[0].crosshairs;
          var offX = w.globals.barPadForNumericAxis;

          if (w.config.yaxis[0].crosshairs.show) {
            var ycrosshairs = graphics.drawLine(
              -offX,
              0,
              w.globals.gridWidth + offX,
              0,
              crosshair.stroke.color,
              crosshair.stroke.dashArray,
              crosshair.stroke.width
            );
            ycrosshairs.attr({
              class: 'apexcharts-ycrosshairs',
            });
            w.globals.dom.elGraphical.add(ycrosshairs);
          } // draw an invisible crosshair to help in positioning the yaxis tooltip

          var ycrosshairsHidden = graphics.drawLine(
            -offX,
            0,
            w.globals.gridWidth + offX,
            0,
            crosshair.stroke.color,
            0,
            0
          );
          ycrosshairsHidden.attr({
            class: 'apexcharts-ycrosshairs-hidden',
          });
          w.globals.dom.elGraphical.add(ycrosshairsHidden);
        },
      },
    ]);

    return Crosshairs;
  })();

  /**
   * ApexCharts Responsive Class to override options for different screen sizes.
   *
   * @module Responsive
   **/

  var Responsive = /*#__PURE__*/ (function () {
    function Responsive(ctx) {
      _classCallCheck(this, Responsive);

      this.ctx = ctx;
      this.w = ctx.w;
    } // the opts parameter if not null has to be set overriding everything
    // as the opts is set by user externally

    _createClass(Responsive, [
      {
        key: 'checkResponsiveConfig',
        value: function checkResponsiveConfig(opts) {
          var _this = this;

          var w = this.w;
          var cnf = w.config; // check if responsive config exists

          if (cnf.responsive.length === 0) return;
          var res = cnf.responsive.slice();
          res
            .sort(function (a, b) {
              return a.breakpoint > b.breakpoint ? 1 : b.breakpoint > a.breakpoint ? -1 : 0;
            })
            .reverse();
          var config = new Config({});

          var iterateResponsiveOptions = function iterateResponsiveOptions() {
            var newOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var largestBreakpoint = res[0].breakpoint;
            var width = window.innerWidth > 0 ? window.innerWidth : screen.width;

            if (width > largestBreakpoint) {
              var options = CoreUtils.extendArrayProps(config, w.globals.initialConfig, w);
              newOptions = Utils$1.extend(options, newOptions);
              newOptions = Utils$1.extend(w.config, newOptions);

              _this.overrideResponsiveOptions(newOptions);
            } else {
              for (var i = 0; i < res.length; i++) {
                if (width < res[i].breakpoint) {
                  newOptions = CoreUtils.extendArrayProps(config, res[i].options, w);
                  newOptions = Utils$1.extend(w.config, newOptions);

                  _this.overrideResponsiveOptions(newOptions);
                }
              }
            }
          };

          if (opts) {
            var options = CoreUtils.extendArrayProps(config, opts, w);
            options = Utils$1.extend(w.config, options);
            options = Utils$1.extend(options, opts);
            iterateResponsiveOptions(options);
          } else {
            iterateResponsiveOptions({});
          }
        },
      },
      {
        key: 'overrideResponsiveOptions',
        value: function overrideResponsiveOptions(newOptions) {
          var newConfig = new Config(newOptions).init({
            responsiveOverride: true,
          });
          this.w.config = newConfig;
        },
      },
    ]);

    return Responsive;
  })();

  /**
   * ApexCharts Theme Class for setting the colors and palettes.
   *
   * @module Theme
   **/

  var Theme = /*#__PURE__*/ (function () {
    function Theme(ctx) {
      _classCallCheck(this, Theme);

      this.ctx = ctx;
      this.colors = [];
      this.w = ctx.w;
      var w = this.w;
      this.isColorFn = false;
      this.isHeatmapDistributed =
        (w.config.chart.type === 'treemap' && w.config.plotOptions.treemap.distributed) ||
        (w.config.chart.type === 'heatmap' && w.config.plotOptions.heatmap.distributed);
      this.isBarDistributed =
        w.config.plotOptions.bar.distributed &&
        (w.config.chart.type === 'bar' || w.config.chart.type === 'rangeBar');
    }

    _createClass(Theme, [
      {
        key: 'init',
        value: function init() {
          this.setDefaultColors();
        },
      },
      {
        key: 'setDefaultColors',
        value: function setDefaultColors() {
          var _this = this;

          var w = this.w;
          var utils = new Utils$1();
          w.globals.dom.elWrap.classList.add('apexcharts-theme-'.concat(w.config.theme.mode));

          if (w.config.colors === undefined) {
            w.globals.colors = this.predefined();
          } else {
            w.globals.colors = w.config.colors; // if user provided a function in colors, we need to eval here

            if (
              Array.isArray(w.config.colors) &&
              w.config.colors.length > 0 &&
              typeof w.config.colors[0] === 'function'
            ) {
              w.globals.colors = w.config.series.map(function (s, i) {
                var c = w.config.colors[i];
                if (!c) c = w.config.colors[0];

                if (typeof c === 'function') {
                  _this.isColorFn = true;
                  return c({
                    value: w.globals.axisCharts
                      ? w.globals.series[i][0]
                        ? w.globals.series[i][0]
                        : 0
                      : w.globals.series[i],
                    seriesIndex: i,
                    dataPointIndex: i,
                    w: w,
                  });
                }

                return c;
              });
            }
          } // user defined colors in series array

          w.globals.seriesColors.map(function (c, i) {
            if (c) {
              w.globals.colors[i] = c;
            }
          });

          if (w.config.theme.monochrome.enabled) {
            var monoArr = [];
            var glsCnt = w.globals.series.length;

            if (this.isBarDistributed || this.isHeatmapDistributed) {
              glsCnt = w.globals.series[0].length * w.globals.series.length;
            }

            var mainColor = w.config.theme.monochrome.color;
            var part = 1 / (glsCnt / w.config.theme.monochrome.shadeIntensity);
            var shade = w.config.theme.monochrome.shadeTo;
            var percent = 0;

            for (var gsl = 0; gsl < glsCnt; gsl++) {
              var newColor = void 0;

              if (shade === 'dark') {
                newColor = utils.shadeColor(percent * -1, mainColor);
                percent = percent + part;
              } else {
                newColor = utils.shadeColor(percent, mainColor);
                percent = percent + part;
              }

              monoArr.push(newColor);
            }

            w.globals.colors = monoArr.slice();
          }

          var defaultColors = w.globals.colors.slice(); // if user specified fewer colors than no. of series, push the same colors again

          this.pushExtraColors(w.globals.colors);
          var colorTypes = ['fill', 'stroke'];
          colorTypes.forEach(function (c) {
            if (w.config[c].colors === undefined) {
              w.globals[c].colors = _this.isColorFn ? w.config.colors : defaultColors;
            } else {
              w.globals[c].colors = w.config[c].colors.slice();
            }

            _this.pushExtraColors(w.globals[c].colors);
          });

          if (w.config.dataLabels.style.colors === undefined) {
            w.globals.dataLabels.style.colors = defaultColors;
          } else {
            w.globals.dataLabels.style.colors = w.config.dataLabels.style.colors.slice();
          }

          this.pushExtraColors(w.globals.dataLabels.style.colors, 50);

          if (w.config.plotOptions.radar.polygons.fill.colors === undefined) {
            w.globals.radarPolygons.fill.colors = [
              w.config.theme.mode === 'dark' ? '#424242' : 'none',
            ];
          } else {
            w.globals.radarPolygons.fill.colors =
              w.config.plotOptions.radar.polygons.fill.colors.slice();
          }

          this.pushExtraColors(w.globals.radarPolygons.fill.colors, 20); // The point colors

          if (w.config.markers.colors === undefined) {
            w.globals.markers.colors = defaultColors;
          } else {
            w.globals.markers.colors = w.config.markers.colors.slice();
          }

          this.pushExtraColors(w.globals.markers.colors);
        }, // When the number of colors provided is less than the number of series, this method
        // will push same colors to the list
        // params:
        // distributed is only valid for distributed column/bar charts
      },
      {
        key: 'pushExtraColors',
        value: function pushExtraColors(colorSeries, length) {
          var distributed =
            arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          var w = this.w;
          var len = length || w.globals.series.length;

          if (distributed === null) {
            distributed =
              this.isBarDistributed ||
              this.isHeatmapDistributed ||
              (w.config.chart.type === 'heatmap' &&
                w.config.plotOptions.heatmap.colorScale.inverse);
          }

          if (distributed && w.globals.series.length) {
            len = w.globals.series[w.globals.maxValsInArrayIndex].length * w.globals.series.length;
          }

          if (colorSeries.length < len) {
            var diff = len - colorSeries.length;

            for (var i = 0; i < diff; i++) {
              colorSeries.push(colorSeries[i]);
            }
          }
        },
      },
      {
        key: 'updateThemeOptions',
        value: function updateThemeOptions(options) {
          options.chart = options.chart || {};
          options.tooltip = options.tooltip || {};
          var mode = options.theme.mode || 'light';
          var palette = options.theme.palette
            ? options.theme.palette
            : mode === 'dark'
            ? 'palette4'
            : 'palette1';
          var foreColor = options.chart.foreColor
            ? options.chart.foreColor
            : mode === 'dark'
            ? '#f6f7f8'
            : '#373d3f';
          options.tooltip.theme = mode;
          options.chart.foreColor = foreColor;
          options.theme.palette = palette;
          return options;
        },
      },
      {
        key: 'predefined',
        value: function predefined() {
          var palette = this.w.config.theme.palette; // D6E3F8, FCEFEF, DCE0D9, A5978B, EDDDD4, D6E3F8, FEF5EF

          switch (palette) {
            case 'palette1':
              this.colors = ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0'];
              break;

            case 'palette2':
              this.colors = ['#3f51b5', '#03a9f4', '#4caf50', '#f9ce1d', '#FF9800'];
              break;

            case 'palette3':
              this.colors = ['#33b2df', '#546E7A', '#d4526e', '#13d8aa', '#A5978B'];
              break;

            case 'palette4':
              this.colors = ['#4ecdc4', '#c7f464', '#81D4FA', '#fd6a6a', '#546E7A'];
              break;

            case 'palette5':
              this.colors = ['#2b908f', '#f9a3a4', '#90ee7e', '#fa4443', '#69d2e7'];
              break;

            case 'palette6':
              this.colors = ['#449DD1', '#F86624', '#EA3546', '#662E9B', '#C5D86D'];
              break;

            case 'palette7':
              this.colors = ['#D7263D', '#1B998B', '#2E294E', '#F46036', '#E2C044'];
              break;

            case 'palette8':
              this.colors = ['#662E9B', '#F86624', '#F9C80E', '#EA3546', '#43BCCD'];
              break;

            case 'palette9':
              this.colors = ['#5C4742', '#A5978B', '#8D5B4C', '#5A2A27', '#C4BBAF'];
              break;

            case 'palette10':
              this.colors = ['#A300D6', '#7D02EB', '#5653FE', '#2983FF', '#00B1F2'];
              break;

            default:
              this.colors = ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0'];
              break;
          }

          return this.colors;
        },
      },
    ]);

    return Theme;
  })();

  var TitleSubtitle = /*#__PURE__*/ (function () {
    function TitleSubtitle(ctx) {
      _classCallCheck(this, TitleSubtitle);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(TitleSubtitle, [
      {
        key: 'draw',
        value: function draw() {
          this.drawTitleSubtitle('title');
          this.drawTitleSubtitle('subtitle');
        },
      },
      {
        key: 'drawTitleSubtitle',
        value: function drawTitleSubtitle(type) {
          var w = this.w;
          var tsConfig = type === 'title' ? w.config.title : w.config.subtitle;
          var x = w.globals.svgWidth / 2;
          var y = tsConfig.offsetY;
          var textAnchor = 'middle';

          if (tsConfig.align === 'left') {
            x = 10;
            textAnchor = 'start';
          } else if (tsConfig.align === 'right') {
            x = w.globals.svgWidth - 10;
            textAnchor = 'end';
          }

          x = x + tsConfig.offsetX;
          y = y + parseInt(tsConfig.style.fontSize, 10) + tsConfig.margin / 2;

          if (tsConfig.text !== undefined) {
            var graphics = new Graphics(this.ctx);
            var titleText = graphics.drawText({
              x: x,
              y: y,
              text: tsConfig.text,
              textAnchor: textAnchor,
              fontSize: tsConfig.style.fontSize,
              fontFamily: tsConfig.style.fontFamily,
              fontWeight: tsConfig.style.fontWeight,
              foreColor: tsConfig.style.color,
              opacity: 1,
            });
            titleText.node.setAttribute('class', 'apexcharts-'.concat(type, '-text'));
            w.globals.dom.Paper.add(titleText);
          }
        },
      },
    ]);

    return TitleSubtitle;
  })();

  var Helpers$2 = /*#__PURE__*/ (function () {
    function Helpers(dCtx) {
      _classCallCheck(this, Helpers);

      this.w = dCtx.w;
      this.dCtx = dCtx;
    }
    /**
     * Get Chart Title/Subtitle Dimensions
     * @memberof Dimensions
     * @return {{width, height}}
     **/

    _createClass(Helpers, [
      {
        key: 'getTitleSubtitleCoords',
        value: function getTitleSubtitleCoords(type) {
          var w = this.w;
          var width = 0;
          var height = 0;
          var floating = type === 'title' ? w.config.title.floating : w.config.subtitle.floating;
          var el = w.globals.dom.baseEl.querySelector('.apexcharts-'.concat(type, '-text'));

          if (el !== null && !floating) {
            var coord = el.getBoundingClientRect();
            width = coord.width;
            height = w.globals.axisCharts ? coord.height + 5 : coord.height;
          }

          return {
            width: width,
            height: height,
          };
        },
      },
      {
        key: 'getLegendsRect',
        value: function getLegendsRect() {
          var w = this.w;
          var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');

          if (
            !w.config.legend.height &&
            (w.config.legend.position === 'top' || w.config.legend.position === 'bottom')
          ) {
            // avoid legend to take up all the space
            elLegendWrap.style.maxHeight = w.globals.svgHeight / 2 + 'px';
          }

          var lgRect = Object.assign({}, Utils$1.getBoundingClientRect(elLegendWrap));

          if (elLegendWrap !== null && !w.config.legend.floating && w.config.legend.show) {
            this.dCtx.lgRect = {
              x: lgRect.x,
              y: lgRect.y,
              height: lgRect.height,
              width: lgRect.height === 0 ? 0 : lgRect.width,
            };
          } else {
            this.dCtx.lgRect = {
              x: 0,
              y: 0,
              height: 0,
              width: 0,
            };
          } // if legend takes up all of the chart space, we need to restrict it.

          if (w.config.legend.position === 'left' || w.config.legend.position === 'right') {
            if (this.dCtx.lgRect.width * 1.5 > w.globals.svgWidth) {
              this.dCtx.lgRect.width = w.globals.svgWidth / 1.5;
            }
          }

          return this.dCtx.lgRect;
        },
      },
      {
        key: 'getLargestStringFromMultiArr',
        value: function getLargestStringFromMultiArr(val, arr) {
          var w = this.w;
          var valArr = val;

          if (w.globals.isMultiLineX) {
            // if the xaxis labels has multiline texts (array)
            var maxArrs = arr.map(function (xl, idx) {
              return Array.isArray(xl) ? xl.length : 1;
            });
            var maxArrLen = Math.max.apply(Math, _toConsumableArray(maxArrs));
            var maxArrIndex = maxArrs.indexOf(maxArrLen);
            valArr = arr[maxArrIndex];
          }

          return valArr;
        },
      },
    ]);

    return Helpers;
  })();

  var DimXAxis = /*#__PURE__*/ (function () {
    function DimXAxis(dCtx) {
      _classCallCheck(this, DimXAxis);

      this.w = dCtx.w;
      this.dCtx = dCtx;
    }
    /**
     * Get X Axis Dimensions
     * @memberof Dimensions
     * @return {{width, height}}
     **/

    _createClass(DimXAxis, [
      {
        key: 'getxAxisLabelsCoords',
        value: function getxAxisLabelsCoords() {
          var w = this.w;
          var xaxisLabels = w.globals.labels.slice();

          if (w.config.xaxis.convertedCatToNumeric && xaxisLabels.length === 0) {
            xaxisLabels = w.globals.categoryLabels;
          }

          var rect;

          if (w.globals.timescaleLabels.length > 0) {
            var coords = this.getxAxisTimeScaleLabelsCoords();
            rect = {
              width: coords.width,
              height: coords.height,
            };
            w.globals.rotateXLabels = false;
          } else {
            this.dCtx.lgWidthForSideLegends =
              (w.config.legend.position === 'left' || w.config.legend.position === 'right') &&
              !w.config.legend.floating
                ? this.dCtx.lgRect.width
                : 0; // get the longest string from the labels array and also apply label formatter

            var xlbFormatter = w.globals.xLabelFormatter; // prevent changing xaxisLabels to avoid issues in multi-yaxes - fix #522

            var val = Utils$1.getLargestStringFromArr(xaxisLabels);
            var valArr = this.dCtx.dimHelpers.getLargestStringFromMultiArr(val, xaxisLabels); // the labels gets changed for bar charts

            if (w.globals.isBarHorizontal) {
              val = w.globals.yAxisScale[0].result.reduce(function (a, b) {
                return a.length > b.length ? a : b;
              }, 0);
              valArr = val;
            }

            var xFormat = new Formatters(this.dCtx.ctx);
            var timestamp = val;
            val = xFormat.xLabelFormat(xlbFormatter, val, timestamp, {
              i: undefined,
              dateFormatter: new DateTime(this.dCtx.ctx).formatDate,
              w: w,
            });
            valArr = xFormat.xLabelFormat(xlbFormatter, valArr, timestamp, {
              i: undefined,
              dateFormatter: new DateTime(this.dCtx.ctx).formatDate,
              w: w,
            });

            if (
              (w.config.xaxis.convertedCatToNumeric && typeof val === 'undefined') ||
              String(val).trim() === ''
            ) {
              val = '1';
              valArr = val;
            }

            var graphics = new Graphics(this.dCtx.ctx);
            var xLabelrect = graphics.getTextRects(val, w.config.xaxis.labels.style.fontSize);
            var xArrLabelrect = xLabelrect;

            if (val !== valArr) {
              xArrLabelrect = graphics.getTextRects(valArr, w.config.xaxis.labels.style.fontSize);
            }

            rect = {
              width:
                xLabelrect.width >= xArrLabelrect.width ? xLabelrect.width : xArrLabelrect.width,
              height:
                xLabelrect.height >= xArrLabelrect.height
                  ? xLabelrect.height
                  : xArrLabelrect.height,
            };

            if (
              (rect.width * xaxisLabels.length >
                w.globals.svgWidth -
                  this.dCtx.lgWidthForSideLegends -
                  this.dCtx.yAxisWidth -
                  this.dCtx.gridPad.left -
                  this.dCtx.gridPad.right &&
                w.config.xaxis.labels.rotate !== 0) ||
              w.config.xaxis.labels.rotateAlways
            ) {
              if (!w.globals.isBarHorizontal) {
                w.globals.rotateXLabels = true;

                var getRotatedTextRects = function getRotatedTextRects(text) {
                  return graphics.getTextRects(
                    text,
                    w.config.xaxis.labels.style.fontSize,
                    w.config.xaxis.labels.style.fontFamily,
                    'rotate('.concat(w.config.xaxis.labels.rotate, ' 0 0)'),
                    false
                  );
                };

                xLabelrect = getRotatedTextRects(val);

                if (val !== valArr) {
                  xArrLabelrect = getRotatedTextRects(valArr);
                }

                rect.height =
                  (xLabelrect.height > xArrLabelrect.height
                    ? xLabelrect.height
                    : xArrLabelrect.height) / 1.5;
                rect.width =
                  xLabelrect.width > xArrLabelrect.width ? xLabelrect.width : xArrLabelrect.width;
              }
            } else {
              w.globals.rotateXLabels = false;
            }
          }

          if (!w.config.xaxis.labels.show) {
            rect = {
              width: 0,
              height: 0,
            };
          }

          return {
            width: rect.width,
            height: rect.height,
          };
        },
        /**
         * Get X Axis Title Dimensions
         * @memberof Dimensions
         * @return {{width, height}}
         **/
      },
      {
        key: 'getxAxisTitleCoords',
        value: function getxAxisTitleCoords() {
          var w = this.w;
          var width = 0;
          var height = 0;

          if (w.config.xaxis.title.text !== undefined) {
            var graphics = new Graphics(this.dCtx.ctx);
            var rect = graphics.getTextRects(
              w.config.xaxis.title.text,
              w.config.xaxis.title.style.fontSize
            );
            width = rect.width;
            height = rect.height;
          }

          return {
            width: width,
            height: height,
          };
        },
      },
      {
        key: 'getxAxisTimeScaleLabelsCoords',
        value: function getxAxisTimeScaleLabelsCoords() {
          var w = this.w;
          var rect;
          this.dCtx.timescaleLabels = w.globals.timescaleLabels.slice();
          var labels = this.dCtx.timescaleLabels.map(function (label) {
            return label.value;
          }); //  get the longest string from the labels array and also apply label formatter to it

          var val = labels.reduce(function (a, b) {
            // if undefined, maybe user didn't pass the datetime(x) values
            if (typeof a === 'undefined') {
              console.error(
                'You have possibly supplied invalid Date format. Please supply a valid JavaScript Date'
              );
              return 0;
            } else {
              return a.length > b.length ? a : b;
            }
          }, 0);
          var graphics = new Graphics(this.dCtx.ctx);
          rect = graphics.getTextRects(val, w.config.xaxis.labels.style.fontSize);
          var totalWidthRotated = rect.width * 1.05 * labels.length;

          if (totalWidthRotated > w.globals.gridWidth && w.config.xaxis.labels.rotate !== 0) {
            w.globals.overlappingXLabels = true;
          }

          return rect;
        }, // In certain cases, the last labels gets cropped in xaxis.
        // Hence, we add some additional padding based on the label length to avoid the last label being cropped or we don't draw it at all
      },
      {
        key: 'additionalPaddingXLabels',
        value: function additionalPaddingXLabels(xaxisLabelCoords) {
          var _this = this;

          var w = this.w;
          var gl = w.globals;
          var cnf = w.config;
          var xtype = cnf.xaxis.type;
          var lbWidth = xaxisLabelCoords.width;
          gl.skipLastTimelinelabel = false;
          gl.skipFirstTimelinelabel = false;
          var isBarOpposite = w.config.yaxis[0].opposite && w.globals.isBarHorizontal;

          var isCollapsed = function isCollapsed(i) {
            return gl.collapsedSeriesIndices.indexOf(i) !== -1;
          };

          var rightPad = function rightPad(yaxe) {
            if (_this.dCtx.timescaleLabels && _this.dCtx.timescaleLabels.length) {
              // for timeline labels, we take the last label and check if it exceeds gridWidth
              var firstimescaleLabel = _this.dCtx.timescaleLabels[0];
              var lastTimescaleLabel =
                _this.dCtx.timescaleLabels[_this.dCtx.timescaleLabels.length - 1];
              var lastLabelPosition =
                lastTimescaleLabel.position + lbWidth / 1.75 - _this.dCtx.yAxisWidthRight;
              var firstLabelPosition =
                firstimescaleLabel.position - lbWidth / 1.75 + _this.dCtx.yAxisWidthLeft;
              var lgRightRectWidth =
                w.config.legend.position === 'right' && _this.dCtx.lgRect.width > 0
                  ? _this.dCtx.lgRect.width
                  : 0;

              if (lastLabelPosition > gl.svgWidth - gl.translateX - lgRightRectWidth) {
                gl.skipLastTimelinelabel = true;
              }

              if (
                firstLabelPosition <
                -((!yaxe.show || yaxe.floating) &&
                (cnf.chart.type === 'bar' ||
                  cnf.chart.type === 'candlestick' ||
                  cnf.chart.type === 'rangeBar' ||
                  cnf.chart.type === 'boxPlot')
                  ? lbWidth / 1.75
                  : 10)
              ) {
                gl.skipFirstTimelinelabel = true;
              }
            } else if (xtype === 'datetime') {
              // If user has enabled DateTime, but uses own's formatter
              if (_this.dCtx.gridPad.right < lbWidth && !gl.rotateXLabels) {
                gl.skipLastTimelinelabel = true;
              }
            } else if (xtype !== 'datetime') {
              if (
                _this.dCtx.gridPad.right < lbWidth / 2 - _this.dCtx.yAxisWidthRight &&
                !gl.rotateXLabels &&
                !w.config.xaxis.labels.trim &&
                (w.config.xaxis.tickPlacement !== 'between' || w.globals.isBarHorizontal)
              ) {
                _this.dCtx.xPadRight = lbWidth / 2 + 1;
              }
            }
          };

          var padYAxe = function padYAxe(yaxe, i) {
            if (isCollapsed(i)) return; // the code below causes issue apexcharts.js#1989
            // after testing with other use-cases, this has no actual value, hence commented
            // if (xtype !== 'datetime') {
            //   if (
            //     this.dCtx.gridPad.left < lbWidth / 2 - this.dCtx.yAxisWidthLeft &&
            //     !gl.rotateXLabels &&
            //     !cnf.xaxis.labels.trim
            //   ) {
            //     this.dCtx.xPadLeft = lbWidth / 2 + 1
            //   }
            // }

            rightPad(yaxe);
          };

          cnf.yaxis.forEach(function (yaxe, i) {
            if (isBarOpposite) {
              if (_this.dCtx.gridPad.left < lbWidth) {
                _this.dCtx.xPadLeft = lbWidth / 2 + 1;
              }

              _this.dCtx.xPadRight = lbWidth / 2 + 1;
            } else {
              padYAxe(yaxe, i);
            }
          });
        },
      },
    ]);

    return DimXAxis;
  })();

  var DimYAxis = /*#__PURE__*/ (function () {
    function DimYAxis(dCtx) {
      _classCallCheck(this, DimYAxis);

      this.w = dCtx.w;
      this.dCtx = dCtx;
    }
    /**
     * Get Y Axis Dimensions
     * @memberof Dimensions
     * @return {{width, height}}
     **/

    _createClass(DimYAxis, [
      {
        key: 'getyAxisLabelsCoords',
        value: function getyAxisLabelsCoords() {
          var _this = this;

          var w = this.w;
          var width = 0;
          var height = 0;
          var ret = [];
          var labelPad = 10;
          var axesUtils = new AxesUtils(this.dCtx.ctx);
          w.config.yaxis.map(function (yaxe, index) {
            var yS = w.globals.yAxisScale[index];
            var yAxisMinWidth = 0;
            if (
              !axesUtils.isYAxisHidden(index) &&
              yaxe.labels.show &&
              yaxe.labels.minWidth !== undefined
            )
              yAxisMinWidth = yaxe.labels.minWidth;

            if (!axesUtils.isYAxisHidden(index) && yaxe.labels.show && yS.result.length) {
              var lbFormatter = w.globals.yLabelFormatters[index];
              var minV = yS.niceMin === Number.MIN_VALUE ? 0 : yS.niceMin;
              var longestStr = String(minV).length > String(yS.niceMax).length ? minV : yS.niceMax; // the second parameter -1 is the index of tick which user can use in the formatter

              var val = lbFormatter(longestStr, {
                seriesIndex: index,
                dataPointIndex: -1,
                w: w,
              });
              var valArr = val; // if user has specified a custom formatter, and the result is null or empty, we need to discard the formatter and take the value as it is.

              if (typeof val === 'undefined' || val.length === 0) {
                val = longestStr;
              }

              if (w.globals.isBarHorizontal) {
                labelPad = 0;
                var barYaxisLabels = w.globals.labels.slice(); //  get the longest string from the labels array and also apply label formatter to it

                val = Utils$1.getLargestStringFromArr(barYaxisLabels);
                val = lbFormatter(val, {
                  seriesIndex: index,
                  dataPointIndex: -1,
                  w: w,
                });
                valArr = _this.dCtx.dimHelpers.getLargestStringFromMultiArr(val, barYaxisLabels);
              }

              var graphics = new Graphics(_this.dCtx.ctx);
              var rotateStr = 'rotate('.concat(yaxe.labels.rotate, ' 0 0)');
              var rect = graphics.getTextRects(
                val,
                yaxe.labels.style.fontSize,
                yaxe.labels.style.fontFamily,
                rotateStr,
                false
              );
              var arrLabelrect = rect;

              if (val !== valArr) {
                arrLabelrect = graphics.getTextRects(
                  valArr,
                  yaxe.labels.style.fontSize,
                  yaxe.labels.style.fontFamily,
                  rotateStr,
                  false
                );
              }

              ret.push({
                width:
                  (yAxisMinWidth > arrLabelrect.width || yAxisMinWidth > rect.width
                    ? yAxisMinWidth
                    : arrLabelrect.width > rect.width
                    ? arrLabelrect.width
                    : rect.width) + labelPad,
                height: arrLabelrect.height > rect.height ? arrLabelrect.height : rect.height,
              });
            } else {
              ret.push({
                width: width,
                height: height,
              });
            }
          });
          return ret;
        },
        /**
         * Get Y Axis Dimensions
         * @memberof Dimensions
         * @return {{width, height}}
         **/
      },
      {
        key: 'getyAxisTitleCoords',
        value: function getyAxisTitleCoords() {
          var _this2 = this;

          var w = this.w;
          var ret = [];
          w.config.yaxis.map(function (yaxe, index) {
            if (yaxe.show && yaxe.title.text !== undefined) {
              var graphics = new Graphics(_this2.dCtx.ctx);
              var rotateStr = 'rotate('.concat(yaxe.title.rotate, ' 0 0)');
              var rect = graphics.getTextRects(
                yaxe.title.text,
                yaxe.title.style.fontSize,
                yaxe.title.style.fontFamily,
                rotateStr,
                false
              );
              ret.push({
                width: rect.width,
                height: rect.height,
              });
            } else {
              ret.push({
                width: 0,
                height: 0,
              });
            }
          });
          return ret;
        },
      },
      {
        key: 'getTotalYAxisWidth',
        value: function getTotalYAxisWidth() {
          var w = this.w;
          var yAxisWidth = 0;
          var yAxisWidthLeft = 0;
          var yAxisWidthRight = 0;
          var padding = w.globals.yAxisScale.length > 1 ? 10 : 0;
          var axesUtils = new AxesUtils(this.dCtx.ctx);

          var isHiddenYAxis = function isHiddenYAxis(index) {
            return w.globals.ignoreYAxisIndexes.indexOf(index) > -1;
          };

          var padForLabelTitle = function padForLabelTitle(coord, index) {
            var floating = w.config.yaxis[index].floating;
            var width = 0;

            if (coord.width > 0 && !floating) {
              width = coord.width + padding;

              if (isHiddenYAxis(index)) {
                width = width - coord.width - padding;
              }
            } else {
              width = floating || axesUtils.isYAxisHidden(index) ? 0 : 5;
            }

            w.config.yaxis[index].opposite
              ? (yAxisWidthRight = yAxisWidthRight + width)
              : (yAxisWidthLeft = yAxisWidthLeft + width);
            yAxisWidth = yAxisWidth + width;
          };

          w.globals.yLabelsCoords.map(function (yLabelCoord, index) {
            padForLabelTitle(yLabelCoord, index);
          });
          w.globals.yTitleCoords.map(function (yTitleCoord, index) {
            padForLabelTitle(yTitleCoord, index);
          });

          if (w.globals.isBarHorizontal && !w.config.yaxis[0].floating) {
            yAxisWidth = w.globals.yLabelsCoords[0].width + w.globals.yTitleCoords[0].width + 15;
          }

          this.dCtx.yAxisWidthLeft = yAxisWidthLeft;
          this.dCtx.yAxisWidthRight = yAxisWidthRight;
          return yAxisWidth;
        },
      },
    ]);

    return DimYAxis;
  })();

  var DimGrid = /*#__PURE__*/ (function () {
    function DimGrid(dCtx) {
      _classCallCheck(this, DimGrid);

      this.w = dCtx.w;
      this.dCtx = dCtx;
    }

    _createClass(DimGrid, [
      {
        key: 'gridPadForColumnsInNumericAxis',
        value: function gridPadForColumnsInNumericAxis(gridWidth) {
          var w = this.w;

          if (w.globals.noData || w.globals.allSeriesCollapsed) {
            return 0;
          }

          var hasBar = function hasBar(type) {
            return (
              type === 'bar' || type === 'rangeBar' || type === 'candlestick' || type === 'boxPlot'
            );
          };

          var type = w.config.chart.type;
          var barWidth = 0;
          var seriesLen = hasBar(type) ? w.config.series.length : 1;

          if (w.globals.comboBarCount > 0) {
            seriesLen = w.globals.comboBarCount;
          }

          w.globals.collapsedSeries.forEach(function (c) {
            if (hasBar(c.type)) {
              seriesLen = seriesLen - 1;
            }
          });

          if (w.config.chart.stacked) {
            seriesLen = 1;
          }

          var barsPresent = hasBar(type) || w.globals.comboBarCount > 0;

          if (barsPresent && w.globals.isXNumeric && !w.globals.isBarHorizontal && seriesLen > 0) {
            var xRatio = 0;
            var xRange = Math.abs(w.globals.initialMaxX - w.globals.initialMinX);

            if (xRange <= 3) {
              xRange = w.globals.dataPoints;
            }

            xRatio = xRange / gridWidth;
            var xDivision; // max barwidth should be equal to minXDiff to avoid overlap

            if (w.globals.minXDiff && w.globals.minXDiff / xRatio > 0) {
              xDivision = w.globals.minXDiff / xRatio;
            }

            if (xDivision > gridWidth / 2) {
              xDivision = xDivision / 2;
            }

            barWidth =
              ((xDivision / seriesLen) * parseInt(w.config.plotOptions.bar.columnWidth, 10)) / 100;

            if (barWidth < 1) {
              barWidth = 1;
            }

            barWidth = barWidth / (seriesLen > 1 ? 1 : 1.5) + 5;
            w.globals.barPadForNumericAxis = barWidth;
          }

          return barWidth;
        },
      },
      {
        key: 'gridPadFortitleSubtitle',
        value: function gridPadFortitleSubtitle() {
          var _this = this;

          var w = this.w;
          var gl = w.globals;
          var gridShrinkOffset = this.dCtx.isSparkline || !w.globals.axisCharts ? 0 : 10;
          var titleSubtitle = ['title', 'subtitle'];
          titleSubtitle.forEach(function (t) {
            if (w.config[t].text !== undefined) {
              gridShrinkOffset += w.config[t].margin;
            } else {
              gridShrinkOffset += _this.dCtx.isSparkline || !w.globals.axisCharts ? 0 : 5;
            }
          });

          if (
            w.config.legend.show &&
            w.config.legend.position === 'bottom' &&
            !w.config.legend.floating &&
            !w.globals.axisCharts
          ) {
            gridShrinkOffset += 10;
          }

          var titleCoords = this.dCtx.dimHelpers.getTitleSubtitleCoords('title');
          var subtitleCoords = this.dCtx.dimHelpers.getTitleSubtitleCoords('subtitle');
          gl.gridHeight =
            gl.gridHeight - titleCoords.height - subtitleCoords.height - gridShrinkOffset;
          gl.translateY =
            gl.translateY + titleCoords.height + subtitleCoords.height + gridShrinkOffset;
        },
      },
      {
        key: 'setGridXPosForDualYAxis',
        value: function setGridXPosForDualYAxis(yTitleCoords, yaxisLabelCoords) {
          var w = this.w;
          var axesUtils = new AxesUtils(this.dCtx.ctx);
          w.config.yaxis.map(function (yaxe, index) {
            if (
              w.globals.ignoreYAxisIndexes.indexOf(index) === -1 &&
              !yaxe.floating &&
              !axesUtils.isYAxisHidden(index)
            ) {
              if (yaxe.opposite) {
                w.globals.translateX =
                  w.globals.translateX -
                  (yaxisLabelCoords[index].width + yTitleCoords[index].width) -
                  parseInt(w.config.yaxis[index].labels.style.fontSize, 10) / 1.2 -
                  12;
              } // fixes apexcharts.js#1599

              if (w.globals.translateX < 2) {
                w.globals.translateX = 2;
              }
            }
          });
        },
      },
    ]);

    return DimGrid;
  })();

  /**
   * ApexCharts Dimensions Class for calculating rects of all elements that are drawn and will be drawn.
   *
   * @module Dimensions
   **/

  var Dimensions = /*#__PURE__*/ (function () {
    function Dimensions(ctx) {
      _classCallCheck(this, Dimensions);

      this.ctx = ctx;
      this.w = ctx.w;
      this.lgRect = {};
      this.yAxisWidth = 0;
      this.yAxisWidthLeft = 0;
      this.yAxisWidthRight = 0;
      this.xAxisHeight = 0;
      this.isSparkline = this.w.config.chart.sparkline.enabled;
      this.dimHelpers = new Helpers$2(this);
      this.dimYAxis = new DimYAxis(this);
      this.dimXAxis = new DimXAxis(this);
      this.dimGrid = new DimGrid(this);
      this.lgWidthForSideLegends = 0;
      this.gridPad = this.w.config.grid.padding;
      this.xPadRight = 0;
      this.xPadLeft = 0;
    }
    /**
     * @memberof Dimensions
     * @param {object} w - chart context
     **/

    _createClass(Dimensions, [
      {
        key: 'plotCoords',
        value: function plotCoords() {
          var w = this.w;
          var gl = w.globals;
          this.lgRect = this.dimHelpers.getLegendsRect();

          if (gl.axisCharts) {
            // for line / area / scatter / column
            this.setDimensionsForAxisCharts();
          } else {
            // for pie / donuts / circle
            this.setDimensionsForNonAxisCharts();
          }

          this.dimGrid.gridPadFortitleSubtitle(); // after calculating everything, apply padding set by user

          gl.gridHeight = gl.gridHeight - this.gridPad.top - this.gridPad.bottom;
          gl.gridWidth =
            gl.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
          var barWidth = this.dimGrid.gridPadForColumnsInNumericAxis(gl.gridWidth);
          gl.gridWidth = gl.gridWidth - barWidth * 2;
          gl.translateX =
            gl.translateX + this.gridPad.left + this.xPadLeft + (barWidth > 0 ? barWidth + 4 : 0);
          gl.translateY = gl.translateY + this.gridPad.top;
        },
      },
      {
        key: 'setDimensionsForAxisCharts',
        value: function setDimensionsForAxisCharts() {
          var _this = this;

          var w = this.w;
          var gl = w.globals;
          var yaxisLabelCoords = this.dimYAxis.getyAxisLabelsCoords();
          var yTitleCoords = this.dimYAxis.getyAxisTitleCoords();
          w.globals.yLabelsCoords = [];
          w.globals.yTitleCoords = [];
          w.config.yaxis.map(function (yaxe, index) {
            // store the labels and titles coords in global vars
            w.globals.yLabelsCoords.push({
              width: yaxisLabelCoords[index].width,
              index: index,
            });
            w.globals.yTitleCoords.push({
              width: yTitleCoords[index].width,
              index: index,
            });
          });
          this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
          var xaxisLabelCoords = this.dimXAxis.getxAxisLabelsCoords();
          var xtitleCoords = this.dimXAxis.getxAxisTitleCoords();
          this.conditionalChecksForAxisCoords(xaxisLabelCoords, xtitleCoords);
          gl.translateXAxisY = w.globals.rotateXLabels ? this.xAxisHeight / 8 : -4;
          gl.translateXAxisX =
            w.globals.rotateXLabels && w.globals.isXNumeric && w.config.xaxis.labels.rotate <= -45
              ? -this.xAxisWidth / 4
              : 0;

          if (w.globals.isBarHorizontal) {
            gl.rotateXLabels = false;
            gl.translateXAxisY = -1 * (parseInt(w.config.xaxis.labels.style.fontSize, 10) / 1.5);
          }

          gl.translateXAxisY = gl.translateXAxisY + w.config.xaxis.labels.offsetY;
          gl.translateXAxisX = gl.translateXAxisX + w.config.xaxis.labels.offsetX;
          var yAxisWidth = this.yAxisWidth;
          var xAxisHeight = this.xAxisHeight;
          gl.xAxisLabelsHeight = this.xAxisHeight - xtitleCoords.height;
          gl.xAxisLabelsWidth = this.xAxisWidth;
          gl.xAxisHeight = this.xAxisHeight;
          var translateY = 10;

          if (w.config.chart.type === 'radar' || this.isSparkline) {
            yAxisWidth = 0;
            xAxisHeight = gl.goldenPadding;
          }

          if (this.isSparkline) {
            this.lgRect = {
              height: 0,
              width: 0,
            };
          }

          if (this.isSparkline || w.config.chart.type === 'treemap') {
            yAxisWidth = 0;
            xAxisHeight = 0;
            translateY = 0;
          }

          if (!this.isSparkline) {
            this.dimXAxis.additionalPaddingXLabels(xaxisLabelCoords);
          }

          var legendTopBottom = function legendTopBottom() {
            gl.translateX = yAxisWidth;
            gl.gridHeight =
              gl.svgHeight -
              _this.lgRect.height -
              xAxisHeight -
              (!_this.isSparkline && w.config.chart.type !== 'treemap'
                ? w.globals.rotateXLabels
                  ? 10
                  : 15
                : 0);
            gl.gridWidth = gl.svgWidth - yAxisWidth;
          };

          if (w.config.xaxis.position === 'top')
            translateY = gl.xAxisHeight - w.config.xaxis.axisTicks.height - 5;

          switch (w.config.legend.position) {
            case 'bottom':
              gl.translateY = translateY;
              legendTopBottom();
              break;

            case 'top':
              gl.translateY = this.lgRect.height + translateY;
              legendTopBottom();
              break;

            case 'left':
              gl.translateY = translateY;
              gl.translateX = this.lgRect.width + yAxisWidth;
              gl.gridHeight = gl.svgHeight - xAxisHeight - 12;
              gl.gridWidth = gl.svgWidth - this.lgRect.width - yAxisWidth;
              break;

            case 'right':
              gl.translateY = translateY;
              gl.translateX = yAxisWidth;
              gl.gridHeight = gl.svgHeight - xAxisHeight - 12;
              gl.gridWidth = gl.svgWidth - this.lgRect.width - yAxisWidth - 5;
              break;

            default:
              throw new Error('Legend position not supported');
          }

          this.dimGrid.setGridXPosForDualYAxis(yTitleCoords, yaxisLabelCoords); // after drawing everything, set the Y axis positions

          var objyAxis = new YAxis(this.ctx);
          objyAxis.setYAxisXPosition(yaxisLabelCoords, yTitleCoords);
        },
      },
      {
        key: 'setDimensionsForNonAxisCharts',
        value: function setDimensionsForNonAxisCharts() {
          var w = this.w;
          var gl = w.globals;
          var cnf = w.config;
          var xPad = 0;

          if (w.config.legend.show && !w.config.legend.floating) {
            xPad = 20;
          }

          var type =
            cnf.chart.type === 'pie' || cnf.chart.type === 'polarArea' || cnf.chart.type === 'donut'
              ? 'pie'
              : 'radialBar';
          var offY = cnf.plotOptions[type].offsetY;
          var offX = cnf.plotOptions[type].offsetX;

          if (!cnf.legend.show || cnf.legend.floating) {
            gl.gridHeight = gl.svgHeight - cnf.grid.padding.left + cnf.grid.padding.right;
            gl.gridWidth = gl.gridHeight;
            gl.translateY = offY;
            gl.translateX = offX + (gl.svgWidth - gl.gridWidth) / 2;
            return;
          }

          switch (cnf.legend.position) {
            case 'bottom':
              gl.gridHeight = gl.svgHeight - this.lgRect.height - gl.goldenPadding;
              gl.gridWidth = gl.svgWidth;
              gl.translateY = offY - 10;
              gl.translateX = offX + (gl.svgWidth - gl.gridWidth) / 2;
              break;

            case 'top':
              gl.gridHeight = gl.svgHeight - this.lgRect.height - gl.goldenPadding;
              gl.gridWidth = gl.svgWidth;
              gl.translateY = this.lgRect.height + offY + 10;
              gl.translateX = offX + (gl.svgWidth - gl.gridWidth) / 2;
              break;

            case 'left':
              gl.gridWidth = gl.svgWidth - this.lgRect.width - xPad;
              gl.gridHeight = cnf.chart.height !== 'auto' ? gl.svgHeight : gl.gridWidth;
              gl.translateY = offY;
              gl.translateX = offX + this.lgRect.width + xPad;
              break;

            case 'right':
              gl.gridWidth = gl.svgWidth - this.lgRect.width - xPad - 5;
              gl.gridHeight = cnf.chart.height !== 'auto' ? gl.svgHeight : gl.gridWidth;
              gl.translateY = offY;
              gl.translateX = offX + 10;
              break;

            default:
              throw new Error('Legend position not supported');
          }
        },
      },
      {
        key: 'conditionalChecksForAxisCoords',
        value: function conditionalChecksForAxisCoords(xaxisLabelCoords, xtitleCoords) {
          var w = this.w;
          var baseXAxisHeight = xaxisLabelCoords.height + xtitleCoords.height;
          var xAxisHeightMultiplicate = w.globals.isMultiLineX ? 1.2 : w.globals.LINE_HEIGHT_RATIO;
          var rotatedXAxisOffset = w.globals.rotateXLabels ? 22 : 10;
          var rotatedXAxisLegendOffset =
            w.globals.rotateXLabels && w.config.legend.position === 'bottom';
          var additionalOffset = rotatedXAxisLegendOffset ? 10 : 0;
          this.xAxisHeight =
            baseXAxisHeight * xAxisHeightMultiplicate + rotatedXAxisOffset + additionalOffset;
          this.xAxisWidth = xaxisLabelCoords.width;

          if (this.xAxisHeight - xtitleCoords.height > w.config.xaxis.labels.maxHeight) {
            this.xAxisHeight = w.config.xaxis.labels.maxHeight;
          }

          if (
            w.config.xaxis.labels.minHeight &&
            this.xAxisHeight < w.config.xaxis.labels.minHeight
          ) {
            this.xAxisHeight = w.config.xaxis.labels.minHeight;
          }

          if (w.config.xaxis.floating) {
            this.xAxisHeight = 0;
          }

          var minYAxisWidth = 0;
          var maxYAxisWidth = 0;
          w.config.yaxis.forEach(function (y) {
            minYAxisWidth += y.labels.minWidth;
            maxYAxisWidth += y.labels.maxWidth;
          });

          if (this.yAxisWidth < minYAxisWidth) {
            this.yAxisWidth = minYAxisWidth;
          }

          if (this.yAxisWidth > maxYAxisWidth) {
            this.yAxisWidth = maxYAxisWidth;
          }
        },
      },
    ]);

    return Dimensions;
  })();

  var Helpers$1 = /*#__PURE__*/ (function () {
    function Helpers(lgCtx) {
      _classCallCheck(this, Helpers);

      this.w = lgCtx.w;
      this.lgCtx = lgCtx;
    }

    _createClass(Helpers, [
      {
        key: 'getLegendStyles',
        value: function getLegendStyles() {
          var stylesheet = document.createElement('style');
          stylesheet.setAttribute('type', 'text/css');
          var text =
            '\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n        border-style: solid;\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }';
          var rules = document.createTextNode(text);
          stylesheet.appendChild(rules);
          return stylesheet;
        },
      },
      {
        key: 'getLegendBBox',
        value: function getLegendBBox() {
          var w = this.w;
          var currLegendsWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');
          var currLegendsWrapRect = currLegendsWrap.getBoundingClientRect();
          var currLegendsWrapWidth = currLegendsWrapRect.width;
          var currLegendsWrapHeight = currLegendsWrapRect.height;
          return {
            clwh: currLegendsWrapHeight,
            clww: currLegendsWrapWidth,
          };
        },
      },
      {
        key: 'appendToForeignObject',
        value: function appendToForeignObject() {
          var gl = this.w.globals;
          gl.dom.elLegendForeign = document.createElementNS(gl.SVGNS, 'foreignObject');
          var elForeign = gl.dom.elLegendForeign;
          elForeign.setAttribute('x', 0);
          elForeign.setAttribute('y', 0);
          elForeign.setAttribute('width', gl.svgWidth);
          elForeign.setAttribute('height', gl.svgHeight);
          gl.dom.elLegendWrap.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');
          elForeign.appendChild(gl.dom.elLegendWrap);
          elForeign.appendChild(this.getLegendStyles()); //gl.dom.elGraphical.node.insertAdjacentElement('afterend', elForeign)
          // the above line causes issue #1907

          gl.dom.Paper.node.insertBefore(elForeign, gl.dom.elGraphical.node);
        },
      },
      {
        key: 'toggleDataSeries',
        value: function toggleDataSeries(seriesCnt, isHidden) {
          var _this = this;

          var w = this.w;

          if (w.globals.axisCharts || w.config.chart.type === 'radialBar') {
            w.globals.resized = true; // we don't want initial animations again

            var seriesEl = null;
            var realIndex = null; // yes, make it null. 1 series will rise at a time

            w.globals.risingSeries = [];

            if (w.globals.axisCharts) {
              seriesEl = w.globals.dom.baseEl.querySelector(
                ".apexcharts-series[data\\:realIndex='".concat(seriesCnt, "']")
              );
              realIndex = parseInt(seriesEl.getAttribute('data:realIndex'), 10);
            } else {
              seriesEl = w.globals.dom.baseEl.querySelector(
                ".apexcharts-series[rel='".concat(seriesCnt + 1, "']")
              );
              realIndex = parseInt(seriesEl.getAttribute('rel'), 10) - 1;
            }

            if (isHidden) {
              var seriesToMakeVisible = [
                {
                  cs: w.globals.collapsedSeries,
                  csi: w.globals.collapsedSeriesIndices,
                },
                {
                  cs: w.globals.ancillaryCollapsedSeries,
                  csi: w.globals.ancillaryCollapsedSeriesIndices,
                },
              ];
              seriesToMakeVisible.forEach(function (r) {
                _this.riseCollapsedSeries(r.cs, r.csi, realIndex);
              });
            } else {
              this.hideSeries({
                seriesEl: seriesEl,
                realIndex: realIndex,
              });
            }
          } else {
            // for non-axis charts i.e pie / donuts
            var _seriesEl = w.globals.dom.Paper.select(
              " .apexcharts-series[rel='".concat(seriesCnt + 1, "'] path")
            );

            var type = w.config.chart.type;

            if (type === 'pie' || type === 'polarArea' || type === 'donut') {
              var dataLabels = w.config.plotOptions.pie.donut.labels;
              var graphics = new Graphics(this.lgCtx.ctx);
              graphics.pathMouseDown(_seriesEl.members[0], null);
              this.lgCtx.ctx.pie.printDataLabelsInner(_seriesEl.members[0].node, dataLabels);
            }

            _seriesEl.fire('click');
          }
        },
      },
      {
        key: 'hideSeries',
        value: function hideSeries(_ref) {
          var seriesEl = _ref.seriesEl,
            realIndex = _ref.realIndex;
          var w = this.w;
          var series = Utils$1.clone(w.config.series);

          if (w.globals.axisCharts) {
            var shouldNotHideYAxis = false;

            if (
              w.config.yaxis[realIndex] &&
              w.config.yaxis[realIndex].show &&
              w.config.yaxis[realIndex].showAlways
            ) {
              shouldNotHideYAxis = true;

              if (w.globals.ancillaryCollapsedSeriesIndices.indexOf(realIndex) < 0) {
                w.globals.ancillaryCollapsedSeries.push({
                  index: realIndex,
                  data: series[realIndex].data.slice(),
                  type: seriesEl.parentNode.className.baseVal.split('-')[1],
                });
                w.globals.ancillaryCollapsedSeriesIndices.push(realIndex);
              }
            }

            if (!shouldNotHideYAxis) {
              w.globals.collapsedSeries.push({
                index: realIndex,
                data: series[realIndex].data.slice(),
                type: seriesEl.parentNode.className.baseVal.split('-')[1],
              });
              w.globals.collapsedSeriesIndices.push(realIndex);
              var removeIndexOfRising = w.globals.risingSeries.indexOf(realIndex);
              w.globals.risingSeries.splice(removeIndexOfRising, 1);
            }
          } else {
            w.globals.collapsedSeries.push({
              index: realIndex,
              data: series[realIndex],
            });
            w.globals.collapsedSeriesIndices.push(realIndex);
          }

          var seriesChildren = seriesEl.childNodes;

          for (var sc = 0; sc < seriesChildren.length; sc++) {
            if (seriesChildren[sc].classList.contains('apexcharts-series-markers-wrap')) {
              if (seriesChildren[sc].classList.contains('apexcharts-hide')) {
                seriesChildren[sc].classList.remove('apexcharts-hide');
              } else {
                seriesChildren[sc].classList.add('apexcharts-hide');
              }
            }
          }

          w.globals.allSeriesCollapsed =
            w.globals.collapsedSeries.length === w.config.series.length;
          series = this._getSeriesBasedOnCollapsedState(series);

          this.lgCtx.ctx.updateHelpers._updateSeries(
            series,
            w.config.chart.animations.dynamicAnimation.enabled
          );
        },
      },
      {
        key: 'riseCollapsedSeries',
        value: function riseCollapsedSeries(collapsedSeries, seriesIndices, realIndex) {
          var w = this.w;
          var series = Utils$1.clone(w.config.series);

          if (collapsedSeries.length > 0) {
            for (var c = 0; c < collapsedSeries.length; c++) {
              if (collapsedSeries[c].index === realIndex) {
                if (w.globals.axisCharts) {
                  series[realIndex].data = collapsedSeries[c].data.slice();
                  collapsedSeries.splice(c, 1);
                  seriesIndices.splice(c, 1);
                  w.globals.risingSeries.push(realIndex);
                } else {
                  series[realIndex] = collapsedSeries[c].data;
                  collapsedSeries.splice(c, 1);
                  seriesIndices.splice(c, 1);
                  w.globals.risingSeries.push(realIndex);
                }
              }
            }

            series = this._getSeriesBasedOnCollapsedState(series);

            this.lgCtx.ctx.updateHelpers._updateSeries(
              series,
              w.config.chart.animations.dynamicAnimation.enabled
            );
          }
        },
      },
      {
        key: '_getSeriesBasedOnCollapsedState',
        value: function _getSeriesBasedOnCollapsedState(series) {
          var w = this.w;

          if (w.globals.axisCharts) {
            series.forEach(function (s, sI) {
              if (w.globals.collapsedSeriesIndices.indexOf(sI) > -1) {
                series[sI].data = [];
              }
            });
          } else {
            series.forEach(function (s, sI) {
              if (w.globals.collapsedSeriesIndices.indexOf(sI) > -1) {
                series[sI] = 0;
              }
            });
          }

          return series;
        },
      },
    ]);

    return Helpers;
  })();

  /**
   * ApexCharts Legend Class to draw legend.
   *
   * @module Legend
   **/

  var Legend = /*#__PURE__*/ (function () {
    function Legend(ctx, opts) {
      _classCallCheck(this, Legend);

      this.ctx = ctx;
      this.w = ctx.w;
      this.onLegendClick = this.onLegendClick.bind(this);
      this.onLegendHovered = this.onLegendHovered.bind(this);
      this.isBarsDistributed =
        this.w.config.chart.type === 'bar' &&
        this.w.config.plotOptions.bar.distributed &&
        this.w.config.series.length === 1;
      this.legendHelpers = new Helpers$1(this);
    }

    _createClass(Legend, [
      {
        key: 'init',
        value: function init() {
          var w = this.w;
          var gl = w.globals;
          var cnf = w.config;
          var showLegendAlways =
            (cnf.legend.showForSingleSeries && gl.series.length === 1) ||
            this.isBarsDistributed ||
            gl.series.length > 1;

          if ((showLegendAlways || !gl.axisCharts) && cnf.legend.show) {
            while (gl.dom.elLegendWrap.firstChild) {
              gl.dom.elLegendWrap.removeChild(gl.dom.elLegendWrap.firstChild);
            }

            this.drawLegends();

            if (!Utils$1.isIE11()) {
              this.legendHelpers.appendToForeignObject();
            } else {
              // IE11 doesn't supports foreignObject, hence append it to <head>
              document
                .getElementsByTagName('head')[0]
                .appendChild(this.legendHelpers.getLegendStyles());
            }

            if (cnf.legend.position === 'bottom' || cnf.legend.position === 'top') {
              this.legendAlignHorizontal();
            } else if (cnf.legend.position === 'right' || cnf.legend.position === 'left') {
              this.legendAlignVertical();
            }
          }
        },
      },
      {
        key: 'drawLegends',
        value: function drawLegends() {
          var me = this;
          var w = this.w;
          var fontFamily = w.config.legend.fontFamily;
          var legendNames = w.globals.seriesNames;
          var fillcolor = w.globals.colors.slice();

          if (w.config.chart.type === 'heatmap') {
            var ranges = w.config.plotOptions.heatmap.colorScale.ranges;
            legendNames = ranges.map(function (colorScale) {
              return colorScale.name ? colorScale.name : colorScale.from + ' - ' + colorScale.to;
            });
            fillcolor = ranges.map(function (color) {
              return color.color;
            });
          } else if (this.isBarsDistributed) {
            legendNames = w.globals.labels.slice();
          }

          if (w.config.legend.customLegendItems.length) {
            legendNames = w.config.legend.customLegendItems;
          }

          var legendFormatter = w.globals.legendFormatter;
          var isLegendInversed = w.config.legend.inverseOrder;

          for (
            var i = isLegendInversed ? legendNames.length - 1 : 0;
            isLegendInversed ? i >= 0 : i <= legendNames.length - 1;
            isLegendInversed ? i-- : i++
          ) {
            var text = legendFormatter(legendNames[i], {
              seriesIndex: i,
              w: w,
            });
            var collapsedSeries = false;
            var ancillaryCollapsedSeries = false;

            if (w.globals.collapsedSeries.length > 0) {
              for (var c = 0; c < w.globals.collapsedSeries.length; c++) {
                if (w.globals.collapsedSeries[c].index === i) {
                  collapsedSeries = true;
                }
              }
            }

            if (w.globals.ancillaryCollapsedSeriesIndices.length > 0) {
              for (var _c = 0; _c < w.globals.ancillaryCollapsedSeriesIndices.length; _c++) {
                if (w.globals.ancillaryCollapsedSeriesIndices[_c] === i) {
                  ancillaryCollapsedSeries = true;
                }
              }
            }

            var elMarker = document.createElement('span');
            elMarker.classList.add('apexcharts-legend-marker');
            var mOffsetX = w.config.legend.markers.offsetX;
            var mOffsetY = w.config.legend.markers.offsetY;
            var mHeight = w.config.legend.markers.height;
            var mWidth = w.config.legend.markers.width;
            var mBorderWidth = w.config.legend.markers.strokeWidth;
            var mBorderColor = w.config.legend.markers.strokeColor;
            var mBorderRadius = w.config.legend.markers.radius;
            var mStyle = elMarker.style;
            mStyle.background = fillcolor[i];
            mStyle.color = fillcolor[i];
            mStyle.setProperty('background', fillcolor[i], 'important'); // override fill color with custom legend.markers.fillColors

            if (w.config.legend.markers.fillColors && w.config.legend.markers.fillColors[i]) {
              mStyle.background = w.config.legend.markers.fillColors[i];
            } // override with data color

            if (w.globals.seriesColors[i] !== undefined) {
              mStyle.background = w.globals.seriesColors[i];
              mStyle.color = w.globals.seriesColors[i];
            }

            mStyle.height = Array.isArray(mHeight)
              ? parseFloat(mHeight[i]) + 'px'
              : parseFloat(mHeight) + 'px';
            mStyle.width = Array.isArray(mWidth)
              ? parseFloat(mWidth[i]) + 'px'
              : parseFloat(mWidth) + 'px';
            mStyle.left =
              (Array.isArray(mOffsetX) ? parseFloat(mOffsetX[i]) : parseFloat(mOffsetX)) + 'px';
            mStyle.top =
              (Array.isArray(mOffsetY) ? parseFloat(mOffsetY[i]) : parseFloat(mOffsetY)) + 'px';
            mStyle.borderWidth = Array.isArray(mBorderWidth) ? mBorderWidth[i] : mBorderWidth;
            mStyle.borderColor = Array.isArray(mBorderColor) ? mBorderColor[i] : mBorderColor;
            mStyle.borderRadius = Array.isArray(mBorderRadius)
              ? parseFloat(mBorderRadius[i]) + 'px'
              : parseFloat(mBorderRadius) + 'px';

            if (w.config.legend.markers.customHTML) {
              if (Array.isArray(w.config.legend.markers.customHTML)) {
                if (w.config.legend.markers.customHTML[i]) {
                  elMarker.innerHTML = w.config.legend.markers.customHTML[i]();
                }
              } else {
                elMarker.innerHTML = w.config.legend.markers.customHTML();
              }
            }

            Graphics.setAttrs(elMarker, {
              rel: i + 1,
              'data:collapsed': collapsedSeries || ancillaryCollapsedSeries,
            });

            if (collapsedSeries || ancillaryCollapsedSeries) {
              elMarker.classList.add('apexcharts-inactive-legend');
            }

            var elLegend = document.createElement('div');
            var elLegendText = document.createElement('span');
            elLegendText.classList.add('apexcharts-legend-text');
            elLegendText.innerHTML = Array.isArray(text) ? text.join(' ') : text;
            var textColor = w.config.legend.labels.useSeriesColors
              ? w.globals.colors[i]
              : w.config.legend.labels.colors;

            if (!textColor) {
              textColor = w.config.chart.foreColor;
            }

            elLegendText.style.color = textColor;
            elLegendText.style.fontSize = parseFloat(w.config.legend.fontSize) + 'px';
            elLegendText.style.fontWeight = w.config.legend.fontWeight;
            elLegendText.style.fontFamily = fontFamily || w.config.chart.fontFamily;
            Graphics.setAttrs(elLegendText, {
              rel: i + 1,
              i: i,
              'data:default-text': encodeURIComponent(text),
              'data:collapsed': collapsedSeries || ancillaryCollapsedSeries,
            });
            elLegend.appendChild(elMarker);
            elLegend.appendChild(elLegendText);
            var coreUtils = new CoreUtils(this.ctx);

            if (!w.config.legend.showForZeroSeries) {
              var total = coreUtils.getSeriesTotalByIndex(i);

              if (
                total === 0 &&
                coreUtils.seriesHaveSameValues(i) &&
                !coreUtils.isSeriesNull(i) &&
                w.globals.collapsedSeriesIndices.indexOf(i) === -1 &&
                w.globals.ancillaryCollapsedSeriesIndices.indexOf(i) === -1
              ) {
                elLegend.classList.add('apexcharts-hidden-zero-series');
              }
            }

            if (!w.config.legend.showForNullSeries) {
              if (
                coreUtils.isSeriesNull(i) &&
                w.globals.collapsedSeriesIndices.indexOf(i) === -1 &&
                w.globals.ancillaryCollapsedSeriesIndices.indexOf(i) === -1
              ) {
                elLegend.classList.add('apexcharts-hidden-null-series');
              }
            }

            w.globals.dom.elLegendWrap.appendChild(elLegend);
            w.globals.dom.elLegendWrap.classList.add(
              'apexcharts-align-'.concat(w.config.legend.horizontalAlign)
            );
            w.globals.dom.elLegendWrap.classList.add(
              'apx-legend-position-' + w.config.legend.position
            );
            elLegend.classList.add('apexcharts-legend-series');
            elLegend.style.margin = ''
              .concat(w.config.legend.itemMargin.vertical, 'px ')
              .concat(w.config.legend.itemMargin.horizontal, 'px');
            w.globals.dom.elLegendWrap.style.width = w.config.legend.width
              ? w.config.legend.width + 'px'
              : '';
            w.globals.dom.elLegendWrap.style.height = w.config.legend.height
              ? w.config.legend.height + 'px'
              : '';
            Graphics.setAttrs(elLegend, {
              rel: i + 1,
              seriesName: Utils$1.escapeString(legendNames[i]),
              'data:collapsed': collapsedSeries || ancillaryCollapsedSeries,
            });

            if (collapsedSeries || ancillaryCollapsedSeries) {
              elLegend.classList.add('apexcharts-inactive-legend');
            }

            if (!w.config.legend.onItemClick.toggleDataSeries) {
              elLegend.classList.add('apexcharts-no-click');
            }
          }

          w.globals.dom.elWrap.addEventListener('click', me.onLegendClick, true);

          if (
            w.config.legend.onItemHover.highlightDataSeries &&
            w.config.legend.customLegendItems.length === 0
          ) {
            w.globals.dom.elWrap.addEventListener('mousemove', me.onLegendHovered, true);
            w.globals.dom.elWrap.addEventListener('mouseout', me.onLegendHovered, true);
          }
        },
      },
      {
        key: 'setLegendWrapXY',
        value: function setLegendWrapXY(offsetX, offsetY) {
          var w = this.w;
          var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');
          var legendRect = elLegendWrap.getBoundingClientRect();
          var x = 0;
          var y = 0;

          if (w.config.legend.position === 'bottom') {
            y = y + (w.globals.svgHeight - legendRect.height / 2);
          } else if (w.config.legend.position === 'top') {
            var dim = new Dimensions(this.ctx);
            var titleH = dim.dimHelpers.getTitleSubtitleCoords('title').height;
            var subtitleH = dim.dimHelpers.getTitleSubtitleCoords('subtitle').height;
            y = y + (titleH > 0 ? titleH - 10 : 0) + (subtitleH > 0 ? subtitleH - 10 : 0);
          }

          elLegendWrap.style.position = 'absolute';
          x = x + offsetX + w.config.legend.offsetX;
          y = y + offsetY + w.config.legend.offsetY;
          elLegendWrap.style.left = x + 'px';
          elLegendWrap.style.top = y + 'px';

          if (w.config.legend.position === 'bottom') {
            elLegendWrap.style.top = 'auto';
            elLegendWrap.style.bottom = 5 - w.config.legend.offsetY + 'px';
          } else if (w.config.legend.position === 'right') {
            elLegendWrap.style.left = 'auto';
            elLegendWrap.style.right = 25 + w.config.legend.offsetX + 'px';
          }

          var fixedHeigthWidth = ['width', 'height'];
          fixedHeigthWidth.forEach(function (hw) {
            if (elLegendWrap.style[hw]) {
              elLegendWrap.style[hw] = parseInt(w.config.legend[hw], 10) + 'px';
            }
          });
        },
      },
      {
        key: 'legendAlignHorizontal',
        value: function legendAlignHorizontal() {
          var w = this.w;
          var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');
          elLegendWrap.style.right = 0;
          var lRect = this.legendHelpers.getLegendBBox();
          var dimensions = new Dimensions(this.ctx);
          var titleRect = dimensions.dimHelpers.getTitleSubtitleCoords('title');
          var subtitleRect = dimensions.dimHelpers.getTitleSubtitleCoords('subtitle');
          var offsetX = 20;
          var offsetY = 0; // the whole legend box is set to bottom

          if (w.config.legend.position === 'bottom') {
            offsetY = -lRect.clwh / 1.8;
          } else if (w.config.legend.position === 'top') {
            offsetY =
              titleRect.height +
              subtitleRect.height +
              w.config.title.margin +
              w.config.subtitle.margin -
              10;
          }

          this.setLegendWrapXY(offsetX, offsetY);
        },
      },
      {
        key: 'legendAlignVertical',
        value: function legendAlignVertical() {
          var w = this.w;
          var lRect = this.legendHelpers.getLegendBBox();
          var offsetY = 20;
          var offsetX = 0;

          if (w.config.legend.position === 'left') {
            offsetX = 20;
          }

          if (w.config.legend.position === 'right') {
            offsetX = w.globals.svgWidth - lRect.clww - 10;
          }

          this.setLegendWrapXY(offsetX, offsetY);
        },
      },
      {
        key: 'onLegendHovered',
        value: function onLegendHovered(e) {
          var w = this.w;
          var hoverOverLegend =
            e.target.classList.contains('apexcharts-legend-text') ||
            e.target.classList.contains('apexcharts-legend-marker');

          if (w.config.chart.type !== 'heatmap' && !this.isBarsDistributed) {
            if (!e.target.classList.contains('apexcharts-inactive-legend') && hoverOverLegend) {
              var series = new Series(this.ctx);
              series.toggleSeriesOnHover(e, e.target);
            }
          } else {
            // for heatmap handling
            if (hoverOverLegend) {
              var seriesCnt = parseInt(e.target.getAttribute('rel'), 10) - 1;
              this.ctx.events.fireEvent('legendHover', [this.ctx, seriesCnt, this.w]);

              var _series = new Series(this.ctx);

              _series.highlightRangeInSeries(e, e.target);
            }
          }
        },
      },
      {
        key: 'onLegendClick',
        value: function onLegendClick(e) {
          var w = this.w;
          if (w.config.legend.customLegendItems.length) return;

          if (
            e.target.classList.contains('apexcharts-legend-text') ||
            e.target.classList.contains('apexcharts-legend-marker')
          ) {
            var seriesCnt = parseInt(e.target.getAttribute('rel'), 10) - 1;
            var isHidden = e.target.getAttribute('data:collapsed') === 'true';
            var legendClick = this.w.config.chart.events.legendClick;

            if (typeof legendClick === 'function') {
              legendClick(this.ctx, seriesCnt, this.w);
            }

            this.ctx.events.fireEvent('legendClick', [this.ctx, seriesCnt, this.w]);
            var markerClick = this.w.config.legend.markers.onClick;

            if (
              typeof markerClick === 'function' &&
              e.target.classList.contains('apexcharts-legend-marker')
            ) {
              markerClick(this.ctx, seriesCnt, this.w);
              this.ctx.events.fireEvent('legendMarkerClick', [this.ctx, seriesCnt, this.w]);
            } // for now - just prevent click on heatmap legend - and allow hover only

            var clickAllowed =
              w.config.chart.type !== 'treemap' &&
              w.config.chart.type !== 'heatmap' &&
              !this.isBarsDistributed;

            if (clickAllowed && w.config.legend.onItemClick.toggleDataSeries) {
              this.legendHelpers.toggleDataSeries(seriesCnt, isHidden);
            }
          }
        },
      },
    ]);

    return Legend;
  })();

  var icoPan =
    '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>';

  var icoZoom =
    '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>';

  var icoReset =
    '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>';

  var icoZoomIn =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n';

  var icoZoomOut =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n';

  var icoSelect =
    '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>';

  var icoMenu =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>';

  /**
   * ApexCharts Toolbar Class for creating toolbar in axis based charts.
   *
   * @module Toolbar
   **/

  var Toolbar = /*#__PURE__*/ (function () {
    function Toolbar(ctx) {
      _classCallCheck(this, Toolbar);

      this.ctx = ctx;
      this.w = ctx.w;
      var w = this.w;
      this.ev = this.w.config.chart.events;
      this.selectedClass = 'apexcharts-selected';
      this.localeValues = this.w.globals.locale.toolbar;
      this.minX = w.globals.minX;
      this.maxX = w.globals.maxX;
    }

    _createClass(Toolbar, [
      {
        key: 'createToolbar',
        value: function createToolbar() {
          var _this = this;

          var w = this.w;

          var createDiv = function createDiv() {
            return document.createElement('div');
          };

          var elToolbarWrap = createDiv();
          elToolbarWrap.setAttribute('class', 'apexcharts-toolbar');
          elToolbarWrap.style.top = w.config.chart.toolbar.offsetY + 'px';
          elToolbarWrap.style.right = -w.config.chart.toolbar.offsetX + 3 + 'px';
          w.globals.dom.elWrap.appendChild(elToolbarWrap);
          this.elZoom = createDiv();
          this.elZoomIn = createDiv();
          this.elZoomOut = createDiv();
          this.elPan = createDiv();
          this.elSelection = createDiv();
          this.elZoomReset = createDiv();
          this.elMenuIcon = createDiv();
          this.elMenu = createDiv();
          this.elCustomIcons = [];
          this.t = w.config.chart.toolbar.tools;

          if (Array.isArray(this.t.customIcons)) {
            for (var i = 0; i < this.t.customIcons.length; i++) {
              this.elCustomIcons.push(createDiv());
            }
          }

          var toolbarControls = [];

          var appendZoomControl = function appendZoomControl(type, el, ico) {
            var tool = type.toLowerCase();

            if (_this.t[tool] && w.config.chart.zoom.enabled) {
              toolbarControls.push({
                el: el,
                icon: typeof _this.t[tool] === 'string' ? _this.t[tool] : ico,
                title: _this.localeValues[type],
                class: 'apexcharts-'.concat(tool, '-icon'),
              });
            }
          };

          appendZoomControl('zoomIn', this.elZoomIn, icoZoomIn);
          appendZoomControl('zoomOut', this.elZoomOut, icoZoomOut);

          var zoomSelectionCtrls = function zoomSelectionCtrls(z) {
            if (_this.t[z] && w.config.chart[z].enabled) {
              toolbarControls.push({
                el: z === 'zoom' ? _this.elZoom : _this.elSelection,
                icon:
                  typeof _this.t[z] === 'string' ? _this.t[z] : z === 'zoom' ? icoZoom : icoSelect,
                title: _this.localeValues[z === 'zoom' ? 'selectionZoom' : 'selection'],
                class: w.globals.isTouchDevice
                  ? 'apexcharts-element-hidden'
                  : 'apexcharts-'.concat(z, '-icon'),
              });
            }
          };

          zoomSelectionCtrls('zoom');
          zoomSelectionCtrls('selection');

          if (this.t.pan && w.config.chart.zoom.enabled) {
            toolbarControls.push({
              el: this.elPan,
              icon: typeof this.t.pan === 'string' ? this.t.pan : icoPan,
              title: this.localeValues.pan,
              class: w.globals.isTouchDevice ? 'apexcharts-element-hidden' : 'apexcharts-pan-icon',
            });
          }

          appendZoomControl('reset', this.elZoomReset, icoReset);

          if (this.t.download) {
            toolbarControls.push({
              el: this.elMenuIcon,
              icon: typeof this.t.download === 'string' ? this.t.download : icoMenu,
              title: this.localeValues.menu,
              class: 'apexcharts-menu-icon',
            });
          }

          for (var _i = 0; _i < this.elCustomIcons.length; _i++) {
            toolbarControls.push({
              el: this.elCustomIcons[_i],
              icon: this.t.customIcons[_i].icon,
              title: this.t.customIcons[_i].title,
              index: this.t.customIcons[_i].index,
              class: 'apexcharts-toolbar-custom-icon ' + this.t.customIcons[_i].class,
            });
          }

          toolbarControls.forEach(function (t, index) {
            if (t.index) {
              Utils$1.moveIndexInArray(toolbarControls, index, t.index);
            }
          });

          for (var _i2 = 0; _i2 < toolbarControls.length; _i2++) {
            Graphics.setAttrs(toolbarControls[_i2].el, {
              class: toolbarControls[_i2].class,
              title: toolbarControls[_i2].title,
            });
            toolbarControls[_i2].el.innerHTML = toolbarControls[_i2].icon;
            elToolbarWrap.appendChild(toolbarControls[_i2].el);
          }

          this._createHamburgerMenu(elToolbarWrap);

          if (w.globals.zoomEnabled) {
            this.elZoom.classList.add(this.selectedClass);
          } else if (w.globals.panEnabled) {
            this.elPan.classList.add(this.selectedClass);
          } else if (w.globals.selectionEnabled) {
            this.elSelection.classList.add(this.selectedClass);
          }

          this.addToolbarEventListeners();
        },
      },
      {
        key: '_createHamburgerMenu',
        value: function _createHamburgerMenu(parent) {
          this.elMenuItems = [];
          parent.appendChild(this.elMenu);
          Graphics.setAttrs(this.elMenu, {
            class: 'apexcharts-menu',
          });
          var menuItems = [
            {
              name: 'exportSVG',
              title: this.localeValues.exportToSVG,
            },
            {
              name: 'exportPNG',
              title: this.localeValues.exportToPNG,
            },
            {
              name: 'exportCSV',
              title: this.localeValues.exportToCSV,
            },
          ];

          if (!this.w.globals.allSeriesHasEqualX) {
            // if it is a multi series, and all series have variable x values, export CSV won't work
            menuItems.splice(2, 1);
          }

          for (var i = 0; i < menuItems.length; i++) {
            this.elMenuItems.push(document.createElement('div'));
            this.elMenuItems[i].innerHTML = menuItems[i].title;
            Graphics.setAttrs(this.elMenuItems[i], {
              class: 'apexcharts-menu-item '.concat(menuItems[i].name),
              title: menuItems[i].title,
            });
            this.elMenu.appendChild(this.elMenuItems[i]);
          }
        },
      },
      {
        key: 'addToolbarEventListeners',
        value: function addToolbarEventListeners() {
          var _this2 = this;

          this.elZoomReset.addEventListener('click', this.handleZoomReset.bind(this));
          this.elSelection.addEventListener(
            'click',
            this.toggleZoomSelection.bind(this, 'selection')
          );
          this.elZoom.addEventListener('click', this.toggleZoomSelection.bind(this, 'zoom'));
          this.elZoomIn.addEventListener('click', this.handleZoomIn.bind(this));
          this.elZoomOut.addEventListener('click', this.handleZoomOut.bind(this));
          this.elPan.addEventListener('click', this.togglePanning.bind(this));
          this.elMenuIcon.addEventListener('click', this.toggleMenu.bind(this));
          this.elMenuItems.forEach(function (m) {
            if (m.classList.contains('exportSVG')) {
              m.addEventListener('click', _this2.handleDownload.bind(_this2, 'svg'));
            } else if (m.classList.contains('exportPNG')) {
              m.addEventListener('click', _this2.handleDownload.bind(_this2, 'png'));
            } else if (m.classList.contains('exportCSV')) {
              m.addEventListener('click', _this2.handleDownload.bind(_this2, 'csv'));
            }
          });

          for (var i = 0; i < this.t.customIcons.length; i++) {
            this.elCustomIcons[i].addEventListener(
              'click',
              this.t.customIcons[i].click.bind(this, this.ctx, this.ctx.w)
            );
          }
        },
      },
      {
        key: 'toggleZoomSelection',
        value: function toggleZoomSelection(type) {
          var charts = this.ctx.getSyncedCharts();
          charts.forEach(function (ch) {
            ch.ctx.toolbar.toggleOtherControls();
            var el = type === 'selection' ? ch.ctx.toolbar.elSelection : ch.ctx.toolbar.elZoom;
            var enabledType = type === 'selection' ? 'selectionEnabled' : 'zoomEnabled';
            ch.w.globals[enabledType] = !ch.w.globals[enabledType];

            if (!el.classList.contains(ch.ctx.toolbar.selectedClass)) {
              el.classList.add(ch.ctx.toolbar.selectedClass);
            } else {
              el.classList.remove(ch.ctx.toolbar.selectedClass);
            }
          });
        },
      },
      {
        key: 'getToolbarIconsReference',
        value: function getToolbarIconsReference() {
          var w = this.w;

          if (!this.elZoom) {
            this.elZoom = w.globals.dom.baseEl.querySelector('.apexcharts-zoom-icon');
          }

          if (!this.elPan) {
            this.elPan = w.globals.dom.baseEl.querySelector('.apexcharts-pan-icon');
          }

          if (!this.elSelection) {
            this.elSelection = w.globals.dom.baseEl.querySelector('.apexcharts-selection-icon');
          }
        },
      },
      {
        key: 'enableZoomPanFromToolbar',
        value: function enableZoomPanFromToolbar(type) {
          this.toggleOtherControls();
          type === 'pan' ? (this.w.globals.panEnabled = true) : (this.w.globals.zoomEnabled = true);
          var el = type === 'pan' ? this.elPan : this.elZoom;
          var el2 = type === 'pan' ? this.elZoom : this.elPan;

          if (el) {
            el.classList.add(this.selectedClass);
          }

          if (el2) {
            el2.classList.remove(this.selectedClass);
          }
        },
      },
      {
        key: 'togglePanning',
        value: function togglePanning() {
          var charts = this.ctx.getSyncedCharts();
          charts.forEach(function (ch) {
            ch.ctx.toolbar.toggleOtherControls();
            ch.w.globals.panEnabled = !ch.w.globals.panEnabled;

            if (!ch.ctx.toolbar.elPan.classList.contains(ch.ctx.toolbar.selectedClass)) {
              ch.ctx.toolbar.elPan.classList.add(ch.ctx.toolbar.selectedClass);
            } else {
              ch.ctx.toolbar.elPan.classList.remove(ch.ctx.toolbar.selectedClass);
            }
          });
        },
      },
      {
        key: 'toggleOtherControls',
        value: function toggleOtherControls() {
          var _this3 = this;

          var w = this.w;
          w.globals.panEnabled = false;
          w.globals.zoomEnabled = false;
          w.globals.selectionEnabled = false;
          this.getToolbarIconsReference();
          var toggleEls = [this.elPan, this.elSelection, this.elZoom];
          toggleEls.forEach(function (el) {
            if (el) {
              el.classList.remove(_this3.selectedClass);
            }
          });
        },
      },
      {
        key: 'handleZoomIn',
        value: function handleZoomIn() {
          var w = this.w;

          if (w.globals.isRangeBar) {
            this.minX = w.globals.minY;
            this.maxX = w.globals.maxY;
          }

          var centerX = (this.minX + this.maxX) / 2;
          var newMinX = (this.minX + centerX) / 2;
          var newMaxX = (this.maxX + centerX) / 2;

          var newMinXMaxX = this._getNewMinXMaxX(newMinX, newMaxX);

          if (!w.globals.disableZoomIn) {
            this.zoomUpdateOptions(newMinXMaxX.minX, newMinXMaxX.maxX);
          }
        },
      },
      {
        key: 'handleZoomOut',
        value: function handleZoomOut() {
          var w = this.w;

          if (w.globals.isRangeBar) {
            this.minX = w.globals.minY;
            this.maxX = w.globals.maxY;
          } // avoid zooming out beyond 1000 which may result in NaN values being printed on x-axis

          if (w.config.xaxis.type === 'datetime' && new Date(this.minX).getUTCFullYear() < 1000) {
            return;
          }

          var centerX = (this.minX + this.maxX) / 2;
          var newMinX = this.minX - (centerX - this.minX);
          var newMaxX = this.maxX - (centerX - this.maxX);

          var newMinXMaxX = this._getNewMinXMaxX(newMinX, newMaxX);

          if (!w.globals.disableZoomOut) {
            this.zoomUpdateOptions(newMinXMaxX.minX, newMinXMaxX.maxX);
          }
        },
      },
      {
        key: '_getNewMinXMaxX',
        value: function _getNewMinXMaxX(newMinX, newMaxX) {
          var shouldFloor = this.w.config.xaxis.convertedCatToNumeric;
          return {
            minX: shouldFloor ? Math.floor(newMinX) : newMinX,
            maxX: shouldFloor ? Math.floor(newMaxX) : newMaxX,
          };
        },
      },
      {
        key: 'zoomUpdateOptions',
        value: function zoomUpdateOptions(newMinX, newMaxX) {
          var w = this.w;

          if (newMinX === undefined && newMaxX === undefined) {
            this.handleZoomReset();
            return;
          }

          if (w.config.xaxis.convertedCatToNumeric) {
            // in category charts, avoid zooming out beyond min and max
            if (newMinX < 1) {
              newMinX = 1;
              newMaxX = w.globals.dataPoints;
            }

            if (newMaxX - newMinX < 2) {
              return;
            }
          }

          var xaxis = {
            min: newMinX,
            max: newMaxX,
          };
          var beforeZoomRange = this.getBeforeZoomRange(xaxis);

          if (beforeZoomRange) {
            xaxis = beforeZoomRange.xaxis;
          }

          var options = {
            xaxis: xaxis,
          };
          var yaxis = Utils$1.clone(w.globals.initialConfig.yaxis);

          if (w.config.chart.zoom.autoScaleYaxis) {
            var scale = new Range$1(this.ctx);
            yaxis = scale.autoScaleY(this.ctx, yaxis, {
              xaxis: xaxis,
            });
          }

          if (!w.config.chart.group) {
            // if chart in a group, prevent yaxis update here
            // fix issue #650
            options.yaxis = yaxis;
          }

          this.w.globals.zoomed = true;

          this.ctx.updateHelpers._updateOptions(
            options,
            false,
            this.w.config.chart.animations.dynamicAnimation.enabled
          );

          this.zoomCallback(xaxis, yaxis);
        },
      },
      {
        key: 'zoomCallback',
        value: function zoomCallback(xaxis, yaxis) {
          if (typeof this.ev.zoomed === 'function') {
            this.ev.zoomed(this.ctx, {
              xaxis: xaxis,
              yaxis: yaxis,
            });
          }
        },
      },
      {
        key: 'getBeforeZoomRange',
        value: function getBeforeZoomRange(xaxis, yaxis) {
          var newRange = null;

          if (typeof this.ev.beforeZoom === 'function') {
            newRange = this.ev.beforeZoom(this, {
              xaxis: xaxis,
              yaxis: yaxis,
            });
          }

          return newRange;
        },
      },
      {
        key: 'toggleMenu',
        value: function toggleMenu() {
          var _this4 = this;

          window.setTimeout(function () {
            if (_this4.elMenu.classList.contains('apexcharts-menu-open')) {
              _this4.elMenu.classList.remove('apexcharts-menu-open');
            } else {
              _this4.elMenu.classList.add('apexcharts-menu-open');
            }
          }, 0);
        },
      },
      {
        key: 'handleDownload',
        value: function handleDownload(type) {
          var w = this.w;
          var exprt = new Exports(this.ctx);

          switch (type) {
            case 'svg':
              exprt.exportToSVG(this.ctx);
              break;

            case 'png':
              exprt.exportToPng(this.ctx);
              break;

            case 'csv':
              exprt.exportToCSV({
                series: w.config.series,
                columnDelimiter: w.config.chart.toolbar.export.csv.columnDelimiter,
              });
              break;
          }
        },
      },
      {
        key: 'handleZoomReset',
        value: function handleZoomReset(e) {
          var charts = this.ctx.getSyncedCharts();
          charts.forEach(function (ch) {
            var w = ch.w; // forget lastXAxis min/max as reset button isn't resetting the x-axis completely if zoomX is called before

            w.globals.lastXAxis.min = undefined;
            w.globals.lastXAxis.max = undefined;
            ch.updateHelpers.revertDefaultAxisMinMax();

            if (typeof w.config.chart.events.beforeResetZoom === 'function') {
              // here, user get an option to control xaxis and yaxis when resetZoom is called
              // at this point, whatever is returned from w.config.chart.events.beforeResetZoom
              // is set as the new xaxis/yaxis min/max
              var resetZoomRange = w.config.chart.events.beforeResetZoom(ch, w);

              if (resetZoomRange) {
                ch.updateHelpers.revertDefaultAxisMinMax(resetZoomRange);
              }
            }

            if (typeof w.config.chart.events.zoomed === 'function') {
              ch.ctx.toolbar.zoomCallback({
                min: w.config.xaxis.min,
                max: w.config.xaxis.max,
              });
            }

            w.globals.zoomed = false; // if user has some series collapsed before hitting zoom reset button,
            // those series should stay collapsed

            var series = ch.ctx.series.emptyCollapsedSeries(Utils$1.clone(w.globals.initialSeries));

            ch.updateHelpers._updateSeries(
              series,
              w.config.chart.animations.dynamicAnimation.enabled
            );
          });
        },
      },
      {
        key: 'destroy',
        value: function destroy() {
          this.elZoom = null;
          this.elZoomIn = null;
          this.elZoomOut = null;
          this.elPan = null;
          this.elSelection = null;
          this.elZoomReset = null;
          this.elMenuIcon = null;
        },
      },
    ]);

    return Toolbar;
  })();

  /**
   * ApexCharts Zoom Class for handling zooming and panning on axes based charts.
   *
   * @module ZoomPanSelection
   **/

  var ZoomPanSelection = /*#__PURE__*/ (function (_Toolbar) {
    _inherits(ZoomPanSelection, _Toolbar);

    var _super = _createSuper(ZoomPanSelection);

    function ZoomPanSelection(ctx) {
      var _this;

      _classCallCheck(this, ZoomPanSelection);

      _this = _super.call(this, ctx);
      _this.ctx = ctx;
      _this.w = ctx.w;
      _this.dragged = false;
      _this.graphics = new Graphics(_this.ctx);
      _this.eventList = [
        'mousedown',
        'mouseleave',
        'mousemove',
        'touchstart',
        'touchmove',
        'mouseup',
        'touchend',
      ];
      _this.clientX = 0;
      _this.clientY = 0;
      _this.startX = 0;
      _this.endX = 0;
      _this.dragX = 0;
      _this.startY = 0;
      _this.endY = 0;
      _this.dragY = 0;
      _this.moveDirection = 'none';
      return _this;
    }

    _createClass(ZoomPanSelection, [
      {
        key: 'init',
        value: function init(_ref) {
          var _this2 = this;

          var xyRatios = _ref.xyRatios;
          var w = this.w;
          var me = this;
          this.xyRatios = xyRatios;
          this.zoomRect = this.graphics.drawRect(0, 0, 0, 0);
          this.selectionRect = this.graphics.drawRect(0, 0, 0, 0);
          this.gridRect = w.globals.dom.baseEl.querySelector('.apexcharts-grid');
          this.zoomRect.node.classList.add('apexcharts-zoom-rect');
          this.selectionRect.node.classList.add('apexcharts-selection-rect');
          w.globals.dom.elGraphical.add(this.zoomRect);
          w.globals.dom.elGraphical.add(this.selectionRect);

          if (w.config.chart.selection.type === 'x') {
            this.slDraggableRect = this.selectionRect
              .draggable({
                minX: 0,
                minY: 0,
                maxX: w.globals.gridWidth,
                maxY: w.globals.gridHeight,
              })
              .on('dragmove', this.selectionDragging.bind(this, 'dragging'));
          } else if (w.config.chart.selection.type === 'y') {
            this.slDraggableRect = this.selectionRect
              .draggable({
                minX: 0,
                maxX: w.globals.gridWidth,
              })
              .on('dragmove', this.selectionDragging.bind(this, 'dragging'));
          } else {
            this.slDraggableRect = this.selectionRect
              .draggable()
              .on('dragmove', this.selectionDragging.bind(this, 'dragging'));
          }

          this.preselectedSelection();
          this.hoverArea = w.globals.dom.baseEl.querySelector(
            ''.concat(w.globals.chartClass, ' .apexcharts-svg')
          );
          this.hoverArea.classList.add('apexcharts-zoomable');
          this.eventList.forEach(function (event) {
            _this2.hoverArea.addEventListener(event, me.svgMouseEvents.bind(me, xyRatios), {
              capture: false,
              passive: true,
            });
          });
        }, // remove the event listeners which were previously added on hover area
      },
      {
        key: 'destroy',
        value: function destroy() {
          if (this.slDraggableRect) {
            this.slDraggableRect.draggable(false);
            this.slDraggableRect.off();
            this.selectionRect.off();
          }

          this.selectionRect = null;
          this.zoomRect = null;
          this.gridRect = null;
        },
      },
      {
        key: 'svgMouseEvents',
        value: function svgMouseEvents(xyRatios, e) {
          var w = this.w;
          var me = this;
          var toolbar = this.ctx.toolbar;
          var zoomtype = w.globals.zoomEnabled
            ? w.config.chart.zoom.type
            : w.config.chart.selection.type;
          var autoSelected = w.config.chart.toolbar.autoSelected;

          if (e.shiftKey) {
            this.shiftWasPressed = true;
            toolbar.enableZoomPanFromToolbar(autoSelected === 'pan' ? 'zoom' : 'pan');
          } else {
            if (this.shiftWasPressed) {
              toolbar.enableZoomPanFromToolbar(autoSelected);
              this.shiftWasPressed = false;
            }
          }

          if (!e.target) return;
          var tc = e.target.classList;
          var pc;

          if (e.target.parentNode && e.target.parentNode !== null) {
            pc = e.target.parentNode.classList;
          }

          var falsePositives =
            tc.contains('apexcharts-selection-rect') ||
            tc.contains('apexcharts-legend-marker') ||
            tc.contains('apexcharts-legend-text') ||
            (pc && pc.contains('apexcharts-toolbar'));
          if (falsePositives) return;
          me.clientX =
            e.type === 'touchmove' || e.type === 'touchstart'
              ? e.touches[0].clientX
              : e.type === 'touchend'
              ? e.changedTouches[0].clientX
              : e.clientX;
          me.clientY =
            e.type === 'touchmove' || e.type === 'touchstart'
              ? e.touches[0].clientY
              : e.type === 'touchend'
              ? e.changedTouches[0].clientY
              : e.clientY;

          if (e.type === 'mousedown' && e.which === 1) {
            var gridRectDim = me.gridRect.getBoundingClientRect();
            me.startX = me.clientX - gridRectDim.left;
            me.startY = me.clientY - gridRectDim.top;
            me.dragged = false;
            me.w.globals.mousedown = true;
          }

          if ((e.type === 'mousemove' && e.which === 1) || e.type === 'touchmove') {
            me.dragged = true;

            if (w.globals.panEnabled) {
              w.globals.selection = null;

              if (me.w.globals.mousedown) {
                me.panDragging({
                  context: me,
                  zoomtype: zoomtype,
                  xyRatios: xyRatios,
                });
              }
            } else {
              if (
                (me.w.globals.mousedown && w.globals.zoomEnabled) ||
                (me.w.globals.mousedown && w.globals.selectionEnabled)
              ) {
                me.selection = me.selectionDrawing({
                  context: me,
                  zoomtype: zoomtype,
                });
              }
            }
          }

          if (e.type === 'mouseup' || e.type === 'touchend' || e.type === 'mouseleave') {
            // we will be calling getBoundingClientRect on each mousedown/mousemove/mouseup
            var _gridRectDim = me.gridRect.getBoundingClientRect();

            if (me.w.globals.mousedown) {
              // user released the drag, now do all the calculations
              me.endX = me.clientX - _gridRectDim.left;
              me.endY = me.clientY - _gridRectDim.top;
              me.dragX = Math.abs(me.endX - me.startX);
              me.dragY = Math.abs(me.endY - me.startY);

              if (w.globals.zoomEnabled || w.globals.selectionEnabled) {
                me.selectionDrawn({
                  context: me,
                  zoomtype: zoomtype,
                });
              }

              if (w.globals.panEnabled && w.config.xaxis.convertedCatToNumeric) {
                me.delayedPanScrolled();
              }
            }

            if (w.globals.zoomEnabled) {
              me.hideSelectionRect(this.selectionRect);
            }

            me.dragged = false;
            me.w.globals.mousedown = false;
          }

          this.makeSelectionRectDraggable();
        },
      },
      {
        key: 'makeSelectionRectDraggable',
        value: function makeSelectionRectDraggable() {
          var w = this.w;
          if (!this.selectionRect) return;
          var rectDim = this.selectionRect.node.getBoundingClientRect();

          if (rectDim.width > 0 && rectDim.height > 0) {
            this.slDraggableRect
              .selectize({
                points: 'l, r',
                pointSize: 8,
                pointType: 'rect',
              })
              .resize({
                constraint: {
                  minX: 0,
                  minY: 0,
                  maxX: w.globals.gridWidth,
                  maxY: w.globals.gridHeight,
                },
              })
              .on('resizing', this.selectionDragging.bind(this, 'resizing'));
          }
        },
      },
      {
        key: 'preselectedSelection',
        value: function preselectedSelection() {
          var w = this.w;
          var xyRatios = this.xyRatios;

          if (!w.globals.zoomEnabled) {
            if (typeof w.globals.selection !== 'undefined' && w.globals.selection !== null) {
              this.drawSelectionRect(w.globals.selection);
            } else {
              if (
                w.config.chart.selection.xaxis.min !== undefined &&
                w.config.chart.selection.xaxis.max !== undefined
              ) {
                var x = (w.config.chart.selection.xaxis.min - w.globals.minX) / xyRatios.xRatio;
                var width =
                  w.globals.gridWidth -
                  (w.globals.maxX - w.config.chart.selection.xaxis.max) / xyRatios.xRatio -
                  x;
                var selectionRect = {
                  x: x,
                  y: 0,
                  width: width,
                  height: w.globals.gridHeight,
                  translateX: 0,
                  translateY: 0,
                  selectionEnabled: true,
                };
                this.drawSelectionRect(selectionRect);
                this.makeSelectionRectDraggable();

                if (typeof w.config.chart.events.selection === 'function') {
                  w.config.chart.events.selection(this.ctx, {
                    xaxis: {
                      min: w.config.chart.selection.xaxis.min,
                      max: w.config.chart.selection.xaxis.max,
                    },
                    yaxis: {},
                  });
                }
              }
            }
          }
        },
      },
      {
        key: 'drawSelectionRect',
        value: function drawSelectionRect(_ref2) {
          var x = _ref2.x,
            y = _ref2.y,
            width = _ref2.width,
            height = _ref2.height,
            _ref2$translateX = _ref2.translateX,
            translateX = _ref2$translateX === void 0 ? 0 : _ref2$translateX,
            _ref2$translateY = _ref2.translateY,
            translateY = _ref2$translateY === void 0 ? 0 : _ref2$translateY;
          var w = this.w;
          var zoomRect = this.zoomRect;
          var selectionRect = this.selectionRect;

          if (this.dragged || w.globals.selection !== null) {
            var scalingAttrs = {
              transform: 'translate(' + translateX + ', ' + translateY + ')',
            }; // change styles based on zoom or selection
            // zoom is Enabled and user has dragged, so draw blue rect

            if (w.globals.zoomEnabled && this.dragged) {
              if (width < 0) width = 1; // fixes apexcharts.js#1168

              zoomRect.attr({
                x: x,
                y: y,
                width: width,
                height: height,
                fill: w.config.chart.zoom.zoomedArea.fill.color,
                'fill-opacity': w.config.chart.zoom.zoomedArea.fill.opacity,
                stroke: w.config.chart.zoom.zoomedArea.stroke.color,
                'stroke-width': w.config.chart.zoom.zoomedArea.stroke.width,
                'stroke-opacity': w.config.chart.zoom.zoomedArea.stroke.opacity,
              });
              Graphics.setAttrs(zoomRect.node, scalingAttrs);
            } // selection is enabled

            if (w.globals.selectionEnabled) {
              selectionRect.attr({
                x: x,
                y: y,
                width: width > 0 ? width : 0,
                height: height > 0 ? height : 0,
                fill: w.config.chart.selection.fill.color,
                'fill-opacity': w.config.chart.selection.fill.opacity,
                stroke: w.config.chart.selection.stroke.color,
                'stroke-width': w.config.chart.selection.stroke.width,
                'stroke-dasharray': w.config.chart.selection.stroke.dashArray,
                'stroke-opacity': w.config.chart.selection.stroke.opacity,
              });
              Graphics.setAttrs(selectionRect.node, scalingAttrs);
            }
          }
        },
      },
      {
        key: 'hideSelectionRect',
        value: function hideSelectionRect(rect) {
          if (rect) {
            rect.attr({
              x: 0,
              y: 0,
              width: 0,
              height: 0,
            });
          }
        },
      },
      {
        key: 'selectionDrawing',
        value: function selectionDrawing(_ref3) {
          var context = _ref3.context,
            zoomtype = _ref3.zoomtype;
          var w = this.w;
          var me = context;
          var gridRectDim = this.gridRect.getBoundingClientRect();
          var startX = me.startX - 1;
          var startY = me.startY;
          var inversedX = false;
          var inversedY = false;
          var selectionWidth = me.clientX - gridRectDim.left - startX;
          var selectionHeight = me.clientY - gridRectDim.top - startY;
          var selectionRect = {};

          if (Math.abs(selectionWidth + startX) > w.globals.gridWidth) {
            // user dragged the mouse outside drawing area to the right
            selectionWidth = w.globals.gridWidth - startX;
          } else if (me.clientX - gridRectDim.left < 0) {
            // user dragged the mouse outside drawing area to the left
            selectionWidth = startX;
          } // inverse selection X

          if (startX > me.clientX - gridRectDim.left) {
            inversedX = true;
            selectionWidth = Math.abs(selectionWidth);
          } // inverse selection Y

          if (startY > me.clientY - gridRectDim.top) {
            inversedY = true;
            selectionHeight = Math.abs(selectionHeight);
          }

          if (zoomtype === 'x') {
            selectionRect = {
              x: inversedX ? startX - selectionWidth : startX,
              y: 0,
              width: selectionWidth,
              height: w.globals.gridHeight,
            };
          } else if (zoomtype === 'y') {
            selectionRect = {
              x: 0,
              y: inversedY ? startY - selectionHeight : startY,
              width: w.globals.gridWidth,
              height: selectionHeight,
            };
          } else {
            selectionRect = {
              x: inversedX ? startX - selectionWidth : startX,
              y: inversedY ? startY - selectionHeight : startY,
              width: selectionWidth,
              height: selectionHeight,
            };
          }

          me.drawSelectionRect(selectionRect);
          me.selectionDragging('resizing');
          return selectionRect;
        },
      },
      {
        key: 'selectionDragging',
        value: function selectionDragging(type, e) {
          var _this3 = this;

          var w = this.w;
          var xyRatios = this.xyRatios;
          var selRect = this.selectionRect;
          var timerInterval = 0;

          if (type === 'resizing') {
            timerInterval = 30;
          } // update selection when selection rect is dragged

          var getSelAttr = function getSelAttr(attr) {
            return parseFloat(selRect.node.getAttribute(attr));
          };

          var draggedProps = {
            x: getSelAttr('x'),
            y: getSelAttr('y'),
            width: getSelAttr('width'),
            height: getSelAttr('height'),
          };
          w.globals.selection = draggedProps; // update selection ends

          if (typeof w.config.chart.events.selection === 'function' && w.globals.selectionEnabled) {
            // a small debouncer is required when resizing to avoid freezing the chart
            clearTimeout(this.w.globals.selectionResizeTimer);
            this.w.globals.selectionResizeTimer = window.setTimeout(function () {
              var gridRectDim = _this3.gridRect.getBoundingClientRect();

              var selectionRect = selRect.node.getBoundingClientRect();
              var minX =
                w.globals.xAxisScale.niceMin +
                (selectionRect.left - gridRectDim.left) * xyRatios.xRatio;
              var maxX =
                w.globals.xAxisScale.niceMin +
                (selectionRect.right - gridRectDim.left) * xyRatios.xRatio;
              var minY =
                w.globals.yAxisScale[0].niceMin +
                (gridRectDim.bottom - selectionRect.bottom) * xyRatios.yRatio[0];
              var maxY =
                w.globals.yAxisScale[0].niceMax -
                (selectionRect.top - gridRectDim.top) * xyRatios.yRatio[0];
              var xyAxis = {
                xaxis: {
                  min: minX,
                  max: maxX,
                },
                yaxis: {
                  min: minY,
                  max: maxY,
                },
              };
              w.config.chart.events.selection(_this3.ctx, xyAxis);

              if (
                w.config.chart.brush.enabled &&
                w.config.chart.events.brushScrolled !== undefined
              ) {
                w.config.chart.events.brushScrolled(_this3.ctx, xyAxis);
              }
            }, timerInterval);
          }
        },
      },
      {
        key: 'selectionDrawn',
        value: function selectionDrawn(_ref4) {
          var context = _ref4.context,
            zoomtype = _ref4.zoomtype;
          var w = this.w;
          var me = context;
          var xyRatios = this.xyRatios;
          var toolbar = this.ctx.toolbar;

          if (me.startX > me.endX) {
            var tempX = me.startX;
            me.startX = me.endX;
            me.endX = tempX;
          }

          if (me.startY > me.endY) {
            var tempY = me.startY;
            me.startY = me.endY;
            me.endY = tempY;
          }

          var xLowestValue = undefined;
          var xHighestValue = undefined;

          if (!w.globals.isRangeBar) {
            xLowestValue = w.globals.xAxisScale.niceMin + me.startX * xyRatios.xRatio;
            xHighestValue = w.globals.xAxisScale.niceMin + me.endX * xyRatios.xRatio;
          } else {
            xLowestValue = w.globals.yAxisScale[0].niceMin + me.startX * xyRatios.invertedYRatio;
            xHighestValue = w.globals.yAxisScale[0].niceMin + me.endX * xyRatios.invertedYRatio;
          } // TODO: we will consider the 1st y axis values here for getting highest and lowest y

          var yHighestValue = [];
          var yLowestValue = [];
          w.config.yaxis.forEach(function (yaxe, index) {
            yHighestValue.push(
              w.globals.yAxisScale[index].niceMax - xyRatios.yRatio[index] * me.startY
            );
            yLowestValue.push(
              w.globals.yAxisScale[index].niceMax - xyRatios.yRatio[index] * me.endY
            );
          });

          if (me.dragged && (me.dragX > 10 || me.dragY > 10) && xLowestValue !== xHighestValue) {
            if (w.globals.zoomEnabled) {
              var yaxis = Utils$1.clone(w.globals.initialConfig.yaxis);
              var xaxis = Utils$1.clone(w.globals.initialConfig.xaxis);
              w.globals.zoomed = true;

              if (w.config.xaxis.convertedCatToNumeric) {
                xLowestValue = Math.floor(xLowestValue);
                xHighestValue = Math.floor(xHighestValue);

                if (xLowestValue < 1) {
                  xLowestValue = 1;
                  xHighestValue = w.globals.dataPoints;
                }

                if (xHighestValue - xLowestValue < 2) {
                  xHighestValue = xLowestValue + 1;
                }
              }

              if (zoomtype === 'xy' || zoomtype === 'x') {
                xaxis = {
                  min: xLowestValue,
                  max: xHighestValue,
                };
              }

              if (zoomtype === 'xy' || zoomtype === 'y') {
                yaxis.forEach(function (yaxe, index) {
                  yaxis[index].min = yLowestValue[index];
                  yaxis[index].max = yHighestValue[index];
                });
              }

              if (w.config.chart.zoom.autoScaleYaxis) {
                var scale = new Range$1(me.ctx);
                yaxis = scale.autoScaleY(me.ctx, yaxis, {
                  xaxis: xaxis,
                });
              }

              if (toolbar) {
                var beforeZoomRange = toolbar.getBeforeZoomRange(xaxis, yaxis);

                if (beforeZoomRange) {
                  xaxis = beforeZoomRange.xaxis ? beforeZoomRange.xaxis : xaxis;
                  yaxis = beforeZoomRange.yaxis ? beforeZoomRange.yaxis : yaxis;
                }
              }

              var options = {
                xaxis: xaxis,
              };

              if (!w.config.chart.group) {
                // if chart in a group, prevent yaxis update here
                // fix issue #650
                options.yaxis = yaxis;
              }

              me.ctx.updateHelpers._updateOptions(
                options,
                false,
                me.w.config.chart.animations.dynamicAnimation.enabled
              );

              if (typeof w.config.chart.events.zoomed === 'function') {
                toolbar.zoomCallback(xaxis, yaxis);
              }
            } else if (w.globals.selectionEnabled) {
              var _yaxis = null;
              var _xaxis = null;
              _xaxis = {
                min: xLowestValue,
                max: xHighestValue,
              };

              if (zoomtype === 'xy' || zoomtype === 'y') {
                _yaxis = Utils$1.clone(w.config.yaxis);

                _yaxis.forEach(function (yaxe, index) {
                  _yaxis[index].min = yLowestValue[index];
                  _yaxis[index].max = yHighestValue[index];
                });
              }

              w.globals.selection = me.selection;

              if (typeof w.config.chart.events.selection === 'function') {
                w.config.chart.events.selection(me.ctx, {
                  xaxis: _xaxis,
                  yaxis: _yaxis,
                });
              }
            }
          }
        },
      },
      {
        key: 'panDragging',
        value: function panDragging(_ref5) {
          var context = _ref5.context;
          var w = this.w;
          var me = context; // check to make sure there is data to compare against

          if (typeof w.globals.lastClientPosition.x !== 'undefined') {
            // get the change from last position to this position
            var deltaX = w.globals.lastClientPosition.x - me.clientX;
            var deltaY = w.globals.lastClientPosition.y - me.clientY; // check which direction had the highest amplitude and then figure out direction by checking if the value is greater or less than zero

            if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX > 0) {
              this.moveDirection = 'left';
            } else if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX < 0) {
              this.moveDirection = 'right';
            } else if (Math.abs(deltaY) > Math.abs(deltaX) && deltaY > 0) {
              this.moveDirection = 'up';
            } else if (Math.abs(deltaY) > Math.abs(deltaX) && deltaY < 0) {
              this.moveDirection = 'down';
            }
          } // set the new last position to the current for next time (to get the position of drag)

          w.globals.lastClientPosition = {
            x: me.clientX,
            y: me.clientY,
          };
          var xLowestValue = w.globals.isRangeBar ? w.globals.minY : w.globals.minX;
          var xHighestValue = w.globals.isRangeBar ? w.globals.maxY : w.globals.maxX; // on a category, we don't pan continuosly as it causes bugs

          if (!w.config.xaxis.convertedCatToNumeric) {
            me.panScrolled(xLowestValue, xHighestValue);
          }
        },
      },
      {
        key: 'delayedPanScrolled',
        value: function delayedPanScrolled() {
          var w = this.w;
          var newMinX = w.globals.minX;
          var newMaxX = w.globals.maxX;
          var centerX = (w.globals.maxX - w.globals.minX) / 2;

          if (this.moveDirection === 'left') {
            newMinX = w.globals.minX + centerX;
            newMaxX = w.globals.maxX + centerX;
          } else if (this.moveDirection === 'right') {
            newMinX = w.globals.minX - centerX;
            newMaxX = w.globals.maxX - centerX;
          }

          newMinX = Math.floor(newMinX);
          newMaxX = Math.floor(newMaxX);
          this.updateScrolledChart(
            {
              xaxis: {
                min: newMinX,
                max: newMaxX,
              },
            },
            newMinX,
            newMaxX
          );
        },
      },
      {
        key: 'panScrolled',
        value: function panScrolled(xLowestValue, xHighestValue) {
          var w = this.w;
          var xyRatios = this.xyRatios;
          var yaxis = Utils$1.clone(w.globals.initialConfig.yaxis);
          var xRatio = xyRatios.xRatio;
          var minX = w.globals.minX;
          var maxX = w.globals.maxX;

          if (w.globals.isRangeBar) {
            xRatio = xyRatios.invertedYRatio;
            minX = w.globals.minY;
            maxX = w.globals.maxY;
          }

          if (this.moveDirection === 'left') {
            xLowestValue = minX + (w.globals.gridWidth / 15) * xRatio;
            xHighestValue = maxX + (w.globals.gridWidth / 15) * xRatio;
          } else if (this.moveDirection === 'right') {
            xLowestValue = minX - (w.globals.gridWidth / 15) * xRatio;
            xHighestValue = maxX - (w.globals.gridWidth / 15) * xRatio;
          }

          if (!w.globals.isRangeBar) {
            if (xLowestValue < w.globals.initialMinX || xHighestValue > w.globals.initialMaxX) {
              xLowestValue = minX;
              xHighestValue = maxX;
            }
          }

          var xaxis = {
            min: xLowestValue,
            max: xHighestValue,
          };

          if (w.config.chart.zoom.autoScaleYaxis) {
            var scale = new Range$1(this.ctx);
            yaxis = scale.autoScaleY(this.ctx, yaxis, {
              xaxis: xaxis,
            });
          }

          var options = {
            xaxis: {
              min: xLowestValue,
              max: xHighestValue,
            },
          };

          if (!w.config.chart.group) {
            // if chart in a group, prevent yaxis update here
            // fix issue #650
            options.yaxis = yaxis;
          }

          this.updateScrolledChart(options, xLowestValue, xHighestValue);
        },
      },
      {
        key: 'updateScrolledChart',
        value: function updateScrolledChart(options, xLowestValue, xHighestValue) {
          var w = this.w;

          this.ctx.updateHelpers._updateOptions(options, false, false);

          if (typeof w.config.chart.events.scrolled === 'function') {
            w.config.chart.events.scrolled(this.ctx, {
              xaxis: {
                min: xLowestValue,
                max: xHighestValue,
              },
            });
          }
        },
      },
    ]);

    return ZoomPanSelection;
  })(Toolbar);

  /**
   * ApexCharts Tooltip.Utils Class to support Tooltip functionality.
   *
   * @module Tooltip.Utils
   **/

  var Utils = /*#__PURE__*/ (function () {
    function Utils(tooltipContext) {
      _classCallCheck(this, Utils);

      this.w = tooltipContext.w;
      this.ttCtx = tooltipContext;
      this.ctx = tooltipContext.ctx;
    }
    /**
     ** When hovering over series, you need to capture which series is being hovered on.
     ** This function will return both capturedseries index as well as inner index of that series
     * @memberof Utils
     * @param {object}
     * - hoverArea = the rect on which user hovers
     * - elGrid = dimensions of the hover rect (it can be different than hoverarea)
     */

    _createClass(Utils, [
      {
        key: 'getNearestValues',
        value: function getNearestValues(_ref) {
          var hoverArea = _ref.hoverArea,
            elGrid = _ref.elGrid,
            clientX = _ref.clientX,
            clientY = _ref.clientY;
          var w = this.w;
          var seriesBound = elGrid.getBoundingClientRect();
          var hoverWidth = seriesBound.width;
          var hoverHeight = seriesBound.height;
          var xDivisor = hoverWidth / (w.globals.dataPoints - 1);
          var yDivisor = hoverHeight / w.globals.dataPoints;
          var hasBars = this.hasBars();

          if ((w.globals.comboCharts || hasBars) && !w.config.xaxis.convertedCatToNumeric) {
            xDivisor = hoverWidth / w.globals.dataPoints;
          }

          var hoverX = clientX - seriesBound.left - w.globals.barPadForNumericAxis;
          var hoverY = clientY - seriesBound.top;
          var notInRect = hoverX < 0 || hoverY < 0 || hoverX > hoverWidth || hoverY > hoverHeight;

          if (notInRect) {
            hoverArea.classList.remove('hovering-zoom');
            hoverArea.classList.remove('hovering-pan');
          } else {
            if (w.globals.zoomEnabled) {
              hoverArea.classList.remove('hovering-pan');
              hoverArea.classList.add('hovering-zoom');
            } else if (w.globals.panEnabled) {
              hoverArea.classList.remove('hovering-zoom');
              hoverArea.classList.add('hovering-pan');
            }
          }

          var j = Math.round(hoverX / xDivisor);
          var jHorz = Math.floor(hoverY / yDivisor);

          if (hasBars && !w.config.xaxis.convertedCatToNumeric) {
            j = Math.ceil(hoverX / xDivisor);
            j = j - 1;
          }

          var capturedSeries = null;
          var closest = null;
          var seriesXValArr = [];
          var seriesYValArr = [];

          for (var s = 0; s < w.globals.seriesXvalues.length; s++) {
            seriesXValArr.push(
              [w.globals.seriesXvalues[s][0] - 0.000001].concat(w.globals.seriesXvalues[s])
            );
          }

          seriesXValArr = seriesXValArr.map(function (seriesXVal) {
            return seriesXVal.filter(function (s) {
              return s;
            });
          });
          seriesYValArr = w.globals.seriesYvalues.map(function (seriesYVal) {
            return seriesYVal.filter(function (s) {
              return Utils$1.isNumber(s);
            });
          }); // if X axis type is not category and tooltip is not shared, then we need to find the cursor position and get the nearest value

          if (w.globals.isXNumeric) {
            // Change origin of cursor position so that we can compute the relative nearest point to the cursor on our chart
            // we only need to scale because all points are relative to the bounds.left and bounds.top => origin is virtually (0, 0)
            var chartGridEl = this.ttCtx.getElGrid();
            var chartGridElBoundingRect = chartGridEl.getBoundingClientRect();
            var transformedHoverX = hoverX * (chartGridElBoundingRect.width / hoverWidth);
            var transformedHoverY = hoverY * (chartGridElBoundingRect.height / hoverHeight);
            closest = this.closestInMultiArray(
              transformedHoverX,
              transformedHoverY,
              seriesXValArr,
              seriesYValArr
            );
            capturedSeries = closest.index;
            j = closest.j;

            if (capturedSeries !== null) {
              // initial push, it should be a little smaller than the 1st val
              seriesXValArr = w.globals.seriesXvalues[capturedSeries];
              closest = this.closestInArray(transformedHoverX, seriesXValArr);
              j = closest.index;
            }
          }

          w.globals.capturedSeriesIndex = capturedSeries === null ? -1 : capturedSeries;
          if (!j || j < 1) j = 0;

          if (w.globals.isBarHorizontal) {
            w.globals.capturedDataPointIndex = jHorz;
          } else {
            w.globals.capturedDataPointIndex = j;
          }

          return {
            capturedSeries: capturedSeries,
            j: w.globals.isBarHorizontal ? jHorz : j,
            hoverX: hoverX,
            hoverY: hoverY,
          };
        },
      },
      {
        key: 'closestInMultiArray',
        value: function closestInMultiArray(hoverX, hoverY, Xarrays, Yarrays) {
          var w = this.w;
          var activeIndex = 0;
          var currIndex = null;
          var j = -1;

          if (w.globals.series.length > 1) {
            activeIndex = this.getFirstActiveXArray(Xarrays);
          } else {
            currIndex = 0;
          }

          var currY = Yarrays[activeIndex][0];
          var currX = Xarrays[activeIndex][0];
          var diffX = Math.abs(hoverX - currX);
          var diffY = Math.abs(hoverY - currY);
          var diff = diffY + diffX;
          Yarrays.map(function (arrY, arrIndex) {
            arrY.map(function (y, innerKey) {
              var newdiffY = Math.abs(hoverY - Yarrays[arrIndex][innerKey]);
              var newdiffX = Math.abs(hoverX - Xarrays[arrIndex][innerKey]);
              var newdiff = newdiffX + newdiffY;

              if (newdiff < diff) {
                diff = newdiff;
                diffX = newdiffX;
                diffY = newdiffY;
                currIndex = arrIndex;
                j = innerKey;
              }
            });
          });
          return {
            index: currIndex,
            j: j,
          };
        },
      },
      {
        key: 'getFirstActiveXArray',
        value: function getFirstActiveXArray(Xarrays) {
          var activeIndex = 0;
          var firstActiveSeriesIndex = Xarrays.map(function (xarr, index) {
            return xarr.length > 0 ? index : -1;
          });

          for (var a = 0; a < firstActiveSeriesIndex.length; a++) {
            if (firstActiveSeriesIndex[a] !== -1) {
              activeIndex = firstActiveSeriesIndex[a];
              break;
            }
          }

          return activeIndex;
        },
      },
      {
        key: 'closestInArray',
        value: function closestInArray(val, arr) {
          var curr = arr[0];
          var currIndex = null;
          var diff = Math.abs(val - curr);

          for (var i = 0; i < arr.length; i++) {
            var newdiff = Math.abs(val - arr[i]);

            if (newdiff < diff) {
              diff = newdiff;
              currIndex = i;
            }
          }

          return {
            index: currIndex,
          };
        },
        /**
         * When there are multiple series, it is possible to have different x values for each series.
         * But it may be possible in those multiple series, that there is same x value for 2 or more
         * series.
         * @memberof Utils
         * @param {int}
         * - j = is the inner index of series -> (series[i][j])
         * @return {bool}
         */
      },
      {
        key: 'isXoverlap',
        value: function isXoverlap(j) {
          var w = this.w;
          var xSameForAllSeriesJArr = [];
          var seriesX = w.globals.seriesX.filter(function (s) {
            return typeof s[0] !== 'undefined';
          });

          if (seriesX.length > 0) {
            for (var i = 0; i < seriesX.length - 1; i++) {
              if (
                typeof seriesX[i][j] !== 'undefined' &&
                typeof seriesX[i + 1][j] !== 'undefined'
              ) {
                if (seriesX[i][j] !== seriesX[i + 1][j]) {
                  xSameForAllSeriesJArr.push('unEqual');
                }
              }
            }
          }

          if (xSameForAllSeriesJArr.length === 0) {
            return true;
          }

          return false;
        },
      },
      {
        key: 'isInitialSeriesSameLen',
        value: function isInitialSeriesSameLen() {
          var sameLen = true;
          var initialSeries = this.w.globals.initialSeries;

          for (var i = 0; i < initialSeries.length - 1; i++) {
            if (initialSeries[i].data.length !== initialSeries[i + 1].data.length) {
              sameLen = false;
              break;
            }
          }

          return sameLen;
        },
      },
      {
        key: 'getBarsHeight',
        value: function getBarsHeight(allbars) {
          var bars = _toConsumableArray(allbars);

          var totalHeight = bars.reduce(function (acc, bar) {
            return acc + bar.getBBox().height;
          }, 0);
          return totalHeight;
        },
      },
      {
        key: 'getElMarkers',
        value: function getElMarkers() {
          return this.w.globals.dom.baseEl.querySelectorAll(' .apexcharts-series-markers');
        },
      },
      {
        key: 'getAllMarkers',
        value: function getAllMarkers() {
          // first get all marker parents. This parent class contains series-index
          // which helps to sort the markers as they are dynamic
          var markersWraps = this.w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-series-markers-wrap'
          );
          markersWraps = _toConsumableArray(markersWraps);
          markersWraps.sort(function (a, b) {
            return Number(b.getAttribute('data:realIndex')) <
              Number(a.getAttribute('data:realIndex'))
              ? 0
              : -1;
          });
          var markers = [];
          markersWraps.forEach(function (m) {
            markers.push(m.querySelector('.apexcharts-marker'));
          });
          return markers;
        },
      },
      {
        key: 'hasMarkers',
        value: function hasMarkers() {
          var markers = this.getElMarkers();
          return markers.length > 0;
        },
      },
      {
        key: 'getElBars',
        value: function getElBars() {
          return this.w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series'
          );
        },
      },
      {
        key: 'hasBars',
        value: function hasBars() {
          var bars = this.getElBars();
          return bars.length > 0;
        },
      },
      {
        key: 'getHoverMarkerSize',
        value: function getHoverMarkerSize(index) {
          var w = this.w;
          var hoverSize = w.config.markers.hover.size;

          if (hoverSize === undefined) {
            hoverSize = w.globals.markers.size[index] + w.config.markers.hover.sizeOffset;
          }

          return hoverSize;
        },
      },
      {
        key: 'toggleAllTooltipSeriesGroups',
        value: function toggleAllTooltipSeriesGroups(state) {
          var w = this.w;
          var ttCtx = this.ttCtx;

          if (ttCtx.allTooltipSeriesGroups.length === 0) {
            ttCtx.allTooltipSeriesGroups = w.globals.dom.baseEl.querySelectorAll(
              '.apexcharts-tooltip-series-group'
            );
          }

          var allTooltipSeriesGroups = ttCtx.allTooltipSeriesGroups;

          for (var i = 0; i < allTooltipSeriesGroups.length; i++) {
            if (state === 'enable') {
              allTooltipSeriesGroups[i].classList.add('apexcharts-active');
              allTooltipSeriesGroups[i].style.display = w.config.tooltip.items.display;
            } else {
              allTooltipSeriesGroups[i].classList.remove('apexcharts-active');
              allTooltipSeriesGroups[i].style.display = 'none';
            }
          }
        },
      },
    ]);

    return Utils;
  })();

  /**
   * ApexCharts Tooltip.Labels Class to draw texts on the tooltip.
   * This file deals with printing actual text on the tooltip.
   *
   * @module Tooltip.Labels
   **/

  var Labels = /*#__PURE__*/ (function () {
    function Labels(tooltipContext) {
      _classCallCheck(this, Labels);

      this.w = tooltipContext.w;
      this.ctx = tooltipContext.ctx;
      this.ttCtx = tooltipContext;
      this.tooltipUtil = new Utils(tooltipContext);
    }

    _createClass(Labels, [
      {
        key: 'drawSeriesTexts',
        value: function drawSeriesTexts(_ref) {
          var _ref$shared = _ref.shared,
            shared = _ref$shared === void 0 ? true : _ref$shared,
            ttItems = _ref.ttItems,
            _ref$i = _ref.i,
            i = _ref$i === void 0 ? 0 : _ref$i,
            _ref$j = _ref.j,
            j = _ref$j === void 0 ? null : _ref$j,
            y1 = _ref.y1,
            y2 = _ref.y2,
            e = _ref.e;
          var w = this.w;

          if (w.config.tooltip.custom !== undefined) {
            this.handleCustomTooltip({
              i: i,
              j: j,
              y1: y1,
              y2: y2,
              w: w,
            });
          } else {
            this.toggleActiveInactiveSeries(shared);
          }

          var values = this.getValuesToPrint({
            i: i,
            j: j,
          });
          this.printLabels({
            i: i,
            j: j,
            values: values,
            ttItems: ttItems,
            shared: shared,
            e: e,
          }); // Re-calculate tooltip dimensions now that we have drawn the text

          var tooltipEl = this.ttCtx.getElTooltip();
          this.ttCtx.tooltipRect.ttWidth = tooltipEl.getBoundingClientRect().width;
          this.ttCtx.tooltipRect.ttHeight = tooltipEl.getBoundingClientRect().height;
        },
      },
      {
        key: 'printLabels',
        value: function printLabels(_ref2) {
          var _this = this;

          var i = _ref2.i,
            j = _ref2.j,
            values = _ref2.values,
            ttItems = _ref2.ttItems,
            shared = _ref2.shared,
            e = _ref2.e;
          var w = this.w;
          var val;
          var goalVals = [];

          var hasGoalValues = function hasGoalValues(gi) {
            return (
              w.globals.seriesGoals[gi] &&
              w.globals.seriesGoals[gi][j] &&
              Array.isArray(w.globals.seriesGoals[gi][j])
            );
          };

          var xVal = values.xVal,
            zVal = values.zVal,
            xAxisTTVal = values.xAxisTTVal;
          var seriesName = '';
          var pColor = w.globals.colors[i]; // The pColor here is for the markers inside tooltip

          if (j !== null && w.config.plotOptions.bar.distributed) {
            pColor = w.globals.colors[j];
          }

          var _loop = function _loop(t, inverset) {
            var f = _this.getFormatters(i);

            seriesName = _this.getSeriesName({
              fn: f.yLbTitleFormatter,
              index: i,
              seriesIndex: i,
              j: j,
            });

            if (w.config.chart.type === 'treemap') {
              seriesName = f.yLbTitleFormatter(String(w.config.series[i].data[j].x), {
                series: w.globals.series,
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              });
            }

            var tIndex = w.config.tooltip.inverseOrder ? inverset : t;

            if (w.globals.axisCharts) {
              var getValBySeriesIndex = function getValBySeriesIndex(index) {
                return f.yLbFormatter(w.globals.series[index][j], {
                  series: w.globals.series,
                  seriesIndex: index,
                  dataPointIndex: j,
                  w: w,
                });
              };

              if (shared) {
                f = _this.getFormatters(tIndex);
                seriesName = _this.getSeriesName({
                  fn: f.yLbTitleFormatter,
                  index: tIndex,
                  seriesIndex: i,
                  j: j,
                });
                pColor = w.globals.colors[tIndex];
                val = getValBySeriesIndex(tIndex);

                if (hasGoalValues(tIndex)) {
                  goalVals = w.globals.seriesGoals[tIndex][j].map(function (goal) {
                    return {
                      attrs: goal,
                      val: f.yLbFormatter(goal.value, {
                        seriesIndex: tIndex,
                        dataPointIndex: j,
                        w: w,
                      }),
                    };
                  });
                }
              } else {
                if (e && e.target && e.target.getAttribute('fill')) {
                  pColor = e.target.getAttribute('fill');
                }

                val = getValBySeriesIndex(i);

                if (hasGoalValues(i) && Array.isArray(w.globals.seriesGoals[i][j])) {
                  goalVals = w.globals.seriesGoals[i][j].map(function (goal) {
                    return {
                      attrs: goal,
                      val: f.yLbFormatter(goal.value, {
                        seriesIndex: i,
                        dataPointIndex: j,
                        w: w,
                      }),
                    };
                  });
                }
              }
            } // for pie / donuts

            if (j === null) {
              val = f.yLbFormatter(
                w.globals.series[i],
                _objectSpread2(
                  _objectSpread2({}, w),
                  {},
                  {
                    seriesIndex: i,
                    dataPointIndex: i,
                  }
                )
              );
            }

            _this.DOMHandling({
              i: i,
              t: tIndex,
              j: j,
              ttItems: ttItems,
              values: {
                val: val,
                goalVals: goalVals,
                xVal: xVal,
                xAxisTTVal: xAxisTTVal,
                zVal: zVal,
              },
              seriesName: seriesName,
              shared: shared,
              pColor: pColor,
            });
          };

          for (
            var t = 0, inverset = w.globals.series.length - 1;
            t < w.globals.series.length;
            t++, inverset--
          ) {
            _loop(t, inverset);
          }
        },
      },
      {
        key: 'getFormatters',
        value: function getFormatters(i) {
          var w = this.w;
          var yLbFormatter = w.globals.yLabelFormatters[i];
          var yLbTitleFormatter;

          if (w.globals.ttVal !== undefined) {
            if (Array.isArray(w.globals.ttVal)) {
              yLbFormatter = w.globals.ttVal[i] && w.globals.ttVal[i].formatter;
              yLbTitleFormatter =
                w.globals.ttVal[i] &&
                w.globals.ttVal[i].title &&
                w.globals.ttVal[i].title.formatter;
            } else {
              yLbFormatter = w.globals.ttVal.formatter;

              if (typeof w.globals.ttVal.title.formatter === 'function') {
                yLbTitleFormatter = w.globals.ttVal.title.formatter;
              }
            }
          } else {
            yLbTitleFormatter = w.config.tooltip.y.title.formatter;
          }

          if (typeof yLbFormatter !== 'function') {
            if (w.globals.yLabelFormatters[0]) {
              yLbFormatter = w.globals.yLabelFormatters[0];
            } else {
              yLbFormatter = function yLbFormatter(label) {
                return label;
              };
            }
          }

          if (typeof yLbTitleFormatter !== 'function') {
            yLbTitleFormatter = function yLbTitleFormatter(label) {
              return label;
            };
          }

          return {
            yLbFormatter: yLbFormatter,
            yLbTitleFormatter: yLbTitleFormatter,
          };
        },
      },
      {
        key: 'getSeriesName',
        value: function getSeriesName(_ref3) {
          var fn = _ref3.fn,
            index = _ref3.index,
            seriesIndex = _ref3.seriesIndex,
            j = _ref3.j;
          var w = this.w;
          return fn(String(w.globals.seriesNames[index]), {
            series: w.globals.series,
            seriesIndex: seriesIndex,
            dataPointIndex: j,
            w: w,
          });
        },
      },
      {
        key: 'DOMHandling',
        value: function DOMHandling(_ref4) {
          _ref4.i;
          var t = _ref4.t,
            j = _ref4.j,
            ttItems = _ref4.ttItems,
            values = _ref4.values,
            seriesName = _ref4.seriesName,
            shared = _ref4.shared,
            pColor = _ref4.pColor;
          var w = this.w;
          var ttCtx = this.ttCtx;
          var val = values.val,
            goalVals = values.goalVals,
            xVal = values.xVal,
            xAxisTTVal = values.xAxisTTVal,
            zVal = values.zVal;
          var ttItemsChildren = null;
          ttItemsChildren = ttItems[t].children;

          if (w.config.tooltip.fillSeriesColor) {
            ttItems[t].style.backgroundColor = pColor;
            ttItemsChildren[0].style.display = 'none';
          }

          if (ttCtx.showTooltipTitle) {
            if (ttCtx.tooltipTitle === null) {
              // get it once if null, and store it in class property
              ttCtx.tooltipTitle = w.globals.dom.baseEl.querySelector('.apexcharts-tooltip-title');
            }

            ttCtx.tooltipTitle.innerHTML = xVal;
          } // if xaxis tooltip is constructed, we need to replace the innerHTML

          if (ttCtx.isXAxisTooltipEnabled) {
            ttCtx.xaxisTooltipText.innerHTML = xAxisTTVal !== '' ? xAxisTTVal : xVal;
          }

          var ttYLabel = ttItems[t].querySelector('.apexcharts-tooltip-text-y-label');

          if (ttYLabel) {
            ttYLabel.innerHTML = seriesName ? seriesName : '';
          }

          var ttYVal = ttItems[t].querySelector('.apexcharts-tooltip-text-y-value');

          if (ttYVal) {
            ttYVal.innerHTML = typeof val !== 'undefined' ? val : '';
          }

          if (
            ttItemsChildren[0] &&
            ttItemsChildren[0].classList.contains('apexcharts-tooltip-marker')
          ) {
            if (
              w.config.tooltip.marker.fillColors &&
              Array.isArray(w.config.tooltip.marker.fillColors)
            ) {
              pColor = w.config.tooltip.marker.fillColors[t];
            }

            ttItemsChildren[0].style.backgroundColor = pColor;
          }

          if (!w.config.tooltip.marker.show) {
            ttItemsChildren[0].style.display = 'none';
          }

          var ttGLabel = ttItems[t].querySelector('.apexcharts-tooltip-text-goals-label');
          var ttGVal = ttItems[t].querySelector('.apexcharts-tooltip-text-goals-value');

          if (goalVals.length && w.globals.seriesGoals[t]) {
            var createGoalsHtml = function createGoalsHtml() {
              var gLabels = '<div >';
              var gVals = '<div>';
              goalVals.forEach(function (goal, gi) {
                gLabels +=
                  ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '
                    .concat(
                      goal.attrs.strokeColor,
                      '; height: 3px; border-radius: 0; top: 5px;"></span> '
                    )
                    .concat(goal.attrs.name, '</div>');
                gVals += '<div>'.concat(goal.val, '</div>');
              });
              ttGLabel.innerHTML = gLabels + '</div>';
              ttGVal.innerHTML = gVals + '</div>';
            };

            if (shared) {
              if (w.globals.seriesGoals[t][j] && Array.isArray(w.globals.seriesGoals[t][j])) {
                createGoalsHtml();
              } else {
                ttGLabel.innerHTML = '';
                ttGVal.innerHTML = '';
              }
            } else {
              createGoalsHtml();
            }
          } else {
            ttGLabel.innerHTML = '';
            ttGVal.innerHTML = '';
          }

          if (zVal !== null) {
            var ttZLabel = ttItems[t].querySelector('.apexcharts-tooltip-text-z-label');
            ttZLabel.innerHTML = w.config.tooltip.z.title;
            var ttZVal = ttItems[t].querySelector('.apexcharts-tooltip-text-z-value');
            ttZVal.innerHTML = typeof zVal !== 'undefined' ? zVal : '';
          }

          if (shared && ttItemsChildren[0]) {
            // hide when no Val or series collapsed
            if (
              typeof val === 'undefined' ||
              val === null ||
              w.globals.collapsedSeriesIndices.indexOf(t) > -1
            ) {
              ttItemsChildren[0].parentNode.style.display = 'none';
            } else {
              ttItemsChildren[0].parentNode.style.display = w.config.tooltip.items.display;
            } // TODO: issue #1240 needs to be looked at again. commenting it because this also hides single series values with 0 in it (shared tooltip)
            // if (w.globals.stackedSeriesTotals[j] === 0) {
            //   // shared tooltip and all values are null, so we need to hide the x value too
            //   let allYZeroForJ = false
            //   for (let si = 1; si < w.globals.seriesYvalues.length; si++) {
            //     if (
            //       w.globals.seriesYvalues[si][j] ===
            //       w.globals.seriesYvalues[si - 1][j]
            //     ) {
            //       allYZeroForJ = true
            //     }
            //   }
            //   if (allYZeroForJ) {
            //     ttCtx.tooltipTitle.style.display = 'none'
            //   } else {
            //     ttCtx.tooltipTitle.style.display = w.config.tooltip.items.display
            //   }
            // } else {
            //   ttCtx.tooltipTitle.style.display = w.config.tooltip.items.display
            // }
          }
        },
      },
      {
        key: 'toggleActiveInactiveSeries',
        value: function toggleActiveInactiveSeries(shared) {
          var w = this.w;

          if (shared) {
            // make all tooltips active
            this.tooltipUtil.toggleAllTooltipSeriesGroups('enable');
          } else {
            // disable all tooltip text groups
            this.tooltipUtil.toggleAllTooltipSeriesGroups('disable'); // enable the first tooltip text group

            var firstTooltipSeriesGroup = w.globals.dom.baseEl.querySelector(
              '.apexcharts-tooltip-series-group'
            );

            if (firstTooltipSeriesGroup) {
              firstTooltipSeriesGroup.classList.add('apexcharts-active');
              firstTooltipSeriesGroup.style.display = w.config.tooltip.items.display;
            }
          }
        },
      },
      {
        key: 'getValuesToPrint',
        value: function getValuesToPrint(_ref5) {
          var i = _ref5.i,
            j = _ref5.j;
          var w = this.w;
          var filteredSeriesX = this.ctx.series.filteredSeriesX();
          var xVal = '';
          var xAxisTTVal = '';
          var zVal = null;
          var val = null;
          var customFormatterOpts = {
            series: w.globals.series,
            seriesIndex: i,
            dataPointIndex: j,
            w: w,
          };
          var zFormatter = w.globals.ttZFormatter;

          if (j === null) {
            val = w.globals.series[i];
          } else {
            if (w.globals.isXNumeric && w.config.chart.type !== 'treemap') {
              xVal = filteredSeriesX[i][j];

              if (filteredSeriesX[i].length === 0) {
                // a series (possibly the first one) might be collapsed, so get the next active index
                var firstActiveSeriesIndex = this.tooltipUtil.getFirstActiveXArray(filteredSeriesX);
                xVal = filteredSeriesX[firstActiveSeriesIndex][j];
              }
            } else {
              xVal = typeof w.globals.labels[j] !== 'undefined' ? w.globals.labels[j] : '';
            }
          }

          var bufferXVal = xVal;

          if (w.globals.isXNumeric && w.config.xaxis.type === 'datetime') {
            var xFormat = new Formatters(this.ctx);
            xVal = xFormat.xLabelFormat(w.globals.ttKeyFormatter, bufferXVal, bufferXVal, {
              i: undefined,
              dateFormatter: new DateTime(this.ctx).formatDate,
              w: this.w,
            });
          } else {
            if (w.globals.isBarHorizontal) {
              xVal = w.globals.yLabelFormatters[0](bufferXVal, customFormatterOpts);
            } else {
              xVal = w.globals.xLabelFormatter(bufferXVal, customFormatterOpts);
            }
          } // override default x-axis formatter with tooltip formatter

          if (w.config.tooltip.x.formatter !== undefined) {
            xVal = w.globals.ttKeyFormatter(bufferXVal, customFormatterOpts);
          }

          if (w.globals.seriesZ.length > 0 && w.globals.seriesZ[i].length > 0) {
            zVal = zFormatter(w.globals.seriesZ[i][j], w);
          }

          if (typeof w.config.xaxis.tooltip.formatter === 'function') {
            xAxisTTVal = w.globals.xaxisTooltipFormatter(bufferXVal, customFormatterOpts);
          } else {
            xAxisTTVal = xVal;
          }

          return {
            val: Array.isArray(val) ? val.join(' ') : val,
            xVal: Array.isArray(xVal) ? xVal.join(' ') : xVal,
            xAxisTTVal: Array.isArray(xAxisTTVal) ? xAxisTTVal.join(' ') : xAxisTTVal,
            zVal: zVal,
          };
        },
      },
      {
        key: 'handleCustomTooltip',
        value: function handleCustomTooltip(_ref6) {
          var i = _ref6.i,
            j = _ref6.j,
            y1 = _ref6.y1,
            y2 = _ref6.y2,
            w = _ref6.w;
          var tooltipEl = this.ttCtx.getElTooltip();
          var fn = w.config.tooltip.custom;

          if (Array.isArray(fn) && fn[i]) {
            fn = fn[i];
          } // override everything with a custom html tooltip and replace it

          tooltipEl.innerHTML = fn({
            ctx: this.ctx,
            series: w.globals.series,
            seriesIndex: i,
            dataPointIndex: j,
            y1: y1,
            y2: y2,
            w: w,
          });
        },
      },
    ]);

    return Labels;
  })();

  /**
   * ApexCharts Tooltip.Position Class to move the tooltip based on x and y position.
   *
   * @module Tooltip.Position
   **/

  var Position = /*#__PURE__*/ (function () {
    function Position(tooltipContext) {
      _classCallCheck(this, Position);

      this.ttCtx = tooltipContext;
      this.ctx = tooltipContext.ctx;
      this.w = tooltipContext.w;
    }
    /**
     * This will move the crosshair (the vertical/horz line that moves along with mouse)
     * Along with this, this function also calls the xaxisMove function
     * @memberof Position
     * @param {int} - cx = point's x position, wherever point's x is, you need to move crosshair
     */

    _createClass(Position, [
      {
        key: 'moveXCrosshairs',
        value: function moveXCrosshairs(cx) {
          var j = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var ttCtx = this.ttCtx;
          var w = this.w;
          var xcrosshairs = ttCtx.getElXCrosshairs();
          var x = cx - ttCtx.xcrosshairsWidth / 2;
          var tickAmount = w.globals.labels.slice().length;

          if (j !== null) {
            x = (w.globals.gridWidth / tickAmount) * j;
          }

          if (xcrosshairs !== null && !w.globals.isBarHorizontal) {
            xcrosshairs.setAttribute('x', x);
            xcrosshairs.setAttribute('x1', x);
            xcrosshairs.setAttribute('x2', x);
            xcrosshairs.setAttribute('y2', w.globals.gridHeight);
            xcrosshairs.classList.add('apexcharts-active');
          }

          if (x < 0) {
            x = 0;
          }

          if (x > w.globals.gridWidth) {
            x = w.globals.gridWidth;
          }

          if (ttCtx.isXAxisTooltipEnabled) {
            var tx = x;

            if (
              w.config.xaxis.crosshairs.width === 'tickWidth' ||
              w.config.xaxis.crosshairs.width === 'barWidth'
            ) {
              tx = x + ttCtx.xcrosshairsWidth / 2;
            }

            this.moveXAxisTooltip(tx);
          }
        },
        /**
         * This will move the crosshair (the vertical/horz line that moves along with mouse)
         * Along with this, this function also calls the xaxisMove function
         * @memberof Position
         * @param {int} - cx = point's x position, wherever point's x is, you need to move crosshair
         */
      },
      {
        key: 'moveYCrosshairs',
        value: function moveYCrosshairs(cy) {
          var ttCtx = this.ttCtx;

          if (ttCtx.ycrosshairs !== null) {
            Graphics.setAttrs(ttCtx.ycrosshairs, {
              y1: cy,
              y2: cy,
            });
          }

          if (ttCtx.ycrosshairsHidden !== null) {
            Graphics.setAttrs(ttCtx.ycrosshairsHidden, {
              y1: cy,
              y2: cy,
            });
          }
        },
        /**
         ** AxisTooltip is the small rectangle which appears on x axis with x value, when user moves
         * @memberof Position
         * @param {int} - cx = point's x position, wherever point's x is, you need to move
         */
      },
      {
        key: 'moveXAxisTooltip',
        value: function moveXAxisTooltip(cx) {
          var w = this.w;
          var ttCtx = this.ttCtx;

          if (ttCtx.xaxisTooltip !== null && ttCtx.xcrosshairsWidth !== 0) {
            ttCtx.xaxisTooltip.classList.add('apexcharts-active');
            var cy =
              ttCtx.xaxisOffY +
              w.config.xaxis.tooltip.offsetY +
              w.globals.translateY +
              1 +
              w.config.xaxis.offsetY;
            var xaxisTTText = ttCtx.xaxisTooltip.getBoundingClientRect();
            var xaxisTTTextWidth = xaxisTTText.width;
            cx = cx - xaxisTTTextWidth / 2;

            if (!isNaN(cx)) {
              cx = cx + w.globals.translateX;
              var textRect = 0;
              var graphics = new Graphics(this.ctx);
              textRect = graphics.getTextRects(ttCtx.xaxisTooltipText.innerHTML);
              ttCtx.xaxisTooltipText.style.minWidth = textRect.width + 'px';
              ttCtx.xaxisTooltip.style.left = cx + 'px';
              ttCtx.xaxisTooltip.style.top = cy + 'px';
            }
          }
        },
      },
      {
        key: 'moveYAxisTooltip',
        value: function moveYAxisTooltip(index) {
          var w = this.w;
          var ttCtx = this.ttCtx;

          if (ttCtx.yaxisTTEls === null) {
            ttCtx.yaxisTTEls = w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxistooltip');
          }

          var ycrosshairsHiddenRectY1 = parseInt(ttCtx.ycrosshairsHidden.getAttribute('y1'), 10);
          var cy = w.globals.translateY + ycrosshairsHiddenRectY1;
          var yAxisTTRect = ttCtx.yaxisTTEls[index].getBoundingClientRect();
          var yAxisTTHeight = yAxisTTRect.height;
          var cx = w.globals.translateYAxisX[index] - 2;

          if (w.config.yaxis[index].opposite) {
            cx = cx - 26;
          }

          cy = cy - yAxisTTHeight / 2;

          if (w.globals.ignoreYAxisIndexes.indexOf(index) === -1) {
            ttCtx.yaxisTTEls[index].classList.add('apexcharts-active');
            ttCtx.yaxisTTEls[index].style.top = cy + 'px';
            ttCtx.yaxisTTEls[index].style.left = cx + w.config.yaxis[index].tooltip.offsetX + 'px';
          } else {
            ttCtx.yaxisTTEls[index].classList.remove('apexcharts-active');
          }
        },
        /**
         ** moves the whole tooltip by changing x, y attrs
         * @memberof Position
         * @param {int} - cx = point's x position, wherever point's x is, you need to move tooltip
         * @param {int} - cy = point's y position, wherever point's y is, you need to move tooltip
         * @param {int} - r = point's radius
         */
      },
      {
        key: 'moveTooltip',
        value: function moveTooltip(cx, cy) {
          var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          var w = this.w;
          var ttCtx = this.ttCtx;
          var tooltipEl = ttCtx.getElTooltip();
          var tooltipRect = ttCtx.tooltipRect;
          var pointR = r !== null ? parseFloat(r) : 1;
          var x = parseFloat(cx) + pointR + 5;
          var y = parseFloat(cy) + pointR / 2; // - tooltipRect.ttHeight / 2

          if (x > w.globals.gridWidth / 2) {
            x = x - tooltipRect.ttWidth - pointR - 15;
          }

          if (x > w.globals.gridWidth - tooltipRect.ttWidth - 10) {
            x = w.globals.gridWidth - tooltipRect.ttWidth;
          }

          if (x < -20) {
            x = -20;
          }

          if (w.config.tooltip.followCursor) {
            var elGrid = ttCtx.getElGrid();
            var seriesBound = elGrid.getBoundingClientRect();
            y = ttCtx.e.clientY + w.globals.translateY - seriesBound.top - tooltipRect.ttHeight / 2;
          } else {
            if (w.globals.isBarHorizontal) {
              // non follow shared tooltip in a horizontal bar chart
              y = y - tooltipRect.ttHeight;
            } else {
              if (tooltipRect.ttHeight / 2 + y > w.globals.gridHeight) {
                y = w.globals.gridHeight - tooltipRect.ttHeight + w.globals.translateY;
              }

              if (y < 0) {
                y = 0;
              }
            }
          }

          if (!isNaN(x)) {
            x = x + w.globals.translateX;
            tooltipEl.style.left = x + 'px';
            tooltipEl.style.top = y + 'px';
          }
        },
      },
      {
        key: 'moveMarkers',
        value: function moveMarkers(i, j) {
          var w = this.w;
          var ttCtx = this.ttCtx;

          if (w.globals.markers.size[i] > 0) {
            var allPoints = w.globals.dom.baseEl.querySelectorAll(
              " .apexcharts-series[data\\:realIndex='".concat(i, "'] .apexcharts-marker")
            );

            for (var p = 0; p < allPoints.length; p++) {
              if (parseInt(allPoints[p].getAttribute('rel'), 10) === j) {
                ttCtx.marker.resetPointsSize();
                ttCtx.marker.enlargeCurrentPoint(j, allPoints[p]);
              }
            }
          } else {
            ttCtx.marker.resetPointsSize();
            this.moveDynamicPointOnHover(j, i);
          }
        }, // This function is used when you need to show markers/points only on hover -
        // DIFFERENT X VALUES in multiple series
      },
      {
        key: 'moveDynamicPointOnHover',
        value: function moveDynamicPointOnHover(j, capturedSeries) {
          var w = this.w;
          var ttCtx = this.ttCtx;
          var cx = 0;
          var cy = 0;
          var pointsArr = w.globals.pointsArray;
          var hoverSize = ttCtx.tooltipUtil.getHoverMarkerSize(capturedSeries);
          var serType = w.config.series[capturedSeries].type;

          if (
            serType &&
            (serType === 'column' || serType === 'candlestick' || serType === 'boxPlot')
          ) {
            // fix error mentioned in #811
            return;
          }

          cx = pointsArr[capturedSeries][j][0];
          cy = pointsArr[capturedSeries][j][1] ? pointsArr[capturedSeries][j][1] : 0;
          var point = w.globals.dom.baseEl.querySelector(
            ".apexcharts-series[data\\:realIndex='".concat(
              capturedSeries,
              "'] .apexcharts-series-markers circle"
            )
          );

          if (point && cy < w.globals.gridHeight && cy > 0) {
            point.setAttribute('r', hoverSize);
            point.setAttribute('cx', cx);
            point.setAttribute('cy', cy);
          } // point.style.opacity = w.config.markers.hover.opacity

          this.moveXCrosshairs(cx);

          if (!ttCtx.fixedTooltip) {
            this.moveTooltip(cx, cy, hoverSize);
          }
        }, // This function is used when you need to show markers/points only on hover -
        // SAME X VALUES in multiple series
      },
      {
        key: 'moveDynamicPointsOnHover',
        value: function moveDynamicPointsOnHover(j) {
          var ttCtx = this.ttCtx;
          var w = ttCtx.w;
          var cx = 0;
          var cy = 0;
          var activeSeries = 0;
          var pointsArr = w.globals.pointsArray;
          var series = new Series(this.ctx);
          activeSeries = series.getActiveConfigSeriesIndex(true);
          var hoverSize = ttCtx.tooltipUtil.getHoverMarkerSize(activeSeries);

          if (pointsArr[activeSeries]) {
            cx = pointsArr[activeSeries][j][0];
            cy = pointsArr[activeSeries][j][1];
          }

          var points = ttCtx.tooltipUtil.getAllMarkers();

          if (points !== null) {
            for (var p = 0; p < w.globals.series.length; p++) {
              var pointArr = pointsArr[p];

              if (w.globals.comboCharts) {
                // in a combo chart, if column charts are present, markers will not match with the number of series, hence this patch to push a null value in points array
                if (typeof pointArr === 'undefined') {
                  // nodelist to array
                  points.splice(p, 0, null);
                }
              }

              if (pointArr && pointArr.length) {
                var pcy = pointsArr[p][j][1];
                points[p].setAttribute('cx', cx);

                if (pcy !== null && !isNaN(pcy) && pcy < w.globals.gridHeight && pcy > 0) {
                  points[p] && points[p].setAttribute('r', hoverSize);
                  points[p] && points[p].setAttribute('cy', pcy);
                } else {
                  points[p] && points[p].setAttribute('r', 0);
                }
              }
            }
          }

          this.moveXCrosshairs(cx);

          if (!ttCtx.fixedTooltip) {
            var tcy = cy || w.globals.gridHeight;
            this.moveTooltip(cx, tcy, hoverSize);
          }
        },
      },
      {
        key: 'moveStickyTooltipOverBars',
        value: function moveStickyTooltipOverBars(j) {
          var w = this.w;
          var ttCtx = this.ttCtx;
          var barLen = w.globals.columnSeries
            ? w.globals.columnSeries.length
            : w.globals.series.length;
          var i =
            barLen >= 2 && barLen % 2 === 0 ? Math.floor(barLen / 2) : Math.floor(barLen / 2) + 1;

          if (w.globals.isBarHorizontal) {
            var series = new Series(this.ctx);
            i = series.getActiveConfigSeriesIndex(false, 'desc') + 1;
          }

          var jBar = w.globals.dom.baseEl.querySelector(
            ".apexcharts-bar-series .apexcharts-series[rel='"
              .concat(i, "'] path[j='")
              .concat(j, "'], .apexcharts-candlestick-series .apexcharts-series[rel='")
              .concat(i, "'] path[j='")
              .concat(j, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='")
              .concat(i, "'] path[j='")
              .concat(j, "'], .apexcharts-rangebar-series .apexcharts-series[rel='")
              .concat(i, "'] path[j='")
              .concat(j, "']")
          );
          var bcx = jBar ? parseFloat(jBar.getAttribute('cx')) : 0;
          var bcy = jBar ? parseFloat(jBar.getAttribute('cy')) : 0;
          var bw = jBar ? parseFloat(jBar.getAttribute('barWidth')) : 0;
          var bh = jBar ? parseFloat(jBar.getAttribute('barHeight')) : 0;
          var elGrid = ttCtx.getElGrid();
          var seriesBound = elGrid.getBoundingClientRect();
          var isBoxOrCandle =
            jBar.classList.contains('apexcharts-candlestick-area') ||
            jBar.classList.contains('apexcharts-boxPlot-area');

          if (w.globals.isXNumeric) {
            if (jBar && !isBoxOrCandle) {
              bcx = bcx - (barLen % 2 !== 0 ? bw / 2 : 0);
            }

            if (
              jBar && // fixes apexcharts.js#2354
              isBoxOrCandle &&
              w.globals.comboCharts
            ) {
              bcx = bcx - bw / 2;
            }
          } else {
            if (!w.globals.isBarHorizontal) {
              bcx = ttCtx.xAxisTicksPositions[j - 1] + ttCtx.dataPointsDividedWidth / 2;

              if (isNaN(bcx)) {
                bcx = ttCtx.xAxisTicksPositions[j] - ttCtx.dataPointsDividedWidth / 2;
              }
            }
          }

          if (!w.globals.isBarHorizontal) {
            bcy = ttCtx.e.clientY - seriesBound.top - ttCtx.tooltipRect.ttHeight / 2;
          } else {
            bcy = bcy + bh / 3;
          }

          if (!w.globals.isBarHorizontal) {
            this.moveXCrosshairs(bcx);
          }

          if (!ttCtx.fixedTooltip) {
            var tcy = bcy || w.globals.gridHeight;
            this.moveTooltip(bcx, tcy);
          }
        },
      },
    ]);

    return Position;
  })();

  /**
   * ApexCharts Tooltip.Marker Class to draw texts on the tooltip.
   * This file deals with the markers that appear near tooltip in line/area charts.
   * These markers helps the user to associate the data-points and the values
   * that are shown in the tooltip
   *
   * @module Tooltip.Marker
   **/

  var Marker = /*#__PURE__*/ (function () {
    function Marker(tooltipContext) {
      _classCallCheck(this, Marker);

      this.w = tooltipContext.w;
      this.ttCtx = tooltipContext;
      this.ctx = tooltipContext.ctx;
      this.tooltipPosition = new Position(tooltipContext);
    }

    _createClass(Marker, [
      {
        key: 'drawDynamicPoints',
        value: function drawDynamicPoints() {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var marker = new Markers(this.ctx);
          var elsSeries = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series');
          elsSeries = _toConsumableArray(elsSeries);

          if (w.config.chart.stacked) {
            elsSeries.sort(function (a, b) {
              return (
                parseFloat(a.getAttribute('data:realIndex')) -
                parseFloat(b.getAttribute('data:realIndex'))
              );
            });
          }

          for (var i = 0; i < elsSeries.length; i++) {
            var pointsMain = elsSeries[i].querySelector('.apexcharts-series-markers-wrap');

            if (pointsMain !== null) {
              // it can be null as we have tooltips in donut/bar charts
              var point = void 0;
              var PointClasses = 'apexcharts-marker w'.concat(
                (Math.random() + 1).toString(36).substring(4)
              );

              if (
                (w.config.chart.type === 'line' || w.config.chart.type === 'area') &&
                !w.globals.comboCharts &&
                !w.config.tooltip.intersect
              ) {
                PointClasses += ' no-pointer-events';
              }

              var elPointOptions = marker.getMarkerConfig({
                cssClass: PointClasses,
                seriesIndex: Number(pointsMain.getAttribute('data:realIndex')), // fixes apexcharts/apexcharts.js #1427
              });
              point = graphics.drawMarker(0, 0, elPointOptions);
              point.node.setAttribute('default-marker-size', 0);
              var elPointsG = document.createElementNS(w.globals.SVGNS, 'g');
              elPointsG.classList.add('apexcharts-series-markers');
              elPointsG.appendChild(point.node);
              pointsMain.appendChild(elPointsG);
            }
          }
        },
      },
      {
        key: 'enlargeCurrentPoint',
        value: function enlargeCurrentPoint(rel, point) {
          var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
          var w = this.w;

          if (w.config.chart.type !== 'bubble') {
            this.newPointSize(rel, point);
          }

          var cx = point.getAttribute('cx');
          var cy = point.getAttribute('cy');

          if (x !== null && y !== null) {
            cx = x;
            cy = y;
          }

          this.tooltipPosition.moveXCrosshairs(cx);

          if (!this.fixedTooltip) {
            if (w.config.chart.type === 'radar') {
              var elGrid = this.ttCtx.getElGrid();
              var seriesBound = elGrid.getBoundingClientRect();
              cx = this.ttCtx.e.clientX - seriesBound.left;
            }

            this.tooltipPosition.moveTooltip(cx, cy, w.config.markers.hover.size);
          }
        },
      },
      {
        key: 'enlargePoints',
        value: function enlargePoints(j) {
          var w = this.w;
          var me = this;
          var ttCtx = this.ttCtx;
          var col = j;
          var points = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker'
          );
          var newSize = w.config.markers.hover.size;

          for (var p = 0; p < points.length; p++) {
            var rel = points[p].getAttribute('rel');
            var index = points[p].getAttribute('index');

            if (newSize === undefined) {
              newSize = w.globals.markers.size[index] + w.config.markers.hover.sizeOffset;
            }

            if (col === parseInt(rel, 10)) {
              me.newPointSize(col, points[p]);
              var cx = points[p].getAttribute('cx');
              var cy = points[p].getAttribute('cy');
              me.tooltipPosition.moveXCrosshairs(cx);

              if (!ttCtx.fixedTooltip) {
                me.tooltipPosition.moveTooltip(cx, cy, newSize);
              }
            } else {
              me.oldPointSize(points[p]);
            }
          }
        },
      },
      {
        key: 'newPointSize',
        value: function newPointSize(rel, point) {
          var w = this.w;
          var newSize = w.config.markers.hover.size;
          var elPoint = rel === 0 ? point.parentNode.firstChild : point.parentNode.lastChild;

          if (elPoint.getAttribute('default-marker-size') !== '0') {
            var index = parseInt(elPoint.getAttribute('index'), 10);

            if (newSize === undefined) {
              newSize = w.globals.markers.size[index] + w.config.markers.hover.sizeOffset;
            }

            if (newSize < 0) newSize = 0;
            elPoint.setAttribute('r', newSize);
          }
        },
      },
      {
        key: 'oldPointSize',
        value: function oldPointSize(point) {
          var size = parseFloat(point.getAttribute('default-marker-size'));
          point.setAttribute('r', size);
        },
      },
      {
        key: 'resetPointsSize',
        value: function resetPointsSize() {
          var w = this.w;
          var points = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker'
          );

          for (var p = 0; p < points.length; p++) {
            var size = parseFloat(points[p].getAttribute('default-marker-size'));

            if (Utils$1.isNumber(size) && size >= 0) {
              points[p].setAttribute('r', size);
            } else {
              points[p].setAttribute('r', 0);
            }
          }
        },
      },
    ]);

    return Marker;
  })();

  /**
   * ApexCharts Tooltip.Intersect Class.
   * This file deals with functions related to intersecting tooltips
   * (tooltips that appear when user hovers directly over a data-point whether)
   *
   * @module Tooltip.Intersect
   **/

  var Intersect = /*#__PURE__*/ (function () {
    function Intersect(tooltipContext) {
      _classCallCheck(this, Intersect);

      this.w = tooltipContext.w;
      this.ttCtx = tooltipContext;
    } // a helper function to get an element's attribute value

    _createClass(Intersect, [
      {
        key: 'getAttr',
        value: function getAttr(e, attr) {
          return parseFloat(e.target.getAttribute(attr));
        }, // handle tooltip for heatmaps and treemaps
      },
      {
        key: 'handleHeatTreeTooltip',
        value: function handleHeatTreeTooltip(_ref) {
          var e = _ref.e,
            opt = _ref.opt,
            x = _ref.x,
            y = _ref.y,
            type = _ref.type;
          var ttCtx = this.ttCtx;
          var w = this.w;

          if (e.target.classList.contains('apexcharts-'.concat(type, '-rect'))) {
            var i = this.getAttr(e, 'i');
            var j = this.getAttr(e, 'j');
            var cx = this.getAttr(e, 'cx');
            var cy = this.getAttr(e, 'cy');
            var width = this.getAttr(e, 'width');
            var height = this.getAttr(e, 'height');
            ttCtx.tooltipLabels.drawSeriesTexts({
              ttItems: opt.ttItems,
              i: i,
              j: j,
              shared: false,
              e: e,
            });
            w.globals.capturedSeriesIndex = i;
            w.globals.capturedDataPointIndex = j;
            x = cx + ttCtx.tooltipRect.ttWidth / 2 + width;
            y = cy + ttCtx.tooltipRect.ttHeight / 2 - height / 2;
            ttCtx.tooltipPosition.moveXCrosshairs(cx + width / 2);

            if (x > w.globals.gridWidth / 2) {
              x = cx - ttCtx.tooltipRect.ttWidth / 2 + width;
            }

            if (ttCtx.w.config.tooltip.followCursor) {
              var seriesBound = w.globals.dom.elWrap.getBoundingClientRect();
              x = w.globals.clientX - seriesBound.left - ttCtx.tooltipRect.ttWidth / 2;
              y = w.globals.clientY - seriesBound.top - ttCtx.tooltipRect.ttHeight - 5;
            }
          }

          return {
            x: x,
            y: y,
          };
        },
        /**
         * handle tooltips for line/area/scatter charts where tooltip.intersect is true
         * when user hovers over the marker directly, this function is executed
         */
      },
      {
        key: 'handleMarkerTooltip',
        value: function handleMarkerTooltip(_ref2) {
          var e = _ref2.e,
            opt = _ref2.opt,
            x = _ref2.x,
            y = _ref2.y;
          var w = this.w;
          var ttCtx = this.ttCtx;
          var i;
          var j;

          if (e.target.classList.contains('apexcharts-marker')) {
            var cx = parseInt(opt.paths.getAttribute('cx'), 10);
            var cy = parseInt(opt.paths.getAttribute('cy'), 10);
            var val = parseFloat(opt.paths.getAttribute('val'));
            j = parseInt(opt.paths.getAttribute('rel'), 10);
            i = parseInt(opt.paths.parentNode.parentNode.parentNode.getAttribute('rel'), 10) - 1;

            if (ttCtx.intersect) {
              var el = Utils$1.findAncestor(opt.paths, 'apexcharts-series');

              if (el) {
                i = parseInt(el.getAttribute('data:realIndex'), 10);
              }
            }

            ttCtx.tooltipLabels.drawSeriesTexts({
              ttItems: opt.ttItems,
              i: i,
              j: j,
              shared: ttCtx.showOnIntersect ? false : w.config.tooltip.shared,
              e: e,
            });

            if (e.type === 'mouseup') {
              ttCtx.markerClick(e, i, j);
            }

            w.globals.capturedSeriesIndex = i;
            w.globals.capturedDataPointIndex = j;
            x = cx;
            y = cy + w.globals.translateY - ttCtx.tooltipRect.ttHeight * 1.4;

            if (ttCtx.w.config.tooltip.followCursor) {
              var elGrid = ttCtx.getElGrid();
              var seriesBound = elGrid.getBoundingClientRect();
              y = ttCtx.e.clientY + w.globals.translateY - seriesBound.top;
            }

            if (val < 0) {
              y = cy;
            }

            ttCtx.marker.enlargeCurrentPoint(j, opt.paths, x, y);
          }

          return {
            x: x,
            y: y,
          };
        },
        /**
         * handle tooltips for bar/column charts
         */
      },
      {
        key: 'handleBarTooltip',
        value: function handleBarTooltip(_ref3) {
          var e = _ref3.e,
            opt = _ref3.opt;
          var w = this.w;
          var ttCtx = this.ttCtx;
          var tooltipEl = ttCtx.getElTooltip();
          var bx = 0;
          var x = 0;
          var y = 0;
          var i = 0;
          var strokeWidth;
          var barXY = this.getBarTooltipXY({
            e: e,
            opt: opt,
          });
          i = barXY.i;
          var barHeight = barXY.barHeight;
          var j = barXY.j;
          w.globals.capturedSeriesIndex = i;
          w.globals.capturedDataPointIndex = j;

          if (
            (w.globals.isBarHorizontal && ttCtx.tooltipUtil.hasBars()) ||
            !w.config.tooltip.shared
          ) {
            x = barXY.x;
            y = barXY.y;
            strokeWidth = Array.isArray(w.config.stroke.width)
              ? w.config.stroke.width[i]
              : w.config.stroke.width;
            bx = x;
          } else {
            if (!w.globals.comboCharts && !w.config.tooltip.shared) {
              // todo: re-check this condition as it's always 0
              bx = bx / 2;
            }
          } // y is NaN, make it touch the bottom of grid area

          if (isNaN(y)) {
            y = w.globals.svgHeight - ttCtx.tooltipRect.ttHeight;
          } else if (y < 0) {
            y = 0;
          }

          var seriesIndex = parseInt(opt.paths.parentNode.getAttribute('data:realIndex'), 10);
          var isReversed = w.globals.isMultipleYAxis
            ? w.config.yaxis[seriesIndex] && w.config.yaxis[seriesIndex].reversed
            : w.config.yaxis[0].reversed;

          if (x + ttCtx.tooltipRect.ttWidth > w.globals.gridWidth && !isReversed) {
            x = x - ttCtx.tooltipRect.ttWidth;
          } else if (x < 0) {
            x = 0;
          }

          if (ttCtx.w.config.tooltip.followCursor) {
            var elGrid = ttCtx.getElGrid();
            var seriesBound = elGrid.getBoundingClientRect();
            y = ttCtx.e.clientY - seriesBound.top;
          } // if tooltip is still null, querySelector

          if (ttCtx.tooltip === null) {
            ttCtx.tooltip = w.globals.dom.baseEl.querySelector('.apexcharts-tooltip');
          }

          if (!w.config.tooltip.shared) {
            if (w.globals.comboBarCount > 0) {
              ttCtx.tooltipPosition.moveXCrosshairs(bx + strokeWidth / 2);
            } else {
              ttCtx.tooltipPosition.moveXCrosshairs(bx);
            }
          } // move tooltip here

          if (
            !ttCtx.fixedTooltip &&
            (!w.config.tooltip.shared || (w.globals.isBarHorizontal && ttCtx.tooltipUtil.hasBars()))
          ) {
            if (isReversed) {
              x = x - ttCtx.tooltipRect.ttWidth;

              if (x < 0) {
                x = 0;
              }
            }

            tooltipEl.style.left = x + w.globals.translateX + 'px';

            if (isReversed && !(w.globals.isBarHorizontal && ttCtx.tooltipUtil.hasBars())) {
              y = y + barHeight - (w.globals.series[i][j] < 0 ? barHeight : 0) * 2;
            }

            if (ttCtx.tooltipRect.ttHeight + y > w.globals.gridHeight) {
              y = w.globals.gridHeight - ttCtx.tooltipRect.ttHeight + w.globals.translateY;
              tooltipEl.style.top = y + 'px';
            } else {
              tooltipEl.style.top =
                y + w.globals.translateY - ttCtx.tooltipRect.ttHeight / 2 + 'px';
            }
          }
        },
      },
      {
        key: 'getBarTooltipXY',
        value: function getBarTooltipXY(_ref4) {
          var e = _ref4.e,
            opt = _ref4.opt;
          var w = this.w;
          var j = null;
          var ttCtx = this.ttCtx;
          var i = 0;
          var x = 0;
          var y = 0;
          var barWidth = 0;
          var barHeight = 0;
          var cl = e.target.classList;

          if (
            cl.contains('apexcharts-bar-area') ||
            cl.contains('apexcharts-candlestick-area') ||
            cl.contains('apexcharts-boxPlot-area') ||
            cl.contains('apexcharts-rangebar-area')
          ) {
            var bar = e.target;
            var barRect = bar.getBoundingClientRect();
            var seriesBound = opt.elGrid.getBoundingClientRect();
            var bh = barRect.height;
            barHeight = barRect.height;
            var bw = barRect.width;
            var cx = parseInt(bar.getAttribute('cx'), 10);
            var cy = parseInt(bar.getAttribute('cy'), 10);
            barWidth = parseFloat(bar.getAttribute('barWidth'));
            var clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;
            j = parseInt(bar.getAttribute('j'), 10);
            i = parseInt(bar.parentNode.getAttribute('rel'), 10) - 1;
            var y1 = bar.getAttribute('data-range-y1');
            var y2 = bar.getAttribute('data-range-y2');

            if (w.globals.comboCharts) {
              i = parseInt(bar.parentNode.getAttribute('data:realIndex'), 10);
            } // if (w.config.tooltip.shared) {
            // this check not needed  at the moment
            //   const yDivisor = w.globals.gridHeight / (w.globals.series.length)
            //   const hoverY = ttCtx.clientY - ttCtx.seriesBound.top
            //   j = Math.ceil(hoverY / yDivisor)
            // }

            ttCtx.tooltipLabels.drawSeriesTexts({
              ttItems: opt.ttItems,
              i: i,
              j: j,
              y1: y1 ? parseInt(y1, 10) : null,
              y2: y2 ? parseInt(y2, 10) : null,
              shared: ttCtx.showOnIntersect ? false : w.config.tooltip.shared,
              e: e,
            });

            if (w.config.tooltip.followCursor) {
              if (w.globals.isBarHorizontal) {
                x = clientX - seriesBound.left + 15;
                y = cy - ttCtx.dataPointsDividedHeight + bh / 2 - ttCtx.tooltipRect.ttHeight / 2;
              } else {
                if (w.globals.isXNumeric) {
                  x = cx - bw / 2;
                } else {
                  x = cx - ttCtx.dataPointsDividedWidth + bw / 2;
                }

                y = e.clientY - seriesBound.top - ttCtx.tooltipRect.ttHeight / 2 - 15;
              }
            } else {
              if (w.globals.isBarHorizontal) {
                x = cx;

                if (x < ttCtx.xyRatios.baseLineInvertedY) {
                  x = cx - ttCtx.tooltipRect.ttWidth;
                }

                y = cy - ttCtx.dataPointsDividedHeight + bh / 2 - ttCtx.tooltipRect.ttHeight / 2;
              } else {
                // if columns
                if (w.globals.isXNumeric) {
                  x = cx - bw / 2;
                } else {
                  x = cx - ttCtx.dataPointsDividedWidth + bw / 2;
                }

                y = cy; // - ttCtx.tooltipRect.ttHeight / 2 + 10
              }
            }
          }

          return {
            x: x,
            y: y,
            barHeight: barHeight,
            barWidth: barWidth,
            i: i,
            j: j,
          };
        },
      },
    ]);

    return Intersect;
  })();

  /**
   * ApexCharts Tooltip.AxesTooltip Class.
   * This file deals with the x-axis and y-axis tooltips.
   *
   * @module Tooltip.AxesTooltip
   **/
  var AxesTooltip = /*#__PURE__*/ (function () {
    function AxesTooltip(tooltipContext) {
      _classCallCheck(this, AxesTooltip);

      this.w = tooltipContext.w;
      this.ttCtx = tooltipContext;
    }
    /**
     * This method adds the secondary tooltip which appears below x axis
     * @memberof Tooltip
     **/

    _createClass(AxesTooltip, [
      {
        key: 'drawXaxisTooltip',
        value: function drawXaxisTooltip() {
          var w = this.w;
          var ttCtx = this.ttCtx;
          var isBottom = w.config.xaxis.position === 'bottom';
          ttCtx.xaxisOffY = isBottom
            ? w.globals.gridHeight + 1
            : -w.globals.xAxisHeight - w.config.xaxis.axisTicks.height + 3;
          var tooltipCssClass = isBottom
            ? 'apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom'
            : 'apexcharts-xaxistooltip apexcharts-xaxistooltip-top';
          var renderTo = w.globals.dom.elWrap;

          if (ttCtx.isXAxisTooltipEnabled) {
            var xaxisTooltip = w.globals.dom.baseEl.querySelector('.apexcharts-xaxistooltip');

            if (xaxisTooltip === null) {
              ttCtx.xaxisTooltip = document.createElement('div');
              ttCtx.xaxisTooltip.setAttribute(
                'class',
                tooltipCssClass + ' apexcharts-theme-' + w.config.tooltip.theme
              );
              renderTo.appendChild(ttCtx.xaxisTooltip);
              ttCtx.xaxisTooltipText = document.createElement('div');
              ttCtx.xaxisTooltipText.classList.add('apexcharts-xaxistooltip-text');
              ttCtx.xaxisTooltipText.style.fontFamily =
                w.config.xaxis.tooltip.style.fontFamily || w.config.chart.fontFamily;
              ttCtx.xaxisTooltipText.style.fontSize = w.config.xaxis.tooltip.style.fontSize;
              ttCtx.xaxisTooltip.appendChild(ttCtx.xaxisTooltipText);
            }
          }
        },
        /**
         * This method adds the secondary tooltip which appears below x axis
         * @memberof Tooltip
         **/
      },
      {
        key: 'drawYaxisTooltip',
        value: function drawYaxisTooltip() {
          var w = this.w;
          var ttCtx = this.ttCtx;

          var _loop = function _loop(i) {
            var isRight = w.config.yaxis[i].opposite || w.config.yaxis[i].crosshairs.opposite;
            ttCtx.yaxisOffX = isRight ? w.globals.gridWidth + 1 : 1;
            var tooltipCssClass = isRight
              ? 'apexcharts-yaxistooltip apexcharts-yaxistooltip-'.concat(
                  i,
                  ' apexcharts-yaxistooltip-right'
                )
              : 'apexcharts-yaxistooltip apexcharts-yaxistooltip-'.concat(
                  i,
                  ' apexcharts-yaxistooltip-left'
                );
            w.globals.yAxisSameScaleIndices.map(function (samescales, ssi) {
              samescales.map(function (s, si) {
                if (si === i) {
                  tooltipCssClass += w.config.yaxis[si].show
                    ? ' '
                    : ' apexcharts-yaxistooltip-hidden';
                }
              });
            });
            var renderTo = w.globals.dom.elWrap;
            var yaxisTooltip = w.globals.dom.baseEl.querySelector(
              '.apexcharts-yaxistooltip apexcharts-yaxistooltip-'.concat(i)
            );

            if (yaxisTooltip === null) {
              ttCtx.yaxisTooltip = document.createElement('div');
              ttCtx.yaxisTooltip.setAttribute(
                'class',
                tooltipCssClass + ' apexcharts-theme-' + w.config.tooltip.theme
              );
              renderTo.appendChild(ttCtx.yaxisTooltip);
              if (i === 0) ttCtx.yaxisTooltipText = [];
              ttCtx.yaxisTooltipText[i] = document.createElement('div');
              ttCtx.yaxisTooltipText[i].classList.add('apexcharts-yaxistooltip-text');
              ttCtx.yaxisTooltip.appendChild(ttCtx.yaxisTooltipText[i]);
            }
          };

          for (var i = 0; i < w.config.yaxis.length; i++) {
            _loop(i);
          }
        },
        /**
         * @memberof Tooltip
         **/
      },
      {
        key: 'setXCrosshairWidth',
        value: function setXCrosshairWidth() {
          var w = this.w;
          var ttCtx = this.ttCtx; // set xcrosshairs width

          var xcrosshairs = ttCtx.getElXCrosshairs();
          ttCtx.xcrosshairsWidth = parseInt(w.config.xaxis.crosshairs.width, 10);

          if (!w.globals.comboCharts) {
            if (w.config.xaxis.crosshairs.width === 'tickWidth') {
              var count = w.globals.labels.length;
              ttCtx.xcrosshairsWidth = w.globals.gridWidth / count;
            } else if (w.config.xaxis.crosshairs.width === 'barWidth') {
              var bar = w.globals.dom.baseEl.querySelector('.apexcharts-bar-area');

              if (bar !== null) {
                var barWidth = parseFloat(bar.getAttribute('barWidth'));
                ttCtx.xcrosshairsWidth = barWidth;
              } else {
                ttCtx.xcrosshairsWidth = 1;
              }
            }
          } else {
            var _bar = w.globals.dom.baseEl.querySelector('.apexcharts-bar-area');

            if (_bar !== null && w.config.xaxis.crosshairs.width === 'barWidth') {
              var _barWidth = parseFloat(_bar.getAttribute('barWidth'));

              ttCtx.xcrosshairsWidth = _barWidth;
            } else {
              if (w.config.xaxis.crosshairs.width === 'tickWidth') {
                var _count = w.globals.labels.length;
                ttCtx.xcrosshairsWidth = w.globals.gridWidth / _count;
              }
            }
          }

          if (w.globals.isBarHorizontal) {
            ttCtx.xcrosshairsWidth = 0;
          }

          if (xcrosshairs !== null && ttCtx.xcrosshairsWidth > 0) {
            xcrosshairs.setAttribute('width', ttCtx.xcrosshairsWidth);
          }
        },
      },
      {
        key: 'handleYCrosshair',
        value: function handleYCrosshair() {
          var w = this.w;
          var ttCtx = this.ttCtx; // set ycrosshairs height

          ttCtx.ycrosshairs = w.globals.dom.baseEl.querySelector('.apexcharts-ycrosshairs');
          ttCtx.ycrosshairsHidden = w.globals.dom.baseEl.querySelector(
            '.apexcharts-ycrosshairs-hidden'
          );
        },
      },
      {
        key: 'drawYaxisTooltipText',
        value: function drawYaxisTooltipText(index, clientY, xyRatios) {
          var ttCtx = this.ttCtx;
          var w = this.w;
          var lbFormatter = w.globals.yLabelFormatters[index];

          if (ttCtx.yaxisTooltips[index]) {
            var elGrid = ttCtx.getElGrid();
            var seriesBound = elGrid.getBoundingClientRect();
            var hoverY = (clientY - seriesBound.top) * xyRatios.yRatio[index];
            var height = w.globals.maxYArr[index] - w.globals.minYArr[index];
            var val = w.globals.minYArr[index] + (height - hoverY);
            ttCtx.tooltipPosition.moveYCrosshairs(clientY - seriesBound.top);
            ttCtx.yaxisTooltipText[index].innerHTML = lbFormatter(val);
            ttCtx.tooltipPosition.moveYAxisTooltip(index);
          }
        },
      },
    ]);

    return AxesTooltip;
  })();

  /**
   * ApexCharts Core Tooltip Class to handle the tooltip generation.
   *
   * @module Tooltip
   **/

  var Tooltip = /*#__PURE__*/ (function () {
    function Tooltip(ctx) {
      _classCallCheck(this, Tooltip);

      this.ctx = ctx;
      this.w = ctx.w;
      var w = this.w;
      this.tConfig = w.config.tooltip;
      this.tooltipUtil = new Utils(this);
      this.tooltipLabels = new Labels(this);
      this.tooltipPosition = new Position(this);
      this.marker = new Marker(this);
      this.intersect = new Intersect(this);
      this.axesTooltip = new AxesTooltip(this);
      this.showOnIntersect = this.tConfig.intersect;
      this.showTooltipTitle = this.tConfig.x.show;
      this.fixedTooltip = this.tConfig.fixed.enabled;
      this.xaxisTooltip = null;
      this.yaxisTTEls = null;
      this.isBarShared = !w.globals.isBarHorizontal && this.tConfig.shared;
      this.lastHoverTime = Date.now();
    }

    _createClass(Tooltip, [
      {
        key: 'getElTooltip',
        value: function getElTooltip(ctx) {
          if (!ctx) ctx = this;
          return ctx.w.globals.dom.baseEl.querySelector('.apexcharts-tooltip');
        },
      },
      {
        key: 'getElXCrosshairs',
        value: function getElXCrosshairs() {
          return this.w.globals.dom.baseEl.querySelector('.apexcharts-xcrosshairs');
        },
      },
      {
        key: 'getElGrid',
        value: function getElGrid() {
          return this.w.globals.dom.baseEl.querySelector('.apexcharts-grid');
        },
      },
      {
        key: 'drawTooltip',
        value: function drawTooltip(xyRatios) {
          var w = this.w;
          this.xyRatios = xyRatios;
          this.isXAxisTooltipEnabled = w.config.xaxis.tooltip.enabled && w.globals.axisCharts;
          this.yaxisTooltips = w.config.yaxis.map(function (y, i) {
            return y.show && y.tooltip.enabled && w.globals.axisCharts ? true : false;
          });
          this.allTooltipSeriesGroups = [];

          if (!w.globals.axisCharts) {
            this.showTooltipTitle = false;
          }

          var tooltipEl = document.createElement('div');
          tooltipEl.classList.add('apexcharts-tooltip');
          tooltipEl.classList.add('apexcharts-theme-'.concat(this.tConfig.theme));
          w.globals.dom.elWrap.appendChild(tooltipEl);

          if (w.globals.axisCharts) {
            this.axesTooltip.drawXaxisTooltip();
            this.axesTooltip.drawYaxisTooltip();
            this.axesTooltip.setXCrosshairWidth();
            this.axesTooltip.handleYCrosshair();
            var xAxis = new XAxis(this.ctx);
            this.xAxisTicksPositions = xAxis.getXAxisTicksPositions();
          } // we forcefully set intersect true for these conditions

          if (
            (w.globals.comboCharts ||
              this.tConfig.intersect ||
              w.config.chart.type === 'rangeBar') &&
            !this.tConfig.shared
          ) {
            this.showOnIntersect = true;
          }

          if (w.config.markers.size === 0 || w.globals.markers.largestSize === 0) {
            // when user don't want to show points all the time, but only on when hovering on series
            this.marker.drawDynamicPoints(this);
          } // no visible series, exit

          if (w.globals.collapsedSeries.length === w.globals.series.length) return;
          this.dataPointsDividedHeight = w.globals.gridHeight / w.globals.dataPoints;
          this.dataPointsDividedWidth = w.globals.gridWidth / w.globals.dataPoints;

          if (this.showTooltipTitle) {
            this.tooltipTitle = document.createElement('div');
            this.tooltipTitle.classList.add('apexcharts-tooltip-title');
            this.tooltipTitle.style.fontFamily =
              this.tConfig.style.fontFamily || w.config.chart.fontFamily;
            this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize;
            tooltipEl.appendChild(this.tooltipTitle);
          }

          var ttItemsCnt = w.globals.series.length; // whether shared or not, default is shared

          if ((w.globals.xyCharts || w.globals.comboCharts) && this.tConfig.shared) {
            if (!this.showOnIntersect) {
              ttItemsCnt = w.globals.series.length;
            } else {
              ttItemsCnt = 1;
            }
          }

          this.legendLabels = w.globals.dom.baseEl.querySelectorAll('.apexcharts-legend-text');
          this.ttItems = this.createTTElements(ttItemsCnt);
          this.addSVGEvents();
        },
      },
      {
        key: 'createTTElements',
        value: function createTTElements(ttItemsCnt) {
          var _this = this;

          var w = this.w;
          var ttItems = [];
          var tooltipEl = this.getElTooltip();

          var _loop = function _loop(i) {
            var gTxt = document.createElement('div');
            gTxt.classList.add('apexcharts-tooltip-series-group');
            gTxt.style.order = w.config.tooltip.inverseOrder ? ttItemsCnt - i : i + 1;

            if (
              _this.tConfig.shared &&
              _this.tConfig.enabledOnSeries &&
              Array.isArray(_this.tConfig.enabledOnSeries)
            ) {
              if (_this.tConfig.enabledOnSeries.indexOf(i) < 0) {
                gTxt.classList.add('apexcharts-tooltip-series-group-hidden');
              }
            }

            var point = document.createElement('span');
            point.classList.add('apexcharts-tooltip-marker');
            point.style.backgroundColor = w.globals.colors[i];
            gTxt.appendChild(point);
            var gYZ = document.createElement('div');
            gYZ.classList.add('apexcharts-tooltip-text');
            gYZ.style.fontFamily = _this.tConfig.style.fontFamily || w.config.chart.fontFamily;
            gYZ.style.fontSize = _this.tConfig.style.fontSize;
            ['y', 'goals', 'z'].forEach(function (g) {
              var gValText = document.createElement('div');
              gValText.classList.add('apexcharts-tooltip-'.concat(g, '-group'));
              var txtLabel = document.createElement('span');
              txtLabel.classList.add('apexcharts-tooltip-text-'.concat(g, '-label'));
              gValText.appendChild(txtLabel);
              var txtValue = document.createElement('span');
              txtValue.classList.add('apexcharts-tooltip-text-'.concat(g, '-value'));
              gValText.appendChild(txtValue);
              gYZ.appendChild(gValText);
            });
            gTxt.appendChild(gYZ);
            tooltipEl.appendChild(gTxt);
            ttItems.push(gTxt);
          };

          for (var i = 0; i < ttItemsCnt; i++) {
            _loop(i);
          }

          return ttItems;
        },
      },
      {
        key: 'addSVGEvents',
        value: function addSVGEvents() {
          var w = this.w;
          var type = w.config.chart.type;
          var tooltipEl = this.getElTooltip();
          var commonBar = !!(
            type === 'bar' ||
            type === 'candlestick' ||
            type === 'boxPlot' ||
            type === 'rangeBar'
          );
          var chartWithmarkers =
            type === 'area' ||
            type === 'line' ||
            type === 'scatter' ||
            type === 'bubble' ||
            type === 'radar';
          var hoverArea = w.globals.dom.Paper.node;
          var elGrid = this.getElGrid();

          if (elGrid) {
            this.seriesBound = elGrid.getBoundingClientRect();
          }

          var tooltipY = [];
          var tooltipX = [];
          var seriesHoverParams = {
            hoverArea: hoverArea,
            elGrid: elGrid,
            tooltipEl: tooltipEl,
            tooltipY: tooltipY,
            tooltipX: tooltipX,
            ttItems: this.ttItems,
          };
          var points;

          if (w.globals.axisCharts) {
            if (chartWithmarkers) {
              points = w.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"
              );
            } else if (commonBar) {
              points = w.globals.dom.baseEl.querySelectorAll(
                '.apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area'
              );
            } else if (type === 'heatmap' || type === 'treemap') {
              points = w.globals.dom.baseEl.querySelectorAll(
                '.apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap'
              );
            }

            if (points && points.length) {
              for (var p = 0; p < points.length; p++) {
                tooltipY.push(points[p].getAttribute('cy'));
                tooltipX.push(points[p].getAttribute('cx'));
              }
            }
          }

          var validSharedChartTypes =
            (w.globals.xyCharts && !this.showOnIntersect) ||
            (w.globals.comboCharts && !this.showOnIntersect) ||
            (commonBar && this.tooltipUtil.hasBars() && this.tConfig.shared);

          if (validSharedChartTypes) {
            this.addPathsEventListeners([hoverArea], seriesHoverParams);
          } else if (
            (commonBar && !w.globals.comboCharts) ||
            (chartWithmarkers && this.showOnIntersect)
          ) {
            this.addDatapointEventsListeners(seriesHoverParams);
          } else if (!w.globals.axisCharts || type === 'heatmap' || type === 'treemap') {
            var seriesAll = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series');
            this.addPathsEventListeners(seriesAll, seriesHoverParams);
          }

          if (this.showOnIntersect) {
            var lineAreaPoints = w.globals.dom.baseEl.querySelectorAll(
              '.apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker'
            );

            if (lineAreaPoints.length > 0) {
              // if we find any lineSeries, addEventListeners for them
              this.addPathsEventListeners(lineAreaPoints, seriesHoverParams);
            } // combo charts may have bars, so add event listeners here too

            if (this.tooltipUtil.hasBars() && !this.tConfig.shared) {
              this.addDatapointEventsListeners(seriesHoverParams);
            }
          }
        },
      },
      {
        key: 'drawFixedTooltipRect',
        value: function drawFixedTooltipRect() {
          var w = this.w;
          var tooltipEl = this.getElTooltip();
          var tooltipRect = tooltipEl.getBoundingClientRect();
          var ttWidth = tooltipRect.width + 10;
          var ttHeight = tooltipRect.height + 10;
          var x = this.tConfig.fixed.offsetX;
          var y = this.tConfig.fixed.offsetY;
          var fixed = this.tConfig.fixed.position.toLowerCase();

          if (fixed.indexOf('right') > -1) {
            x = x + w.globals.svgWidth - ttWidth + 10;
          }

          if (fixed.indexOf('bottom') > -1) {
            y = y + w.globals.svgHeight - ttHeight - 10;
          }

          tooltipEl.style.left = x + 'px';
          tooltipEl.style.top = y + 'px';
          return {
            x: x,
            y: y,
            ttWidth: ttWidth,
            ttHeight: ttHeight,
          };
        },
      },
      {
        key: 'addDatapointEventsListeners',
        value: function addDatapointEventsListeners(seriesHoverParams) {
          var w = this.w;
          var points = w.globals.dom.baseEl.querySelectorAll(
            '.apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area'
          );
          this.addPathsEventListeners(points, seriesHoverParams);
        },
      },
      {
        key: 'addPathsEventListeners',
        value: function addPathsEventListeners(paths, opts) {
          var self = this;

          var _loop2 = function _loop2(p) {
            var extendedOpts = {
              paths: paths[p],
              tooltipEl: opts.tooltipEl,
              tooltipY: opts.tooltipY,
              tooltipX: opts.tooltipX,
              elGrid: opts.elGrid,
              hoverArea: opts.hoverArea,
              ttItems: opts.ttItems,
            };
            var events = ['mousemove', 'mouseup', 'touchmove', 'mouseout', 'touchend'];
            events.map(function (ev) {
              return paths[p].addEventListener(ev, self.onSeriesHover.bind(self, extendedOpts), {
                capture: false,
                passive: true,
              });
            });
          };

          for (var p = 0; p < paths.length; p++) {
            _loop2(p);
          }
        },
        /*
         ** Check to see if the tooltips should be updated based on a mouse / touch event
         */
      },
      {
        key: 'onSeriesHover',
        value: function onSeriesHover(opt, e) {
          var _this2 = this;

          // If a user is moving their mouse quickly, don't bother updating the tooltip every single frame
          var targetDelay = 100;
          var timeSinceLastUpdate = Date.now() - this.lastHoverTime;

          if (timeSinceLastUpdate >= targetDelay) {
            // The tooltip was last updated over 100ms ago - redraw it even if the user is still moving their
            // mouse so they get some feedback that their moves are being registered
            this.seriesHover(opt, e);
          } else {
            // The tooltip was last updated less than 100ms ago
            // Cancel any other delayed draw, so we don't show stale data
            clearTimeout(this.seriesHoverTimeout); // Schedule the next draw so that it happens about 100ms after the last update

            this.seriesHoverTimeout = setTimeout(function () {
              _this2.seriesHover(opt, e);
            }, targetDelay - timeSinceLastUpdate);
          }
        },
        /*
         ** The actual series hover function
         */
      },
      {
        key: 'seriesHover',
        value: function seriesHover(opt, e) {
          var _this3 = this;

          this.lastHoverTime = Date.now();
          var chartGroups = [];
          var w = this.w; // if user has more than one charts in group, we need to sync

          if (w.config.chart.group) {
            chartGroups = this.ctx.getGroupedCharts();
          }

          if (
            w.globals.axisCharts &&
            ((w.globals.minX === -Infinity && w.globals.maxX === Infinity) ||
              w.globals.dataPoints === 0)
          ) {
            return;
          }

          if (chartGroups.length) {
            chartGroups.forEach(function (ch) {
              var tooltipEl = _this3.getElTooltip(ch);

              var newOpts = {
                paths: opt.paths,
                tooltipEl: tooltipEl,
                tooltipY: opt.tooltipY,
                tooltipX: opt.tooltipX,
                elGrid: opt.elGrid,
                hoverArea: opt.hoverArea,
                ttItems: ch.w.globals.tooltip.ttItems,
              }; // all the charts should have the same minX and maxX (same xaxis) for multiple tooltips to work correctly

              if (
                ch.w.globals.minX === _this3.w.globals.minX &&
                ch.w.globals.maxX === _this3.w.globals.maxX
              ) {
                ch.w.globals.tooltip.seriesHoverByContext({
                  chartCtx: ch,
                  ttCtx: ch.w.globals.tooltip,
                  opt: newOpts,
                  e: e,
                });
              }
            });
          } else {
            this.seriesHoverByContext({
              chartCtx: this.ctx,
              ttCtx: this.w.globals.tooltip,
              opt: opt,
              e: e,
            });
          }
        },
      },
      {
        key: 'seriesHoverByContext',
        value: function seriesHoverByContext(_ref) {
          var chartCtx = _ref.chartCtx,
            ttCtx = _ref.ttCtx,
            opt = _ref.opt,
            e = _ref.e;
          var w = chartCtx.w;
          var tooltipEl = this.getElTooltip(); // tooltipRect is calculated on every mousemove, because the text is dynamic

          ttCtx.tooltipRect = {
            x: 0,
            y: 0,
            ttWidth: tooltipEl.getBoundingClientRect().width,
            ttHeight: tooltipEl.getBoundingClientRect().height,
          };
          ttCtx.e = e; // highlight the current hovered bars

          if (ttCtx.tooltipUtil.hasBars() && !w.globals.comboCharts && !ttCtx.isBarShared) {
            if (this.tConfig.onDatasetHover.highlightDataSeries) {
              var series = new Series(chartCtx);
              series.toggleSeriesOnHover(e, e.target.parentNode);
            }
          }

          if (ttCtx.fixedTooltip) {
            ttCtx.drawFixedTooltipRect();
          }

          if (w.globals.axisCharts) {
            ttCtx.axisChartsTooltips({
              e: e,
              opt: opt,
              tooltipRect: ttCtx.tooltipRect,
            });
          } else {
            // non-plot charts i.e pie/donut/circle
            ttCtx.nonAxisChartsTooltips({
              e: e,
              opt: opt,
              tooltipRect: ttCtx.tooltipRect,
            });
          }
        }, // tooltip handling for line/area/bar/columns/scatter
      },
      {
        key: 'axisChartsTooltips',
        value: function axisChartsTooltips(_ref2) {
          var e = _ref2.e,
            opt = _ref2.opt;
          var w = this.w;
          var x, y;
          var seriesBound = opt.elGrid.getBoundingClientRect();
          var clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;
          var clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;
          this.clientY = clientY;
          this.clientX = clientX;
          w.globals.capturedSeriesIndex = -1;
          w.globals.capturedDataPointIndex = -1;

          if (clientY < seriesBound.top || clientY > seriesBound.top + seriesBound.height) {
            this.handleMouseOut(opt);
            return;
          }

          if (Array.isArray(this.tConfig.enabledOnSeries) && !w.config.tooltip.shared) {
            var index = parseInt(opt.paths.getAttribute('index'), 10);

            if (this.tConfig.enabledOnSeries.indexOf(index) < 0) {
              this.handleMouseOut(opt);
              return;
            }
          }

          var tooltipEl = this.getElTooltip();
          var xcrosshairs = this.getElXCrosshairs();
          var isStickyTooltip =
            w.globals.xyCharts ||
            (w.config.chart.type === 'bar' &&
              !w.globals.isBarHorizontal &&
              this.tooltipUtil.hasBars() &&
              this.tConfig.shared) ||
            (w.globals.comboCharts && this.tooltipUtil.hasBars());

          if (e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'mouseup') {
            if (xcrosshairs !== null) {
              xcrosshairs.classList.add('apexcharts-active');
            }

            var hasYAxisTooltip = this.yaxisTooltips.filter(function (b) {
              return b === true;
            });

            if (this.ycrosshairs !== null && hasYAxisTooltip.length) {
              this.ycrosshairs.classList.add('apexcharts-active');
            }

            if (isStickyTooltip && !this.showOnIntersect) {
              this.handleStickyTooltip(e, clientX, clientY, opt);
            } else {
              if (w.config.chart.type === 'heatmap' || w.config.chart.type === 'treemap') {
                var markerXY = this.intersect.handleHeatTreeTooltip({
                  e: e,
                  opt: opt,
                  x: x,
                  y: y,
                  type: w.config.chart.type,
                });
                x = markerXY.x;
                y = markerXY.y;
                tooltipEl.style.left = x + 'px';
                tooltipEl.style.top = y + 'px';
              } else {
                if (this.tooltipUtil.hasBars()) {
                  this.intersect.handleBarTooltip({
                    e: e,
                    opt: opt,
                  });
                }

                if (this.tooltipUtil.hasMarkers()) {
                  // intersect - line/area/scatter/bubble
                  this.intersect.handleMarkerTooltip({
                    e: e,
                    opt: opt,
                    x: x,
                    y: y,
                  });
                }
              }
            }

            if (this.yaxisTooltips.length) {
              for (var yt = 0; yt < w.config.yaxis.length; yt++) {
                this.axesTooltip.drawYaxisTooltipText(yt, clientY, this.xyRatios);
              }
            }

            opt.tooltipEl.classList.add('apexcharts-active');
          } else if (e.type === 'mouseout' || e.type === 'touchend') {
            this.handleMouseOut(opt);
          }
        }, // tooltip handling for pie/donuts
      },
      {
        key: 'nonAxisChartsTooltips',
        value: function nonAxisChartsTooltips(_ref3) {
          var e = _ref3.e,
            opt = _ref3.opt,
            tooltipRect = _ref3.tooltipRect;
          var w = this.w;
          var rel = opt.paths.getAttribute('rel');
          var tooltipEl = this.getElTooltip();
          var seriesBound = w.globals.dom.elWrap.getBoundingClientRect();

          if (e.type === 'mousemove' || e.type === 'touchmove') {
            tooltipEl.classList.add('apexcharts-active');
            this.tooltipLabels.drawSeriesTexts({
              ttItems: opt.ttItems,
              i: parseInt(rel, 10) - 1,
              shared: false,
            });
            var x = w.globals.clientX - seriesBound.left - tooltipRect.ttWidth / 2;
            var y = w.globals.clientY - seriesBound.top - tooltipRect.ttHeight - 10;
            tooltipEl.style.left = x + 'px';
            tooltipEl.style.top = y + 'px';

            if (w.config.legend.tooltipHoverFormatter) {
              var legendFormatter = w.config.legend.tooltipHoverFormatter;
              var i = rel - 1;
              var legendName = this.legendLabels[i].getAttribute('data:default-text');
              var text = legendFormatter(legendName, {
                seriesIndex: i,
                dataPointIndex: i,
                w: w,
              });
              this.legendLabels[i].innerHTML = text;
            }
          } else if (e.type === 'mouseout' || e.type === 'touchend') {
            tooltipEl.classList.remove('apexcharts-active');

            if (w.config.legend.tooltipHoverFormatter) {
              this.legendLabels.forEach(function (l) {
                var defaultText = l.getAttribute('data:default-text');
                l.innerHTML = decodeURIComponent(defaultText);
              });
            }
          }
        },
      },
      {
        key: 'handleStickyTooltip',
        value: function handleStickyTooltip(e, clientX, clientY, opt) {
          var w = this.w;
          var capj = this.tooltipUtil.getNearestValues({
            context: this,
            hoverArea: opt.hoverArea,
            elGrid: opt.elGrid,
            clientX: clientX,
            clientY: clientY,
          });
          var j = capj.j;
          var capturedSeries = capj.capturedSeries;
          var bounds = opt.elGrid.getBoundingClientRect();

          if (capj.hoverX < 0 || capj.hoverX > bounds.width) {
            this.handleMouseOut(opt);
            return;
          }

          if (capturedSeries !== null) {
            this.handleStickyCapturedSeries(e, capturedSeries, opt, j);
          } else {
            // couldn't capture any series. check if shared X is same,
            // if yes, draw a grouped tooltip
            if (this.tooltipUtil.isXoverlap(j) || w.globals.isBarHorizontal) {
              this.create(e, this, 0, j, opt.ttItems);
            }
          }
        },
      },
      {
        key: 'handleStickyCapturedSeries',
        value: function handleStickyCapturedSeries(e, capturedSeries, opt, j) {
          var w = this.w;

          if (!this.tConfig.shared) {
            var ignoreNull = w.globals.series[capturedSeries][j] === null;

            if (ignoreNull) {
              this.handleMouseOut(opt);
              return;
            }
          }

          if (typeof w.globals.series[capturedSeries][j] !== 'undefined') {
            if (
              this.tConfig.shared &&
              this.tooltipUtil.isXoverlap(j) &&
              this.tooltipUtil.isInitialSeriesSameLen()
            ) {
              this.create(e, this, capturedSeries, j, opt.ttItems);
            } else {
              this.create(e, this, capturedSeries, j, opt.ttItems, false);
            }
          } else {
            if (this.tooltipUtil.isXoverlap(j)) {
              this.create(e, this, 0, j, opt.ttItems);
            }
          }
        },
      },
      {
        key: 'deactivateHoverFilter',
        value: function deactivateHoverFilter() {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var allPaths = w.globals.dom.Paper.select('.apexcharts-bar-area');

          for (var b = 0; b < allPaths.length; b++) {
            graphics.pathMouseLeave(allPaths[b]);
          }
        },
      },
      {
        key: 'handleMouseOut',
        value: function handleMouseOut(opt) {
          var w = this.w;
          var xcrosshairs = this.getElXCrosshairs();
          opt.tooltipEl.classList.remove('apexcharts-active');
          this.deactivateHoverFilter();

          if (w.config.chart.type !== 'bubble') {
            this.marker.resetPointsSize();
          }

          if (xcrosshairs !== null) {
            xcrosshairs.classList.remove('apexcharts-active');
          }

          if (this.ycrosshairs !== null) {
            this.ycrosshairs.classList.remove('apexcharts-active');
          }

          if (this.isXAxisTooltipEnabled) {
            this.xaxisTooltip.classList.remove('apexcharts-active');
          }

          if (this.yaxisTooltips.length) {
            if (this.yaxisTTEls === null) {
              this.yaxisTTEls = w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxistooltip');
            }

            for (var i = 0; i < this.yaxisTTEls.length; i++) {
              this.yaxisTTEls[i].classList.remove('apexcharts-active');
            }
          }

          if (w.config.legend.tooltipHoverFormatter) {
            this.legendLabels.forEach(function (l) {
              var defaultText = l.getAttribute('data:default-text');
              l.innerHTML = decodeURIComponent(defaultText);
            });
          }
        },
      },
      {
        key: 'markerClick',
        value: function markerClick(e, seriesIndex, dataPointIndex) {
          var w = this.w;

          if (typeof w.config.chart.events.markerClick === 'function') {
            w.config.chart.events.markerClick(e, this.ctx, {
              seriesIndex: seriesIndex,
              dataPointIndex: dataPointIndex,
              w: w,
            });
          }

          this.ctx.events.fireEvent('markerClick', [
            e,
            this.ctx,
            {
              seriesIndex: seriesIndex,
              dataPointIndex: dataPointIndex,
              w: w,
            },
          ]);
        },
      },
      {
        key: 'create',
        value: function create(e, context, capturedSeries, j, ttItems) {
          var shared = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
          var w = this.w;
          var ttCtx = context;

          if (e.type === 'mouseup') {
            this.markerClick(e, capturedSeries, j);
          }

          if (shared === null) shared = this.tConfig.shared;
          var hasMarkers = this.tooltipUtil.hasMarkers();
          var bars = this.tooltipUtil.getElBars();

          if (w.config.legend.tooltipHoverFormatter) {
            var legendFormatter = w.config.legend.tooltipHoverFormatter;
            var els = Array.from(this.legendLabels); // reset all legend values first

            els.forEach(function (l) {
              var legendName = l.getAttribute('data:default-text');
              l.innerHTML = decodeURIComponent(legendName);
            }); // for irregular time series

            for (var i = 0; i < els.length; i++) {
              var l = els[i];
              var lsIndex = parseInt(l.getAttribute('i'), 10);
              var legendName = decodeURIComponent(l.getAttribute('data:default-text'));
              var text = legendFormatter(legendName, {
                seriesIndex: shared ? lsIndex : capturedSeries,
                dataPointIndex: j,
                w: w,
              });

              if (!shared) {
                l.innerHTML = lsIndex === capturedSeries ? text : legendName;

                if (capturedSeries === lsIndex) {
                  break;
                }
              } else {
                l.innerHTML =
                  w.globals.collapsedSeriesIndices.indexOf(lsIndex) < 0 ? text : legendName;
              }
            }
          }

          if (shared) {
            ttCtx.tooltipLabels.drawSeriesTexts({
              ttItems: ttItems,
              i: capturedSeries,
              j: j,
              shared: this.showOnIntersect ? false : this.tConfig.shared,
            });

            if (hasMarkers) {
              if (w.globals.markers.largestSize > 0) {
                ttCtx.marker.enlargePoints(j);
              } else {
                ttCtx.tooltipPosition.moveDynamicPointsOnHover(j);
              }
            }

            if (this.tooltipUtil.hasBars()) {
              this.barSeriesHeight = this.tooltipUtil.getBarsHeight(bars);

              if (this.barSeriesHeight > 0) {
                // hover state, activate snap filter
                var graphics = new Graphics(this.ctx);
                var paths = w.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(j, "']")); // de-activate first

                this.deactivateHoverFilter();
                this.tooltipPosition.moveStickyTooltipOverBars(j);

                for (var b = 0; b < paths.length; b++) {
                  graphics.pathMouseEnter(paths[b]);
                }
              }
            }
          } else {
            ttCtx.tooltipLabels.drawSeriesTexts({
              shared: false,
              ttItems: ttItems,
              i: capturedSeries,
              j: j,
            });

            if (this.tooltipUtil.hasBars()) {
              ttCtx.tooltipPosition.moveStickyTooltipOverBars(j);
            }

            if (hasMarkers) {
              ttCtx.tooltipPosition.moveMarkers(capturedSeries, j);
            }
          }
        },
      },
    ]);

    return Tooltip;
  })();

  /**
   * ApexCharts BarStacked Class responsible for drawing both Stacked Columns and Bars.
   *
   * @module BarStacked
   * The whole calculation for stacked bar/column is different from normal bar/column,
   * hence it makes sense to derive a new class for it extending most of the props of Parent Bar
   **/

  var BarStacked = /*#__PURE__*/ (function (_Bar) {
    _inherits(BarStacked, _Bar);

    var _super = _createSuper(BarStacked);

    function BarStacked() {
      _classCallCheck(this, BarStacked);

      return _super.apply(this, arguments);
    }

    _createClass(BarStacked, [
      {
        key: 'draw',
        value: function draw(series, seriesIndex) {
          var _this = this;

          var w = this.w;
          this.graphics = new Graphics(this.ctx);
          this.bar = new Bar(this.ctx, this.xyRatios);
          var coreUtils = new CoreUtils(this.ctx, w);
          series = coreUtils.getLogSeries(series);
          this.yRatio = coreUtils.getLogYRatios(this.yRatio);
          this.barHelpers.initVariables(series);

          if (w.config.chart.stackType === '100%') {
            series = w.globals.seriesPercent.slice();
          }

          this.series = series;
          this.totalItems = 0;
          this.prevY = []; // y position on chart

          this.prevX = []; // x position on chart

          this.prevYF = []; // y position including shapes on chart

          this.prevXF = []; // x position including shapes on chart

          this.prevYVal = []; // y values (series[i][j]) in columns

          this.prevXVal = []; // x values (series[i][j]) in bars

          this.xArrj = []; // xj indicates x position on graph in bars

          this.xArrjF = []; // xjF indicates bar's x position + roundedShape's positions in bars

          this.xArrjVal = []; // x val means the actual series's y values in horizontal/bars

          this.yArrj = []; // yj indicates y position on graph in columns

          this.yArrjF = []; // yjF indicates bar's y position + roundedShape's positions in columns

          this.yArrjVal = []; // y val means the actual series's y values in columns

          for (var sl = 0; sl < series.length; sl++) {
            if (series[sl].length > 0) {
              this.totalItems += series[sl].length;
            }
          }

          var ret = this.graphics.group({
            class: 'apexcharts-bar-series apexcharts-plot-series',
          });
          var x = 0;
          var y = 0;

          var _loop = function _loop(i, bc) {
            var xDivision = void 0; // xDivision is the GRIDWIDTH divided by number of datapoints (columns)

            var yDivision = void 0; // yDivision is the GRIDHEIGHT divided by number of datapoints (bars)

            var zeroH = void 0; // zeroH is the baseline where 0 meets y axis

            var zeroW = void 0; // zeroW is the baseline where 0 meets x axis

            var xArrValues = [];
            var yArrValues = [];
            var realIndex = w.globals.comboCharts ? seriesIndex[i] : i;

            if (_this.yRatio.length > 1) {
              _this.yaxisIndex = realIndex;
            }

            _this.isReversed =
              w.config.yaxis[_this.yaxisIndex] && w.config.yaxis[_this.yaxisIndex].reversed; // el to which series will be drawn

            var elSeries = _this.graphics.group({
              class: 'apexcharts-series',
              seriesName: Utils$1.escapeString(w.globals.seriesNames[realIndex]),
              rel: i + 1,
              'data:realIndex': realIndex,
            });

            _this.ctx.series.addCollapsedClassToSeries(elSeries, realIndex); // eldatalabels

            var elDataLabelsWrap = _this.graphics.group({
              class: 'apexcharts-datalabels',
              'data:realIndex': realIndex,
            });

            var barHeight = 0;
            var barWidth = 0;

            var initPositions = _this.initialPositions(x, y, xDivision, yDivision, zeroH, zeroW);

            y = initPositions.y;
            barHeight = initPositions.barHeight;
            yDivision = initPositions.yDivision;
            zeroW = initPositions.zeroW;
            x = initPositions.x;
            barWidth = initPositions.barWidth;
            xDivision = initPositions.xDivision;
            zeroH = initPositions.zeroH;
            _this.yArrj = [];
            _this.yArrjF = [];
            _this.yArrjVal = [];
            _this.xArrj = [];
            _this.xArrjF = [];
            _this.xArrjVal = []; // if (!this.horizontal) {
            // this.xArrj.push(x + barWidth / 2)
            // }
            // fix issue #1215;
            // where all stack bar disappear after collapsing the first series
            // sol: if only 1 arr in this.prevY(this.prevY.length === 1) and all are NaN

            if (
              _this.prevY.length === 1 &&
              _this.prevY[0].every(function (val) {
                return isNaN(val);
              })
            ) {
              // make this.prevY[0] all zeroH
              _this.prevY[0] = _this.prevY[0].map(function (val) {
                return zeroH;
              }); // make this.prevYF[0] all 0

              _this.prevYF[0] = _this.prevYF[0].map(function (val) {
                return 0;
              });
            }

            for (var j = 0; j < w.globals.dataPoints; j++) {
              var strokeWidth = _this.barHelpers.getStrokeWidth(i, j, realIndex);

              var commonPathOpts = {
                indexes: {
                  i: i,
                  j: j,
                  realIndex: realIndex,
                  bc: bc,
                },
                strokeWidth: strokeWidth,
                x: x,
                y: y,
                elSeries: elSeries,
              };
              var paths = null;

              if (_this.isHorizontal) {
                paths = _this.drawStackedBarPaths(
                  _objectSpread2(
                    _objectSpread2({}, commonPathOpts),
                    {},
                    {
                      zeroW: zeroW,
                      barHeight: barHeight,
                      yDivision: yDivision,
                    }
                  )
                );
                barWidth = _this.series[i][j] / _this.invertedYRatio;
              } else {
                paths = _this.drawStackedColumnPaths(
                  _objectSpread2(
                    _objectSpread2({}, commonPathOpts),
                    {},
                    {
                      xDivision: xDivision,
                      barWidth: barWidth,
                      zeroH: zeroH,
                    }
                  )
                );
                barHeight = _this.series[i][j] / _this.yRatio[_this.yaxisIndex];
              }

              y = paths.y;
              x = paths.x;
              xArrValues.push(x);
              yArrValues.push(y);

              var pathFill = _this.barHelpers.getPathFillColor(series, i, j, realIndex);

              elSeries = _this.renderSeries({
                realIndex: realIndex,
                pathFill: pathFill,
                j: j,
                i: i,
                pathFrom: paths.pathFrom,
                pathTo: paths.pathTo,
                strokeWidth: strokeWidth,
                elSeries: elSeries,
                x: x,
                y: y,
                series: series,
                barHeight: barHeight,
                barWidth: barWidth,
                elDataLabelsWrap: elDataLabelsWrap,
                type: 'bar',
                visibleSeries: 0,
              });
            } // push all x val arrays into main xArr

            w.globals.seriesXvalues[realIndex] = xArrValues;
            w.globals.seriesYvalues[realIndex] = yArrValues; // push all current y values array to main PrevY Array

            _this.prevY.push(_this.yArrj);

            _this.prevYF.push(_this.yArrjF);

            _this.prevYVal.push(_this.yArrjVal);

            _this.prevX.push(_this.xArrj);

            _this.prevXF.push(_this.xArrjF);

            _this.prevXVal.push(_this.xArrjVal);

            ret.add(elSeries);
          };

          for (var i = 0, bc = 0; i < series.length; i++, bc++) {
            _loop(i, bc);
          }

          return ret;
        },
      },
      {
        key: 'initialPositions',
        value: function initialPositions(x, y, xDivision, yDivision, zeroH, zeroW) {
          var w = this.w;
          var barHeight, barWidth;

          if (this.isHorizontal) {
            // height divided into equal parts
            yDivision = w.globals.gridHeight / w.globals.dataPoints;
            barHeight = yDivision;
            barHeight = (barHeight * parseInt(w.config.plotOptions.bar.barHeight, 10)) / 100;
            zeroW =
              this.baseLineInvertedY +
              w.globals.padHorizontal +
              (this.isReversed ? w.globals.gridWidth : 0) -
              (this.isReversed ? this.baseLineInvertedY * 2 : 0); // initial y position is half of barHeight * half of number of Bars

            y = (yDivision - barHeight) / 2;
          } else {
            // width divided into equal parts
            xDivision = w.globals.gridWidth / w.globals.dataPoints;
            barWidth = xDivision;

            if (w.globals.isXNumeric && w.globals.dataPoints > 1) {
              // the check (w.globals.dataPoints > 1) fixes apexcharts.js #1617
              xDivision = w.globals.minXDiff / this.xRatio;
              barWidth = (xDivision * parseInt(this.barOptions.columnWidth, 10)) / 100;
            } else {
              barWidth = (barWidth * parseInt(w.config.plotOptions.bar.columnWidth, 10)) / 100;
            }

            zeroH =
              this.baseLineY[this.yaxisIndex] +
              (this.isReversed ? w.globals.gridHeight : 0) -
              (this.isReversed ? this.baseLineY[this.yaxisIndex] * 2 : 0); // initial x position is one third of barWidth

            x = w.globals.padHorizontal + (xDivision - barWidth) / 2;
          }

          return {
            x: x,
            y: y,
            yDivision: yDivision,
            xDivision: xDivision,
            barHeight: barHeight,
            barWidth: barWidth,
            zeroH: zeroH,
            zeroW: zeroW,
          };
        },
      },
      {
        key: 'drawStackedBarPaths',
        value: function drawStackedBarPaths(_ref) {
          var indexes = _ref.indexes,
            barHeight = _ref.barHeight,
            strokeWidth = _ref.strokeWidth,
            zeroW = _ref.zeroW,
            x = _ref.x,
            y = _ref.y,
            yDivision = _ref.yDivision,
            elSeries = _ref.elSeries;
          var w = this.w;
          var barYPosition = y;
          var barXPosition;
          var i = indexes.i;
          var j = indexes.j;
          var prevBarW = 0;

          for (var k = 0; k < this.prevXF.length; k++) {
            prevBarW = prevBarW + this.prevXF[k][j];
          }

          if (i > 0) {
            var bXP = zeroW;

            if (this.prevXVal[i - 1][j] < 0) {
              bXP =
                this.series[i][j] >= 0
                  ? this.prevX[i - 1][j] + prevBarW - (this.isReversed ? prevBarW : 0) * 2
                  : this.prevX[i - 1][j];
            } else if (this.prevXVal[i - 1][j] >= 0) {
              bXP =
                this.series[i][j] >= 0
                  ? this.prevX[i - 1][j]
                  : this.prevX[i - 1][j] - prevBarW + (this.isReversed ? prevBarW : 0) * 2;
            }

            barXPosition = bXP;
          } else {
            // the first series will not have prevX values
            barXPosition = zeroW;
          }

          if (this.series[i][j] === null) {
            x = barXPosition;
          } else {
            x =
              barXPosition +
              this.series[i][j] / this.invertedYRatio -
              (this.isReversed ? this.series[i][j] / this.invertedYRatio : 0) * 2;
          }

          var paths = this.barHelpers.getBarpaths({
            barYPosition: barYPosition,
            barHeight: barHeight,
            x1: barXPosition,
            x2: x,
            strokeWidth: strokeWidth,
            series: this.series,
            realIndex: indexes.realIndex,
            i: i,
            j: j,
            w: w,
          });
          this.barHelpers.barBackground({
            j: j,
            i: i,
            y1: barYPosition,
            y2: barHeight,
            elSeries: elSeries,
          });
          y = y + yDivision;
          return {
            pathTo: paths.pathTo,
            pathFrom: paths.pathFrom,
            x: x,
            y: y,
          };
        },
      },
      {
        key: 'drawStackedColumnPaths',
        value: function drawStackedColumnPaths(_ref2) {
          var indexes = _ref2.indexes,
            x = _ref2.x,
            y = _ref2.y,
            xDivision = _ref2.xDivision,
            barWidth = _ref2.barWidth,
            zeroH = _ref2.zeroH;
          _ref2.strokeWidth;
          var elSeries = _ref2.elSeries;
          var w = this.w;
          var i = indexes.i;
          var j = indexes.j;
          var bc = indexes.bc;

          if (w.globals.isXNumeric) {
            var seriesVal = w.globals.seriesX[i][j];
            if (!seriesVal) seriesVal = 0;
            x = (seriesVal - w.globals.minX) / this.xRatio - barWidth / 2;
          }

          var barXPosition = x;
          var barYPosition;
          var prevBarH = 0;

          for (var k = 0; k < this.prevYF.length; k++) {
            // fix issue #1215
            // in case where this.prevYF[k][j] is NaN, use 0 instead
            prevBarH = prevBarH + (!isNaN(this.prevYF[k][j]) ? this.prevYF[k][j] : 0);
          }

          if (
            (i > 0 && !w.globals.isXNumeric) ||
            (i > 0 &&
              w.globals.isXNumeric &&
              w.globals.seriesX[i - 1][j] === w.globals.seriesX[i][j])
          ) {
            var bYP;
            var prevYValue;
            var p = Math.min(this.yRatio.length + 1, i + 1);

            if (this.prevY[i - 1] !== undefined) {
              for (var ii = 1; ii < p; ii++) {
                if (!isNaN(this.prevY[i - ii][j])) {
                  // find the previous available value to give prevYValue
                  prevYValue = this.prevY[i - ii][j]; // if found it, break the loop

                  break;
                }
              }
            }

            for (var _ii = 1; _ii < p; _ii++) {
              // find the previous available value(non-NaN) to give bYP
              if (this.prevYVal[i - _ii][j] < 0) {
                bYP =
                  this.series[i][j] >= 0
                    ? prevYValue - prevBarH + (this.isReversed ? prevBarH : 0) * 2
                    : prevYValue; // found it? break the loop

                break;
              } else if (this.prevYVal[i - _ii][j] >= 0) {
                bYP =
                  this.series[i][j] >= 0
                    ? prevYValue
                    : prevYValue + prevBarH - (this.isReversed ? prevBarH : 0) * 2; // found it? break the loop

                break;
              }
            }

            if (typeof bYP === 'undefined') bYP = w.globals.gridHeight; // if this.prevYF[0] is all 0 resulted from line #486
            // AND every arr starting from the second only contains NaN

            if (
              this.prevYF[0].every(function (val) {
                return val === 0;
              }) &&
              this.prevYF.slice(1, i).every(function (arr) {
                return arr.every(function (val) {
                  return isNaN(val);
                });
              })
            ) {
              // Use the same calc way as line #485
              barYPosition = w.globals.gridHeight - zeroH;
            } else {
              // Nothing special
              barYPosition = bYP;
            }
          } else {
            // the first series will not have prevY values, also if the prev index's series X doesn't matches the current index's series X, then start from zero
            barYPosition = w.globals.gridHeight - zeroH;
          }

          y =
            barYPosition -
            this.series[i][j] / this.yRatio[this.yaxisIndex] +
            (this.isReversed ? this.series[i][j] / this.yRatio[this.yaxisIndex] : 0) * 2;
          var paths = this.barHelpers.getColumnPaths({
            barXPosition: barXPosition,
            barWidth: barWidth,
            y1: barYPosition,
            y2: y,
            yRatio: this.yRatio[this.yaxisIndex],
            strokeWidth: this.strokeWidth,
            series: this.series,
            realIndex: indexes.realIndex,
            i: i,
            j: j,
            w: w,
          });
          this.barHelpers.barBackground({
            bc: bc,
            j: j,
            i: i,
            x1: barXPosition,
            x2: barWidth,
            elSeries: elSeries,
          });
          x = x + xDivision;
          return {
            pathTo: paths.pathTo,
            pathFrom: paths.pathFrom,
            x: w.globals.isXNumeric ? x - xDivision : x,
            y: y,
          };
        },
      },
    ]);

    return BarStacked;
  })(Bar);

  /**
   * ApexCharts BoxCandleStick Class responsible for drawing both Stacked Columns and Bars.
   *
   * @module BoxCandleStick
   **/

  var BoxCandleStick = /*#__PURE__*/ (function (_Bar) {
    _inherits(BoxCandleStick, _Bar);

    var _super = _createSuper(BoxCandleStick);

    function BoxCandleStick() {
      _classCallCheck(this, BoxCandleStick);

      return _super.apply(this, arguments);
    }

    _createClass(BoxCandleStick, [
      {
        key: 'draw',
        value: function draw(series, seriesIndex) {
          var _this = this;

          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var fill = new Fill(this.ctx);
          this.candlestickOptions = this.w.config.plotOptions.candlestick;
          this.boxOptions = this.w.config.plotOptions.boxPlot;
          this.isHorizontal = w.config.plotOptions.bar.horizontal;
          var coreUtils = new CoreUtils(this.ctx, w);
          series = coreUtils.getLogSeries(series);
          this.series = series;
          this.yRatio = coreUtils.getLogYRatios(this.yRatio);
          this.barHelpers.initVariables(series);
          var ret = graphics.group({
            class: 'apexcharts-'.concat(w.config.chart.type, '-series apexcharts-plot-series'),
          });

          var _loop = function _loop(i) {
            _this.isBoxPlot =
              w.config.chart.type === 'boxPlot' || w.config.series[i].type === 'boxPlot';
            var x = void 0,
              y = void 0,
              xDivision = void 0,
              // xDivision is the GRIDWIDTH divided by number of datapoints (columns)
              yDivision = void 0,
              // yDivision is the GRIDHEIGHT divided by number of datapoints (bars)
              zeroH = void 0,
              // zeroH is the baseline where 0 meets y axis
              zeroW = void 0; // zeroW is the baseline where 0 meets x axis

            var yArrj = []; // hold y values of current iterating series

            var xArrj = []; // hold x values of current iterating series

            var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn

            var elSeries = graphics.group({
              class: 'apexcharts-series',
              seriesName: Utils$1.escapeString(w.globals.seriesNames[realIndex]),
              rel: i + 1,
              'data:realIndex': realIndex,
            });

            _this.ctx.series.addCollapsedClassToSeries(elSeries, realIndex);

            if (series[i].length > 0) {
              _this.visibleI = _this.visibleI + 1;
            }

            var barHeight = 0;
            var barWidth = 0;

            if (_this.yRatio.length > 1) {
              _this.yaxisIndex = realIndex;
            }

            var initPositions = _this.barHelpers.initialPositions();

            y = initPositions.y;
            barHeight = initPositions.barHeight;
            yDivision = initPositions.yDivision;
            zeroW = initPositions.zeroW;
            x = initPositions.x;
            barWidth = initPositions.barWidth;
            xDivision = initPositions.xDivision;
            zeroH = initPositions.zeroH;
            xArrj.push(x + barWidth / 2); // eldatalabels

            var elDataLabelsWrap = graphics.group({
              class: 'apexcharts-datalabels',
              'data:realIndex': realIndex,
            });

            var _loop2 = function _loop2(j) {
              var strokeWidth = _this.barHelpers.getStrokeWidth(i, j, realIndex);

              var paths = null;
              var pathsParams = {
                indexes: {
                  i: i,
                  j: j,
                  realIndex: realIndex,
                },
                x: x,
                y: y,
                strokeWidth: strokeWidth,
                elSeries: elSeries,
              };

              if (_this.isHorizontal) {
                paths = _this.drawHorizontalBoxPaths(
                  _objectSpread2(
                    _objectSpread2({}, pathsParams),
                    {},
                    {
                      yDivision: yDivision,
                      barHeight: barHeight,
                      zeroW: zeroW,
                    }
                  )
                );
              } else {
                paths = _this.drawVerticalBoxPaths(
                  _objectSpread2(
                    _objectSpread2({}, pathsParams),
                    {},
                    {
                      xDivision: xDivision,
                      barWidth: barWidth,
                      zeroH: zeroH,
                    }
                  )
                );
              }

              y = paths.y;
              x = paths.x; // push current X

              if (j > 0) {
                xArrj.push(x + barWidth / 2);
              }

              yArrj.push(y);
              paths.pathTo.forEach(function (pathTo, pi) {
                var lineFill =
                  !_this.isBoxPlot && _this.candlestickOptions.wick.useFillColor
                    ? paths.color[pi]
                    : w.globals.stroke.colors[i];
                var pathFill = fill.fillPath({
                  seriesNumber: realIndex,
                  dataPointIndex: j,
                  color: paths.color[pi],
                  value: series[i][j],
                });

                _this.renderSeries({
                  realIndex: realIndex,
                  pathFill: pathFill,
                  lineFill: lineFill,
                  j: j,
                  i: i,
                  pathFrom: paths.pathFrom,
                  pathTo: pathTo,
                  strokeWidth: strokeWidth,
                  elSeries: elSeries,
                  x: x,
                  y: y,
                  series: series,
                  barHeight: barHeight,
                  barWidth: barWidth,
                  elDataLabelsWrap: elDataLabelsWrap,
                  visibleSeries: _this.visibleI,
                  type: w.config.chart.type,
                });
              });
            };

            for (var j = 0; j < w.globals.dataPoints; j++) {
              _loop2(j);
            } // push all x val arrays into main xArr

            w.globals.seriesXvalues[realIndex] = xArrj;
            w.globals.seriesYvalues[realIndex] = yArrj;
            ret.add(elSeries);
          };

          for (var i = 0; i < series.length; i++) {
            _loop(i);
          }

          return ret;
        },
      },
      {
        key: 'drawVerticalBoxPaths',
        value: function drawVerticalBoxPaths(_ref) {
          var indexes = _ref.indexes,
            x = _ref.x;
          _ref.y;
          var xDivision = _ref.xDivision,
            barWidth = _ref.barWidth,
            zeroH = _ref.zeroH,
            strokeWidth = _ref.strokeWidth;
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var i = indexes.i;
          var j = indexes.j;
          var isPositive = true;
          var colorPos = w.config.plotOptions.candlestick.colors.upward;
          var colorNeg = w.config.plotOptions.candlestick.colors.downward;
          var color = '';

          if (this.isBoxPlot) {
            color = [this.boxOptions.colors.lower, this.boxOptions.colors.upper];
          }

          var yRatio = this.yRatio[this.yaxisIndex];
          var realIndex = indexes.realIndex;
          var ohlc = this.getOHLCValue(realIndex, j);
          var l1 = zeroH;
          var l2 = zeroH;

          if (ohlc.o > ohlc.c) {
            isPositive = false;
          }

          var y1 = Math.min(ohlc.o, ohlc.c);
          var y2 = Math.max(ohlc.o, ohlc.c);
          var m = ohlc.m;

          if (w.globals.isXNumeric) {
            x = (w.globals.seriesX[realIndex][j] - w.globals.minX) / this.xRatio - barWidth / 2;
          }

          var barXPosition = x + barWidth * this.visibleI;

          if (typeof this.series[i][j] === 'undefined' || this.series[i][j] === null) {
            y1 = zeroH;
            y2 = zeroH;
          } else {
            y1 = zeroH - y1 / yRatio;
            y2 = zeroH - y2 / yRatio;
            l1 = zeroH - ohlc.h / yRatio;
            l2 = zeroH - ohlc.l / yRatio;
            m = zeroH - ohlc.m / yRatio;
          }

          var pathTo = graphics.move(barXPosition, zeroH);
          var pathFrom = graphics.move(barXPosition + barWidth / 2, y1);

          if (w.globals.previousPaths.length > 0) {
            pathFrom = this.getPreviousPath(realIndex, j, true);
          }

          if (this.isBoxPlot) {
            pathTo = [
              graphics.move(barXPosition, y1) +
                graphics.line(barXPosition + barWidth / 2, y1) +
                graphics.line(barXPosition + barWidth / 2, l1) +
                graphics.line(barXPosition + barWidth / 4, l1) +
                graphics.line(barXPosition + barWidth - barWidth / 4, l1) +
                graphics.line(barXPosition + barWidth / 2, l1) +
                graphics.line(barXPosition + barWidth / 2, y1) +
                graphics.line(barXPosition + barWidth, y1) +
                graphics.line(barXPosition + barWidth, m) +
                graphics.line(barXPosition, m) +
                graphics.line(barXPosition, y1 + strokeWidth / 2),
              graphics.move(barXPosition, m) +
                graphics.line(barXPosition + barWidth, m) +
                graphics.line(barXPosition + barWidth, y2) +
                graphics.line(barXPosition + barWidth / 2, y2) +
                graphics.line(barXPosition + barWidth / 2, l2) +
                graphics.line(barXPosition + barWidth - barWidth / 4, l2) +
                graphics.line(barXPosition + barWidth / 4, l2) +
                graphics.line(barXPosition + barWidth / 2, l2) +
                graphics.line(barXPosition + barWidth / 2, y2) +
                graphics.line(barXPosition, y2) +
                graphics.line(barXPosition, m) +
                'z',
            ];
          } else {
            // candlestick
            pathTo = [
              graphics.move(barXPosition, y2) +
                graphics.line(barXPosition + barWidth / 2, y2) +
                graphics.line(barXPosition + barWidth / 2, l1) +
                graphics.line(barXPosition + barWidth / 2, y2) +
                graphics.line(barXPosition + barWidth, y2) +
                graphics.line(barXPosition + barWidth, y1) +
                graphics.line(barXPosition + barWidth / 2, y1) +
                graphics.line(barXPosition + barWidth / 2, l2) +
                graphics.line(barXPosition + barWidth / 2, y1) +
                graphics.line(barXPosition, y1) +
                graphics.line(barXPosition, y2 - strokeWidth / 2),
            ];
          }

          pathFrom = pathFrom + graphics.move(barXPosition, y1);

          if (!w.globals.isXNumeric) {
            x = x + xDivision;
          }

          return {
            pathTo: pathTo,
            pathFrom: pathFrom,
            x: x,
            y: y2,
            barXPosition: barXPosition,
            color: this.isBoxPlot ? color : isPositive ? [colorPos] : [colorNeg],
          };
        },
      },
      {
        key: 'drawHorizontalBoxPaths',
        value: function drawHorizontalBoxPaths(_ref2) {
          var indexes = _ref2.indexes;
          _ref2.x;
          var y = _ref2.y,
            yDivision = _ref2.yDivision,
            barHeight = _ref2.barHeight,
            zeroW = _ref2.zeroW,
            strokeWidth = _ref2.strokeWidth;
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var i = indexes.i;
          var j = indexes.j;
          var color = this.boxOptions.colors.lower;

          if (this.isBoxPlot) {
            color = [this.boxOptions.colors.lower, this.boxOptions.colors.upper];
          }

          var yRatio = this.invertedYRatio;
          var realIndex = indexes.realIndex;
          var ohlc = this.getOHLCValue(realIndex, j);
          var l1 = zeroW;
          var l2 = zeroW;
          var x1 = Math.min(ohlc.o, ohlc.c);
          var x2 = Math.max(ohlc.o, ohlc.c);
          var m = ohlc.m;

          if (w.globals.isXNumeric) {
            y =
              (w.globals.seriesX[realIndex][j] - w.globals.minX) / this.invertedXRatio -
              barHeight / 2;
          }

          var barYPosition = y + barHeight * this.visibleI;

          if (typeof this.series[i][j] === 'undefined' || this.series[i][j] === null) {
            x1 = zeroW;
            x2 = zeroW;
          } else {
            x1 = zeroW + x1 / yRatio;
            x2 = zeroW + x2 / yRatio;
            l1 = zeroW + ohlc.h / yRatio;
            l2 = zeroW + ohlc.l / yRatio;
            m = zeroW + ohlc.m / yRatio;
          }

          var pathTo = graphics.move(zeroW, barYPosition);
          var pathFrom = graphics.move(x1, barYPosition + barHeight / 2);

          if (w.globals.previousPaths.length > 0) {
            pathFrom = this.getPreviousPath(realIndex, j, true);
          }

          pathTo = [
            graphics.move(x1, barYPosition) +
              graphics.line(x1, barYPosition + barHeight / 2) +
              graphics.line(l1, barYPosition + barHeight / 2) +
              graphics.line(l1, barYPosition + barHeight / 2 - barHeight / 4) +
              graphics.line(l1, barYPosition + barHeight / 2 + barHeight / 4) +
              graphics.line(l1, barYPosition + barHeight / 2) +
              graphics.line(x1, barYPosition + barHeight / 2) +
              graphics.line(x1, barYPosition + barHeight) +
              graphics.line(m, barYPosition + barHeight) +
              graphics.line(m, barYPosition) +
              graphics.line(x1 + strokeWidth / 2, barYPosition),
            graphics.move(m, barYPosition) +
              graphics.line(m, barYPosition + barHeight) +
              graphics.line(x2, barYPosition + barHeight) +
              graphics.line(x2, barYPosition + barHeight / 2) +
              graphics.line(l2, barYPosition + barHeight / 2) +
              graphics.line(l2, barYPosition + barHeight - barHeight / 4) +
              graphics.line(l2, barYPosition + barHeight / 4) +
              graphics.line(l2, barYPosition + barHeight / 2) +
              graphics.line(x2, barYPosition + barHeight / 2) +
              graphics.line(x2, barYPosition) +
              graphics.line(m, barYPosition) +
              'z',
          ];
          pathFrom = pathFrom + graphics.move(x1, barYPosition);

          if (!w.globals.isXNumeric) {
            y = y + yDivision;
          }

          return {
            pathTo: pathTo,
            pathFrom: pathFrom,
            x: x2,
            y: y,
            barYPosition: barYPosition,
            color: color,
          };
        },
      },
      {
        key: 'getOHLCValue',
        value: function getOHLCValue(i, j) {
          var w = this.w;
          return {
            o: this.isBoxPlot ? w.globals.seriesCandleH[i][j] : w.globals.seriesCandleO[i][j],
            h: this.isBoxPlot ? w.globals.seriesCandleO[i][j] : w.globals.seriesCandleH[i][j],
            m: w.globals.seriesCandleM[i][j],
            l: this.isBoxPlot ? w.globals.seriesCandleC[i][j] : w.globals.seriesCandleL[i][j],
            c: this.isBoxPlot ? w.globals.seriesCandleL[i][j] : w.globals.seriesCandleC[i][j],
          };
        },
      },
    ]);

    return BoxCandleStick;
  })(Bar);

  var TreemapHelpers = /*#__PURE__*/ (function () {
    function TreemapHelpers(ctx) {
      _classCallCheck(this, TreemapHelpers);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(TreemapHelpers, [
      {
        key: 'checkColorRange',
        value: function checkColorRange() {
          var w = this.w;
          var negRange = false;
          var chartOpts = w.config.plotOptions[w.config.chart.type];

          if (chartOpts.colorScale.ranges.length > 0) {
            chartOpts.colorScale.ranges.map(function (range, index) {
              if (range.from <= 0) {
                negRange = true;
              }
            });
          }

          return negRange;
        },
      },
      {
        key: 'getShadeColor',
        value: function getShadeColor(chartType, i, j, negRange) {
          var w = this.w;
          var colorShadePercent = 1;
          var shadeIntensity = w.config.plotOptions[chartType].shadeIntensity;
          var colorProps = this.determineColor(chartType, i, j);

          if (w.globals.hasNegs || negRange) {
            if (w.config.plotOptions[chartType].reverseNegativeShade) {
              if (colorProps.percent < 0) {
                colorShadePercent = (colorProps.percent / 100) * (shadeIntensity * 1.25);
              } else {
                colorShadePercent = (1 - colorProps.percent / 100) * (shadeIntensity * 1.25);
              }
            } else {
              if (colorProps.percent <= 0) {
                colorShadePercent = 1 - (1 + colorProps.percent / 100) * shadeIntensity;
              } else {
                colorShadePercent = (1 - colorProps.percent / 100) * shadeIntensity;
              }
            }
          } else {
            colorShadePercent = 1 - colorProps.percent / 100;

            if (chartType === 'treemap') {
              colorShadePercent = (1 - colorProps.percent / 100) * (shadeIntensity * 1.25);
            }
          }

          var color = colorProps.color;
          var utils = new Utils$1();

          if (w.config.plotOptions[chartType].enableShades) {
            if (this.w.config.theme.mode === 'dark') {
              color = Utils$1.hexToRgba(
                utils.shadeColor(colorShadePercent * -1, colorProps.color),
                w.config.fill.opacity
              );
            } else {
              color = Utils$1.hexToRgba(
                utils.shadeColor(colorShadePercent, colorProps.color),
                w.config.fill.opacity
              );
            }
          }

          return {
            color: color,
            colorProps: colorProps,
          };
        },
      },
      {
        key: 'determineColor',
        value: function determineColor(chartType, i, j) {
          var w = this.w;
          var val = w.globals.series[i][j];
          var chartOpts = w.config.plotOptions[chartType];
          var seriesNumber = chartOpts.colorScale.inverse ? j : i;
          var isDistributed = w.config.plotOptions[chartType].distributed;

          if (isDistributed) {
            seriesNumber = j;
          }

          var color = w.globals.colors[seriesNumber];
          var foreColor = null;
          var min = Math.min.apply(Math, _toConsumableArray(w.globals.series[i]));
          var max = Math.max.apply(Math, _toConsumableArray(w.globals.series[i]));

          if (!chartOpts.distributed && chartType === 'heatmap') {
            min = w.globals.minY;
            max = w.globals.maxY;
          }

          if (typeof chartOpts.colorScale.min !== 'undefined') {
            min =
              chartOpts.colorScale.min < w.globals.minY ? chartOpts.colorScale.min : w.globals.minY;
            max =
              chartOpts.colorScale.max > w.globals.maxY ? chartOpts.colorScale.max : w.globals.maxY;
          }

          var total = Math.abs(max) + Math.abs(min);
          var percent = (100 * val) / (total === 0 ? total - 0.000001 : total);

          if (chartOpts.colorScale.ranges.length > 0) {
            var colorRange = chartOpts.colorScale.ranges;
            colorRange.map(function (range, index) {
              if (val >= range.from && val <= range.to) {
                color = range.color;
                foreColor = range.foreColor ? range.foreColor : null;
                min = range.from;
                max = range.to;
                var rTotal = Math.abs(max) + Math.abs(min);
                percent = (100 * val) / (rTotal === 0 ? rTotal - 0.000001 : rTotal);
              }
            });
          }

          return {
            color: color,
            foreColor: foreColor,
            percent: percent,
          };
        },
      },
      {
        key: 'calculateDataLabels',
        value: function calculateDataLabels(_ref) {
          var text = _ref.text,
            x = _ref.x,
            y = _ref.y,
            i = _ref.i,
            j = _ref.j,
            colorProps = _ref.colorProps,
            fontSize = _ref.fontSize;
          var w = this.w;
          var dataLabelsConfig = w.config.dataLabels;
          var graphics = new Graphics(this.ctx);
          var dataLabels = new DataLabels(this.ctx);
          var elDataLabelsWrap = null;

          if (dataLabelsConfig.enabled) {
            elDataLabelsWrap = graphics.group({
              class: 'apexcharts-data-labels',
            });
            var offX = dataLabelsConfig.offsetX;
            var offY = dataLabelsConfig.offsetY;
            var dataLabelsX = x + offX;
            var dataLabelsY = y + parseFloat(dataLabelsConfig.style.fontSize) / 3 + offY;
            dataLabels.plotDataLabelsText({
              x: dataLabelsX,
              y: dataLabelsY,
              text: text,
              i: i,
              j: j,
              color: colorProps.foreColor,
              parent: elDataLabelsWrap,
              fontSize: fontSize,
              dataLabelsConfig: dataLabelsConfig,
            });
          }

          return elDataLabelsWrap;
        },
      },
      {
        key: 'addListeners',
        value: function addListeners(elRect) {
          var graphics = new Graphics(this.ctx);
          elRect.node.addEventListener('mouseenter', graphics.pathMouseEnter.bind(this, elRect));
          elRect.node.addEventListener('mouseleave', graphics.pathMouseLeave.bind(this, elRect));
          elRect.node.addEventListener('mousedown', graphics.pathMouseDown.bind(this, elRect));
        },
      },
    ]);

    return TreemapHelpers;
  })();

  /**
   * ApexCharts HeatMap Class.
   * @module HeatMap
   **/

  var HeatMap = /*#__PURE__*/ (function () {
    function HeatMap(ctx, xyRatios) {
      _classCallCheck(this, HeatMap);

      this.ctx = ctx;
      this.w = ctx.w;
      this.xRatio = xyRatios.xRatio;
      this.yRatio = xyRatios.yRatio;
      this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation;
      this.helpers = new TreemapHelpers(ctx);
      this.rectRadius = this.w.config.plotOptions.heatmap.radius;
      this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
    }

    _createClass(HeatMap, [
      {
        key: 'draw',
        value: function draw(series) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var ret = graphics.group({
            class: 'apexcharts-heatmap',
          });
          ret.attr('clip-path', 'url(#gridRectMask'.concat(w.globals.cuid, ')')); // width divided into equal parts

          var xDivision = w.globals.gridWidth / w.globals.dataPoints;
          var yDivision = w.globals.gridHeight / w.globals.series.length;
          var y1 = 0;
          var rev = false;
          this.negRange = this.helpers.checkColorRange();
          var heatSeries = series.slice();

          if (w.config.yaxis[0].reversed) {
            rev = true;
            heatSeries.reverse();
          }

          for (
            var i = rev ? 0 : heatSeries.length - 1;
            rev ? i < heatSeries.length : i >= 0;
            rev ? i++ : i--
          ) {
            // el to which series will be drawn
            var elSeries = graphics.group({
              class: 'apexcharts-series apexcharts-heatmap-series',
              seriesName: Utils$1.escapeString(w.globals.seriesNames[i]),
              rel: i + 1,
              'data:realIndex': i,
            });
            this.ctx.series.addCollapsedClassToSeries(elSeries, i);

            if (w.config.chart.dropShadow.enabled) {
              var shadow = w.config.chart.dropShadow;
              var filters = new Filters(this.ctx);
              filters.dropShadow(elSeries, shadow, i);
            }

            var x1 = 0;
            var shadeIntensity = w.config.plotOptions.heatmap.shadeIntensity;

            for (var j = 0; j < heatSeries[i].length; j++) {
              var heatColor = this.helpers.getShadeColor(w.config.chart.type, i, j, this.negRange);
              var color = heatColor.color;
              var heatColorProps = heatColor.colorProps;

              if (w.config.fill.type === 'image') {
                var fill = new Fill(this.ctx);
                color = fill.fillPath({
                  seriesNumber: i,
                  dataPointIndex: j,
                  opacity: w.globals.hasNegs
                    ? heatColorProps.percent < 0
                      ? 1 - (1 + heatColorProps.percent / 100)
                      : shadeIntensity + heatColorProps.percent / 100
                    : heatColorProps.percent / 100,
                  patternID: Utils$1.randomId(),
                  width: w.config.fill.image.width ? w.config.fill.image.width : xDivision,
                  height: w.config.fill.image.height ? w.config.fill.image.height : yDivision,
                });
              }

              var radius = this.rectRadius;
              var rect = graphics.drawRect(x1, y1, xDivision, yDivision, radius);
              rect.attr({
                cx: x1,
                cy: y1,
              });
              rect.node.classList.add('apexcharts-heatmap-rect');
              elSeries.add(rect);
              rect.attr({
                fill: color,
                i: i,
                index: i,
                j: j,
                val: heatSeries[i][j],
                'stroke-width': this.strokeWidth,
                stroke: w.config.plotOptions.heatmap.useFillColorAsStroke
                  ? color
                  : w.globals.stroke.colors[0],
                color: color,
              });
              this.helpers.addListeners(rect);

              if (w.config.chart.animations.enabled && !w.globals.dataChanged) {
                var speed = 1;

                if (!w.globals.resized) {
                  speed = w.config.chart.animations.speed;
                }

                this.animateHeatMap(rect, x1, y1, xDivision, yDivision, speed);
              }

              if (w.globals.dataChanged) {
                var _speed = 1;

                if (this.dynamicAnim.enabled && w.globals.shouldAnimate) {
                  _speed = this.dynamicAnim.speed;
                  var colorFrom =
                    w.globals.previousPaths[i] &&
                    w.globals.previousPaths[i][j] &&
                    w.globals.previousPaths[i][j].color;
                  if (!colorFrom) colorFrom = 'rgba(255, 255, 255, 0)';
                  this.animateHeatColor(
                    rect,
                    Utils$1.isColorHex(colorFrom) ? colorFrom : Utils$1.rgb2hex(colorFrom),
                    Utils$1.isColorHex(color) ? color : Utils$1.rgb2hex(color),
                    _speed
                  );
                }
              }

              var formatter = w.config.dataLabels.formatter;
              var formattedText = formatter(w.globals.series[i][j], {
                value: w.globals.series[i][j],
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              });
              var dataLabels = this.helpers.calculateDataLabels({
                text: formattedText,
                x: x1 + xDivision / 2,
                y: y1 + yDivision / 2,
                i: i,
                j: j,
                colorProps: heatColorProps,
                series: heatSeries,
              });

              if (dataLabels !== null) {
                elSeries.add(dataLabels);
              }

              x1 = x1 + xDivision;
            }

            y1 = y1 + yDivision;
            ret.add(elSeries);
          } // adjust yaxis labels for heatmap

          var yAxisScale = w.globals.yAxisScale[0].result.slice();

          if (w.config.yaxis[0].reversed) {
            yAxisScale.unshift('');
          } else {
            yAxisScale.push('');
          }

          w.globals.yAxisScale[0].result = yAxisScale;
          var divisor = w.globals.gridHeight / w.globals.series.length;
          w.config.yaxis[0].labels.offsetY = -(divisor / 2);
          return ret;
        },
      },
      {
        key: 'animateHeatMap',
        value: function animateHeatMap(el, x, y, width, height, speed) {
          var animations = new Animations(this.ctx);
          animations.animateRect(
            el,
            {
              x: x + width / 2,
              y: y + height / 2,
              width: 0,
              height: 0,
            },
            {
              x: x,
              y: y,
              width: width,
              height: height,
            },
            speed,
            function () {
              animations.animationCompleted(el);
            }
          );
        },
      },
      {
        key: 'animateHeatColor',
        value: function animateHeatColor(el, colorFrom, colorTo, speed) {
          el.attr({
            fill: colorFrom,
          })
            .animate(speed)
            .attr({
              fill: colorTo,
            });
        },
      },
    ]);

    return HeatMap;
  })();

  var CircularChartsHelpers = /*#__PURE__*/ (function () {
    function CircularChartsHelpers(ctx) {
      _classCallCheck(this, CircularChartsHelpers);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(CircularChartsHelpers, [
      {
        key: 'drawYAxisTexts',
        value: function drawYAxisTexts(x, y, i, text) {
          var w = this.w;
          var yaxisConfig = w.config.yaxis[0];
          var formatter = w.globals.yLabelFormatters[0];
          var graphics = new Graphics(this.ctx);
          var yaxisLabel = graphics.drawText({
            x: x + yaxisConfig.labels.offsetX,
            y: y + yaxisConfig.labels.offsetY,
            text: formatter(text, i),
            textAnchor: 'middle',
            fontSize: yaxisConfig.labels.style.fontSize,
            fontFamily: yaxisConfig.labels.style.fontFamily,
            foreColor: Array.isArray(yaxisConfig.labels.style.colors)
              ? yaxisConfig.labels.style.colors[i]
              : yaxisConfig.labels.style.colors,
          });
          return yaxisLabel;
        },
      },
    ]);

    return CircularChartsHelpers;
  })();

  /**
   * ApexCharts Pie Class for drawing Pie / Donut Charts.
   * @module Pie
   **/

  var Pie = /*#__PURE__*/ (function () {
    function Pie(ctx) {
      _classCallCheck(this, Pie);

      this.ctx = ctx;
      this.w = ctx.w;
      var w = this.w;
      this.chartType = this.w.config.chart.type;
      this.initialAnim = this.w.config.chart.animations.enabled;
      this.dynamicAnim =
        this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
      this.animBeginArr = [0];
      this.animDur = 0;
      this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels;
      this.lineColorArr =
        w.globals.stroke.colors !== undefined ? w.globals.stroke.colors : w.globals.colors;
      this.defaultSize = Math.min(w.globals.gridWidth, w.globals.gridHeight);
      this.centerY = this.defaultSize / 2;
      this.centerX = w.globals.gridWidth / 2;

      if (w.config.chart.type === 'radialBar') {
        this.fullAngle = 360;
      } else {
        this.fullAngle = Math.abs(
          w.config.plotOptions.pie.endAngle - w.config.plotOptions.pie.startAngle
        );
      }

      this.initialAngle = w.config.plotOptions.pie.startAngle % this.fullAngle;
      w.globals.radialSize =
        this.defaultSize / 2.05 -
        w.config.stroke.width -
        (!w.config.chart.sparkline.enabled ? w.config.chart.dropShadow.blur : 0);
      this.donutSize =
        (w.globals.radialSize * parseInt(w.config.plotOptions.pie.donut.size, 10)) / 100;
      this.maxY = 0;
      this.sliceLabels = [];
      this.sliceSizes = [];
      this.prevSectorAngleArr = []; // for dynamic animations
    }

    _createClass(Pie, [
      {
        key: 'draw',
        value: function draw(series) {
          var _this = this;

          var self = this;
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          this.ret = graphics.group({
            class: 'apexcharts-pie',
          });
          if (w.globals.noData) return this.ret;
          var total = 0;

          for (var k = 0; k < series.length; k++) {
            // CALCULATE THE TOTAL
            total += Utils$1.negToZero(series[k]);
          }

          var sectorAngleArr = []; // el to which series will be drawn

          var elSeries = graphics.group(); // prevent division by zero error if there is no data

          if (total === 0) {
            total = 0.00001;
          }

          series.forEach(function (m) {
            _this.maxY = Math.max(_this.maxY, m);
          }); // override maxY if user provided in config

          if (w.config.yaxis[0].max) {
            this.maxY = w.config.yaxis[0].max;
          }

          if (w.config.grid.position === 'back' && this.chartType === 'polarArea') {
            this.drawPolarElements(this.ret);
          }

          for (var i = 0; i < series.length; i++) {
            // CALCULATE THE ANGLES
            var angle = (this.fullAngle * Utils$1.negToZero(series[i])) / total;
            sectorAngleArr.push(angle);

            if (this.chartType === 'polarArea') {
              sectorAngleArr[i] = this.fullAngle / series.length;
              this.sliceSizes.push((w.globals.radialSize * series[i]) / this.maxY);
            } else {
              this.sliceSizes.push(w.globals.radialSize);
            }
          }

          if (w.globals.dataChanged) {
            var prevTotal = 0;

            for (var _k = 0; _k < w.globals.previousPaths.length; _k++) {
              // CALCULATE THE PREV TOTAL
              prevTotal += Utils$1.negToZero(w.globals.previousPaths[_k]);
            }

            var previousAngle;

            for (var _i = 0; _i < w.globals.previousPaths.length; _i++) {
              // CALCULATE THE PREVIOUS ANGLES
              previousAngle =
                (this.fullAngle * Utils$1.negToZero(w.globals.previousPaths[_i])) / prevTotal;
              this.prevSectorAngleArr.push(previousAngle);
            }
          } // on small chart size after few count of resizes browser window donutSize can be negative

          if (this.donutSize < 0) {
            this.donutSize = 0;
          }

          var scaleSize = w.config.plotOptions.pie.customScale;
          var halfW = w.globals.gridWidth / 2;
          var halfH = w.globals.gridHeight / 2;
          var translateX = halfW - (w.globals.gridWidth / 2) * scaleSize;
          var translateY = halfH - (w.globals.gridHeight / 2) * scaleSize;

          if (this.chartType === 'donut') {
            // draw the inner circle and add some text to it
            var circle = graphics.drawCircle(this.donutSize);
            circle.attr({
              cx: this.centerX,
              cy: this.centerY,
              fill: w.config.plotOptions.pie.donut.background
                ? w.config.plotOptions.pie.donut.background
                : 'transparent',
            });
            elSeries.add(circle);
          }

          var elG = self.drawArcs(sectorAngleArr, series); // add slice dataLabels at the end

          this.sliceLabels.forEach(function (s) {
            elG.add(s);
          });
          elSeries.attr({
            transform: 'translate('
              .concat(translateX, ', ')
              .concat(translateY, ') scale(')
              .concat(scaleSize, ')'),
          });
          elSeries.add(elG);
          this.ret.add(elSeries);

          if (this.donutDataLabels.show) {
            var dataLabels = this.renderInnerDataLabels(this.donutDataLabels, {
              hollowSize: this.donutSize,
              centerX: this.centerX,
              centerY: this.centerY,
              opacity: this.donutDataLabels.show,
              translateX: translateX,
              translateY: translateY,
            });
            this.ret.add(dataLabels);
          }

          if (w.config.grid.position === 'front' && this.chartType === 'polarArea') {
            this.drawPolarElements(this.ret);
          }

          return this.ret;
        }, // core function for drawing pie arcs
      },
      {
        key: 'drawArcs',
        value: function drawArcs(sectorAngleArr, series) {
          var w = this.w;
          var filters = new Filters(this.ctx);
          var graphics = new Graphics(this.ctx);
          var fill = new Fill(this.ctx);
          var g = graphics.group({
            class: 'apexcharts-slices',
          });
          var startAngle = this.initialAngle;
          var prevStartAngle = this.initialAngle;
          var endAngle = this.initialAngle;
          var prevEndAngle = this.initialAngle;
          this.strokeWidth = w.config.stroke.show ? w.config.stroke.width : 0;

          for (var i = 0; i < sectorAngleArr.length; i++) {
            var elPieArc = graphics.group({
              class: 'apexcharts-series apexcharts-pie-series',
              seriesName: Utils$1.escapeString(w.globals.seriesNames[i]),
              rel: i + 1,
              'data:realIndex': i,
            });
            g.add(elPieArc);
            startAngle = endAngle;
            prevStartAngle = prevEndAngle;
            endAngle = startAngle + sectorAngleArr[i];
            prevEndAngle = prevStartAngle + this.prevSectorAngleArr[i];
            var angle =
              endAngle < startAngle
                ? this.fullAngle + endAngle - startAngle
                : endAngle - startAngle;
            var pathFill = fill.fillPath({
              seriesNumber: i,
              size: this.sliceSizes[i],
              value: series[i],
            }); // additionally, pass size for gradient drawing in the fillPath function

            var path = this.getChangedPath(prevStartAngle, prevEndAngle);
            var elPath = graphics.drawPath({
              d: path,
              stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[i] : this.lineColorArr,
              strokeWidth: 0,
              fill: pathFill,
              fillOpacity: w.config.fill.opacity,
              classes: 'apexcharts-pie-area apexcharts-'
                .concat(this.chartType.toLowerCase(), '-slice-')
                .concat(i),
            });
            elPath.attr({
              index: 0,
              j: i,
            });
            filters.setSelectionFilter(elPath, 0, i);

            if (w.config.chart.dropShadow.enabled) {
              var shadow = w.config.chart.dropShadow;
              filters.dropShadow(elPath, shadow, i);
            }

            this.addListeners(elPath, this.donutDataLabels);
            Graphics.setAttrs(elPath.node, {
              'data:angle': angle,
              'data:startAngle': startAngle,
              'data:strokeWidth': this.strokeWidth,
              'data:value': series[i],
            });
            var labelPosition = {
              x: 0,
              y: 0,
            };

            if (this.chartType === 'pie' || this.chartType === 'polarArea') {
              labelPosition = Utils$1.polarToCartesian(
                this.centerX,
                this.centerY,
                w.globals.radialSize / 1.25 + w.config.plotOptions.pie.dataLabels.offset,
                (startAngle + angle / 2) % this.fullAngle
              );
            } else if (this.chartType === 'donut') {
              labelPosition = Utils$1.polarToCartesian(
                this.centerX,
                this.centerY,
                (w.globals.radialSize + this.donutSize) / 2 +
                  w.config.plotOptions.pie.dataLabels.offset,
                (startAngle + angle / 2) % this.fullAngle
              );
            }

            elPieArc.add(elPath); // Animation code starts

            var dur = 0;

            if (this.initialAnim && !w.globals.resized && !w.globals.dataChanged) {
              dur = (angle / this.fullAngle) * w.config.chart.animations.speed;
              if (dur === 0) dur = 1;
              this.animDur = dur + this.animDur;
              this.animBeginArr.push(this.animDur);
            } else {
              this.animBeginArr.push(0);
            }

            if (this.dynamicAnim && w.globals.dataChanged) {
              this.animatePaths(elPath, {
                size: this.sliceSizes[i],
                endAngle: endAngle,
                startAngle: startAngle,
                prevStartAngle: prevStartAngle,
                prevEndAngle: prevEndAngle,
                animateStartingPos: true,
                i: i,
                animBeginArr: this.animBeginArr,
                shouldSetPrevPaths: true,
                dur: w.config.chart.animations.dynamicAnimation.speed,
              });
            } else {
              this.animatePaths(elPath, {
                size: this.sliceSizes[i],
                endAngle: endAngle,
                startAngle: startAngle,
                i: i,
                totalItems: sectorAngleArr.length - 1,
                animBeginArr: this.animBeginArr,
                dur: dur,
              });
            } // animation code ends

            if (w.config.plotOptions.pie.expandOnClick && this.chartType !== 'polarArea') {
              elPath.click(this.pieClicked.bind(this, i));
            }

            if (
              typeof w.globals.selectedDataPoints[0] !== 'undefined' &&
              w.globals.selectedDataPoints[0].indexOf(i) > -1
            ) {
              this.pieClicked(i);
            }

            if (w.config.dataLabels.enabled) {
              var xPos = labelPosition.x;
              var yPos = labelPosition.y;
              var text = (100 * angle) / this.fullAngle + '%';

              if (
                angle !== 0 &&
                w.config.plotOptions.pie.dataLabels.minAngleToShowLabel < sectorAngleArr[i]
              ) {
                var formatter = w.config.dataLabels.formatter;

                if (formatter !== undefined) {
                  text = formatter(w.globals.seriesPercent[i][0], {
                    seriesIndex: i,
                    w: w,
                  });
                }

                var foreColor = w.globals.dataLabels.style.colors[i];
                var elPieLabelWrap = graphics.group({
                  class: 'apexcharts-datalabels',
                });
                var elPieLabel = graphics.drawText({
                  x: xPos,
                  y: yPos,
                  text: text,
                  textAnchor: 'middle',
                  fontSize: w.config.dataLabels.style.fontSize,
                  fontFamily: w.config.dataLabels.style.fontFamily,
                  fontWeight: w.config.dataLabels.style.fontWeight,
                  foreColor: foreColor,
                });
                elPieLabelWrap.add(elPieLabel);

                if (w.config.dataLabels.dropShadow.enabled) {
                  var textShadow = w.config.dataLabels.dropShadow;
                  filters.dropShadow(elPieLabel, textShadow);
                }

                elPieLabel.node.classList.add('apexcharts-pie-label');

                if (w.config.chart.animations.animate && w.globals.resized === false) {
                  elPieLabel.node.classList.add('apexcharts-pie-label-delay');
                  elPieLabel.node.style.animationDelay =
                    w.config.chart.animations.speed / 940 + 's';
                }

                this.sliceLabels.push(elPieLabelWrap);
              }
            }
          }

          return g;
        },
      },
      {
        key: 'addListeners',
        value: function addListeners(elPath, dataLabels) {
          var graphics = new Graphics(this.ctx); // append filters on mouseenter and mouseleave

          elPath.node.addEventListener('mouseenter', graphics.pathMouseEnter.bind(this, elPath));
          elPath.node.addEventListener('mouseleave', graphics.pathMouseLeave.bind(this, elPath));
          elPath.node.addEventListener(
            'mouseleave',
            this.revertDataLabelsInner.bind(this, elPath.node, dataLabels)
          );
          elPath.node.addEventListener('mousedown', graphics.pathMouseDown.bind(this, elPath));

          if (!this.donutDataLabels.total.showAlways) {
            elPath.node.addEventListener(
              'mouseenter',
              this.printDataLabelsInner.bind(this, elPath.node, dataLabels)
            );
            elPath.node.addEventListener(
              'mousedown',
              this.printDataLabelsInner.bind(this, elPath.node, dataLabels)
            );
          }
        }, // This function can be used for other circle charts too
      },
      {
        key: 'animatePaths',
        value: function animatePaths(el, opts) {
          var w = this.w;
          var me = this;
          var angle =
            opts.endAngle < opts.startAngle
              ? this.fullAngle + opts.endAngle - opts.startAngle
              : opts.endAngle - opts.startAngle;
          var prevAngle = angle;
          var fromStartAngle = opts.startAngle;
          var toStartAngle = opts.startAngle;

          if (opts.prevStartAngle !== undefined && opts.prevEndAngle !== undefined) {
            fromStartAngle = opts.prevEndAngle;
            prevAngle =
              opts.prevEndAngle < opts.prevStartAngle
                ? this.fullAngle + opts.prevEndAngle - opts.prevStartAngle
                : opts.prevEndAngle - opts.prevStartAngle;
          }

          if (opts.i === w.config.series.length - 1) {
            // some adjustments for the last overlapping paths
            if (angle + toStartAngle > this.fullAngle) {
              opts.endAngle = opts.endAngle - (angle + toStartAngle);
            } else if (angle + toStartAngle < this.fullAngle) {
              opts.endAngle = opts.endAngle + (this.fullAngle - (angle + toStartAngle));
            }
          }

          if (angle === this.fullAngle) angle = this.fullAngle - 0.01;
          me.animateArc(el, fromStartAngle, toStartAngle, angle, prevAngle, opts);
        },
      },
      {
        key: 'animateArc',
        value: function animateArc(el, fromStartAngle, toStartAngle, angle, prevAngle, opts) {
          var me = this;
          var w = this.w;
          var animations = new Animations(this.ctx);
          var size = opts.size;
          var path;

          if (isNaN(fromStartAngle) || isNaN(prevAngle)) {
            fromStartAngle = toStartAngle;
            prevAngle = angle;
            opts.dur = 0;
          }

          var currAngle = angle;
          var startAngle = toStartAngle;
          var fromAngle =
            fromStartAngle < toStartAngle
              ? this.fullAngle + fromStartAngle - toStartAngle
              : fromStartAngle - toStartAngle;

          if (w.globals.dataChanged && opts.shouldSetPrevPaths) {
            // to avoid flicker when updating, set prev path first and then animate from there
            if (opts.prevEndAngle) {
              path = me.getPiePath({
                me: me,
                startAngle: opts.prevStartAngle,
                angle:
                  opts.prevEndAngle < opts.prevStartAngle
                    ? this.fullAngle + opts.prevEndAngle - opts.prevStartAngle
                    : opts.prevEndAngle - opts.prevStartAngle,
                size: size,
              });
              el.attr({
                d: path,
              });
            }
          }

          if (opts.dur !== 0) {
            el.animate(opts.dur, w.globals.easing, opts.animBeginArr[opts.i])
              .afterAll(function () {
                if (
                  me.chartType === 'pie' ||
                  me.chartType === 'donut' ||
                  me.chartType === 'polarArea'
                ) {
                  this.animate(w.config.chart.animations.dynamicAnimation.speed).attr({
                    'stroke-width': me.strokeWidth,
                  });
                }

                if (opts.i === w.config.series.length - 1) {
                  animations.animationCompleted(el);
                }
              })
              .during(function (pos) {
                currAngle = fromAngle + (angle - fromAngle) * pos;

                if (opts.animateStartingPos) {
                  currAngle = prevAngle + (angle - prevAngle) * pos;
                  startAngle =
                    fromStartAngle -
                    prevAngle +
                    (toStartAngle - (fromStartAngle - prevAngle)) * pos;
                }

                path = me.getPiePath({
                  me: me,
                  startAngle: startAngle,
                  angle: currAngle,
                  size: size,
                });
                el.node.setAttribute('data:pathOrig', path);
                el.attr({
                  d: path,
                });
              });
          } else {
            path = me.getPiePath({
              me: me,
              startAngle: startAngle,
              angle: angle,
              size: size,
            });

            if (!opts.isTrack) {
              w.globals.animationEnded = true;
            }

            el.node.setAttribute('data:pathOrig', path);
            el.attr({
              d: path,
              'stroke-width': me.strokeWidth,
            });
          }
        },
      },
      {
        key: 'pieClicked',
        value: function pieClicked(i) {
          var w = this.w;
          var me = this;
          var path;
          var size = me.sliceSizes[i] + (w.config.plotOptions.pie.expandOnClick ? 4 : 0);
          var elPath = w.globals.dom.Paper.select(
            '.apexcharts-'.concat(me.chartType.toLowerCase(), '-slice-').concat(i)
          ).members[0];

          if (elPath.attr('data:pieClicked') === 'true') {
            elPath.attr({
              'data:pieClicked': 'false',
            });
            this.revertDataLabelsInner(elPath.node, this.donutDataLabels);
            var origPath = elPath.attr('data:pathOrig');
            elPath.attr({
              d: origPath,
            });
            return;
          } else {
            // reset all elems
            var allEls = w.globals.dom.baseEl.getElementsByClassName('apexcharts-pie-area');
            Array.prototype.forEach.call(allEls, function (pieSlice) {
              pieSlice.setAttribute('data:pieClicked', 'false');
              var origPath = pieSlice.getAttribute('data:pathOrig');
              pieSlice.setAttribute('d', origPath);
            });
            elPath.attr('data:pieClicked', 'true');
          }

          var startAngle = parseInt(elPath.attr('data:startAngle'), 10);
          var angle = parseInt(elPath.attr('data:angle'), 10);
          path = me.getPiePath({
            me: me,
            startAngle: startAngle,
            angle: angle,
            size: size,
          });
          if (angle === 360) return;
          elPath.plot(path);
        },
      },
      {
        key: 'getChangedPath',
        value: function getChangedPath(prevStartAngle, prevEndAngle) {
          var path = '';

          if (this.dynamicAnim && this.w.globals.dataChanged) {
            path = this.getPiePath({
              me: this,
              startAngle: prevStartAngle,
              angle: prevEndAngle - prevStartAngle,
              size: this.size,
            });
          }

          return path;
        },
      },
      {
        key: 'getPiePath',
        value: function getPiePath(_ref) {
          var me = _ref.me,
            startAngle = _ref.startAngle,
            angle = _ref.angle,
            size = _ref.size;
          var path;
          var startDeg = startAngle;
          var startRadians = (Math.PI * (startDeg - 90)) / 180;
          var endDeg = angle + startAngle; // prevent overlap

          if (
            Math.ceil(endDeg) >=
            this.fullAngle + (this.w.config.plotOptions.pie.startAngle % this.fullAngle)
          ) {
            endDeg =
              this.fullAngle + (this.w.config.plotOptions.pie.startAngle % this.fullAngle) - 0.01;
          }

          if (Math.ceil(endDeg) > this.fullAngle) endDeg -= this.fullAngle;
          var endRadians = (Math.PI * (endDeg - 90)) / 180;
          var x1 = me.centerX + size * Math.cos(startRadians);
          var y1 = me.centerY + size * Math.sin(startRadians);
          var x2 = me.centerX + size * Math.cos(endRadians);
          var y2 = me.centerY + size * Math.sin(endRadians);
          var startInner = Utils$1.polarToCartesian(me.centerX, me.centerY, me.donutSize, endDeg);
          var endInner = Utils$1.polarToCartesian(me.centerX, me.centerY, me.donutSize, startDeg);
          var largeArc = angle > 180 ? 1 : 0;
          var pathBeginning = ['M', x1, y1, 'A', size, size, 0, largeArc, 1, x2, y2];

          if (me.chartType === 'donut') {
            path = []
              .concat(pathBeginning, [
                'L',
                startInner.x,
                startInner.y,
                'A',
                me.donutSize,
                me.donutSize,
                0,
                largeArc,
                0,
                endInner.x,
                endInner.y,
                'L',
                x1,
                y1,
                'z',
              ])
              .join(' ');
          } else if (me.chartType === 'pie' || me.chartType === 'polarArea') {
            path = [].concat(pathBeginning, ['L', me.centerX, me.centerY, 'L', x1, y1]).join(' ');
          } else {
            path = [].concat(pathBeginning).join(' ');
          }

          return path;
        },
      },
      {
        key: 'drawPolarElements',
        value: function drawPolarElements(parent) {
          var w = this.w;
          var scale = new Range$1(this.ctx);
          var graphics = new Graphics(this.ctx);
          var helpers = new CircularChartsHelpers(this.ctx);
          var gCircles = graphics.group();
          var gYAxis = graphics.group();
          var yScale = scale.niceScale(
            0,
            Math.ceil(this.maxY),
            w.config.yaxis[0].tickAmount,
            0,
            true
          );
          var yTexts = yScale.result.reverse();
          var len = yScale.result.length;
          this.maxY = yScale.niceMax;
          var circleSize = w.globals.radialSize;
          var diff = circleSize / (len - 1);

          for (var i = 0; i < len - 1; i++) {
            var circle = graphics.drawCircle(circleSize);
            circle.attr({
              cx: this.centerX,
              cy: this.centerY,
              fill: 'none',
              'stroke-width': w.config.plotOptions.polarArea.rings.strokeWidth,
              stroke: w.config.plotOptions.polarArea.rings.strokeColor,
            });

            if (w.config.yaxis[0].show) {
              var yLabel = helpers.drawYAxisTexts(
                this.centerX,
                this.centerY -
                  circleSize +
                  parseInt(w.config.yaxis[0].labels.style.fontSize, 10) / 2,
                i,
                yTexts[i]
              );
              gYAxis.add(yLabel);
            }

            gCircles.add(circle);
            circleSize = circleSize - diff;
          }

          this.drawSpokes(parent);
          parent.add(gCircles);
          parent.add(gYAxis);
        },
      },
      {
        key: 'renderInnerDataLabels',
        value: function renderInnerDataLabels(dataLabelsConfig, opts) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var g = graphics.group({
            class: 'apexcharts-datalabels-group',
            transform: 'translate('
              .concat(opts.translateX ? opts.translateX : 0, ', ')
              .concat(opts.translateY ? opts.translateY : 0, ') scale(')
              .concat(w.config.plotOptions.pie.customScale, ')'),
          });
          var showTotal = dataLabelsConfig.total.show;
          g.node.style.opacity = opts.opacity;
          var x = opts.centerX;
          var y = opts.centerY;
          var labelColor, valueColor;

          if (dataLabelsConfig.name.color === undefined) {
            labelColor = w.globals.colors[0];
          } else {
            labelColor = dataLabelsConfig.name.color;
          }

          var labelFontSize = dataLabelsConfig.name.fontSize;
          var labelFontFamily = dataLabelsConfig.name.fontFamily;
          var labelFontWeight = dataLabelsConfig.name.fontWeight;

          if (dataLabelsConfig.value.color === undefined) {
            valueColor = w.config.chart.foreColor;
          } else {
            valueColor = dataLabelsConfig.value.color;
          }

          var lbFormatter = dataLabelsConfig.value.formatter;
          var val = '';
          var name = '';

          if (showTotal) {
            labelColor = dataLabelsConfig.total.color;
            labelFontSize = dataLabelsConfig.total.fontSize;
            labelFontFamily = dataLabelsConfig.total.fontFamily;
            labelFontWeight = dataLabelsConfig.total.fontWeight;
            name = dataLabelsConfig.total.label;
            val = dataLabelsConfig.total.formatter(w);
          } else {
            if (w.globals.series.length === 1) {
              val = lbFormatter(w.globals.series[0], w);
              name = w.globals.seriesNames[0];
            }
          }

          if (name) {
            name = dataLabelsConfig.name.formatter(name, dataLabelsConfig.total.show, w);
          }

          if (dataLabelsConfig.name.show) {
            var elLabel = graphics.drawText({
              x: x,
              y: y + parseFloat(dataLabelsConfig.name.offsetY),
              text: name,
              textAnchor: 'middle',
              foreColor: labelColor,
              fontSize: labelFontSize,
              fontWeight: labelFontWeight,
              fontFamily: labelFontFamily,
            });
            elLabel.node.classList.add('apexcharts-datalabel-label');
            g.add(elLabel);
          }

          if (dataLabelsConfig.value.show) {
            var valOffset = dataLabelsConfig.name.show
              ? parseFloat(dataLabelsConfig.value.offsetY) + 16
              : dataLabelsConfig.value.offsetY;
            var elValue = graphics.drawText({
              x: x,
              y: y + valOffset,
              text: val,
              textAnchor: 'middle',
              foreColor: valueColor,
              fontWeight: dataLabelsConfig.value.fontWeight,
              fontSize: dataLabelsConfig.value.fontSize,
              fontFamily: dataLabelsConfig.value.fontFamily,
            });
            elValue.node.classList.add('apexcharts-datalabel-value');
            g.add(elValue);
          } // for a multi-series circle chart, we need to show total value instead of first series labels

          return g;
        },
        /**
         *
         * @param {string} name - The name of the series
         * @param {string} val - The value of that series
         * @param {object} el - Optional el (indicates which series was hovered/clicked). If this param is not present, means we need to show total
         */
      },
      {
        key: 'printInnerLabels',
        value: function printInnerLabels(labelsConfig, name, val, el) {
          var w = this.w;
          var labelColor;

          if (el) {
            if (labelsConfig.name.color === undefined) {
              labelColor = w.globals.colors[parseInt(el.parentNode.getAttribute('rel'), 10) - 1];
            } else {
              labelColor = labelsConfig.name.color;
            }
          } else {
            if (w.globals.series.length > 1 && labelsConfig.total.show) {
              labelColor = labelsConfig.total.color;
            }
          }

          var elLabel = w.globals.dom.baseEl.querySelector('.apexcharts-datalabel-label');
          var elValue = w.globals.dom.baseEl.querySelector('.apexcharts-datalabel-value');
          var lbFormatter = labelsConfig.value.formatter;
          val = lbFormatter(val, w); // we need to show Total Val - so get the formatter of it

          if (!el && typeof labelsConfig.total.formatter === 'function') {
            val = labelsConfig.total.formatter(w);
          }

          var isTotal = name === labelsConfig.total.label;
          name = labelsConfig.name.formatter(name, isTotal, w);

          if (elLabel !== null) {
            elLabel.textContent = name;
          }

          if (elValue !== null) {
            elValue.textContent = val;
          }

          if (elLabel !== null) {
            elLabel.style.fill = labelColor;
          }
        },
      },
      {
        key: 'printDataLabelsInner',
        value: function printDataLabelsInner(el, dataLabelsConfig) {
          var w = this.w;
          var val = el.getAttribute('data:value');
          var name = w.globals.seriesNames[parseInt(el.parentNode.getAttribute('rel'), 10) - 1];

          if (w.globals.series.length > 1) {
            this.printInnerLabels(dataLabelsConfig, name, val, el);
          }

          var dataLabelsGroup = w.globals.dom.baseEl.querySelector('.apexcharts-datalabels-group');

          if (dataLabelsGroup !== null) {
            dataLabelsGroup.style.opacity = 1;
          }
        },
      },
      {
        key: 'drawSpokes',
        value: function drawSpokes(parent) {
          var _this2 = this;

          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var spokeConfig = w.config.plotOptions.polarArea.spokes;
          if (spokeConfig.strokeWidth === 0) return;
          var spokes = [];
          var angleDivision = 360 / w.globals.series.length;

          for (var i = 0; i < w.globals.series.length; i++) {
            spokes.push(
              Utils$1.polarToCartesian(
                this.centerX,
                this.centerY,
                w.globals.radialSize,
                w.config.plotOptions.pie.startAngle + angleDivision * i
              )
            );
          }

          spokes.forEach(function (p, i) {
            var line = graphics.drawLine(
              p.x,
              p.y,
              _this2.centerX,
              _this2.centerY,
              Array.isArray(spokeConfig.connectorColors)
                ? spokeConfig.connectorColors[i]
                : spokeConfig.connectorColors
            );
            parent.add(line);
          });
        },
      },
      {
        key: 'revertDataLabelsInner',
        value: function revertDataLabelsInner(elem, dataLabelsConfig, event) {
          var _this3 = this;

          var w = this.w;
          var dataLabelsGroup = w.globals.dom.baseEl.querySelector('.apexcharts-datalabels-group');
          var sliceOut = false;
          var slices = w.globals.dom.baseEl.getElementsByClassName('apexcharts-pie-area');

          var selectSlice = function selectSlice(_ref2) {
            var makeSliceOut = _ref2.makeSliceOut,
              printLabel = _ref2.printLabel;
            Array.prototype.forEach.call(slices, function (s) {
              if (s.getAttribute('data:pieClicked') === 'true') {
                if (makeSliceOut) {
                  sliceOut = true;
                }

                if (printLabel) {
                  _this3.printDataLabelsInner(s, dataLabelsConfig);
                }
              }
            });
          };

          selectSlice({
            makeSliceOut: true,
            printLabel: false,
          });

          if (dataLabelsConfig.total.show && w.globals.series.length > 1) {
            if (sliceOut && !dataLabelsConfig.total.showAlways) {
              selectSlice({
                makeSliceOut: false,
                printLabel: true,
              });
            } else {
              this.printInnerLabels(
                dataLabelsConfig,
                dataLabelsConfig.total.label,
                dataLabelsConfig.total.formatter(w)
              );
            }
          } else {
            selectSlice({
              makeSliceOut: false,
              printLabel: true,
            });

            if (!sliceOut) {
              if (w.globals.selectedDataPoints.length && w.globals.series.length > 1) {
                if (w.globals.selectedDataPoints[0].length > 0) {
                  var index = w.globals.selectedDataPoints[0];
                  var el = w.globals.dom.baseEl.querySelector(
                    '.apexcharts-'.concat(this.chartType.toLowerCase(), '-slice-').concat(index)
                  );
                  this.printDataLabelsInner(el, dataLabelsConfig);
                } else if (
                  dataLabelsGroup &&
                  w.globals.selectedDataPoints.length &&
                  w.globals.selectedDataPoints[0].length === 0
                ) {
                  dataLabelsGroup.style.opacity = 0;
                }
              } else {
                if (dataLabelsGroup && w.globals.series.length > 1) {
                  dataLabelsGroup.style.opacity = 0;
                }
              }
            }
          }
        },
      },
    ]);

    return Pie;
  })();

  /**
   * ApexCharts Radar Class for Spider/Radar Charts.
   * @module Radar
   **/

  var Radar = /*#__PURE__*/ (function () {
    function Radar(ctx) {
      _classCallCheck(this, Radar);

      this.ctx = ctx;
      this.w = ctx.w;
      this.chartType = this.w.config.chart.type;
      this.initialAnim = this.w.config.chart.animations.enabled;
      this.dynamicAnim =
        this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
      this.animDur = 0;
      var w = this.w;
      this.graphics = new Graphics(this.ctx);
      this.lineColorArr =
        w.globals.stroke.colors !== undefined ? w.globals.stroke.colors : w.globals.colors;
      this.defaultSize =
        w.globals.svgHeight < w.globals.svgWidth
          ? w.globals.gridHeight + w.globals.goldenPadding * 1.5
          : w.globals.gridWidth;
      this.isLog = w.config.yaxis[0].logarithmic;
      this.coreUtils = new CoreUtils(this.ctx);
      this.maxValue = this.isLog ? this.coreUtils.getLogVal(w.globals.maxY, 0) : w.globals.maxY;
      this.minValue = this.isLog
        ? this.coreUtils.getLogVal(this.w.globals.minY, 0)
        : w.globals.minY;
      this.polygons = w.config.plotOptions.radar.polygons;
      this.strokeWidth = w.config.stroke.show ? w.config.stroke.width : 0;
      this.size = this.defaultSize / 2.1 - this.strokeWidth - w.config.chart.dropShadow.blur;

      if (w.config.xaxis.labels.show) {
        this.size = this.size - w.globals.xAxisLabelsWidth / 1.75;
      }

      if (w.config.plotOptions.radar.size !== undefined) {
        this.size = w.config.plotOptions.radar.size;
      }

      this.dataRadiusOfPercent = [];
      this.dataRadius = [];
      this.angleArr = [];
      this.yaxisLabelsTextsPos = [];
    }

    _createClass(Radar, [
      {
        key: 'draw',
        value: function draw(series) {
          var _this = this;

          var w = this.w;
          var fill = new Fill(this.ctx);
          var allSeries = [];
          var dataLabels = new DataLabels(this.ctx);

          if (series.length) {
            this.dataPointsLen = series[w.globals.maxValsInArrayIndex].length;
          }

          this.disAngle = (Math.PI * 2) / this.dataPointsLen;
          var halfW = w.globals.gridWidth / 2;
          var halfH = w.globals.gridHeight / 2;
          var translateX = halfW + w.config.plotOptions.radar.offsetX;
          var translateY = halfH + w.config.plotOptions.radar.offsetY;
          var ret = this.graphics.group({
            class: 'apexcharts-radar-series apexcharts-plot-series',
            transform: 'translate('.concat(translateX || 0, ', ').concat(translateY || 0, ')'),
          });
          var dataPointsPos = [];
          var elPointsMain = null;
          var elDataPointsMain = null;
          this.yaxisLabels = this.graphics.group({
            class: 'apexcharts-yaxis',
          });
          series.forEach(function (s, i) {
            var longestSeries = s.length === w.globals.dataPoints; // el to which series will be drawn

            var elSeries = _this.graphics.group().attr({
              class: 'apexcharts-series',
              'data:longestSeries': longestSeries,
              seriesName: Utils$1.escapeString(w.globals.seriesNames[i]),
              rel: i + 1,
              'data:realIndex': i,
            });

            _this.dataRadiusOfPercent[i] = [];
            _this.dataRadius[i] = [];
            _this.angleArr[i] = [];
            s.forEach(function (dv, j) {
              var range = Math.abs(_this.maxValue - _this.minValue);
              dv = dv + Math.abs(_this.minValue);

              if (_this.isLog) {
                dv = _this.coreUtils.getLogVal(dv, 0);
              }

              _this.dataRadiusOfPercent[i][j] = dv / range;
              _this.dataRadius[i][j] = _this.dataRadiusOfPercent[i][j] * _this.size;
              _this.angleArr[i][j] = j * _this.disAngle;
            });
            dataPointsPos = _this.getDataPointsPos(_this.dataRadius[i], _this.angleArr[i]);

            var paths = _this.createPaths(dataPointsPos, {
              x: 0,
              y: 0,
            }); // points

            elPointsMain = _this.graphics.group({
              class: 'apexcharts-series-markers-wrap apexcharts-element-hidden',
            }); // datapoints

            elDataPointsMain = _this.graphics.group({
              class: 'apexcharts-datalabels',
              'data:realIndex': i,
            });
            w.globals.delayedElements.push({
              el: elPointsMain.node,
              index: i,
            });
            var defaultRenderedPathOptions = {
              i: i,
              realIndex: i,
              animationDelay: i,
              initialSpeed: w.config.chart.animations.speed,
              dataChangeSpeed: w.config.chart.animations.dynamicAnimation.speed,
              className: 'apexcharts-radar',
              shouldClipToGrid: false,
              bindEventsOnPaths: false,
              stroke: w.globals.stroke.colors[i],
              strokeLineCap: w.config.stroke.lineCap,
            };
            var pathFrom = null;

            if (w.globals.previousPaths.length > 0) {
              pathFrom = _this.getPreviousPath(i);
            }

            for (var p = 0; p < paths.linePathsTo.length; p++) {
              var renderedLinePath = _this.graphics.renderPaths(
                _objectSpread2(
                  _objectSpread2({}, defaultRenderedPathOptions),
                  {},
                  {
                    pathFrom: pathFrom === null ? paths.linePathsFrom[p] : pathFrom,
                    pathTo: paths.linePathsTo[p],
                    strokeWidth: Array.isArray(_this.strokeWidth)
                      ? _this.strokeWidth[i]
                      : _this.strokeWidth,
                    fill: 'none',
                    drawShadow: false,
                  }
                )
              );

              elSeries.add(renderedLinePath);
              var pathFill = fill.fillPath({
                seriesNumber: i,
              });

              var renderedAreaPath = _this.graphics.renderPaths(
                _objectSpread2(
                  _objectSpread2({}, defaultRenderedPathOptions),
                  {},
                  {
                    pathFrom: pathFrom === null ? paths.areaPathsFrom[p] : pathFrom,
                    pathTo: paths.areaPathsTo[p],
                    strokeWidth: 0,
                    fill: pathFill,
                    drawShadow: false,
                  }
                )
              );

              if (w.config.chart.dropShadow.enabled) {
                var filters = new Filters(_this.ctx);
                var shadow = w.config.chart.dropShadow;
                filters.dropShadow(
                  renderedAreaPath,
                  Object.assign({}, shadow, {
                    noUserSpaceOnUse: true,
                  }),
                  i
                );
              }

              elSeries.add(renderedAreaPath);
            }

            s.forEach(function (sj, j) {
              var markers = new Markers(_this.ctx);
              var opts = markers.getMarkerConfig({
                cssClass: 'apexcharts-marker',
                seriesIndex: i,
                dataPointIndex: j,
              });

              var point = _this.graphics.drawMarker(dataPointsPos[j].x, dataPointsPos[j].y, opts);

              point.attr('rel', j);
              point.attr('j', j);
              point.attr('index', i);
              point.node.setAttribute('default-marker-size', opts.pSize);

              var elPointsWrap = _this.graphics.group({
                class: 'apexcharts-series-markers',
              });

              if (elPointsWrap) {
                elPointsWrap.add(point);
              }

              elPointsMain.add(elPointsWrap);
              elSeries.add(elPointsMain);
              var dataLabelsConfig = w.config.dataLabels;

              if (dataLabelsConfig.enabled) {
                var text = dataLabelsConfig.formatter(w.globals.series[i][j], {
                  seriesIndex: i,
                  dataPointIndex: j,
                  w: w,
                });
                dataLabels.plotDataLabelsText({
                  x: dataPointsPos[j].x,
                  y: dataPointsPos[j].y,
                  text: text,
                  textAnchor: 'middle',
                  i: i,
                  j: i,
                  parent: elDataPointsMain,
                  offsetCorrection: false,
                  dataLabelsConfig: _objectSpread2({}, dataLabelsConfig),
                });
              }

              elSeries.add(elDataPointsMain);
            });
            allSeries.push(elSeries);
          });
          this.drawPolygons({
            parent: ret,
          });

          if (w.config.xaxis.labels.show) {
            var xaxisTexts = this.drawXAxisTexts();
            ret.add(xaxisTexts);
          }

          allSeries.forEach(function (elS) {
            ret.add(elS);
          });
          ret.add(this.yaxisLabels);
          return ret;
        },
      },
      {
        key: 'drawPolygons',
        value: function drawPolygons(opts) {
          var _this2 = this;

          var w = this.w;
          var parent = opts.parent;
          var helpers = new CircularChartsHelpers(this.ctx);
          var yaxisTexts = w.globals.yAxisScale[0].result.reverse();
          var layers = yaxisTexts.length;
          var radiusSizes = [];
          var layerDis = this.size / (layers - 1);

          for (var i = 0; i < layers; i++) {
            radiusSizes[i] = layerDis * i;
          }

          radiusSizes.reverse();
          var polygonStrings = [];
          var lines = [];
          radiusSizes.forEach(function (radiusSize, r) {
            var polygon = Utils$1.getPolygonPos(radiusSize, _this2.dataPointsLen);
            var string = '';
            polygon.forEach(function (p, i) {
              if (r === 0) {
                var line = _this2.graphics.drawLine(
                  p.x,
                  p.y,
                  0,
                  0,
                  Array.isArray(_this2.polygons.connectorColors)
                    ? _this2.polygons.connectorColors[i]
                    : _this2.polygons.connectorColors
                );

                lines.push(line);
              }

              if (i === 0) {
                _this2.yaxisLabelsTextsPos.push({
                  x: p.x,
                  y: p.y,
                });
              }

              string += p.x + ',' + p.y + ' ';
            });
            polygonStrings.push(string);
          });
          polygonStrings.forEach(function (p, i) {
            var strokeColors = _this2.polygons.strokeColors;
            var strokeWidth = _this2.polygons.strokeWidth;

            var polygon = _this2.graphics.drawPolygon(
              p,
              Array.isArray(strokeColors) ? strokeColors[i] : strokeColors,
              Array.isArray(strokeWidth) ? strokeWidth[i] : strokeWidth,
              w.globals.radarPolygons.fill.colors[i]
            );

            parent.add(polygon);
          });
          lines.forEach(function (l) {
            parent.add(l);
          });

          if (w.config.yaxis[0].show) {
            this.yaxisLabelsTextsPos.forEach(function (p, i) {
              var yText = helpers.drawYAxisTexts(p.x, p.y, i, yaxisTexts[i]);

              _this2.yaxisLabels.add(yText);
            });
          }
        },
      },
      {
        key: 'drawXAxisTexts',
        value: function drawXAxisTexts() {
          var _this3 = this;

          var w = this.w;
          var xaxisLabelsConfig = w.config.xaxis.labels;
          var elXAxisWrap = this.graphics.group({
            class: 'apexcharts-xaxis',
          });
          var polygonPos = Utils$1.getPolygonPos(this.size, this.dataPointsLen);
          w.globals.labels.forEach(function (label, i) {
            var formatter = w.config.xaxis.labels.formatter;
            var dataLabels = new DataLabels(_this3.ctx);

            if (polygonPos[i]) {
              var textPos = _this3.getTextPos(polygonPos[i], _this3.size);

              var text = formatter(label, {
                seriesIndex: -1,
                dataPointIndex: i,
                w: w,
              });
              dataLabels.plotDataLabelsText({
                x: textPos.newX,
                y: textPos.newY,
                text: text,
                textAnchor: textPos.textAnchor,
                i: i,
                j: i,
                parent: elXAxisWrap,
                color:
                  Array.isArray(xaxisLabelsConfig.style.colors) && xaxisLabelsConfig.style.colors[i]
                    ? xaxisLabelsConfig.style.colors[i]
                    : '#a8a8a8',
                dataLabelsConfig: _objectSpread2(
                  {
                    textAnchor: textPos.textAnchor,
                    dropShadow: {
                      enabled: false,
                    },
                  },
                  xaxisLabelsConfig
                ),
                offsetCorrection: false,
              });
            }
          });
          return elXAxisWrap;
        },
      },
      {
        key: 'createPaths',
        value: function createPaths(pos, origin) {
          var _this4 = this;

          var linePathsTo = [];
          var linePathsFrom = [];
          var areaPathsTo = [];
          var areaPathsFrom = [];

          if (pos.length) {
            linePathsFrom = [this.graphics.move(origin.x, origin.y)];
            areaPathsFrom = [this.graphics.move(origin.x, origin.y)];
            var linePathTo = this.graphics.move(pos[0].x, pos[0].y);
            var areaPathTo = this.graphics.move(pos[0].x, pos[0].y);
            pos.forEach(function (p, i) {
              linePathTo += _this4.graphics.line(p.x, p.y);
              areaPathTo += _this4.graphics.line(p.x, p.y);

              if (i === pos.length - 1) {
                linePathTo += 'Z';
                areaPathTo += 'Z';
              }
            });
            linePathsTo.push(linePathTo);
            areaPathsTo.push(areaPathTo);
          }

          return {
            linePathsFrom: linePathsFrom,
            linePathsTo: linePathsTo,
            areaPathsFrom: areaPathsFrom,
            areaPathsTo: areaPathsTo,
          };
        },
      },
      {
        key: 'getTextPos',
        value: function getTextPos(pos, polygonSize) {
          var limit = 10;
          var textAnchor = 'middle';
          var newX = pos.x;
          var newY = pos.y;

          if (Math.abs(pos.x) >= limit) {
            if (pos.x > 0) {
              textAnchor = 'start';
              newX += 10;
            } else if (pos.x < 0) {
              textAnchor = 'end';
              newX -= 10;
            }
          } else {
            textAnchor = 'middle';
          }

          if (Math.abs(pos.y) >= polygonSize - limit) {
            if (pos.y < 0) {
              newY -= 10;
            } else if (pos.y > 0) {
              newY += 10;
            }
          }

          return {
            textAnchor: textAnchor,
            newX: newX,
            newY: newY,
          };
        },
      },
      {
        key: 'getPreviousPath',
        value: function getPreviousPath(realIndex) {
          var w = this.w;
          var pathFrom = null;

          for (var pp = 0; pp < w.globals.previousPaths.length; pp++) {
            var gpp = w.globals.previousPaths[pp];

            if (gpp.paths.length > 0 && parseInt(gpp.realIndex, 10) === parseInt(realIndex, 10)) {
              if (typeof w.globals.previousPaths[pp].paths[0] !== 'undefined') {
                pathFrom = w.globals.previousPaths[pp].paths[0].d;
              }
            }
          }

          return pathFrom;
        },
      },
      {
        key: 'getDataPointsPos',
        value: function getDataPointsPos(dataRadiusArr, angleArr) {
          var dataPointsLen =
            arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dataPointsLen;
          dataRadiusArr = dataRadiusArr || [];
          angleArr = angleArr || [];
          var dataPointsPosArray = [];

          for (var j = 0; j < dataPointsLen; j++) {
            var curPointPos = {};
            curPointPos.x = dataRadiusArr[j] * Math.sin(angleArr[j]);
            curPointPos.y = -dataRadiusArr[j] * Math.cos(angleArr[j]);
            dataPointsPosArray.push(curPointPos);
          }

          return dataPointsPosArray;
        },
      },
    ]);

    return Radar;
  })();

  /**
   * ApexCharts Radial Class for drawing Circle / Semi Circle Charts.
   * @module Radial
   **/

  var Radial = /*#__PURE__*/ (function (_Pie) {
    _inherits(Radial, _Pie);

    var _super = _createSuper(Radial);

    function Radial(ctx) {
      var _this;

      _classCallCheck(this, Radial);

      _this = _super.call(this, ctx);
      _this.ctx = ctx;
      _this.w = ctx.w;
      _this.animBeginArr = [0];
      _this.animDur = 0;
      var w = _this.w;
      _this.startAngle = w.config.plotOptions.radialBar.startAngle;
      _this.endAngle = w.config.plotOptions.radialBar.endAngle;
      _this.totalAngle = Math.abs(
        w.config.plotOptions.radialBar.endAngle - w.config.plotOptions.radialBar.startAngle
      );
      _this.trackStartAngle = w.config.plotOptions.radialBar.track.startAngle;
      _this.trackEndAngle = w.config.plotOptions.radialBar.track.endAngle;
      _this.donutDataLabels = _this.w.config.plotOptions.radialBar.dataLabels;
      _this.radialDataLabels = _this.donutDataLabels; // make a copy for easy reference

      if (!_this.trackStartAngle) _this.trackStartAngle = _this.startAngle;
      if (!_this.trackEndAngle) _this.trackEndAngle = _this.endAngle;
      if (_this.endAngle === 360) _this.endAngle = 359.99;
      _this.margin = parseInt(w.config.plotOptions.radialBar.track.margin, 10);
      return _this;
    }

    _createClass(Radial, [
      {
        key: 'draw',
        value: function draw(series) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var ret = graphics.group({
            class: 'apexcharts-radialbar',
          });
          if (w.globals.noData) return ret;
          var elSeries = graphics.group();
          var centerY = this.defaultSize / 2;
          var centerX = w.globals.gridWidth / 2;
          var size = this.defaultSize / 2.05;

          if (!w.config.chart.sparkline.enabled) {
            size = size - w.config.stroke.width - w.config.chart.dropShadow.blur;
          }

          var colorArr = w.globals.fill.colors;

          if (w.config.plotOptions.radialBar.track.show) {
            var elTracks = this.drawTracks({
              size: size,
              centerX: centerX,
              centerY: centerY,
              colorArr: colorArr,
              series: series,
            });
            elSeries.add(elTracks);
          }

          var elG = this.drawArcs({
            size: size,
            centerX: centerX,
            centerY: centerY,
            colorArr: colorArr,
            series: series,
          });
          var totalAngle = 360;

          if (w.config.plotOptions.radialBar.startAngle < 0) {
            totalAngle = this.totalAngle;
          }

          var angleRatio = (360 - totalAngle) / 360;
          w.globals.radialSize = size - size * angleRatio;

          if (this.radialDataLabels.value.show) {
            var offset = Math.max(
              this.radialDataLabels.value.offsetY,
              this.radialDataLabels.name.offsetY
            );
            w.globals.radialSize += offset * angleRatio;
          }

          elSeries.add(elG.g);

          if (w.config.plotOptions.radialBar.hollow.position === 'front') {
            elG.g.add(elG.elHollow);

            if (elG.dataLabels) {
              elG.g.add(elG.dataLabels);
            }
          }

          ret.add(elSeries);
          return ret;
        },
      },
      {
        key: 'drawTracks',
        value: function drawTracks(opts) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var g = graphics.group({
            class: 'apexcharts-tracks',
          });
          var filters = new Filters(this.ctx);
          var fill = new Fill(this.ctx);
          var strokeWidth = this.getStrokeWidth(opts);
          opts.size = opts.size - strokeWidth / 2;

          for (var i = 0; i < opts.series.length; i++) {
            var elRadialBarTrack = graphics.group({
              class: 'apexcharts-radialbar-track apexcharts-track',
            });
            g.add(elRadialBarTrack);
            elRadialBarTrack.attr({
              rel: i + 1,
            });
            opts.size = opts.size - strokeWidth - this.margin;
            var trackConfig = w.config.plotOptions.radialBar.track;
            var pathFill = fill.fillPath({
              seriesNumber: 0,
              size: opts.size,
              fillColors: Array.isArray(trackConfig.background)
                ? trackConfig.background[i]
                : trackConfig.background,
              solid: true,
            });
            var startAngle = this.trackStartAngle;
            var endAngle = this.trackEndAngle;
            if (Math.abs(endAngle) + Math.abs(startAngle) >= 360)
              endAngle = 360 - Math.abs(this.startAngle) - 0.1;
            var elPath = graphics.drawPath({
              d: '',
              stroke: pathFill,
              strokeWidth: (strokeWidth * parseInt(trackConfig.strokeWidth, 10)) / 100,
              fill: 'none',
              strokeOpacity: trackConfig.opacity,
              classes: 'apexcharts-radialbar-area',
            });

            if (trackConfig.dropShadow.enabled) {
              var shadow = trackConfig.dropShadow;
              filters.dropShadow(elPath, shadow);
            }

            elRadialBarTrack.add(elPath);
            elPath.attr('id', 'apexcharts-radialbarTrack-' + i);
            this.animatePaths(elPath, {
              centerX: opts.centerX,
              centerY: opts.centerY,
              endAngle: endAngle,
              startAngle: startAngle,
              size: opts.size,
              i: i,
              totalItems: 2,
              animBeginArr: 0,
              dur: 0,
              isTrack: true,
              easing: w.globals.easing,
            });
          }

          return g;
        },
      },
      {
        key: 'drawArcs',
        value: function drawArcs(opts) {
          var w = this.w; // size, donutSize, centerX, centerY, colorArr, lineColorArr, sectorAngleArr, series

          var graphics = new Graphics(this.ctx);
          var fill = new Fill(this.ctx);
          var filters = new Filters(this.ctx);
          var g = graphics.group();
          var strokeWidth = this.getStrokeWidth(opts);
          opts.size = opts.size - strokeWidth / 2;
          var hollowFillID = w.config.plotOptions.radialBar.hollow.background;
          var hollowSize =
            opts.size -
            strokeWidth * opts.series.length -
            this.margin * opts.series.length -
            (strokeWidth * parseInt(w.config.plotOptions.radialBar.track.strokeWidth, 10)) /
              100 /
              2;
          var hollowRadius = hollowSize - w.config.plotOptions.radialBar.hollow.margin;

          if (w.config.plotOptions.radialBar.hollow.image !== undefined) {
            hollowFillID = this.drawHollowImage(opts, g, hollowSize, hollowFillID);
          }

          var elHollow = this.drawHollow({
            size: hollowRadius,
            centerX: opts.centerX,
            centerY: opts.centerY,
            fill: hollowFillID ? hollowFillID : 'transparent',
          });

          if (w.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
            var shadow = w.config.plotOptions.radialBar.hollow.dropShadow;
            filters.dropShadow(elHollow, shadow);
          }

          var shown = 1;

          if (!this.radialDataLabels.total.show && w.globals.series.length > 1) {
            shown = 0;
          }

          var dataLabels = null;

          if (this.radialDataLabels.show) {
            dataLabels = this.renderInnerDataLabels(this.radialDataLabels, {
              hollowSize: hollowSize,
              centerX: opts.centerX,
              centerY: opts.centerY,
              opacity: shown,
            });
          }

          if (w.config.plotOptions.radialBar.hollow.position === 'back') {
            g.add(elHollow);

            if (dataLabels) {
              g.add(dataLabels);
            }
          }

          var reverseLoop = false;

          if (w.config.plotOptions.radialBar.inverseOrder) {
            reverseLoop = true;
          }

          for (
            var i = reverseLoop ? opts.series.length - 1 : 0;
            reverseLoop ? i >= 0 : i < opts.series.length;
            reverseLoop ? i-- : i++
          ) {
            var elRadialBarArc = graphics.group({
              class: 'apexcharts-series apexcharts-radial-series',
              seriesName: Utils$1.escapeString(w.globals.seriesNames[i]),
            });
            g.add(elRadialBarArc);
            elRadialBarArc.attr({
              rel: i + 1,
              'data:realIndex': i,
            });
            this.ctx.series.addCollapsedClassToSeries(elRadialBarArc, i);
            opts.size = opts.size - strokeWidth - this.margin;
            var pathFill = fill.fillPath({
              seriesNumber: i,
              size: opts.size,
              value: opts.series[i],
            });
            var startAngle = this.startAngle;
            var prevStartAngle = void 0; // if data exceeds 100, make it 100

            var dataValue = Utils$1.negToZero(opts.series[i] > 100 ? 100 : opts.series[i]) / 100;
            var endAngle = Math.round(this.totalAngle * dataValue) + this.startAngle;
            var prevEndAngle = void 0;

            if (w.globals.dataChanged) {
              prevStartAngle = this.startAngle;
              prevEndAngle =
                Math.round(
                  (this.totalAngle * Utils$1.negToZero(w.globals.previousPaths[i])) / 100
                ) + prevStartAngle;
            }

            var currFullAngle = Math.abs(endAngle) + Math.abs(startAngle);

            if (currFullAngle >= 360) {
              endAngle = endAngle - 0.01;
            }

            var prevFullAngle = Math.abs(prevEndAngle) + Math.abs(prevStartAngle);

            if (prevFullAngle >= 360) {
              prevEndAngle = prevEndAngle - 0.01;
            }

            var angle = endAngle - startAngle;
            var dashArray = Array.isArray(w.config.stroke.dashArray)
              ? w.config.stroke.dashArray[i]
              : w.config.stroke.dashArray;
            var elPath = graphics.drawPath({
              d: '',
              stroke: pathFill,
              strokeWidth: strokeWidth,
              fill: 'none',
              fillOpacity: w.config.fill.opacity,
              classes: 'apexcharts-radialbar-area apexcharts-radialbar-slice-' + i,
              strokeDashArray: dashArray,
            });
            Graphics.setAttrs(elPath.node, {
              'data:angle': angle,
              'data:value': opts.series[i],
            });

            if (w.config.chart.dropShadow.enabled) {
              var _shadow = w.config.chart.dropShadow;
              filters.dropShadow(elPath, _shadow, i);
            }

            filters.setSelectionFilter(elPath, 0, i);
            this.addListeners(elPath, this.radialDataLabels);
            elRadialBarArc.add(elPath);
            elPath.attr({
              index: 0,
              j: i,
            });
            var dur = 0;

            if (this.initialAnim && !w.globals.resized && !w.globals.dataChanged) {
              dur = ((endAngle - startAngle) / 360) * w.config.chart.animations.speed;
              this.animDur = dur / (opts.series.length * 1.2) + this.animDur;
              this.animBeginArr.push(this.animDur);
            }

            if (w.globals.dataChanged) {
              dur =
                ((endAngle - startAngle) / 360) * w.config.chart.animations.dynamicAnimation.speed;
              this.animDur = dur / (opts.series.length * 1.2) + this.animDur;
              this.animBeginArr.push(this.animDur);
            }

            this.animatePaths(elPath, {
              centerX: opts.centerX,
              centerY: opts.centerY,
              endAngle: endAngle,
              startAngle: startAngle,
              prevEndAngle: prevEndAngle,
              prevStartAngle: prevStartAngle,
              size: opts.size,
              i: i,
              totalItems: 2,
              animBeginArr: this.animBeginArr,
              dur: dur,
              shouldSetPrevPaths: true,
              easing: w.globals.easing,
            });
          }

          return {
            g: g,
            elHollow: elHollow,
            dataLabels: dataLabels,
          };
        },
      },
      {
        key: 'drawHollow',
        value: function drawHollow(opts) {
          var graphics = new Graphics(this.ctx);
          var circle = graphics.drawCircle(opts.size * 2);
          circle.attr({
            class: 'apexcharts-radialbar-hollow',
            cx: opts.centerX,
            cy: opts.centerY,
            r: opts.size,
            fill: opts.fill,
          });
          return circle;
        },
      },
      {
        key: 'drawHollowImage',
        value: function drawHollowImage(opts, g, hollowSize, hollowFillID) {
          var w = this.w;
          var fill = new Fill(this.ctx);
          var randID = Utils$1.randomId();
          var hollowFillImg = w.config.plotOptions.radialBar.hollow.image;

          if (w.config.plotOptions.radialBar.hollow.imageClipped) {
            fill.clippedImgArea({
              width: hollowSize,
              height: hollowSize,
              image: hollowFillImg,
              patternID: 'pattern'.concat(w.globals.cuid).concat(randID),
            });
            hollowFillID = 'url(#pattern'.concat(w.globals.cuid).concat(randID, ')');
          } else {
            var imgWidth = w.config.plotOptions.radialBar.hollow.imageWidth;
            var imgHeight = w.config.plotOptions.radialBar.hollow.imageHeight;

            if (imgWidth === undefined && imgHeight === undefined) {
              var image = w.globals.dom.Paper.image(hollowFillImg).loaded(function (loader) {
                this.move(
                  opts.centerX -
                    loader.width / 2 +
                    w.config.plotOptions.radialBar.hollow.imageOffsetX,
                  opts.centerY -
                    loader.height / 2 +
                    w.config.plotOptions.radialBar.hollow.imageOffsetY
                );
              });
              g.add(image);
            } else {
              var _image = w.globals.dom.Paper.image(hollowFillImg).loaded(function (loader) {
                this.move(
                  opts.centerX - imgWidth / 2 + w.config.plotOptions.radialBar.hollow.imageOffsetX,
                  opts.centerY - imgHeight / 2 + w.config.plotOptions.radialBar.hollow.imageOffsetY
                );
                this.size(imgWidth, imgHeight);
              });

              g.add(_image);
            }
          }

          return hollowFillID;
        },
      },
      {
        key: 'getStrokeWidth',
        value: function getStrokeWidth(opts) {
          var w = this.w;
          return (
            (opts.size * (100 - parseInt(w.config.plotOptions.radialBar.hollow.size, 10))) /
              100 /
              (opts.series.length + 1) -
            this.margin
          );
        },
      },
    ]);

    return Radial;
  })(Pie);

  var Helpers = /*#__PURE__*/ (function () {
    function Helpers(lineCtx) {
      _classCallCheck(this, Helpers);

      this.w = lineCtx.w;
      this.lineCtx = lineCtx;
    }

    _createClass(Helpers, [
      {
        key: 'sameValueSeriesFix',
        value: function sameValueSeriesFix(i, series) {
          var w = this.w;

          if (
            w.config.chart.type === 'line' &&
            (w.config.fill.type === 'gradient' || w.config.fill.type[i] === 'gradient')
          ) {
            var coreUtils = new CoreUtils(this.lineCtx.ctx, w); // a small adjustment to allow gradient line to draw correctly for all same values

            /* #fix https://github.com/apexcharts/apexcharts.js/issues/358 */

            if (coreUtils.seriesHaveSameValues(i)) {
              var gSeries = series[i].slice();
              gSeries[gSeries.length - 1] = gSeries[gSeries.length - 1] + 0.000001;
              series[i] = gSeries;
            }
          }

          return series;
        },
      },
      {
        key: 'calculatePoints',
        value: function calculatePoints(_ref) {
          var series = _ref.series,
            realIndex = _ref.realIndex,
            x = _ref.x,
            y = _ref.y,
            i = _ref.i,
            j = _ref.j,
            prevY = _ref.prevY;
          var w = this.w;
          var ptX = [];
          var ptY = [];

          if (j === 0) {
            var xPT1st = this.lineCtx.categoryAxisCorrection + w.config.markers.offsetX; // the first point for line series
            // we need to check whether it's not a time series, because a time series may
            // start from the middle of the x axis

            if (w.globals.isXNumeric) {
              xPT1st =
                (w.globals.seriesX[realIndex][0] - w.globals.minX) / this.lineCtx.xRatio +
                w.config.markers.offsetX;
            } // push 2 points for the first data values

            ptX.push(xPT1st);
            ptY.push(Utils$1.isNumber(series[i][0]) ? prevY + w.config.markers.offsetY : null);
            ptX.push(x + w.config.markers.offsetX);
            ptY.push(Utils$1.isNumber(series[i][j + 1]) ? y + w.config.markers.offsetY : null);
          } else {
            ptX.push(x + w.config.markers.offsetX);
            ptY.push(Utils$1.isNumber(series[i][j + 1]) ? y + w.config.markers.offsetY : null);
          }

          var pointsPos = {
            x: ptX,
            y: ptY,
          };
          return pointsPos;
        },
      },
      {
        key: 'checkPreviousPaths',
        value: function checkPreviousPaths(_ref2) {
          var pathFromLine = _ref2.pathFromLine,
            pathFromArea = _ref2.pathFromArea,
            realIndex = _ref2.realIndex;
          var w = this.w;

          for (var pp = 0; pp < w.globals.previousPaths.length; pp++) {
            var gpp = w.globals.previousPaths[pp];

            if (
              (gpp.type === 'line' || gpp.type === 'area') &&
              gpp.paths.length > 0 &&
              parseInt(gpp.realIndex, 10) === parseInt(realIndex, 10)
            ) {
              if (gpp.type === 'line') {
                this.lineCtx.appendPathFrom = false;
                pathFromLine = w.globals.previousPaths[pp].paths[0].d;
              } else if (gpp.type === 'area') {
                this.lineCtx.appendPathFrom = false;
                pathFromArea = w.globals.previousPaths[pp].paths[0].d;

                if (w.config.stroke.show && w.globals.previousPaths[pp].paths[1]) {
                  pathFromLine = w.globals.previousPaths[pp].paths[1].d;
                }
              }
            }
          }

          return {
            pathFromLine: pathFromLine,
            pathFromArea: pathFromArea,
          };
        },
      },
      {
        key: 'determineFirstPrevY',
        value: function determineFirstPrevY(_ref3) {
          var i = _ref3.i,
            series = _ref3.series,
            prevY = _ref3.prevY,
            lineYPosition = _ref3.lineYPosition;
          var w = this.w;

          if (typeof series[i][0] !== 'undefined') {
            if (w.config.chart.stacked) {
              if (i > 0) {
                // 1st y value of previous series
                lineYPosition = this.lineCtx.prevSeriesY[i - 1][0];
              } else {
                // the first series will not have prevY values
                lineYPosition = this.lineCtx.zeroY;
              }
            } else {
              lineYPosition = this.lineCtx.zeroY;
            }

            prevY =
              lineYPosition -
              series[i][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] +
              (this.lineCtx.isReversed
                ? series[i][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex]
                : 0) *
                2;
          } else {
            // the first value in the current series is null
            if (w.config.chart.stacked && i > 0 && typeof series[i][0] === 'undefined') {
              // check for undefined value (undefined value will occur when we clear the series while user clicks on legend to hide serieses)
              for (var s = i - 1; s >= 0; s--) {
                // for loop to get to 1st previous value until we get it
                if (series[s][0] !== null && typeof series[s][0] !== 'undefined') {
                  lineYPosition = this.lineCtx.prevSeriesY[s][0];
                  prevY = lineYPosition;
                  break;
                }
              }
            }
          }

          return {
            prevY: prevY,
            lineYPosition: lineYPosition,
          };
        },
      },
    ]);

    return Helpers;
  })();

  /**
   * ApexCharts Line Class responsible for drawing Line / Area Charts.
   * This class is also responsible for generating values for Bubble/Scatter charts, so need to rename it to Axis Charts to avoid confusions
   * @module Line
   **/

  var Line = /*#__PURE__*/ (function () {
    function Line(ctx, xyRatios, isPointsChart) {
      _classCallCheck(this, Line);

      this.ctx = ctx;
      this.w = ctx.w;
      this.xyRatios = xyRatios;
      this.pointsChart =
        !(this.w.config.chart.type !== 'bubble' && this.w.config.chart.type !== 'scatter') ||
        isPointsChart;
      this.scatter = new Scatter(this.ctx);
      this.noNegatives = this.w.globals.minX === Number.MAX_VALUE;
      this.lineHelpers = new Helpers(this);
      this.markers = new Markers(this.ctx);
      this.prevSeriesY = [];
      this.categoryAxisCorrection = 0;
      this.yaxisIndex = 0;
    }

    _createClass(Line, [
      {
        key: 'draw',
        value: function draw(series, ptype, seriesIndex) {
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var type = w.globals.comboCharts ? ptype : w.config.chart.type;
          var ret = graphics.group({
            class: 'apexcharts-'.concat(type, '-series apexcharts-plot-series'),
          });
          var coreUtils = new CoreUtils(this.ctx, w);
          this.yRatio = this.xyRatios.yRatio;
          this.zRatio = this.xyRatios.zRatio;
          this.xRatio = this.xyRatios.xRatio;
          this.baseLineY = this.xyRatios.baseLineY;
          series = coreUtils.getLogSeries(series);
          this.yRatio = coreUtils.getLogYRatios(this.yRatio); // push all series in an array, so we can draw in reverse order (for stacked charts)

          var allSeries = [];

          for (var i = 0; i < series.length; i++) {
            series = this.lineHelpers.sameValueSeriesFix(i, series);
            var realIndex = w.globals.comboCharts ? seriesIndex[i] : i;

            this._initSerieVariables(series, i, realIndex);

            var yArrj = []; // hold y values of current iterating series

            var xArrj = []; // hold x values of current iterating series

            var x = w.globals.padHorizontal + this.categoryAxisCorrection;
            var y = 1;
            var linePaths = [];
            var areaPaths = [];
            this.ctx.series.addCollapsedClassToSeries(this.elSeries, realIndex);

            if (w.globals.isXNumeric && w.globals.seriesX.length > 0) {
              x = (w.globals.seriesX[realIndex][0] - w.globals.minX) / this.xRatio;
            }

            xArrj.push(x);
            var pX = x;
            var pY = void 0;
            var prevX = pX;
            var prevY = this.zeroY;
            var lineYPosition = 0; // the first value in the current series is not null or undefined

            var firstPrevY = this.lineHelpers.determineFirstPrevY({
              i: i,
              series: series,
              prevY: prevY,
              lineYPosition: lineYPosition,
            });
            prevY = firstPrevY.prevY;
            yArrj.push(prevY);
            pY = prevY;

            var pathsFrom = this._calculatePathsFrom({
              series: series,
              i: i,
              realIndex: realIndex,
              prevX: prevX,
              prevY: prevY,
            });

            var paths = this._iterateOverDataPoints({
              series: series,
              realIndex: realIndex,
              i: i,
              x: x,
              y: y,
              pX: pX,
              pY: pY,
              pathsFrom: pathsFrom,
              linePaths: linePaths,
              areaPaths: areaPaths,
              seriesIndex: seriesIndex,
              lineYPosition: lineYPosition,
              xArrj: xArrj,
              yArrj: yArrj,
            });

            this._handlePaths({
              type: type,
              realIndex: realIndex,
              i: i,
              paths: paths,
            });

            this.elSeries.add(this.elPointsMain);
            this.elSeries.add(this.elDataLabelsWrap);
            allSeries.push(this.elSeries);
          }

          if (w.config.chart.stacked) {
            for (var s = allSeries.length; s > 0; s--) {
              ret.add(allSeries[s - 1]);
            }
          } else {
            for (var _s = 0; _s < allSeries.length; _s++) {
              ret.add(allSeries[_s]);
            }
          }

          return ret;
        },
      },
      {
        key: '_initSerieVariables',
        value: function _initSerieVariables(series, i, realIndex) {
          var w = this.w;
          var graphics = new Graphics(this.ctx); // width divided into equal parts

          this.xDivision =
            w.globals.gridWidth /
            (w.globals.dataPoints - (w.config.xaxis.tickPlacement === 'on' ? 1 : 0));
          this.strokeWidth = Array.isArray(w.config.stroke.width)
            ? w.config.stroke.width[realIndex]
            : w.config.stroke.width;

          if (this.yRatio.length > 1) {
            this.yaxisIndex = realIndex;
          }

          this.isReversed =
            w.config.yaxis[this.yaxisIndex] && w.config.yaxis[this.yaxisIndex].reversed; // zeroY is the 0 value in y series which can be used in negative charts

          this.zeroY =
            w.globals.gridHeight -
            this.baseLineY[this.yaxisIndex] -
            (this.isReversed ? w.globals.gridHeight : 0) +
            (this.isReversed ? this.baseLineY[this.yaxisIndex] * 2 : 0);
          this.areaBottomY = this.zeroY;

          if (this.zeroY > w.globals.gridHeight || w.config.plotOptions.area.fillTo === 'end') {
            this.areaBottomY = w.globals.gridHeight;
          }

          this.categoryAxisCorrection = this.xDivision / 2; // el to which series will be drawn

          this.elSeries = graphics.group({
            class: 'apexcharts-series',
            seriesName: Utils$1.escapeString(w.globals.seriesNames[realIndex]),
          }); // points

          this.elPointsMain = graphics.group({
            class: 'apexcharts-series-markers-wrap',
            'data:realIndex': realIndex,
          }); // eldatalabels

          this.elDataLabelsWrap = graphics.group({
            class: 'apexcharts-datalabels',
            'data:realIndex': realIndex,
          });
          var longestSeries = series[i].length === w.globals.dataPoints;
          this.elSeries.attr({
            'data:longestSeries': longestSeries,
            rel: i + 1,
            'data:realIndex': realIndex,
          });
          this.appendPathFrom = true;
        },
      },
      {
        key: '_calculatePathsFrom',
        value: function _calculatePathsFrom(_ref) {
          var series = _ref.series,
            i = _ref.i,
            realIndex = _ref.realIndex,
            prevX = _ref.prevX,
            prevY = _ref.prevY;
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var linePath, areaPath, pathFromLine, pathFromArea;

          if (series[i][0] === null) {
            // when the first value itself is null, we need to move the pointer to a location where a null value is not found
            for (var s = 0; s < series[i].length; s++) {
              if (series[i][s] !== null) {
                prevX = this.xDivision * s;
                prevY = this.zeroY - series[i][s] / this.yRatio[this.yaxisIndex];
                linePath = graphics.move(prevX, prevY);
                areaPath = graphics.move(prevX, this.areaBottomY);
                break;
              }
            }
          } else {
            linePath = graphics.move(prevX, prevY);
            areaPath = graphics.move(prevX, this.areaBottomY) + graphics.line(prevX, prevY);
          }

          pathFromLine = graphics.move(-1, this.zeroY) + graphics.line(-1, this.zeroY);
          pathFromArea = graphics.move(-1, this.zeroY) + graphics.line(-1, this.zeroY);

          if (w.globals.previousPaths.length > 0) {
            var pathFrom = this.lineHelpers.checkPreviousPaths({
              pathFromLine: pathFromLine,
              pathFromArea: pathFromArea,
              realIndex: realIndex,
            });
            pathFromLine = pathFrom.pathFromLine;
            pathFromArea = pathFrom.pathFromArea;
          }

          return {
            prevX: prevX,
            prevY: prevY,
            linePath: linePath,
            areaPath: areaPath,
            pathFromLine: pathFromLine,
            pathFromArea: pathFromArea,
          };
        },
      },
      {
        key: '_handlePaths',
        value: function _handlePaths(_ref2) {
          var type = _ref2.type,
            realIndex = _ref2.realIndex,
            i = _ref2.i,
            paths = _ref2.paths;
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var fill = new Fill(this.ctx); // push all current y values array to main PrevY Array

          this.prevSeriesY.push(paths.yArrj); // push all x val arrays into main xArr

          w.globals.seriesXvalues[realIndex] = paths.xArrj;
          w.globals.seriesYvalues[realIndex] = paths.yArrj;
          var forecast = w.config.forecastDataPoints;

          if (forecast.count > 0) {
            var forecastCutoff =
              w.globals.seriesXvalues[realIndex][
                w.globals.seriesXvalues[realIndex].length - forecast.count - 1
              ];
            var elForecastMask = graphics.drawRect(
              forecastCutoff,
              0,
              w.globals.gridWidth,
              w.globals.gridHeight,
              0
            );
            w.globals.dom.elForecastMask.appendChild(elForecastMask.node);
            var elNonForecastMask = graphics.drawRect(
              0,
              0,
              forecastCutoff,
              w.globals.gridHeight,
              0
            );
            w.globals.dom.elNonForecastMask.appendChild(elNonForecastMask.node);
          } // these elements will be shown after area path animation completes

          if (!this.pointsChart) {
            w.globals.delayedElements.push({
              el: this.elPointsMain.node,
              index: realIndex,
            });
          }

          var defaultRenderedPathOptions = {
            i: i,
            realIndex: realIndex,
            animationDelay: i,
            initialSpeed: w.config.chart.animations.speed,
            dataChangeSpeed: w.config.chart.animations.dynamicAnimation.speed,
            className: 'apexcharts-'.concat(type),
          };

          if (type === 'area') {
            var pathFill = fill.fillPath({
              seriesNumber: realIndex,
            });

            for (var p = 0; p < paths.areaPaths.length; p++) {
              var renderedPath = graphics.renderPaths(
                _objectSpread2(
                  _objectSpread2({}, defaultRenderedPathOptions),
                  {},
                  {
                    pathFrom: paths.pathFromArea,
                    pathTo: paths.areaPaths[p],
                    stroke: 'none',
                    strokeWidth: 0,
                    strokeLineCap: null,
                    fill: pathFill,
                  }
                )
              );
              this.elSeries.add(renderedPath);
            }
          }

          if (w.config.stroke.show && !this.pointsChart) {
            var lineFill = null;

            if (type === 'line') {
              // fillable lines only for lineChart
              lineFill = fill.fillPath({
                seriesNumber: realIndex,
                i: i,
              });
            } else {
              lineFill = w.globals.stroke.colors[realIndex];
            }

            for (var _p = 0; _p < paths.linePaths.length; _p++) {
              var linePathCommonOpts = _objectSpread2(
                _objectSpread2({}, defaultRenderedPathOptions),
                {},
                {
                  pathFrom: paths.pathFromLine,
                  pathTo: paths.linePaths[_p],
                  stroke: lineFill,
                  strokeWidth: this.strokeWidth,
                  strokeLineCap: w.config.stroke.lineCap,
                  fill: 'none',
                }
              );

              var _renderedPath = graphics.renderPaths(linePathCommonOpts);

              this.elSeries.add(_renderedPath);

              if (forecast.count > 0) {
                var renderedForecastPath = graphics.renderPaths(linePathCommonOpts);
                renderedForecastPath.node.setAttribute('stroke-dasharray', forecast.dashArray);

                if (forecast.strokeWidth) {
                  renderedForecastPath.node.setAttribute('stroke-width', forecast.strokeWidth);
                }

                this.elSeries.add(renderedForecastPath);
                renderedForecastPath.attr(
                  'clip-path',
                  'url(#forecastMask'.concat(w.globals.cuid, ')')
                );

                _renderedPath.attr('clip-path', 'url(#nonForecastMask'.concat(w.globals.cuid, ')'));
              }
            }
          }
        },
      },
      {
        key: '_iterateOverDataPoints',
        value: function _iterateOverDataPoints(_ref3) {
          var series = _ref3.series,
            realIndex = _ref3.realIndex,
            i = _ref3.i,
            x = _ref3.x,
            y = _ref3.y,
            pX = _ref3.pX,
            pY = _ref3.pY,
            pathsFrom = _ref3.pathsFrom,
            linePaths = _ref3.linePaths,
            areaPaths = _ref3.areaPaths,
            seriesIndex = _ref3.seriesIndex,
            lineYPosition = _ref3.lineYPosition,
            xArrj = _ref3.xArrj,
            yArrj = _ref3.yArrj;
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var yRatio = this.yRatio;
          var prevY = pathsFrom.prevY,
            linePath = pathsFrom.linePath,
            areaPath = pathsFrom.areaPath,
            pathFromLine = pathsFrom.pathFromLine,
            pathFromArea = pathsFrom.pathFromArea;
          var minY = Utils$1.isNumber(w.globals.minYArr[realIndex])
            ? w.globals.minYArr[realIndex]
            : w.globals.minY;
          var iterations =
            w.globals.dataPoints > 1 ? w.globals.dataPoints - 1 : w.globals.dataPoints;

          for (var j = 0; j < iterations; j++) {
            var isNull = typeof series[i][j + 1] === 'undefined' || series[i][j + 1] === null;

            if (w.globals.isXNumeric) {
              var sX = w.globals.seriesX[realIndex][j + 1];

              if (typeof w.globals.seriesX[realIndex][j + 1] === 'undefined') {
                /* fix #374 */
                sX = w.globals.seriesX[realIndex][iterations - 1];
              }

              x = (sX - w.globals.minX) / this.xRatio;
            } else {
              x = x + this.xDivision;
            }

            if (w.config.chart.stacked) {
              if (i > 0 && w.globals.collapsedSeries.length < w.config.series.length - 1) {
                // a collapsed series in a stacked bar chart may provide wrong result for the next series, hence find the prevIndex of prev series which is not collapsed - fixes apexcharts.js#1372
                var prevIndex = function prevIndex(pi) {
                  var pii = pi;

                  for (var cpi = 0; cpi < w.globals.series.length; cpi++) {
                    if (w.globals.collapsedSeriesIndices.indexOf(pi) > -1) {
                      pii--;
                      break;
                    }
                  }

                  return pii >= 0 ? pii : 0;
                };

                lineYPosition = this.prevSeriesY[prevIndex(i - 1)][j + 1];
              } else {
                // the first series will not have prevY values
                lineYPosition = this.zeroY;
              }
            } else {
              lineYPosition = this.zeroY;
            }

            if (isNull) {
              y =
                lineYPosition -
                minY / yRatio[this.yaxisIndex] +
                (this.isReversed ? minY / yRatio[this.yaxisIndex] : 0) * 2;
            } else {
              y =
                lineYPosition -
                series[i][j + 1] / yRatio[this.yaxisIndex] +
                (this.isReversed ? series[i][j + 1] / yRatio[this.yaxisIndex] : 0) * 2;
            } // push current X

            xArrj.push(x); // push current Y that will be used as next series's bottom position

            yArrj.push(y);
            var pointsPos = this.lineHelpers.calculatePoints({
              series: series,
              x: x,
              y: y,
              realIndex: realIndex,
              i: i,
              j: j,
              prevY: prevY,
            });

            var calculatedPaths = this._createPaths({
              series: series,
              i: i,
              realIndex: realIndex,
              j: j,
              x: x,
              y: y,
              pX: pX,
              pY: pY,
              linePath: linePath,
              areaPath: areaPath,
              linePaths: linePaths,
              areaPaths: areaPaths,
              seriesIndex: seriesIndex,
            });

            areaPaths = calculatedPaths.areaPaths;
            linePaths = calculatedPaths.linePaths;
            pX = calculatedPaths.pX;
            pY = calculatedPaths.pY;
            areaPath = calculatedPaths.areaPath;
            linePath = calculatedPaths.linePath;

            if (this.appendPathFrom) {
              pathFromLine = pathFromLine + graphics.line(x, this.zeroY);
              pathFromArea = pathFromArea + graphics.line(x, this.zeroY);
            }

            this.handleNullDataPoints(series, pointsPos, i, j, realIndex);

            this._handleMarkersAndLabels({
              pointsPos: pointsPos,
              series: series,
              x: x,
              y: y,
              prevY: prevY,
              i: i,
              j: j,
              realIndex: realIndex,
            });
          }

          return {
            yArrj: yArrj,
            xArrj: xArrj,
            pathFromArea: pathFromArea,
            areaPaths: areaPaths,
            pathFromLine: pathFromLine,
            linePaths: linePaths,
          };
        },
      },
      {
        key: '_handleMarkersAndLabels',
        value: function _handleMarkersAndLabels(_ref4) {
          var pointsPos = _ref4.pointsPos;
          _ref4.series;
          _ref4.x;
          _ref4.y;
          _ref4.prevY;
          var i = _ref4.i,
            j = _ref4.j,
            realIndex = _ref4.realIndex;
          var w = this.w;
          var dataLabels = new DataLabels(this.ctx);

          if (!this.pointsChart) {
            if (w.globals.series[i].length > 1) {
              this.elPointsMain.node.classList.add('apexcharts-element-hidden');
            }

            var elPointsWrap = this.markers.plotChartMarkers(pointsPos, realIndex, j + 1);

            if (elPointsWrap !== null) {
              this.elPointsMain.add(elPointsWrap);
            }
          } else {
            // scatter / bubble chart points creation
            this.scatter.draw(this.elSeries, j, {
              realIndex: realIndex,
              pointsPos: pointsPos,
              zRatio: this.zRatio,
              elParent: this.elPointsMain,
            });
          }

          var drawnLabels = dataLabels.drawDataLabel(pointsPos, realIndex, j + 1, null);

          if (drawnLabels !== null) {
            this.elDataLabelsWrap.add(drawnLabels);
          }
        },
      },
      {
        key: '_createPaths',
        value: function _createPaths(_ref5) {
          var series = _ref5.series,
            i = _ref5.i,
            realIndex = _ref5.realIndex,
            j = _ref5.j,
            x = _ref5.x,
            y = _ref5.y,
            pX = _ref5.pX,
            pY = _ref5.pY,
            linePath = _ref5.linePath,
            areaPath = _ref5.areaPath,
            linePaths = _ref5.linePaths,
            areaPaths = _ref5.areaPaths,
            seriesIndex = _ref5.seriesIndex;
          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var curve = w.config.stroke.curve;
          var areaBottomY = this.areaBottomY;

          if (Array.isArray(w.config.stroke.curve)) {
            if (Array.isArray(seriesIndex)) {
              curve = w.config.stroke.curve[seriesIndex[i]];
            } else {
              curve = w.config.stroke.curve[i];
            }
          } // logic of smooth curve derived from chartist
          // CREDITS: https://gionkunz.github.io/chartist-js/

          if (curve === 'smooth') {
            var length = (x - pX) * 0.35;

            if (w.globals.hasNullValues) {
              if (series[i][j] !== null) {
                if (series[i][j + 1] !== null) {
                  linePath =
                    graphics.move(pX, pY) +
                    graphics.curve(pX + length, pY, x - length, y, x + 1, y);
                  areaPath =
                    graphics.move(pX + 1, pY) +
                    graphics.curve(pX + length, pY, x - length, y, x + 1, y) +
                    graphics.line(x, areaBottomY) +
                    graphics.line(pX, areaBottomY) +
                    'z';
                } else {
                  linePath = graphics.move(pX, pY);
                  areaPath = graphics.move(pX, pY) + 'z';
                }
              }

              linePaths.push(linePath);
              areaPaths.push(areaPath);
            } else {
              linePath = linePath + graphics.curve(pX + length, pY, x - length, y, x, y);
              areaPath = areaPath + graphics.curve(pX + length, pY, x - length, y, x, y);
            }

            pX = x;
            pY = y;

            if (j === series[i].length - 2) {
              // last loop, close path
              areaPath =
                areaPath + graphics.curve(pX, pY, x, y, x, areaBottomY) + graphics.move(x, y) + 'z';

              if (!w.globals.hasNullValues) {
                linePaths.push(linePath);
                areaPaths.push(areaPath);
              }
            }
          } else {
            if (series[i][j + 1] === null) {
              linePath = linePath + graphics.move(x, y);
              var numericOrCatX = w.globals.isXNumeric
                ? (w.globals.seriesX[realIndex][j] - w.globals.minX) / this.xRatio
                : x - this.xDivision;
              areaPath =
                areaPath + graphics.line(numericOrCatX, areaBottomY) + graphics.move(x, y) + 'z';
            }

            if (series[i][j] === null) {
              linePath = linePath + graphics.move(x, y);
              areaPath = areaPath + graphics.move(x, areaBottomY);
            }

            if (curve === 'stepline') {
              linePath = linePath + graphics.line(x, null, 'H') + graphics.line(null, y, 'V');
              areaPath = areaPath + graphics.line(x, null, 'H') + graphics.line(null, y, 'V');
            } else if (curve === 'straight') {
              linePath = linePath + graphics.line(x, y);
              areaPath = areaPath + graphics.line(x, y);
            }

            if (j === series[i].length - 2) {
              // last loop, close path
              areaPath = areaPath + graphics.line(x, areaBottomY) + graphics.move(x, y) + 'z';
              linePaths.push(linePath);
              areaPaths.push(areaPath);
            }
          }

          return {
            linePaths: linePaths,
            areaPaths: areaPaths,
            pX: pX,
            pY: pY,
            linePath: linePath,
            areaPath: areaPath,
          };
        },
      },
      {
        key: 'handleNullDataPoints',
        value: function handleNullDataPoints(series, pointsPos, i, j, realIndex) {
          var w = this.w;

          if (
            (series[i][j] === null && w.config.markers.showNullDataPoints) ||
            series[i].length === 1
          ) {
            // fixes apexcharts.js#1282, #1252
            var elPointsWrap = this.markers.plotChartMarkers(
              pointsPos,
              realIndex,
              j + 1,
              this.strokeWidth - w.config.markers.strokeWidth / 2,
              true
            );

            if (elPointsWrap !== null) {
              this.elPointsMain.add(elPointsWrap);
            }
          }
        },
      },
    ]);

    return Line;
  })();

  /*
   * treemap-squarify.js - open source implementation of squarified treemaps
   *
   * Treemap Squared 0.5 - Treemap Charting library
   *
   * https://github.com/imranghory/treemap-squared/
   *
   * Copyright (c) 2012 Imran Ghory (imranghory@gmail.com)
   * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
   *
   *
   * Implementation of the squarify treemap algorithm described in:
   *
   * Bruls, Mark; Huizing, Kees; van Wijk, Jarke J. (2000), "Squarified treemaps"
   * in de Leeuw, W.; van Liere, R., Data Visualization 2000:
   * Proc. Joint Eurographics and IEEE TCVG Symp. on Visualization, Springer-Verlag, pp. 33–42.
   *
   * Paper is available online at: http://www.win.tue.nl/~vanwijk/stm.pdf
   *
   * The code in this file is completeley decoupled from the drawing code so it should be trivial
   * to port it to any other vector drawing library. Given an array of datapoints this library returns
   * an array of cartesian coordinates that represent the rectangles that make up the treemap.
   *
   * The library also supports multidimensional data (nested treemaps) and performs normalization on the data.
   *
   * See the README file for more details.
   */
  window.TreemapSquared = {};

  (function () {
    window.TreemapSquared.generate = (function () {
      function Container(xoffset, yoffset, width, height) {
        this.xoffset = xoffset; // offset from the the top left hand corner

        this.yoffset = yoffset; // ditto

        this.height = height;
        this.width = width;

        this.shortestEdge = function () {
          return Math.min(this.height, this.width);
        }; // getCoordinates - for a row of boxes which we've placed
        //                  return an array of their cartesian coordinates

        this.getCoordinates = function (row) {
          var coordinates = [];
          var subxoffset = this.xoffset,
            subyoffset = this.yoffset; //our offset within the container

          var areawidth = sumArray(row) / this.height;
          var areaheight = sumArray(row) / this.width;
          var i;

          if (this.width >= this.height) {
            for (i = 0; i < row.length; i++) {
              coordinates.push([
                subxoffset,
                subyoffset,
                subxoffset + areawidth,
                subyoffset + row[i] / areawidth,
              ]);
              subyoffset = subyoffset + row[i] / areawidth;
            }
          } else {
            for (i = 0; i < row.length; i++) {
              coordinates.push([
                subxoffset,
                subyoffset,
                subxoffset + row[i] / areaheight,
                subyoffset + areaheight,
              ]);
              subxoffset = subxoffset + row[i] / areaheight;
            }
          }

          return coordinates;
        }; // cutArea - once we've placed some boxes into an row we then need to identify the remaining area,
        //           this function takes the area of the boxes we've placed and calculates the location and
        //           dimensions of the remaining space and returns a container box defined by the remaining area

        this.cutArea = function (area) {
          var newcontainer;

          if (this.width >= this.height) {
            var areawidth = area / this.height;
            var newwidth = this.width - areawidth;
            newcontainer = new Container(
              this.xoffset + areawidth,
              this.yoffset,
              newwidth,
              this.height
            );
          } else {
            var areaheight = area / this.width;
            var newheight = this.height - areaheight;
            newcontainer = new Container(
              this.xoffset,
              this.yoffset + areaheight,
              this.width,
              newheight
            );
          }

          return newcontainer;
        };
      } // normalize - the Bruls algorithm assumes we're passing in areas that nicely fit into our
      //             container box, this method takes our raw data and normalizes the data values into
      //             area values so that this assumption is valid.

      function normalize(data, area) {
        var normalizeddata = [];
        var sum = sumArray(data);
        var multiplier = area / sum;
        var i;

        for (i = 0; i < data.length; i++) {
          normalizeddata[i] = data[i] * multiplier;
        }

        return normalizeddata;
      } // treemapMultidimensional - takes multidimensional data (aka [[23,11],[11,32]] - nested array)
      //                           and recursively calls itself using treemapSingledimensional
      //                           to create a patchwork of treemaps and merge them

      function treemapMultidimensional(data, width, height, xoffset, yoffset) {
        xoffset = typeof xoffset === 'undefined' ? 0 : xoffset;
        yoffset = typeof yoffset === 'undefined' ? 0 : yoffset;
        var mergeddata = [];
        var mergedtreemap;
        var results = [];
        var i;

        if (isArray(data[0])) {
          // if we've got more dimensions of depth
          for (i = 0; i < data.length; i++) {
            mergeddata[i] = sumMultidimensionalArray(data[i]);
          }

          mergedtreemap = treemapSingledimensional(mergeddata, width, height, xoffset, yoffset);

          for (i = 0; i < data.length; i++) {
            results.push(
              treemapMultidimensional(
                data[i],
                mergedtreemap[i][2] - mergedtreemap[i][0],
                mergedtreemap[i][3] - mergedtreemap[i][1],
                mergedtreemap[i][0],
                mergedtreemap[i][1]
              )
            );
          }
        } else {
          results = treemapSingledimensional(data, width, height, xoffset, yoffset);
        }

        return results;
      } // treemapSingledimensional - simple wrapper around squarify

      function treemapSingledimensional(data, width, height, xoffset, yoffset) {
        xoffset = typeof xoffset === 'undefined' ? 0 : xoffset;
        yoffset = typeof yoffset === 'undefined' ? 0 : yoffset;
        var rawtreemap = squarify(
          normalize(data, width * height),
          [],
          new Container(xoffset, yoffset, width, height),
          []
        );
        return flattenTreemap(rawtreemap);
      } // flattenTreemap - squarify implementation returns an array of arrays of coordinates
      //                  because we have a new array everytime we switch to building a new row
      //                  this converts it into an array of coordinates.

      function flattenTreemap(rawtreemap) {
        var flattreemap = [];
        var i, j;

        for (i = 0; i < rawtreemap.length; i++) {
          for (j = 0; j < rawtreemap[i].length; j++) {
            flattreemap.push(rawtreemap[i][j]);
          }
        }

        return flattreemap;
      } // squarify  - as per the Bruls paper
      //             plus coordinates stack and containers so we get
      //             usable data out of it

      function squarify(data, currentrow, container, stack) {
        var length;
        var nextdatapoint;
        var newcontainer;

        if (data.length === 0) {
          stack.push(container.getCoordinates(currentrow));
          return;
        }

        length = container.shortestEdge();
        nextdatapoint = data[0];

        if (improvesRatio(currentrow, nextdatapoint, length)) {
          currentrow.push(nextdatapoint);
          squarify(data.slice(1), currentrow, container, stack);
        } else {
          newcontainer = container.cutArea(sumArray(currentrow), stack);
          stack.push(container.getCoordinates(currentrow));
          squarify(data, [], newcontainer, stack);
        }

        return stack;
      } // improveRatio - implements the worse calculation and comparision as given in Bruls
      //                (note the error in the original paper; fixed here)

      function improvesRatio(currentrow, nextnode, length) {
        var newrow;

        if (currentrow.length === 0) {
          return true;
        }

        newrow = currentrow.slice();
        newrow.push(nextnode);
        var currentratio = calculateRatio(currentrow, length);
        var newratio = calculateRatio(newrow, length); // the pseudocode in the Bruls paper has the direction of the comparison
        // wrong, this is the correct one.

        return currentratio >= newratio;
      } // calculateRatio - calculates the maximum width to height ratio of the
      //                  boxes in this row

      function calculateRatio(row, length) {
        var min = Math.min.apply(Math, row);
        var max = Math.max.apply(Math, row);
        var sum = sumArray(row);
        return Math.max(
          (Math.pow(length, 2) * max) / Math.pow(sum, 2),
          Math.pow(sum, 2) / (Math.pow(length, 2) * min)
        );
      } // isArray - checks if arr is an array

      function isArray(arr) {
        return arr && arr.constructor === Array;
      } // sumArray - sums a single dimensional array

      function sumArray(arr) {
        var sum = 0;
        var i;

        for (i = 0; i < arr.length; i++) {
          sum += arr[i];
        }

        return sum;
      } // sumMultidimensionalArray - sums the values in a nested array (aka [[0,1],[[2,3]]])

      function sumMultidimensionalArray(arr) {
        var i,
          total = 0;

        if (isArray(arr[0])) {
          for (i = 0; i < arr.length; i++) {
            total += sumMultidimensionalArray(arr[i]);
          }
        } else {
          total = sumArray(arr);
        }

        return total;
      }

      return treemapMultidimensional;
    })();
  })();

  /**
   * ApexCharts TreemapChart Class.
   * @module TreemapChart
   **/

  var TreemapChart = /*#__PURE__*/ (function () {
    function TreemapChart(ctx, xyRatios) {
      _classCallCheck(this, TreemapChart);

      this.ctx = ctx;
      this.w = ctx.w;
      this.strokeWidth = this.w.config.stroke.width;
      this.helpers = new TreemapHelpers(ctx);
      this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation;
      this.labels = [];
    }

    _createClass(TreemapChart, [
      {
        key: 'draw',
        value: function draw(series) {
          var _this = this;

          var w = this.w;
          var graphics = new Graphics(this.ctx);
          var fill = new Fill(this.ctx);
          var ret = graphics.group({
            class: 'apexcharts-treemap',
          });
          if (w.globals.noData) return ret;
          var ser = [];
          series.forEach(function (s) {
            var d = s.map(function (v) {
              return Math.abs(v);
            });
            ser.push(d);
          });
          this.negRange = this.helpers.checkColorRange();
          w.config.series.forEach(function (s, i) {
            s.data.forEach(function (l) {
              if (!Array.isArray(_this.labels[i])) _this.labels[i] = [];

              _this.labels[i].push(l.x);
            });
          });
          var nodes = window.TreemapSquared.generate(
            ser,
            w.globals.gridWidth,
            w.globals.gridHeight
          );
          nodes.forEach(function (node, i) {
            var elSeries = graphics.group({
              class: 'apexcharts-series apexcharts-treemap-series',
              seriesName: Utils$1.escapeString(w.globals.seriesNames[i]),
              rel: i + 1,
              'data:realIndex': i,
            });

            if (w.config.chart.dropShadow.enabled) {
              var shadow = w.config.chart.dropShadow;
              var filters = new Filters(_this.ctx);
              filters.dropShadow(ret, shadow, i);
            }

            var elDataLabelWrap = graphics.group({
              class: 'apexcharts-data-labels',
            });
            node.forEach(function (r, j) {
              var x1 = r[0];
              var y1 = r[1];
              var x2 = r[2];
              var y2 = r[3];
              var elRect = graphics.drawRect(
                x1,
                y1,
                x2 - x1,
                y2 - y1,
                0,
                '#fff',
                1,
                _this.strokeWidth,
                w.config.plotOptions.treemap.useFillColorAsStroke
                  ? color
                  : w.globals.stroke.colors[i]
              );
              elRect.attr({
                cx: x1,
                cy: y1,
                index: i,
                i: i,
                j: j,
                width: x2 - x1,
                height: y2 - y1,
              });

              var colorProps = _this.helpers.getShadeColor(
                w.config.chart.type,
                i,
                j,
                _this.negRange
              );

              var color = colorProps.color;

              if (
                typeof w.config.series[i].data[j] !== 'undefined' &&
                w.config.series[i].data[j].fillColor
              ) {
                color = w.config.series[i].data[j].fillColor;
              }

              var pathFill = fill.fillPath({
                color: color,
                seriesNumber: i,
                dataPointIndex: j,
              });
              elRect.node.classList.add('apexcharts-treemap-rect');
              elRect.attr({
                fill: pathFill,
              });

              _this.helpers.addListeners(elRect);

              var fromRect = {
                x: x1 + (x2 - x1) / 2,
                y: y1 + (y2 - y1) / 2,
                width: 0,
                height: 0,
              };
              var toRect = {
                x: x1,
                y: y1,
                width: x2 - x1,
                height: y2 - y1,
              };

              if (w.config.chart.animations.enabled && !w.globals.dataChanged) {
                var speed = 1;

                if (!w.globals.resized) {
                  speed = w.config.chart.animations.speed;
                }

                _this.animateTreemap(elRect, fromRect, toRect, speed);
              }

              if (w.globals.dataChanged) {
                var _speed = 1;

                if (_this.dynamicAnim.enabled && w.globals.shouldAnimate) {
                  _speed = _this.dynamicAnim.speed;

                  if (
                    w.globals.previousPaths[i] &&
                    w.globals.previousPaths[i][j] &&
                    w.globals.previousPaths[i][j].rect
                  ) {
                    fromRect = w.globals.previousPaths[i][j].rect;
                  }

                  _this.animateTreemap(elRect, fromRect, toRect, _speed);
                }
              }

              var fontSize = _this.getFontSize(r);

              var formattedText = w.config.dataLabels.formatter(_this.labels[i][j], {
                value: w.globals.series[i][j],
                seriesIndex: i,
                dataPointIndex: j,
                w: w,
              });

              var dataLabels = _this.helpers.calculateDataLabels({
                text: formattedText,
                x: (x1 + x2) / 2,
                y: (y1 + y2) / 2 + _this.strokeWidth / 2 + fontSize / 3,
                i: i,
                j: j,
                colorProps: colorProps,
                fontSize: fontSize,
                series: series,
              });

              if (w.config.dataLabels.enabled && dataLabels) {
                _this.rotateToFitLabel(dataLabels, formattedText, x1, y1, x2, y2);
              }

              elSeries.add(elRect);

              if (dataLabels !== null) {
                elSeries.add(dataLabels);
              }
            });
            elSeries.add(elDataLabelWrap);
            ret.add(elSeries);
          });
          return ret;
        }, // This calculates a font-size based upon
        // average label length and the size of the box the label is
        // going into. The maximum font size is set in chart config.
      },
      {
        key: 'getFontSize',
        value: function getFontSize(coordinates) {
          var w = this.w; // total length of labels (i.e [["Italy"],["Spain", "Greece"]] -> 16)

          function totalLabelLength(arr) {
            var i,
              total = 0;

            if (Array.isArray(arr[0])) {
              for (i = 0; i < arr.length; i++) {
                total += totalLabelLength(arr[i]);
              }
            } else {
              for (i = 0; i < arr.length; i++) {
                total += arr[i].length;
              }
            }

            return total;
          } // count of labels (i.e [["Italy"],["Spain", "Greece"]] -> 3)

          function countLabels(arr) {
            var i,
              total = 0;

            if (Array.isArray(arr[0])) {
              for (i = 0; i < arr.length; i++) {
                total += countLabels(arr[i]);
              }
            } else {
              for (i = 0; i < arr.length; i++) {
                total += 1;
              }
            }

            return total;
          }

          var averagelabelsize = totalLabelLength(this.labels) / countLabels(this.labels);

          function fontSize(width, height) {
            // the font size should be proportional to the size of the box (and the value)
            // otherwise you can end up creating a visual distortion where two boxes of identical
            // size have different sized labels, and thus make it look as if the two boxes
            // represent different sizes
            var area = width * height;
            var arearoot = Math.pow(area, 0.5);
            return Math.min(
              arearoot / averagelabelsize,
              parseInt(w.config.dataLabels.style.fontSize, 10)
            );
          }

          return fontSize(coordinates[2] - coordinates[0], coordinates[3] - coordinates[1]);
        },
      },
      {
        key: 'rotateToFitLabel',
        value: function rotateToFitLabel(elText, text, x1, y1, x2, y2) {
          var graphics = new Graphics(this.ctx);
          var textRect = graphics.getTextRects(text); //if the label fits better sideways then rotate it

          if (textRect.width + 5 > x2 - x1 && textRect.width <= y2 - y1) {
            var labelRotatingCenter = graphics.rotateAroundCenter(elText.node);
            elText.node.setAttribute(
              'transform',
              'rotate(-90 '.concat(labelRotatingCenter.x, ' ').concat(labelRotatingCenter.y, ')')
            );
          }
        },
      },
      {
        key: 'animateTreemap',
        value: function animateTreemap(el, fromRect, toRect, speed) {
          var animations = new Animations(this.ctx);
          animations.animateRect(
            el,
            {
              x: fromRect.x,
              y: fromRect.y,
              width: fromRect.width,
              height: fromRect.height,
            },
            {
              x: toRect.x,
              y: toRect.y,
              width: toRect.width,
              height: toRect.height,
            },
            speed,
            function () {
              animations.animationCompleted(el);
            }
          );
        },
      },
    ]);

    return TreemapChart;
  })();

  var MINUTES_IN_DAY = 24 * 60;
  var SECONDS_IN_DAY = MINUTES_IN_DAY * 60;
  var MIN_ZOOM_DAYS = 10 / SECONDS_IN_DAY;
  /**
   * ApexCharts TimeScale Class for generating time ticks for x-axis.
   *
   * @module TimeScale
   **/

  var TimeScale = /*#__PURE__*/ (function () {
    function TimeScale(ctx) {
      _classCallCheck(this, TimeScale);

      this.ctx = ctx;
      this.w = ctx.w;
      this.timeScaleArray = [];
      this.utc = this.w.config.xaxis.labels.datetimeUTC;
    }

    _createClass(TimeScale, [
      {
        key: 'calculateTimeScaleTicks',
        value: function calculateTimeScaleTicks(minX, maxX) {
          var _this = this;

          var w = this.w; // null check when no series to show

          if (w.globals.allSeriesCollapsed) {
            w.globals.labels = [];
            w.globals.timescaleLabels = [];
            return [];
          }

          var dt = new DateTime(this.ctx);
          var daysDiff = (maxX - minX) / (1000 * SECONDS_IN_DAY);
          this.determineInterval(daysDiff);
          w.globals.disableZoomIn = false;
          w.globals.disableZoomOut = false;

          if (daysDiff < MIN_ZOOM_DAYS) {
            w.globals.disableZoomIn = true;
          } else if (daysDiff > 50000) {
            w.globals.disableZoomOut = true;
          }

          var timeIntervals = dt.getTimeUnitsfromTimestamp(minX, maxX, this.utc);
          var daysWidthOnXAxis = w.globals.gridWidth / daysDiff;
          var hoursWidthOnXAxis = daysWidthOnXAxis / 24;
          var minutesWidthOnXAxis = hoursWidthOnXAxis / 60;
          var secondsWidthOnXAxis = minutesWidthOnXAxis / 60;
          var numberOfHours = Math.floor(daysDiff * 24);
          var numberOfMinutes = Math.floor(daysDiff * MINUTES_IN_DAY);
          var numberOfSeconds = Math.floor(daysDiff * SECONDS_IN_DAY);
          var numberOfDays = Math.floor(daysDiff);
          var numberOfMonths = Math.floor(daysDiff / 30);
          var numberOfYears = Math.floor(daysDiff / 365);
          var firstVal = {
            minMillisecond: timeIntervals.minMillisecond,
            minSecond: timeIntervals.minSecond,
            minMinute: timeIntervals.minMinute,
            minHour: timeIntervals.minHour,
            minDate: timeIntervals.minDate,
            minMonth: timeIntervals.minMonth,
            minYear: timeIntervals.minYear,
          };
          var currentMillisecond = firstVal.minMillisecond;
          var currentSecond = firstVal.minSecond;
          var currentMinute = firstVal.minMinute;
          var currentHour = firstVal.minHour;
          var currentMonthDate = firstVal.minDate;
          var currentDate = firstVal.minDate;
          var currentMonth = firstVal.minMonth;
          var currentYear = firstVal.minYear;
          var params = {
            firstVal: firstVal,
            currentMillisecond: currentMillisecond,
            currentSecond: currentSecond,
            currentMinute: currentMinute,
            currentHour: currentHour,
            currentMonthDate: currentMonthDate,
            currentDate: currentDate,
            currentMonth: currentMonth,
            currentYear: currentYear,
            daysWidthOnXAxis: daysWidthOnXAxis,
            hoursWidthOnXAxis: hoursWidthOnXAxis,
            minutesWidthOnXAxis: minutesWidthOnXAxis,
            secondsWidthOnXAxis: secondsWidthOnXAxis,
            numberOfSeconds: numberOfSeconds,
            numberOfMinutes: numberOfMinutes,
            numberOfHours: numberOfHours,
            numberOfDays: numberOfDays,
            numberOfMonths: numberOfMonths,
            numberOfYears: numberOfYears,
          };

          switch (this.tickInterval) {
            case 'years': {
              this.generateYearScale(params);
              break;
            }

            case 'months':
            case 'half_year': {
              this.generateMonthScale(params);
              break;
            }

            case 'months_days':
            case 'months_fortnight':
            case 'days':
            case 'week_days': {
              this.generateDayScale(params);
              break;
            }

            case 'hours': {
              this.generateHourScale(params);
              break;
            }

            case 'minutes_fives':
            case 'minutes':
              this.generateMinuteScale(params);
              break;

            case 'seconds_tens':
            case 'seconds_fives':
            case 'seconds':
              this.generateSecondScale(params);
              break;
          } // first, we will adjust the month values index
          // as in the upper function, it is starting from 0
          // we will start them from 1

          var adjustedMonthInTimeScaleArray = this.timeScaleArray.map(function (ts) {
            var defaultReturn = {
              position: ts.position,
              unit: ts.unit,
              year: ts.year,
              day: ts.day ? ts.day : 1,
              hour: ts.hour ? ts.hour : 0,
              month: ts.month + 1,
            };

            if (ts.unit === 'month') {
              return _objectSpread2(
                _objectSpread2({}, defaultReturn),
                {},
                {
                  day: 1,
                  value: ts.value + 1,
                }
              );
            } else if (ts.unit === 'day' || ts.unit === 'hour') {
              return _objectSpread2(
                _objectSpread2({}, defaultReturn),
                {},
                {
                  value: ts.value,
                }
              );
            } else if (ts.unit === 'minute') {
              return _objectSpread2(
                _objectSpread2({}, defaultReturn),
                {},
                {
                  value: ts.value,
                  minute: ts.value,
                }
              );
            } else if (ts.unit === 'second') {
              return _objectSpread2(
                _objectSpread2({}, defaultReturn),
                {},
                {
                  value: ts.value,
                  minute: ts.minute,
                  second: ts.second,
                }
              );
            }

            return ts;
          });
          var filteredTimeScale = adjustedMonthInTimeScaleArray.filter(function (ts) {
            var modulo = 1;
            var ticks = Math.ceil(w.globals.gridWidth / 120);
            var value = ts.value;

            if (w.config.xaxis.tickAmount !== undefined) {
              ticks = w.config.xaxis.tickAmount;
            }

            if (adjustedMonthInTimeScaleArray.length > ticks) {
              modulo = Math.floor(adjustedMonthInTimeScaleArray.length / ticks);
            }

            var shouldNotSkipUnit = false; // there is a big change in unit i.e days to months

            var shouldNotPrint = false; // should skip these values

            switch (_this.tickInterval) {
              case 'years':
                // make years label denser
                if (ts.unit === 'year') {
                  shouldNotSkipUnit = true;
                }

                break;

              case 'half_year':
                modulo = 7;

                if (ts.unit === 'year') {
                  shouldNotSkipUnit = true;
                }

                break;

              case 'months':
                modulo = 1;

                if (ts.unit === 'year') {
                  shouldNotSkipUnit = true;
                }

                break;

              case 'months_fortnight':
                modulo = 15;

                if (ts.unit === 'year' || ts.unit === 'month') {
                  shouldNotSkipUnit = true;
                }

                if (value === 30) {
                  shouldNotPrint = true;
                }

                break;

              case 'months_days':
                modulo = 10;

                if (ts.unit === 'month') {
                  shouldNotSkipUnit = true;
                }

                if (value === 30) {
                  shouldNotPrint = true;
                }

                break;

              case 'week_days':
                modulo = 8;

                if (ts.unit === 'month') {
                  shouldNotSkipUnit = true;
                }

                break;

              case 'days':
                modulo = 1;

                if (ts.unit === 'month') {
                  shouldNotSkipUnit = true;
                }

                break;

              case 'hours':
                if (ts.unit === 'day') {
                  shouldNotSkipUnit = true;
                }

                break;

              case 'minutes_fives':
                if (value % 5 !== 0) {
                  shouldNotPrint = true;
                }

                break;

              case 'seconds_tens':
                if (value % 10 !== 0) {
                  shouldNotPrint = true;
                }

                break;

              case 'seconds_fives':
                if (value % 5 !== 0) {
                  shouldNotPrint = true;
                }

                break;
            }

            if (
              _this.tickInterval === 'hours' ||
              _this.tickInterval === 'minutes_fives' ||
              _this.tickInterval === 'seconds_tens' ||
              _this.tickInterval === 'seconds_fives'
            ) {
              if (!shouldNotPrint) {
                return true;
              }
            } else {
              if ((value % modulo === 0 || shouldNotSkipUnit) && !shouldNotPrint) {
                return true;
              }
            }
          });
          return filteredTimeScale;
        },
      },
      {
        key: 'recalcDimensionsBasedOnFormat',
        value: function recalcDimensionsBasedOnFormat(filteredTimeScale, inverted) {
          var w = this.w;
          var reformattedTimescaleArray = this.formatDates(filteredTimeScale);
          var removedOverlappingTS = this.removeOverlappingTS(reformattedTimescaleArray);
          w.globals.timescaleLabels = removedOverlappingTS.slice(); // at this stage, we need to re-calculate coords of the grid as timeline labels may have altered the xaxis labels coords
          // The reason we can't do this prior to this stage is because timeline labels depends on gridWidth, and as the ticks are calculated based on available gridWidth, there can be unknown number of ticks generated for different minX and maxX
          // Dependency on Dimensions(), need to refactor correctly
          // TODO - find an alternate way to avoid calling this Heavy method twice

          var dimensions = new Dimensions(this.ctx);
          dimensions.plotCoords();
        },
      },
      {
        key: 'determineInterval',
        value: function determineInterval(daysDiff) {
          var yearsDiff = daysDiff / 365;
          var hoursDiff = daysDiff * 24;
          var minutesDiff = hoursDiff * 60;
          var secondsDiff = minutesDiff * 60;

          switch (true) {
            case yearsDiff > 5:
              this.tickInterval = 'years';
              break;

            case daysDiff > 800:
              this.tickInterval = 'half_year';
              break;

            case daysDiff > 180:
              this.tickInterval = 'months';
              break;

            case daysDiff > 90:
              this.tickInterval = 'months_fortnight';
              break;

            case daysDiff > 60:
              this.tickInterval = 'months_days';
              break;

            case daysDiff > 30:
              this.tickInterval = 'week_days';
              break;

            case daysDiff > 2:
              this.tickInterval = 'days';
              break;

            case hoursDiff > 2.4:
              this.tickInterval = 'hours';
              break;

            case minutesDiff > 15:
              this.tickInterval = 'minutes_fives';
              break;

            case minutesDiff > 5:
              this.tickInterval = 'minutes';
              break;

            case minutesDiff > 1:
              this.tickInterval = 'seconds_tens';
              break;

            case secondsDiff > 20:
              this.tickInterval = 'seconds_fives';
              break;

            default:
              this.tickInterval = 'seconds';
              break;
          }
        },
      },
      {
        key: 'generateYearScale',
        value: function generateYearScale(_ref) {
          var firstVal = _ref.firstVal,
            currentMonth = _ref.currentMonth,
            currentYear = _ref.currentYear,
            daysWidthOnXAxis = _ref.daysWidthOnXAxis,
            numberOfYears = _ref.numberOfYears;
          var firstTickValue = firstVal.minYear;
          var firstTickPosition = 0;
          var dt = new DateTime(this.ctx);
          var unit = 'year';

          if (firstVal.minDate > 1 || firstVal.minMonth > 0) {
            var remainingDays = dt.determineRemainingDaysOfYear(
              firstVal.minYear,
              firstVal.minMonth,
              firstVal.minDate
            ); // remainingDaysofFirstMonth is used to reacht the 2nd tick position

            var remainingDaysOfFirstYear =
              dt.determineDaysOfYear(firstVal.minYear) - remainingDays + 1; // calculate the first tick position

            firstTickPosition = remainingDaysOfFirstYear * daysWidthOnXAxis;
            firstTickValue = firstVal.minYear + 1; // push the first tick in the array

            this.timeScaleArray.push({
              position: firstTickPosition,
              value: firstTickValue,
              unit: unit,
              year: firstTickValue,
              month: Utils$1.monthMod(currentMonth + 1),
            });
          } else if (firstVal.minDate === 1 && firstVal.minMonth === 0) {
            // push the first tick in the array
            this.timeScaleArray.push({
              position: firstTickPosition,
              value: firstTickValue,
              unit: unit,
              year: currentYear,
              month: Utils$1.monthMod(currentMonth + 1),
            });
          }

          var year = firstTickValue;
          var pos = firstTickPosition; // keep drawing rest of the ticks

          for (var i = 0; i < numberOfYears; i++) {
            year++;
            pos = dt.determineDaysOfYear(year - 1) * daysWidthOnXAxis + pos;
            this.timeScaleArray.push({
              position: pos,
              value: year,
              unit: unit,
              year: year,
              month: 1,
            });
          }
        },
      },
      {
        key: 'generateMonthScale',
        value: function generateMonthScale(_ref2) {
          var firstVal = _ref2.firstVal,
            currentMonthDate = _ref2.currentMonthDate,
            currentMonth = _ref2.currentMonth,
            currentYear = _ref2.currentYear,
            daysWidthOnXAxis = _ref2.daysWidthOnXAxis,
            numberOfMonths = _ref2.numberOfMonths;
          var firstTickValue = currentMonth;
          var firstTickPosition = 0;
          var dt = new DateTime(this.ctx);
          var unit = 'month';
          var yrCounter = 0;

          if (firstVal.minDate > 1) {
            // remainingDaysofFirstMonth is used to reacht the 2nd tick position
            var remainingDaysOfFirstMonth =
              dt.determineDaysOfMonths(currentMonth + 1, firstVal.minYear) - currentMonthDate + 1; // calculate the first tick position

            firstTickPosition = remainingDaysOfFirstMonth * daysWidthOnXAxis;
            firstTickValue = Utils$1.monthMod(currentMonth + 1);
            var year = currentYear + yrCounter;

            var _month = Utils$1.monthMod(firstTickValue);

            var value = firstTickValue; // it's Jan, so update the year

            if (firstTickValue === 0) {
              unit = 'year';
              value = year;
              _month = 1;
              yrCounter += 1;
              year = year + yrCounter;
            } // push the first tick in the array

            this.timeScaleArray.push({
              position: firstTickPosition,
              value: value,
              unit: unit,
              year: year,
              month: _month,
            });
          } else {
            // push the first tick in the array
            this.timeScaleArray.push({
              position: firstTickPosition,
              value: firstTickValue,
              unit: unit,
              year: currentYear,
              month: Utils$1.monthMod(currentMonth),
            });
          }

          var month = firstTickValue + 1;
          var pos = firstTickPosition; // keep drawing rest of the ticks

          for (var i = 0, j = 1; i < numberOfMonths; i++, j++) {
            month = Utils$1.monthMod(month);

            if (month === 0) {
              unit = 'year';
              yrCounter += 1;
            } else {
              unit = 'month';
            }

            var _year = this._getYear(currentYear, month, yrCounter);

            pos = dt.determineDaysOfMonths(month, _year) * daysWidthOnXAxis + pos;
            var monthVal = month === 0 ? _year : month;
            this.timeScaleArray.push({
              position: pos,
              value: monthVal,
              unit: unit,
              year: _year,
              month: month === 0 ? 1 : month,
            });
            month++;
          }
        },
      },
      {
        key: 'generateDayScale',
        value: function generateDayScale(_ref3) {
          var firstVal = _ref3.firstVal,
            currentMonth = _ref3.currentMonth,
            currentYear = _ref3.currentYear,
            hoursWidthOnXAxis = _ref3.hoursWidthOnXAxis,
            numberOfDays = _ref3.numberOfDays;
          var dt = new DateTime(this.ctx);
          var unit = 'day';
          var firstTickValue = firstVal.minDate + 1;
          var date = firstTickValue;

          var changeMonth = function changeMonth(dateVal, month, year) {
            var monthdays = dt.determineDaysOfMonths(month + 1, year);

            if (dateVal > monthdays) {
              month = month + 1;
              date = 1;
              unit = 'month';
              val = month;
              return month;
            }

            return month;
          };

          var remainingHours = 24 - firstVal.minHour;
          var yrCounter = 0; // calculate the first tick position

          var firstTickPosition = remainingHours * hoursWidthOnXAxis;
          var val = firstTickValue;
          var month = changeMonth(date, currentMonth, currentYear);

          if (firstVal.minHour === 0 && firstVal.minDate === 1) {
            // the first value is the first day of month
            firstTickPosition = 0;
            val = Utils$1.monthMod(firstVal.minMonth);
            unit = 'month';
            date = firstVal.minDate;
            numberOfDays++;
          } else if (firstVal.minDate !== 1 && firstVal.minHour === 0 && firstVal.minMinute === 0) {
            // fixes apexcharts/apexcharts.js/issues/1730
            firstTickPosition = 0;
            firstTickValue = firstVal.minDate;
            date = firstTickValue;
            val = firstTickValue; // in case it's the last date of month, we need to check it

            month = changeMonth(date, currentMonth, currentYear);
          } // push the first tick in the array

          this.timeScaleArray.push({
            position: firstTickPosition,
            value: val,
            unit: unit,
            year: this._getYear(currentYear, month, yrCounter),
            month: Utils$1.monthMod(month),
            day: date,
          });
          var pos = firstTickPosition; // keep drawing rest of the ticks

          for (var i = 0; i < numberOfDays; i++) {
            date += 1;
            unit = 'day';
            month = changeMonth(date, month, this._getYear(currentYear, month, yrCounter));

            var year = this._getYear(currentYear, month, yrCounter);

            pos = 24 * hoursWidthOnXAxis + pos;
            var value = date === 1 ? Utils$1.monthMod(month) : date;
            this.timeScaleArray.push({
              position: pos,
              value: value,
              unit: unit,
              year: year,
              month: Utils$1.monthMod(month),
              day: value,
            });
          }
        },
      },
      {
        key: 'generateHourScale',
        value: function generateHourScale(_ref4) {
          var firstVal = _ref4.firstVal,
            currentDate = _ref4.currentDate,
            currentMonth = _ref4.currentMonth,
            currentYear = _ref4.currentYear,
            minutesWidthOnXAxis = _ref4.minutesWidthOnXAxis,
            numberOfHours = _ref4.numberOfHours;
          var dt = new DateTime(this.ctx);
          var yrCounter = 0;
          var unit = 'hour';

          var changeDate = function changeDate(dateVal, month) {
            var monthdays = dt.determineDaysOfMonths(month + 1, currentYear);

            if (dateVal > monthdays) {
              date = 1;
              month = month + 1;
            }

            return {
              month: month,
              date: date,
            };
          };

          var changeMonth = function changeMonth(dateVal, month) {
            var monthdays = dt.determineDaysOfMonths(month + 1, currentYear);

            if (dateVal > monthdays) {
              month = month + 1;
              return month;
            }

            return month;
          }; // factor in minSeconds as well

          var remainingMins = 60 - (firstVal.minMinute + firstVal.minSecond / 60.0);
          var firstTickPosition = remainingMins * minutesWidthOnXAxis;
          var firstTickValue = firstVal.minHour + 1;
          var hour = firstTickValue + 1;

          if (remainingMins === 60) {
            firstTickPosition = 0;
            firstTickValue = firstVal.minHour;
            hour = firstTickValue + 1;
          }

          var date = currentDate;
          var month = changeMonth(date, currentMonth); // push the first tick in the array

          this.timeScaleArray.push({
            position: firstTickPosition,
            value: firstTickValue,
            unit: unit,
            day: date,
            hour: hour,
            year: currentYear,
            month: Utils$1.monthMod(month),
          });
          var pos = firstTickPosition; // keep drawing rest of the ticks

          for (var i = 0; i < numberOfHours; i++) {
            unit = 'hour';

            if (hour >= 24) {
              hour = 0;
              date += 1;
              unit = 'day';
              var checkNextMonth = changeDate(date, month);
              month = checkNextMonth.month;
              month = changeMonth(date, month);
            }

            var year = this._getYear(currentYear, month, yrCounter);

            pos =
              hour === 0 && i === 0
                ? remainingMins * minutesWidthOnXAxis
                : 60 * minutesWidthOnXAxis + pos;
            var val = hour === 0 ? date : hour;
            this.timeScaleArray.push({
              position: pos,
              value: val,
              unit: unit,
              hour: hour,
              day: date,
              year: year,
              month: Utils$1.monthMod(month),
            });
            hour++;
          }
        },
      },
      {
        key: 'generateMinuteScale',
        value: function generateMinuteScale(_ref5) {
          var currentMillisecond = _ref5.currentMillisecond,
            currentSecond = _ref5.currentSecond,
            currentMinute = _ref5.currentMinute,
            currentHour = _ref5.currentHour,
            currentDate = _ref5.currentDate,
            currentMonth = _ref5.currentMonth,
            currentYear = _ref5.currentYear,
            minutesWidthOnXAxis = _ref5.minutesWidthOnXAxis,
            secondsWidthOnXAxis = _ref5.secondsWidthOnXAxis,
            numberOfMinutes = _ref5.numberOfMinutes;
          var yrCounter = 0;
          var unit = 'minute';
          var remainingSecs = 60 - currentSecond;
          var firstTickPosition = (remainingSecs - currentMillisecond / 1000) * secondsWidthOnXAxis;
          var minute = currentMinute + 1;
          var date = currentDate;
          var month = currentMonth;
          var year = currentYear;
          var hour = currentHour;
          var pos = firstTickPosition;

          for (var i = 0; i < numberOfMinutes; i++) {
            if (minute >= 60) {
              minute = 0;
              hour += 1;

              if (hour === 24) {
                hour = 0;
              }
            }

            this.timeScaleArray.push({
              position: pos,
              value: minute,
              unit: unit,
              hour: hour,
              minute: minute,
              day: date,
              year: this._getYear(year, month, yrCounter),
              month: Utils$1.monthMod(month),
            });
            pos += minutesWidthOnXAxis;
            minute++;
          }
        },
      },
      {
        key: 'generateSecondScale',
        value: function generateSecondScale(_ref6) {
          var currentMillisecond = _ref6.currentMillisecond,
            currentSecond = _ref6.currentSecond,
            currentMinute = _ref6.currentMinute,
            currentHour = _ref6.currentHour,
            currentDate = _ref6.currentDate,
            currentMonth = _ref6.currentMonth,
            currentYear = _ref6.currentYear,
            secondsWidthOnXAxis = _ref6.secondsWidthOnXAxis,
            numberOfSeconds = _ref6.numberOfSeconds;
          var yrCounter = 0;
          var unit = 'second';
          var remainingMillisecs = 1000 - currentMillisecond;
          var firstTickPosition = (remainingMillisecs / 1000) * secondsWidthOnXAxis;
          var second = currentSecond + 1;
          var minute = currentMinute;
          var date = currentDate;
          var month = currentMonth;
          var year = currentYear;
          var hour = currentHour;
          var pos = firstTickPosition;

          for (var i = 0; i < numberOfSeconds; i++) {
            if (second >= 60) {
              minute++;
              second = 0;

              if (minute >= 60) {
                hour++;
                minute = 0;

                if (hour === 24) {
                  hour = 0;
                }
              }
            }

            this.timeScaleArray.push({
              position: pos,
              value: second,
              unit: unit,
              hour: hour,
              minute: minute,
              second: second,
              day: date,
              year: this._getYear(year, month, yrCounter),
              month: Utils$1.monthMod(month),
            });
            pos += secondsWidthOnXAxis;
            second++;
          }
        },
      },
      {
        key: 'createRawDateString',
        value: function createRawDateString(ts, value) {
          var raw = ts.year;

          if (ts.month === 0) {
            // invalid month, correct it
            ts.month = 1;
          }

          raw += '-' + ('0' + ts.month.toString()).slice(-2); // unit is day

          if (ts.unit === 'day') {
            raw += ts.unit === 'day' ? '-' + ('0' + value).slice(-2) : '-01';
          } else {
            raw += '-' + ('0' + (ts.day ? ts.day : '1')).slice(-2);
          } // unit is hour

          if (ts.unit === 'hour') {
            raw += ts.unit === 'hour' ? 'T' + ('0' + value).slice(-2) : 'T00';
          } else {
            raw += 'T' + ('0' + (ts.hour ? ts.hour : '0')).slice(-2);
          }

          if (ts.unit === 'minute') {
            raw += ':' + ('0' + value).slice(-2);
          } else {
            raw += ':' + (ts.minute ? ('0' + ts.minute).slice(-2) : '00');
          }

          if (ts.unit === 'second') {
            raw += ':' + ('0' + value).slice(-2);
          } else {
            raw += ':00';
          }

          if (this.utc) {
            raw += '.000Z';
          }

          return raw;
        },
      },
      {
        key: 'formatDates',
        value: function formatDates(filteredTimeScale) {
          var _this2 = this;

          var w = this.w;
          var reformattedTimescaleArray = filteredTimeScale.map(function (ts) {
            var value = ts.value.toString();
            var dt = new DateTime(_this2.ctx);

            var raw = _this2.createRawDateString(ts, value);

            var dateToFormat = dt.getDate(dt.parseDate(raw));

            if (!_this2.utc) {
              // Fixes #1726, #1544, #1485, #1255
              dateToFormat = dt.getDate(dt.parseDateWithTimezone(raw));
            }

            if (w.config.xaxis.labels.format === undefined) {
              var customFormat = 'dd MMM';
              var dtFormatter = w.config.xaxis.labels.datetimeFormatter;
              if (ts.unit === 'year') customFormat = dtFormatter.year;
              if (ts.unit === 'month') customFormat = dtFormatter.month;
              if (ts.unit === 'day') customFormat = dtFormatter.day;
              if (ts.unit === 'hour') customFormat = dtFormatter.hour;
              if (ts.unit === 'minute') customFormat = dtFormatter.minute;
              if (ts.unit === 'second') customFormat = dtFormatter.second;
              value = dt.formatDate(dateToFormat, customFormat);
            } else {
              value = dt.formatDate(dateToFormat, w.config.xaxis.labels.format);
            }

            return {
              dateString: raw,
              position: ts.position,
              value: value,
              unit: ts.unit,
              year: ts.year,
              month: ts.month,
            };
          });
          return reformattedTimescaleArray;
        },
      },
      {
        key: 'removeOverlappingTS',
        value: function removeOverlappingTS(arr) {
          var _this3 = this;

          var graphics = new Graphics(this.ctx);
          var equalLabelLengthFlag = false; // These labels got same length?

          var constantLabelWidth; // If true, what is the constant length to use

          if (
            arr.length > 0 && // check arr length
            arr[0].value && // check arr[0] contains value
            arr.every(function (lb) {
              return lb.value.length === arr[0].value.length;
            }) // check every arr label value is the same as the first one
          ) {
            equalLabelLengthFlag = true; // These labels got same length

            constantLabelWidth = graphics.getTextRects(arr[0].value).width; // The constant label width to use
          }

          var lastDrawnIndex = 0;
          var filteredArray = arr.map(function (item, index) {
            if (index > 0 && _this3.w.config.xaxis.labels.hideOverlappingLabels) {
              var prevLabelWidth = !equalLabelLengthFlag // if vary in label length
                ? graphics.getTextRects(arr[lastDrawnIndex].value).width // get individual length
                : constantLabelWidth; // else: use constant length

              var prevPos = arr[lastDrawnIndex].position;
              var pos = item.position;

              if (pos > prevPos + prevLabelWidth + 10) {
                lastDrawnIndex = index;
                return item;
              } else {
                return null;
              }
            } else {
              return item;
            }
          });
          filteredArray = filteredArray.filter(function (f) {
            return f !== null;
          });
          return filteredArray;
        },
      },
      {
        key: '_getYear',
        value: function _getYear(currentYear, month, yrCounter) {
          return currentYear + Math.floor(month / 12) + yrCounter;
        },
      },
    ]);

    return TimeScale;
  })();

  /**
   * ApexCharts Core Class responsible for major calculations and creating elements.
   *
   * @module Core
   **/

  var Core = /*#__PURE__*/ (function () {
    function Core(el, ctx) {
      _classCallCheck(this, Core);

      this.ctx = ctx;
      this.w = ctx.w;
      this.el = el;
    } // get data and store into appropriate vars

    _createClass(Core, [
      {
        key: 'setupElements',
        value: function setupElements() {
          var gl = this.w.globals;
          var cnf = this.w.config; // const graphics = new Graphics(this.ctx)

          var ct = cnf.chart.type;
          var axisChartsArrTypes = [
            'line',
            'area',
            'bar',
            'rangeBar',
            'candlestick',
            'boxPlot',
            'scatter',
            'bubble',
            'radar',
            'heatmap',
            'treemap',
          ];
          var xyChartsArrTypes = [
            'line',
            'area',
            'bar',
            'rangeBar',
            'candlestick',
            'boxPlot',
            'scatter',
            'bubble',
          ];
          gl.axisCharts = axisChartsArrTypes.indexOf(ct) > -1;
          gl.xyCharts = xyChartsArrTypes.indexOf(ct) > -1;
          gl.isBarHorizontal =
            (cnf.chart.type === 'bar' ||
              cnf.chart.type === 'rangeBar' ||
              cnf.chart.type === 'boxPlot') &&
            cnf.plotOptions.bar.horizontal;
          gl.chartClass = '.apexcharts' + gl.chartID;
          gl.dom.baseEl = this.el;
          gl.dom.elWrap = document.createElement('div');
          Graphics.setAttrs(gl.dom.elWrap, {
            id: gl.chartClass.substring(1),
            class: 'apexcharts-canvas ' + gl.chartClass.substring(1),
          });
          this.el.appendChild(gl.dom.elWrap);
          gl.dom.Paper = new window.SVG.Doc(gl.dom.elWrap);
          gl.dom.Paper.attr({
            class: 'apexcharts-svg',
            'xmlns:data': 'ApexChartsNS',
            transform: 'translate('.concat(cnf.chart.offsetX, ', ').concat(cnf.chart.offsetY, ')'),
          });
          gl.dom.Paper.node.style.background = cnf.chart.background;
          this.setSVGDimensions();
          gl.dom.elGraphical = gl.dom.Paper.group().attr({
            class: 'apexcharts-inner apexcharts-graphical',
          });
          gl.dom.elAnnotations = gl.dom.Paper.group().attr({
            class: 'apexcharts-annotations',
          });
          gl.dom.elDefs = gl.dom.Paper.defs();
          gl.dom.elLegendWrap = document.createElement('div');
          gl.dom.elLegendWrap.classList.add('apexcharts-legend');
          gl.dom.elWrap.appendChild(gl.dom.elLegendWrap);
          gl.dom.Paper.add(gl.dom.elGraphical);
          gl.dom.elGraphical.add(gl.dom.elDefs);
        },
      },
      {
        key: 'plotChartType',
        value: function plotChartType(ser, xyRatios) {
          var w = this.w;
          var cnf = w.config;
          var gl = w.globals;
          var lineSeries = {
            series: [],
            i: [],
          };
          var areaSeries = {
            series: [],
            i: [],
          };
          var scatterSeries = {
            series: [],
            i: [],
          };
          var bubbleSeries = {
            series: [],
            i: [],
          };
          var columnSeries = {
            series: [],
            i: [],
          };
          var candlestickSeries = {
            series: [],
            i: [],
          };
          var boxplotSeries = {
            series: [],
            i: [],
          };
          gl.series.map(function (series, st) {
            var comboCount = 0; // if user has specified a particular type for particular series

            if (typeof ser[st].type !== 'undefined') {
              if (ser[st].type === 'column' || ser[st].type === 'bar') {
                if (gl.series.length > 1 && cnf.plotOptions.bar.horizontal) {
                  // horizontal bars not supported in mixed charts, hence show a warning
                  console.warn(
                    'Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`'
                  );
                }

                columnSeries.series.push(series);
                columnSeries.i.push(st);
                comboCount++;
                w.globals.columnSeries = columnSeries.series;
              } else if (ser[st].type === 'area') {
                areaSeries.series.push(series);
                areaSeries.i.push(st);
                comboCount++;
              } else if (ser[st].type === 'line') {
                lineSeries.series.push(series);
                lineSeries.i.push(st);
                comboCount++;
              } else if (ser[st].type === 'scatter') {
                scatterSeries.series.push(series);
                scatterSeries.i.push(st);
              } else if (ser[st].type === 'bubble') {
                bubbleSeries.series.push(series);
                bubbleSeries.i.push(st);
                comboCount++;
              } else if (ser[st].type === 'candlestick') {
                candlestickSeries.series.push(series);
                candlestickSeries.i.push(st);
                comboCount++;
              } else if (ser[st].type === 'boxPlot') {
                boxplotSeries.series.push(series);
                boxplotSeries.i.push(st);
                comboCount++;
              } else {
                // user has specified type, but it is not valid (other than line/area/column)
                console.warn(
                  'You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble'
                );
              }

              if (comboCount > 1) {
                gl.comboCharts = true;
              }
            } else {
              lineSeries.series.push(series);
              lineSeries.i.push(st);
            }
          });
          var line = new Line(this.ctx, xyRatios);
          var boxCandlestick = new BoxCandleStick(this.ctx, xyRatios);
          this.ctx.pie = new Pie(this.ctx);
          var radialBar = new Radial(this.ctx);
          this.ctx.rangeBar = new RangeBar(this.ctx, xyRatios);
          var radar = new Radar(this.ctx);
          var elGraph = [];

          if (gl.comboCharts) {
            if (areaSeries.series.length > 0) {
              elGraph.push(line.draw(areaSeries.series, 'area', areaSeries.i));
            }

            if (columnSeries.series.length > 0) {
              if (w.config.chart.stacked) {
                var barStacked = new BarStacked(this.ctx, xyRatios);
                elGraph.push(barStacked.draw(columnSeries.series, columnSeries.i));
              } else {
                this.ctx.bar = new Bar(this.ctx, xyRatios);
                elGraph.push(this.ctx.bar.draw(columnSeries.series, columnSeries.i));
              }
            }

            if (lineSeries.series.length > 0) {
              elGraph.push(line.draw(lineSeries.series, 'line', lineSeries.i));
            }

            if (candlestickSeries.series.length > 0) {
              elGraph.push(boxCandlestick.draw(candlestickSeries.series, candlestickSeries.i));
            }

            if (boxplotSeries.series.length > 0) {
              elGraph.push(boxCandlestick.draw(boxplotSeries.series, boxplotSeries.i));
            }

            if (scatterSeries.series.length > 0) {
              var scatterLine = new Line(this.ctx, xyRatios, true);
              elGraph.push(scatterLine.draw(scatterSeries.series, 'scatter', scatterSeries.i));
            }

            if (bubbleSeries.series.length > 0) {
              var bubbleLine = new Line(this.ctx, xyRatios, true);
              elGraph.push(bubbleLine.draw(bubbleSeries.series, 'bubble', bubbleSeries.i));
            }
          } else {
            switch (cnf.chart.type) {
              case 'line':
                elGraph = line.draw(gl.series, 'line');
                break;

              case 'area':
                elGraph = line.draw(gl.series, 'area');
                break;

              case 'bar':
                if (cnf.chart.stacked) {
                  var _barStacked = new BarStacked(this.ctx, xyRatios);

                  elGraph = _barStacked.draw(gl.series);
                } else {
                  this.ctx.bar = new Bar(this.ctx, xyRatios);
                  elGraph = this.ctx.bar.draw(gl.series);
                }

                break;

              case 'candlestick':
                var candleStick = new BoxCandleStick(this.ctx, xyRatios);
                elGraph = candleStick.draw(gl.series);
                break;

              case 'boxPlot':
                var boxPlot = new BoxCandleStick(this.ctx, xyRatios);
                elGraph = boxPlot.draw(gl.series);
                break;

              case 'rangeBar':
                elGraph = this.ctx.rangeBar.draw(gl.series);
                break;

              case 'heatmap':
                var heatmap = new HeatMap(this.ctx, xyRatios);
                elGraph = heatmap.draw(gl.series);
                break;

              case 'treemap':
                var treemap = new TreemapChart(this.ctx, xyRatios);
                elGraph = treemap.draw(gl.series);
                break;

              case 'pie':
              case 'donut':
              case 'polarArea':
                elGraph = this.ctx.pie.draw(gl.series);
                break;

              case 'radialBar':
                elGraph = radialBar.draw(gl.series);
                break;

              case 'radar':
                elGraph = radar.draw(gl.series);
                break;

              default:
                elGraph = line.draw(gl.series);
            }
          }

          return elGraph;
        },
      },
      {
        key: 'setSVGDimensions',
        value: function setSVGDimensions() {
          var gl = this.w.globals;
          var cnf = this.w.config;
          gl.svgWidth = cnf.chart.width;
          gl.svgHeight = cnf.chart.height;
          var elDim = Utils$1.getDimensions(this.el);
          var widthUnit = cnf.chart.width
            .toString()
            .split(/[0-9]+/g)
            .pop();

          if (widthUnit === '%') {
            if (Utils$1.isNumber(elDim[0])) {
              if (elDim[0].width === 0) {
                elDim = Utils$1.getDimensions(this.el.parentNode);
              }

              gl.svgWidth = (elDim[0] * parseInt(cnf.chart.width, 10)) / 100;
            }
          } else if (widthUnit === 'px' || widthUnit === '') {
            gl.svgWidth = parseInt(cnf.chart.width, 10);
          }

          var heightUnit = cnf.chart.height
            .toString()
            .split(/[0-9]+/g)
            .pop();

          if (gl.svgHeight !== 'auto' && gl.svgHeight !== '') {
            if (heightUnit === '%') {
              var elParentDim = Utils$1.getDimensions(this.el.parentNode);
              gl.svgHeight = (elParentDim[1] * parseInt(cnf.chart.height, 10)) / 100;
            } else {
              gl.svgHeight = parseInt(cnf.chart.height, 10);
            }
          } else {
            if (gl.axisCharts) {
              gl.svgHeight = gl.svgWidth / 1.61;
            } else {
              gl.svgHeight = gl.svgWidth / 1.2;
            }
          }

          if (gl.svgWidth < 0) gl.svgWidth = 0;
          if (gl.svgHeight < 0) gl.svgHeight = 0;
          Graphics.setAttrs(gl.dom.Paper.node, {
            width: gl.svgWidth,
            height: gl.svgHeight,
          });

          if (heightUnit !== '%') {
            // fixes https://github.com/apexcharts/apexcharts.js/issues/2059
            var offsetY = cnf.chart.sparkline.enabled
              ? 0
              : gl.axisCharts
              ? cnf.chart.parentHeightOffset
              : 0;
            gl.dom.Paper.node.parentNode.parentNode.style.minHeight = gl.svgHeight + offsetY + 'px';
          }

          gl.dom.elWrap.style.width = gl.svgWidth + 'px';
          gl.dom.elWrap.style.height = gl.svgHeight + 'px';
        },
      },
      {
        key: 'shiftGraphPosition',
        value: function shiftGraphPosition() {
          var gl = this.w.globals;
          var tY = gl.translateY;
          var tX = gl.translateX;
          var scalingAttrs = {
            transform: 'translate(' + tX + ', ' + tY + ')',
          };
          Graphics.setAttrs(gl.dom.elGraphical.node, scalingAttrs);
        }, // To prevent extra spacings in the bottom of the chart, we need to recalculate the height for pie/donut/radialbar charts
      },
      {
        key: 'resizeNonAxisCharts',
        value: function resizeNonAxisCharts() {
          var w = this.w;
          var gl = w.globals;
          var legendHeight = 0;
          var offY = w.config.chart.sparkline.enabled ? 1 : 15;
          offY = offY + w.config.grid.padding.bottom;

          if (
            (w.config.legend.position === 'top' || w.config.legend.position === 'bottom') &&
            w.config.legend.show &&
            !w.config.legend.floating
          ) {
            legendHeight = new Legend(this.ctx).legendHelpers.getLegendBBox().clwh + 10;
          }

          var el = w.globals.dom.baseEl.querySelector('.apexcharts-radialbar, .apexcharts-pie');
          var chartInnerDimensions = w.globals.radialSize * 2.05;

          if (
            el &&
            !w.config.chart.sparkline.enabled &&
            w.config.plotOptions.radialBar.startAngle !== 0
          ) {
            var elRadialRect = Utils$1.getBoundingClientRect(el);
            chartInnerDimensions = elRadialRect.bottom;
            var maxHeight = elRadialRect.bottom - elRadialRect.top;
            chartInnerDimensions = Math.max(w.globals.radialSize * 2.05, maxHeight);
          }

          var newHeight = chartInnerDimensions + gl.translateY + legendHeight + offY;

          if (gl.dom.elLegendForeign) {
            gl.dom.elLegendForeign.setAttribute('height', newHeight);
          }

          gl.dom.elWrap.style.height = newHeight + 'px';
          Graphics.setAttrs(gl.dom.Paper.node, {
            height: newHeight,
          });
          gl.dom.Paper.node.parentNode.parentNode.style.minHeight = newHeight + 'px';
        },
        /*
         ** All the calculations for setting range in charts will be done here
         */
      },
      {
        key: 'coreCalculations',
        value: function coreCalculations() {
          var range = new Range(this.ctx);
          range.init();
        },
      },
      {
        key: 'resetGlobals',
        value: function resetGlobals() {
          var _this = this;

          var resetxyValues = function resetxyValues() {
            return _this.w.config.series.map(function (s) {
              return [];
            });
          };

          var globalObj = new Globals();
          var gl = this.w.globals;
          globalObj.initGlobalVars(gl);
          gl.seriesXvalues = resetxyValues();
          gl.seriesYvalues = resetxyValues();
        },
      },
      {
        key: 'isMultipleY',
        value: function isMultipleY() {
          // user has supplied an array in yaxis property. So, turn on multipleYAxis flag
          if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) {
            this.w.globals.isMultipleYAxis = true;
            return true;
          }
        },
      },
      {
        key: 'xySettings',
        value: function xySettings() {
          var xyRatios = null;
          var w = this.w;

          if (w.globals.axisCharts) {
            if (w.config.xaxis.crosshairs.position === 'back') {
              var crosshairs = new Crosshairs(this.ctx);
              crosshairs.drawXCrosshairs();
            }

            if (w.config.yaxis[0].crosshairs.position === 'back') {
              var _crosshairs = new Crosshairs(this.ctx);

              _crosshairs.drawYCrosshairs();
            }

            if (
              w.config.xaxis.type === 'datetime' &&
              w.config.xaxis.labels.formatter === undefined
            ) {
              this.ctx.timeScale = new TimeScale(this.ctx);
              var formattedTimeScale = [];

              if (
                isFinite(w.globals.minX) &&
                isFinite(w.globals.maxX) &&
                !w.globals.isBarHorizontal
              ) {
                formattedTimeScale = this.ctx.timeScale.calculateTimeScaleTicks(
                  w.globals.minX,
                  w.globals.maxX
                );
              } else if (w.globals.isBarHorizontal) {
                formattedTimeScale = this.ctx.timeScale.calculateTimeScaleTicks(
                  w.globals.minY,
                  w.globals.maxY
                );
              }

              this.ctx.timeScale.recalcDimensionsBasedOnFormat(formattedTimeScale);
            }

            var coreUtils = new CoreUtils(this.ctx);
            xyRatios = coreUtils.getCalculatedRatios();
          }

          return xyRatios;
        },
      },
      {
        key: 'updateSourceChart',
        value: function updateSourceChart(targetChart) {
          this.ctx.w.globals.selection = undefined;

          this.ctx.updateHelpers._updateOptions(
            {
              chart: {
                selection: {
                  xaxis: {
                    min: targetChart.w.globals.minX,
                    max: targetChart.w.globals.maxX,
                  },
                },
              },
            },
            false,
            false
          );
        },
      },
      {
        key: 'setupBrushHandler',
        value: function setupBrushHandler() {
          var _this2 = this;

          var w = this.w; // only for brush charts

          if (!w.config.chart.brush.enabled) {
            return;
          } // if user has not defined a custom function for selection - we handle the brush chart
          // otherwise we leave it to the user to define the functionality for selection

          if (typeof w.config.chart.events.selection !== 'function') {
            var targets = w.config.chart.brush.targets || [w.config.chart.brush.target]; // retro compatibility with single target option

            targets.forEach(function (target) {
              var targetChart = ApexCharts.getChartByID(target);
              targetChart.w.globals.brushSource = _this2.ctx;

              if (typeof targetChart.w.config.chart.events.zoomed !== 'function') {
                targetChart.w.config.chart.events.zoomed = function () {
                  _this2.updateSourceChart(targetChart);
                };
              }

              if (typeof targetChart.w.config.chart.events.scrolled !== 'function') {
                targetChart.w.config.chart.events.scrolled = function () {
                  _this2.updateSourceChart(targetChart);
                };
              }
            });

            w.config.chart.events.selection = function (chart, e) {
              targets.forEach(function (target) {
                var targetChart = ApexCharts.getChartByID(target);
                var yaxis = Utils$1.clone(w.config.yaxis);

                if (
                  w.config.chart.brush.autoScaleYaxis &&
                  targetChart.w.globals.series.length === 1
                ) {
                  var scale = new Range$1(targetChart);
                  yaxis = scale.autoScaleY(targetChart, yaxis, e);
                }

                var multipleYaxis = targetChart.w.config.yaxis.reduce(function (acc, curr, index) {
                  return [].concat(_toConsumableArray(acc), [
                    _objectSpread2(
                      _objectSpread2({}, targetChart.w.config.yaxis[index]),
                      {},
                      {
                        min: yaxis[0].min,
                        max: yaxis[0].max,
                      }
                    ),
                  ]);
                }, []);

                targetChart.ctx.updateHelpers._updateOptions(
                  {
                    xaxis: {
                      min: e.xaxis.min,
                      max: e.xaxis.max,
                    },
                    yaxis: multipleYaxis,
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            };
          }
        },
      },
    ]);

    return Core;
  })();

  var UpdateHelpers = /*#__PURE__*/ (function () {
    function UpdateHelpers(ctx) {
      _classCallCheck(this, UpdateHelpers);

      this.ctx = ctx;
      this.w = ctx.w;
    }
    /**
     * private method to update Options.
     *
     * @param {object} options - A new config object can be passed which will be merged with the existing config object
     * @param {boolean} redraw - should redraw from beginning or should use existing paths and redraw from there
     * @param {boolean} animate - should animate or not on updating Options
     * @param {boolean} overwriteInitialConfig - should update the initial config or not
     */

    _createClass(UpdateHelpers, [
      {
        key: '_updateOptions',
        value: function _updateOptions(options) {
          var _this = this;

          var redraw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var animate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
          var updateSyncedCharts =
            arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
          var overwriteInitialConfig =
            arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
          return new Promise(function (resolve) {
            var charts = [_this.ctx];

            if (updateSyncedCharts) {
              charts = _this.ctx.getSyncedCharts();
            }

            if (_this.ctx.w.globals.isExecCalled) {
              // If the user called exec method, we don't want to get grouped charts as user specifically provided a chartID to update
              charts = [_this.ctx];
              _this.ctx.w.globals.isExecCalled = false;
            }

            charts.forEach(function (ch, chartIndex) {
              var w = ch.w;
              w.globals.shouldAnimate = animate;

              if (!redraw) {
                w.globals.resized = true;
                w.globals.dataChanged = true;

                if (animate) {
                  ch.series.getPreviousPaths();
                }
              }

              if (options && _typeof(options) === 'object') {
                ch.config = new Config(options);
                options = CoreUtils.extendArrayProps(ch.config, options, w); // fixes #914, #623

                if (ch.w.globals.chartID !== _this.ctx.w.globals.chartID) {
                  // don't overwrite series of synchronized charts
                  delete options.series;
                }

                w.config = Utils$1.extend(w.config, options);

                if (overwriteInitialConfig) {
                  // we need to forget the lastXAxis and lastYAxis as user forcefully overwriteInitialConfig. If we do not do this, and next time when user zooms the chart after setting yaxis.min/max or xaxis.min/max - the stored lastXAxis will never allow the chart to use the updated min/max by user.
                  w.globals.lastXAxis = options.xaxis ? Utils$1.clone(options.xaxis) : [];
                  w.globals.lastYAxis = options.yaxis ? Utils$1.clone(options.yaxis) : []; // After forgetting lastAxes, we need to restore the new config in initialConfig/initialSeries

                  w.globals.initialConfig = Utils$1.extend({}, w.config);
                  w.globals.initialSeries = Utils$1.clone(w.config.series);
                }
              }

              return ch.update(options).then(function () {
                if (chartIndex === charts.length - 1) {
                  resolve(ch);
                }
              });
            });
          });
        },
        /**
         * Private method to update Series.
         *
         * @param {array} series - New series which will override the existing
         */
      },
      {
        key: '_updateSeries',
        value: function _updateSeries(newSeries, animate) {
          var _this2 = this;

          var overwriteInitialSeries =
            arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          return new Promise(function (resolve) {
            var w = _this2.w;
            w.globals.shouldAnimate = animate;
            w.globals.dataChanged = true;

            if (animate) {
              _this2.ctx.series.getPreviousPaths();
            }

            var existingSeries; // axis charts

            if (w.globals.axisCharts) {
              existingSeries = newSeries.map(function (s, i) {
                return _this2._extendSeries(s, i);
              });

              if (existingSeries.length === 0) {
                existingSeries = [
                  {
                    data: [],
                  },
                ];
              }

              w.config.series = existingSeries;
            } else {
              // non-axis chart (pie/radialbar)
              w.config.series = newSeries.slice();
            }

            if (overwriteInitialSeries) {
              w.globals.initialSeries = Utils$1.clone(w.config.series);
            }

            return _this2.ctx.update().then(function () {
              resolve(_this2.ctx);
            });
          });
        },
      },
      {
        key: '_extendSeries',
        value: function _extendSeries(s, i) {
          var w = this.w;
          var ser = w.config.series[i];
          return _objectSpread2(
            _objectSpread2({}, w.config.series[i]),
            {},
            {
              name: s.name ? s.name : ser && ser.name,
              color: s.color ? s.color : ser && ser.color,
              type: s.type ? s.type : ser && ser.type,
              data: s.data ? s.data : ser && ser.data,
            }
          );
        },
      },
      {
        key: 'toggleDataPointSelection',
        value: function toggleDataPointSelection(seriesIndex, dataPointIndex) {
          var w = this.w;
          var elPath = null;
          var parent = ".apexcharts-series[data\\:realIndex='".concat(seriesIndex, "']");

          if (w.globals.axisCharts) {
            elPath = w.globals.dom.Paper.select(
              ''
                .concat(parent, " path[j='")
                .concat(dataPointIndex, "'], ")
                .concat(parent, " circle[j='")
                .concat(dataPointIndex, "'], ")
                .concat(parent, " rect[j='")
                .concat(dataPointIndex, "']")
            ).members[0];
          } else {
            // dataPointIndex will be undefined here, hence using seriesIndex
            if (typeof dataPointIndex === 'undefined') {
              elPath = w.globals.dom.Paper.select(
                ''.concat(parent, " path[j='").concat(seriesIndex, "']")
              ).members[0];

              if (
                w.config.chart.type === 'pie' ||
                w.config.chart.type === 'polarArea' ||
                w.config.chart.type === 'donut'
              ) {
                this.ctx.pie.pieClicked(seriesIndex);
              }
            }
          }

          if (elPath) {
            var graphics = new Graphics(this.ctx);
            graphics.pathMouseDown(elPath, null);
          } else {
            console.warn('toggleDataPointSelection: Element not found');
            return null;
          }

          return elPath.node ? elPath.node : null;
        },
      },
      {
        key: 'forceXAxisUpdate',
        value: function forceXAxisUpdate(options) {
          var w = this.w;
          var minmax = ['min', 'max'];
          minmax.forEach(function (a) {
            if (typeof options.xaxis[a] !== 'undefined') {
              w.config.xaxis[a] = options.xaxis[a];
              w.globals.lastXAxis[a] = options.xaxis[a];
            }
          });

          if (options.xaxis.categories && options.xaxis.categories.length) {
            w.config.xaxis.categories = options.xaxis.categories;
          }

          if (w.config.xaxis.convertedCatToNumeric) {
            var defaults = new Defaults(options);
            options = defaults.convertCatToNumericXaxis(options, this.ctx);
          }

          return options;
        },
      },
      {
        key: 'forceYAxisUpdate',
        value: function forceYAxisUpdate(options) {
          var w = this.w;

          if (w.config.chart.stacked && w.config.chart.stackType === '100%') {
            if (Array.isArray(options.yaxis)) {
              options.yaxis.forEach(function (yaxe, index) {
                options.yaxis[index].min = 0;
                options.yaxis[index].max = 100;
              });
            } else {
              options.yaxis.min = 0;
              options.yaxis.max = 100;
            }
          }

          return options;
        },
        /**
         * This function reverts the yaxis and xaxis min/max values to what it was when the chart was defined.
         * This function fixes an important bug where a user might load a new series after zooming in/out of previous series which resulted in wrong min/max
         * Also, this should never be called internally on zoom/pan - the reset should only happen when user calls the updateSeries() function externally
         * The function also accepts an object {xaxis, yaxis} which when present is set as the new xaxis/yaxis
         */
      },
      {
        key: 'revertDefaultAxisMinMax',
        value: function revertDefaultAxisMinMax(opts) {
          var _this3 = this;

          var w = this.w;
          var xaxis = w.globals.lastXAxis;
          var yaxis = w.globals.lastYAxis;

          if (opts && opts.xaxis) {
            xaxis = opts.xaxis;
          }

          if (opts && opts.yaxis) {
            yaxis = opts.yaxis;
          }

          w.config.xaxis.min = xaxis.min;
          w.config.xaxis.max = xaxis.max;

          var getLastYAxis = function getLastYAxis(index) {
            if (typeof yaxis[index] !== 'undefined') {
              w.config.yaxis[index].min = yaxis[index].min;
              w.config.yaxis[index].max = yaxis[index].max;
            }
          };

          w.config.yaxis.map(function (yaxe, index) {
            if (w.globals.zoomed) {
              // user has zoomed, check the last yaxis
              getLastYAxis(index);
            } else {
              // user hasn't zoomed, check the last yaxis first
              if (typeof yaxis[index] !== 'undefined') {
                getLastYAxis(index);
              } else {
                // if last y-axis don't exist, check the original yaxis
                if (typeof _this3.ctx.opts.yaxis[index] !== 'undefined') {
                  yaxe.min = _this3.ctx.opts.yaxis[index].min;
                  yaxe.max = _this3.ctx.opts.yaxis[index].max;
                }
              }
            }
          });
        },
      },
    ]);

    return UpdateHelpers;
  })();

  (function (root, factory) {
    /* istanbul ignore next */
    if (typeof define === 'function' && define.amd) {
      define(function () {
        return factory(root, root.document);
      });
      /* below check fixes #412 */
    } else if (
      (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' &&
      typeof module !== 'undefined'
    ) {
      module.exports = root.document
        ? factory(root, root.document)
        : function (w) {
            return factory(w, w.document);
          };
    } else {
      root.SVG = factory(root, root.document);
    }
  })(typeof window !== 'undefined' ? window : undefined, function (window, document) {
    // Find global reference - uses 'this' by default when available,
    // falls back to 'window' otherwise (for bundlers like Webpack)
    var globalRef = typeof this !== 'undefined' ? this : window; // The main wrapping element

    var SVG = (globalRef.SVG = function (element) {
      if (SVG.supported) {
        element = new SVG.Doc(element);

        if (!SVG.parser.draw) {
          SVG.prepare();
        }

        return element;
      }
    }); // Default namespaces

    SVG.ns = 'http://www.w3.org/2000/svg';
    SVG.xmlns = 'http://www.w3.org/2000/xmlns/';
    SVG.xlink = 'http://www.w3.org/1999/xlink';
    SVG.svgjs = 'http://svgjs.dev'; // Svg support test

    SVG.supported = (function () {
      return true; // !!document.createElementNS &&
      //     !! document.createElementNS(SVG.ns,'svg').createSVGRect
    })(); // Don't bother to continue if SVG is not supported

    if (!SVG.supported) return false; // Element id sequence

    SVG.did = 1000; // Get next named element id

    SVG.eid = function (name) {
      return 'Svgjs' + capitalize(name) + SVG.did++;
    }; // Method for element creation

    SVG.create = function (name) {
      // create element
      var element = document.createElementNS(this.ns, name); // apply unique id

      element.setAttribute('id', this.eid(name));
      return element;
    }; // Method for extending objects

    SVG.extend = function () {
      var modules, methods; // Get list of modules

      modules = [].slice.call(arguments); // Get object with extensions

      methods = modules.pop();

      for (var i = modules.length - 1; i >= 0; i--) {
        if (modules[i]) {
          for (var key in methods) {
            modules[i].prototype[key] = methods[key];
          }
        }
      } // Make sure SVG.Set inherits any newly added methods

      if (SVG.Set && SVG.Set.inherit) {
        SVG.Set.inherit();
      }
    }; // Invent new element

    SVG.invent = function (config) {
      // Create element initializer
      var initializer =
        typeof config.create === 'function'
          ? config.create
          : function () {
              this.constructor.call(this, SVG.create(config.create));
            }; // Inherit prototype

      if (config.inherit) {
        initializer.prototype = new config.inherit();
      } // Extend with methods

      if (config.extend) {
        SVG.extend(initializer, config.extend);
      } // Attach construct method to parent

      if (config.construct) {
        SVG.extend(config.parent || SVG.Container, config.construct);
      }

      return initializer;
    }; // Adopt existing svg elements

    SVG.adopt = function (node) {
      // check for presence of node
      if (!node) return null; // make sure a node isn't already adopted

      if (node.instance) return node.instance; // initialize variables

      var element; // adopt with element-specific settings

      if (node.nodeName == 'svg') {
        element = node.parentNode instanceof window.SVGElement ? new SVG.Nested() : new SVG.Doc();
      } else if (node.nodeName == 'linearGradient') {
        element = new SVG.Gradient('linear');
      } else if (node.nodeName == 'radialGradient') {
        element = new SVG.Gradient('radial');
      } else if (SVG[capitalize(node.nodeName)]) {
        element = new SVG[capitalize(node.nodeName)]();
      } else {
        element = new SVG.Element(node);
      } // ensure references

      element.type = node.nodeName;
      element.node = node;
      node.instance = element; // SVG.Class specific preparations

      if (element instanceof SVG.Doc) {
        element.namespace().defs();
      } // pull svgjs data from the dom (getAttributeNS doesn't work in html5)

      element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});
      return element;
    }; // Initialize parsing element

    SVG.prepare = function () {
      // Select document body and create invisible svg element
      var body = document.getElementsByTagName('body')[0],
        draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0); // Create parser object

      SVG.parser = {
        body: body || document.documentElement,
        draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').node,
        poly: draw.polyline().node,
        path: draw.path().node,
        native: SVG.create('svg'),
      };
    };

    SVG.parser = {
      native: SVG.create('svg'),
    };
    document.addEventListener(
      'DOMContentLoaded',
      function () {
        if (!SVG.parser.draw) {
          SVG.prepare();
        }
      },
      false
    ); // Storage for regular expressions

    SVG.regex = {
      // Parse unit value
      numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
      // Parse hex value
      hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
      // Parse rgb value
      rgb: /rgb\((\d+),(\d+),(\d+)\)/,
      // Parse reference id
      reference: /#([a-z0-9\-_]+)/i,
      // splits a transformation chain
      transforms: /\)\s*,?\s*/,
      // Whitespace
      whitespace: /\s/g,
      // Test hex value
      isHex: /^#[a-f0-9]{3,6}$/i,
      // Test rgb value
      isRgb: /^rgb\(/,
      // Test css declaration
      isCss: /[^:]+:[^;]+;?/,
      // Test for blank string
      isBlank: /^(\s+)?$/,
      // Test for numeric string
      isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
      // Test for percent value
      isPercent: /^-?[\d\.]+%$/,
      // Test for image url
      isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
      // split at whitespace and comma
      delimiter: /[\s,]+/,
      // The following regex are used to parse the d attribute of a path
      // Matches all hyphens which are not after an exponent
      hyphen: /([^e])\-/gi,
      // Replaces and tests for all path letters
      pathLetters: /[MLHVCSQTAZ]/gi,
      // yes we need this one, too
      isPathLetter: /[MLHVCSQTAZ]/i,
      // matches 0.154.23.45
      numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
      // matches .
      dots: /\./g,
    };
    SVG.utils = {
      // Map function
      map: function map(array, block) {
        var il = array.length,
          result = [];

        for (var i = 0; i < il; i++) {
          result.push(block(array[i]));
        }

        return result;
      },
      // Filter function
      filter: function filter(array, block) {
        var il = array.length,
          result = [];

        for (var i = 0; i < il; i++) {
          if (block(array[i])) {
            result.push(array[i]);
          }
        }

        return result;
      },
      filterSVGElements: function filterSVGElements(nodes) {
        return this.filter(nodes, function (el) {
          return el instanceof window.SVGElement;
        });
      },
    };
    SVG.defaults = {
      // Default attribute values
      attrs: {
        // fill and stroke
        'fill-opacity': 1,
        'stroke-opacity': 1,
        'stroke-width': 0,
        'stroke-linejoin': 'miter',
        'stroke-linecap': 'butt',
        fill: '#000000',
        stroke: '#000000',
        opacity: 1,
        // position
        x: 0,
        y: 0,
        cx: 0,
        cy: 0,
        // size
        width: 0,
        height: 0,
        // radius
        r: 0,
        rx: 0,
        ry: 0,
        // gradient
        offset: 0,
        'stop-opacity': 1,
        'stop-color': '#000000',
        // text
        'font-size': 16,
        'font-family': 'Helvetica, Arial, sans-serif',
        'text-anchor': 'start',
      },
    }; // Module for color convertions

    SVG.Color = function (color) {
      var match; // initialize defaults

      this.r = 0;
      this.g = 0;
      this.b = 0;
      if (!color) return; // parse color

      if (typeof color === 'string') {
        if (SVG.regex.isRgb.test(color)) {
          // get rgb values
          match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace, '')); // parse numeric values

          this.r = parseInt(match[1]);
          this.g = parseInt(match[2]);
          this.b = parseInt(match[3]);
        } else if (SVG.regex.isHex.test(color)) {
          // get hex values
          match = SVG.regex.hex.exec(fullHex(color)); // parse numeric values

          this.r = parseInt(match[1], 16);
          this.g = parseInt(match[2], 16);
          this.b = parseInt(match[3], 16);
        }
      } else if (_typeof(color) === 'object') {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
      }
    };

    SVG.extend(SVG.Color, {
      // Default to hex conversion
      toString: function toString() {
        return this.toHex();
      },
      // Build hex value
      toHex: function toHex() {
        return '#' + compToHex(this.r) + compToHex(this.g) + compToHex(this.b);
      },
      // Build rgb value
      toRgb: function toRgb() {
        return 'rgb(' + [this.r, this.g, this.b].join() + ')';
      },
      // Calculate true brightness
      brightness: function brightness() {
        return (this.r / 255) * 0.3 + (this.g / 255) * 0.59 + (this.b / 255) * 0.11;
      },
      // Make color morphable
      morph: function morph(color) {
        this.destination = new SVG.Color(color);
        return this;
      },
      // Get morphed color at given position
      at: function at(pos) {
        // make sure a destination is defined
        if (!this.destination) return this; // normalise pos

        pos = pos < 0 ? 0 : pos > 1 ? 1 : pos; // generate morphed color

        return new SVG.Color({
          r: ~~(this.r + (this.destination.r - this.r) * pos),
          g: ~~(this.g + (this.destination.g - this.g) * pos),
          b: ~~(this.b + (this.destination.b - this.b) * pos),
        });
      },
    }); // Testers
    // Test if given value is a color string

    SVG.Color.test = function (color) {
      color += '';
      return SVG.regex.isHex.test(color) || SVG.regex.isRgb.test(color);
    }; // Test if given value is a rgb object

    SVG.Color.isRgb = function (color) {
      return (
        color &&
        typeof color.r === 'number' &&
        typeof color.g === 'number' &&
        typeof color.b === 'number'
      );
    }; // Test if given value is a color

    SVG.Color.isColor = function (color) {
      return SVG.Color.isRgb(color) || SVG.Color.test(color);
    }; // Module for array conversion

    SVG.Array = function (array, fallback) {
      array = (array || []).valueOf(); // if array is empty and fallback is provided, use fallback

      if (array.length == 0 && fallback) {
        array = fallback.valueOf();
      } // parse array

      this.value = this.parse(array);
    };

    SVG.extend(SVG.Array, {
      // Convert array to string
      toString: function toString() {
        return this.value.join(' ');
      },
      // Real value
      valueOf: function valueOf() {
        return this.value;
      },
      // Parse whitespace separated string
      parse: function parse(array) {
        array = array.valueOf(); // if already is an array, no need to parse it

        if (Array.isArray(array)) return array;
        return this.split(array);
      },
    }); // Poly points array

    SVG.PointArray = function (array, fallback) {
      SVG.Array.call(this, array, fallback || [[0, 0]]);
    }; // Inherit from SVG.Array

    SVG.PointArray.prototype = new SVG.Array();
    SVG.PointArray.prototype.constructor = SVG.PointArray;
    var pathHandlers = {
      M: function M(c, p, p0) {
        p.x = p0.x = c[0];
        p.y = p0.y = c[1];
        return ['M', p.x, p.y];
      },
      L: function L(c, p) {
        p.x = c[0];
        p.y = c[1];
        return ['L', c[0], c[1]];
      },
      H: function H(c, p) {
        p.x = c[0];
        return ['H', c[0]];
      },
      V: function V(c, p) {
        p.y = c[0];
        return ['V', c[0]];
      },
      C: function C(c, p) {
        p.x = c[4];
        p.y = c[5];
        return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];
      },
      Q: function Q(c, p) {
        p.x = c[2];
        p.y = c[3];
        return ['Q', c[0], c[1], c[2], c[3]];
      },
      Z: function Z(c, p, p0) {
        p.x = p0.x;
        p.y = p0.y;
        return ['Z'];
      },
    };
    var mlhvqtcsa = 'mlhvqtcsaz'.split('');

    for (var i = 0, il = mlhvqtcsa.length; i < il; ++i) {
      pathHandlers[mlhvqtcsa[i]] = (function (i) {
        return function (c, p, p0) {
          if (i == 'H') c[0] = c[0] + p.x;
          else if (i == 'V') c[0] = c[0] + p.y;
          else if (i == 'A') {
            (c[5] = c[5] + p.x), (c[6] = c[6] + p.y);
          } else {
            for (var j = 0, jl = c.length; j < jl; ++j) {
              c[j] = c[j] + (j % 2 ? p.y : p.x);
            }
          }

          if (pathHandlers && typeof pathHandlers[i] === 'function') {
            // this check fixes jest unit tests
            return pathHandlers[i](c, p, p0);
          }
        };
      })(mlhvqtcsa[i].toUpperCase());
    } // Path points array

    SVG.PathArray = function (array, fallback) {
      SVG.Array.call(this, array, fallback || [['M', 0, 0]]);
    }; // Inherit from SVG.Array

    SVG.PathArray.prototype = new SVG.Array();
    SVG.PathArray.prototype.constructor = SVG.PathArray;
    SVG.extend(SVG.PathArray, {
      // Convert array to string
      toString: function toString() {
        return arrayToString(this.value);
      },
      // Move path string
      move: function move(x, y) {
        // get bounding box of current situation
        var box = this.bbox(); // get relative offset

        x -= box.x;
        y -= box.y;
        return this;
      },
      // Get morphed path array at given position
      at: function at(pos) {
        // make sure a destination is defined
        if (!this.destination) return this;
        var sourceArray = this.value,
          destinationArray = this.destination.value,
          array = [],
          pathArray = new SVG.PathArray(),
          il,
          jl; // Animate has specified in the SVG spec
        // See: https://www.w3.org/TR/SVG11/paths.html#PathElement

        for (var i = 0, il = sourceArray.length; i < il; i++) {
          array[i] = [sourceArray[i][0]];

          for (var j = 1, jl = sourceArray[i].length; j < jl; j++) {
            array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos;
          } // For the two flags of the elliptical arc command, the SVG spec say:
          // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true
          // Elliptical arc command as an array followed by corresponding indexes:
          // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]
          //   0    1   2        3                 4             5      6  7

          if (array[i][0] === 'A') {
            array[i][4] = +(array[i][4] != 0);
            array[i][5] = +(array[i][5] != 0);
          }
        } // Directly modify the value of a path array, this is done this way for performance

        pathArray.value = array;
        return pathArray;
      },
      // Absolutize and parse path to array
      parse: function parse(array) {
        // if it's already a patharray, no need to parse it
        if (array instanceof SVG.PathArray) return array.valueOf(); // prepare for parsing

        var s,
          arr,
          paramCnt = {
            M: 2,
            L: 2,
            H: 1,
            V: 1,
            C: 6,
            S: 4,
            Q: 4,
            T: 2,
            A: 7,
            Z: 0,
          };

        if (typeof array === 'string') {
          array = array
            .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123
            .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers
            .replace(SVG.regex.hyphen, '$1 -') // add space before hyphen
            .trim() // trim
            .split(SVG.regex.delimiter); // split into array
        } else {
          array = array.reduce(function (prev, curr) {
            return [].concat.call(prev, curr);
          }, []);
        } // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]

        var arr = [],
          p = new SVG.Point(),
          p0 = new SVG.Point(),
          index = 0,
          len = array.length;

        do {
          // Test if we have a path letter
          if (SVG.regex.isPathLetter.test(array[index])) {
            s = array[index];
            ++index; // If last letter was a move command and we got no new, it defaults to [L]ine
          } else if (s == 'M') {
            s = 'L';
          } else if (s == 'm') {
            s = 'l';
          }

          arr.push(
            pathHandlers[s].call(
              null,
              array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),
              p,
              p0
            )
          );
        } while (len > index);

        return arr;
      },
      // Get bounding box of path
      bbox: function bbox() {
        if (!SVG.parser.draw) {
          SVG.prepare();
        }

        SVG.parser.path.setAttribute('d', this.toString());
        return SVG.parser.path.getBBox();
      },
    }); // Module for unit convertions

    SVG.Number = SVG.invent({
      // Initialize
      create: function create(value, unit) {
        // initialize defaults
        this.value = 0;
        this.unit = unit || ''; // parse value

        if (typeof value === 'number') {
          // ensure a valid numeric value
          this.value = isNaN(value)
            ? 0
            : !isFinite(value)
            ? value < 0
              ? -3.4e38
              : +3.4e38
            : value;
        } else if (typeof value === 'string') {
          unit = value.match(SVG.regex.numberAndUnit);

          if (unit) {
            // make value numeric
            this.value = parseFloat(unit[1]); // normalize

            if (unit[5] == '%') {
              this.value /= 100;
            } else if (unit[5] == 's') {
              this.value *= 1000;
            } // store unit

            this.unit = unit[5];
          }
        } else {
          if (value instanceof SVG.Number) {
            this.value = value.valueOf();
            this.unit = value.unit;
          }
        }
      },
      // Add methods
      extend: {
        // Stringalize
        toString: function toString() {
          return (
            (this.unit == '%'
              ? ~~(this.value * 1e8) / 1e6
              : this.unit == 's'
              ? this.value / 1e3
              : this.value) + this.unit
          );
        },
        toJSON: function toJSON() {
          return this.toString();
        },
        // Convert to primitive
        valueOf: function valueOf() {
          return this.value;
        },
        // Add number
        plus: function plus(number) {
          number = new SVG.Number(number);
          return new SVG.Number(this + number, this.unit || number.unit);
        },
        // Subtract number
        minus: function minus(number) {
          number = new SVG.Number(number);
          return new SVG.Number(this - number, this.unit || number.unit);
        },
        // Multiply number
        times: function times(number) {
          number = new SVG.Number(number);
          return new SVG.Number(this * number, this.unit || number.unit);
        },
        // Divide number
        divide: function divide(number) {
          number = new SVG.Number(number);
          return new SVG.Number(this / number, this.unit || number.unit);
        },
        // Convert to different unit
        to: function to(unit) {
          var number = new SVG.Number(this);

          if (typeof unit === 'string') {
            number.unit = unit;
          }

          return number;
        },
        // Make number morphable
        morph: function morph(number) {
          this.destination = new SVG.Number(number);

          if (number.relative) {
            this.destination.value += this.value;
          }

          return this;
        },
        // Get morphed number at given position
        at: function at(pos) {
          // Make sure a destination is defined
          if (!this.destination) return this; // Generate new morphed number

          return new SVG.Number(this.destination).minus(this).times(pos).plus(this);
        },
      },
    });
    SVG.Element = SVG.invent({
      // Initialize node
      create: function create(node) {
        // make stroke value accessible dynamically
        this._stroke = SVG.defaults.attrs.stroke;
        this._event = null; // initialize data object

        this.dom = {}; // create circular reference

        if ((this.node = node)) {
          this.type = node.nodeName;
          this.node.instance = this; // store current attribute value

          this._stroke = node.getAttribute('stroke') || this._stroke;
        }
      },
      // Add class methods
      extend: {
        // Move over x-axis
        x: function x(_x) {
          return this.attr('x', _x);
        },
        // Move over y-axis
        y: function y(_y) {
          return this.attr('y', _y);
        },
        // Move by center over x-axis
        cx: function cx(x) {
          return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);
        },
        // Move by center over y-axis
        cy: function cy(y) {
          return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);
        },
        // Move element to given x and y values
        move: function move(x, y) {
          return this.x(x).y(y);
        },
        // Move element by its center
        center: function center(x, y) {
          return this.cx(x).cy(y);
        },
        // Set width of element
        width: function width(_width) {
          return this.attr('width', _width);
        },
        // Set height of element
        height: function height(_height) {
          return this.attr('height', _height);
        },
        // Set element size to given width and height
        size: function size(width, height) {
          var p = proportionalSize(this, width, height);
          return this.width(new SVG.Number(p.width)).height(new SVG.Number(p.height));
        },
        // Clone element
        clone: function clone(parent) {
          // write dom data to the dom so the clone can pickup the data
          this.writeDataToDom(); // clone element and assign new id

          var clone = assignNewId(this.node.cloneNode(true)); // insert the clone in the given parent or after myself

          if (parent) parent.add(clone);
          else this.after(clone);
          return clone;
        },
        // Remove element
        remove: function remove() {
          if (this.parent()) {
            this.parent().removeElement(this);
          }

          return this;
        },
        // Replace element
        replace: function replace(element) {
          this.after(element).remove();
          return element;
        },
        // Add element to given container and return self
        addTo: function addTo(parent) {
          return parent.put(this);
        },
        // Add element to given container and return container
        putIn: function putIn(parent) {
          return parent.add(this);
        },
        // Get / set id
        id: function id(_id) {
          return this.attr('id', _id);
        },
        // Show element
        show: function show() {
          return this.style('display', '');
        },
        // Hide element
        hide: function hide() {
          return this.style('display', 'none');
        },
        // Is element visible?
        visible: function visible() {
          return this.style('display') != 'none';
        },
        // Return id on string conversion
        toString: function toString() {
          return this.attr('id');
        },
        // Return array of classes on the node
        classes: function classes() {
          var attr = this.attr('class');
          return attr == null ? [] : attr.trim().split(SVG.regex.delimiter);
        },
        // Return true if class exists on the node, false otherwise
        hasClass: function hasClass(name) {
          return this.classes().indexOf(name) != -1;
        },
        // Add class to the node
        addClass: function addClass(name) {
          if (!this.hasClass(name)) {
            var array = this.classes();
            array.push(name);
            this.attr('class', array.join(' '));
          }

          return this;
        },
        // Remove class from the node
        removeClass: function removeClass(name) {
          if (this.hasClass(name)) {
            this.attr(
              'class',
              this.classes()
                .filter(function (c) {
                  return c != name;
                })
                .join(' ')
            );
          }

          return this;
        },
        // Toggle the presence of a class on the node
        toggleClass: function toggleClass(name) {
          return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);
        },
        // Get referenced element form attribute value
        reference: function reference(attr) {
          return SVG.get(this.attr(attr));
        },
        // Returns the parent element instance
        parent: function parent(type) {
          var parent = this; // check for parent

          if (!parent.node.parentNode) return null; // get parent element

          parent = SVG.adopt(parent.node.parentNode);
          if (!type) return parent; // loop trough ancestors if type is given

          while (parent && parent.node instanceof window.SVGElement) {
            if (typeof type === 'string' ? parent.matches(type) : parent instanceof type)
              return parent;
            if (!parent.node.parentNode || parent.node.parentNode.nodeName == '#document')
              return null; // #759, #720

            parent = SVG.adopt(parent.node.parentNode);
          }
        },
        // Get parent document
        doc: function doc() {
          return this instanceof SVG.Doc ? this : this.parent(SVG.Doc);
        },
        // return array of all ancestors of given type up to the root svg
        parents: function parents(type) {
          var parents = [],
            parent = this;

          do {
            parent = parent.parent(type);
            if (!parent || !parent.node) break;
            parents.push(parent);
          } while (parent.parent);

          return parents;
        },
        // matches the element vs a css selector
        matches: function matches(selector) {
          return _matches(this.node, selector);
        },
        // Returns the svg node to call native svg methods on it
        native: function native() {
          return this.node;
        },
        // Import raw svg
        svg: function svg(_svg) {
          // create temporary holder
          var well = document.createElement('svg'); // act as a setter if svg is given

          if (_svg && this instanceof SVG.Parent) {
            // dump raw svg
            well.innerHTML =
              '<svg>' +
              _svg.replace(/\n/, '').replace(/<([\w:-]+)([^<]+?)\/>/g, '<$1$2></$1>') +
              '</svg>'; // transplant nodes

            for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {
              this.node.appendChild(well.firstChild.firstChild);
            } // otherwise act as a getter
          } else {
            // create a wrapping svg element in case of partial content
            well.appendChild((_svg = document.createElement('svg'))); // write svgjs data to the dom

            this.writeDataToDom(); // insert a copy of this node

            _svg.appendChild(this.node.cloneNode(true)); // return target element

            return well.innerHTML.replace(/^<svg>/, '').replace(/<\/svg>$/, '');
          }

          return this;
        },
        // write svgjs data to the dom
        writeDataToDom: function writeDataToDom() {
          // dump variables recursively
          if (this.each || this.lines) {
            var fn = this.each ? this : this.lines();
            fn.each(function () {
              this.writeDataToDom();
            });
          } // remove previously set data

          this.node.removeAttribute('svgjs:data');

          if (Object.keys(this.dom).length) {
            this.node.setAttribute('svgjs:data', JSON.stringify(this.dom));
          } // see #428

          return this;
        },
        // set given data to the elements data property
        setData: function setData(o) {
          this.dom = o;
          return this;
        },
        is: function is(obj) {
          return _is(this, obj);
        },
      },
    });
    SVG.easing = {
      '-': function _(pos) {
        return pos;
      },
      '<>': function _(pos) {
        return -Math.cos(pos * Math.PI) / 2 + 0.5;
      },
      '>': function _(pos) {
        return Math.sin((pos * Math.PI) / 2);
      },
      '<': function _(pos) {
        return -Math.cos((pos * Math.PI) / 2) + 1;
      },
    };

    SVG.morph = function (pos) {
      return function (from, to) {
        return new SVG.MorphObj(from, to).at(pos);
      };
    };

    SVG.Situation = SVG.invent({
      create: function create(o) {
        this.init = false;
        this.reversed = false;
        this.reversing = false;
        this.duration = new SVG.Number(o.duration).valueOf();
        this.delay = new SVG.Number(o.delay).valueOf();
        this.start = +new Date() + this.delay;
        this.finish = this.start + this.duration;
        this.ease = o.ease; // this.loop is incremented from 0 to this.loops
        // it is also incremented when in an infinite loop (when this.loops is true)

        this.loop = 0;
        this.loops = false;
        this.animations = {
          // functionToCall: [list of morphable objects]
          // e.g. move: [SVG.Number, SVG.Number]
        };
        this.attrs = {
          // holds all attributes which are not represented from a function svg.js provides
          // e.g. someAttr: SVG.Number
        };
        this.styles = {
          // holds all styles which should be animated
          // e.g. fill-color: SVG.Color
        };
        this.transforms = [
          // holds all transformations as transformation objects
          // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]
        ];
        this.once = {
          // functions to fire at a specific position
          // e.g. "0.5": function foo(){}
        };
      },
    });
    SVG.FX = SVG.invent({
      create: function create(element) {
        this._target = element;
        this.situations = [];
        this.active = false;
        this.situation = null;
        this.paused = false;
        this.lastPos = 0;
        this.pos = 0; // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)
        // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1

        this.absPos = 0;
        this._speed = 1;
      },
      extend: {
        /**
         * sets or returns the target of this animation
         * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation
         * @param ease function || string Function which should be used for easing or easing keyword
         * @param delay Number indicating the delay before the animation starts
         * @return target || this
         */
        animate: function animate(o, ease, delay) {
          if (_typeof(o) === 'object') {
            ease = o.ease;
            delay = o.delay;
            o = o.duration;
          }

          var situation = new SVG.Situation({
            duration: o || 1000,
            delay: delay || 0,
            ease: SVG.easing[ease || '-'] || ease,
          });
          this.queue(situation);
          return this;
        },

        /**
         * sets a delay before the next element of the queue is called
         * @param delay Duration of delay in milliseconds
         * @return this.target()
         */

        /**
         * sets or returns the target of this animation
         * @param null || target SVG.Element which should be set as new target
         * @return target || this
         */
        target: function target(_target) {
          if (_target && _target instanceof SVG.Element) {
            this._target = _target;
            return this;
          }

          return this._target;
        },
        // returns the absolute position at a given time
        timeToAbsPos: function timeToAbsPos(timestamp) {
          return (timestamp - this.situation.start) / (this.situation.duration / this._speed);
        },
        // returns the timestamp from a given absolute positon
        absPosToTime: function absPosToTime(absPos) {
          return (this.situation.duration / this._speed) * absPos + this.situation.start;
        },
        // starts the animationloop
        startAnimFrame: function startAnimFrame() {
          this.stopAnimFrame();
          this.animationFrame = window.requestAnimationFrame(
            function () {
              this.step();
            }.bind(this)
          );
        },
        // cancels the animationframe
        stopAnimFrame: function stopAnimFrame() {
          window.cancelAnimationFrame(this.animationFrame);
        },
        // kicks off the animation - only does something when the queue is currently not active and at least one situation is set
        start: function start() {
          // dont start if already started
          if (!this.active && this.situation) {
            this.active = true;
            this.startCurrent();
          }

          return this;
        },
        // start the current situation
        startCurrent: function startCurrent() {
          this.situation.start = +new Date() + this.situation.delay / this._speed;
          this.situation.finish = this.situation.start + this.situation.duration / this._speed;
          return this.initAnimations().step();
        },

        /**
         * adds a function / Situation to the animation queue
         * @param fn function / situation to add
         * @return this
         */
        queue: function queue(fn) {
          if (typeof fn === 'function' || fn instanceof SVG.Situation) {
            this.situations.push(fn);
          }

          if (!this.situation) this.situation = this.situations.shift();
          return this;
        },

        /**
         * pulls next element from the queue and execute it
         * @return this
         */
        dequeue: function dequeue() {
          // stop current animation
          this.stop(); // get next animation from queue

          this.situation = this.situations.shift();

          if (this.situation) {
            if (this.situation instanceof SVG.Situation) {
              this.start();
            } else {
              // If it is not a SVG.Situation, then it is a function, we execute it
              this.situation.call(this);
            }
          }

          return this;
        },
        // updates all animations to the current state of the element
        // this is important when one property could be changed from another property
        initAnimations: function initAnimations() {
          var source;
          var s = this.situation;
          if (s.init) return this;

          for (var i in s.animations) {
            source = this.target()[i]();

            if (!Array.isArray(source)) {
              source = [source];
            }

            if (!Array.isArray(s.animations[i])) {
              s.animations[i] = [s.animations[i]];
            } // if(s.animations[i].length > source.length) {
            //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))
            // }

            for (var j = source.length; j--; ) {
              // The condition is because some methods return a normal number instead
              // of a SVG.Number
              if (s.animations[i][j] instanceof SVG.Number) {
                source[j] = new SVG.Number(source[j]);
              }

              s.animations[i][j] = source[j].morph(s.animations[i][j]);
            }
          }

          for (var i in s.attrs) {
            s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i]);
          }

          for (var i in s.styles) {
            s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i]);
          }

          s.initialTransformation = this.target().matrixify();
          s.init = true;
          return this;
        },
        clearQueue: function clearQueue() {
          this.situations = [];
          return this;
        },
        clearCurrent: function clearCurrent() {
          this.situation = null;
          return this;
        },

        /** stops the animation immediately
         * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.
         * @param clearQueue A Boolean indicating whether to remove queued animation as well.
         * @return this
         */
        stop: function stop(jumpToEnd, clearQueue) {
          var active = this.active;
          this.active = false;

          if (clearQueue) {
            this.clearQueue();
          }

          if (jumpToEnd && this.situation) {
            // initialize the situation if it was not
            !active && this.startCurrent();
            this.atEnd();
          }

          this.stopAnimFrame();
          return this.clearCurrent();
        },
        after: function after(fn) {
          var c = this.last(),
            wrapper = function wrapper(e) {
              if (e.detail.situation == c) {
                fn.call(this, c);
                this.off('finished.fx', wrapper); // prevent memory leak
              }
            };

          this.target().on('finished.fx', wrapper);
          return this._callStart();
        },
        // adds a callback which is called whenever one animation step is performed
        during: function during(fn) {
          var c = this.last(),
            wrapper = function wrapper(e) {
              if (e.detail.situation == c) {
                fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c);
              }
            }; // see above

          this.target().off('during.fx', wrapper).on('during.fx', wrapper);
          this.after(function () {
            this.off('during.fx', wrapper);
          });
          return this._callStart();
        },
        // calls after ALL animations in the queue are finished
        afterAll: function afterAll(fn) {
          var wrapper = function wrapper(e) {
            fn.call(this);
            this.off('allfinished.fx', wrapper);
          }; // see above

          this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper);
          return this._callStart();
        },
        last: function last() {
          return this.situations.length
            ? this.situations[this.situations.length - 1]
            : this.situation;
        },
        // adds one property to the animations
        add: function add(method, args, type) {
          this.last()[type || 'animations'][method] = args;
          return this._callStart();
        },

        /** perform one step of the animation
         *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time
         *  @return this
         */
        step: function step(ignoreTime) {
          // convert current time to an absolute position
          if (!ignoreTime) this.absPos = this.timeToAbsPos(+new Date()); // This part convert an absolute position to a position

          if (this.situation.loops !== false) {
            var absPos, absPosInt, lastLoop; // If the absolute position is below 0, we just treat it as if it was 0

            absPos = Math.max(this.absPos, 0);
            absPosInt = Math.floor(absPos);

            if (this.situation.loops === true || absPosInt < this.situation.loops) {
              this.pos = absPos - absPosInt;
              lastLoop = this.situation.loop;
              this.situation.loop = absPosInt;
            } else {
              this.absPos = this.situation.loops;
              this.pos = 1; // The -1 here is because we don't want to toggle reversed when all the loops have been completed

              lastLoop = this.situation.loop - 1;
              this.situation.loop = this.situation.loops;
            }

            if (this.situation.reversing) {
              // Toggle reversed if an odd number of loops as occured since the last call of step
              this.situation.reversed =
                this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2);
            }
          } else {
            // If there are no loop, the absolute position must not be above 1
            this.absPos = Math.min(this.absPos, 1);
            this.pos = this.absPos;
          } // while the absolute position can be below 0, the position must not be below 0

          if (this.pos < 0) this.pos = 0;
          if (this.situation.reversed) this.pos = 1 - this.pos; // apply easing

          var eased = this.situation.ease(this.pos); // call once-callbacks

          for (var i in this.situation.once) {
            if (i > this.lastPos && i <= eased) {
              this.situation.once[i].call(this.target(), this.pos, eased);
              delete this.situation.once[i];
            }
          } // fire during callback with position, eased position and current situation as parameter

          if (this.active)
            this.target().fire('during', {
              pos: this.pos,
              eased: eased,
              fx: this,
              situation: this.situation,
            }); // the user may call stop or finish in the during callback
          // so make sure that we still have a valid situation

          if (!this.situation) {
            return this;
          } // apply the actual animation to every property

          this.eachAt(); // do final code when situation is finished

          if (
            (this.pos == 1 && !this.situation.reversed) ||
            (this.situation.reversed && this.pos == 0)
          ) {
            // stop animation callback
            this.stopAnimFrame(); // fire finished callback with current situation as parameter

            this.target().fire('finished', {
              fx: this,
              situation: this.situation,
            });

            if (!this.situations.length) {
              this.target().fire('allfinished'); // Recheck the length since the user may call animate in the afterAll callback

              if (!this.situations.length) {
                this.target().off('.fx'); // there shouldnt be any binding left, but to make sure...

                this.active = false;
              }
            } // start next animation

            if (this.active) this.dequeue();
            else this.clearCurrent();
          } else if (!this.paused && this.active) {
            // we continue animating when we are not at the end
            this.startAnimFrame();
          } // save last eased position for once callback triggering

          this.lastPos = eased;
          return this;
        },
        // calculates the step for every property and calls block with it
        eachAt: function eachAt() {
          var len,
            at,
            self = this,
            target = this.target(),
            s = this.situation; // apply animations which can be called trough a method

          for (var i in s.animations) {
            at = [].concat(s.animations[i]).map(function (el) {
              return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;
            });
            target[i].apply(target, at);
          } // apply animation which has to be applied with attr()

          for (var i in s.attrs) {
            at = [i].concat(s.attrs[i]).map(function (el) {
              return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;
            });
            target.attr.apply(target, at);
          } // apply animation which has to be applied with style()

          for (var i in s.styles) {
            at = [i].concat(s.styles[i]).map(function (el) {
              return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;
            });
            target.style.apply(target, at);
          } // animate initialTransformation which has to be chained

          if (s.transforms.length) {
            // get initial initialTransformation
            at = s.initialTransformation;

            for (var i = 0, len = s.transforms.length; i < len; i++) {
              // get next transformation in chain
              var a = s.transforms[i]; // multiply matrix directly

              if (a instanceof SVG.Matrix) {
                if (a.relative) {
                  at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)));
                } else {
                  at = at.morph(a).at(s.ease(this.pos));
                }

                continue;
              } // when transformation is absolute we have to reset the needed transformation first

              if (!a.relative) {
                a.undo(at.extract());
              } // and reapply it after

              at = at.multiply(a.at(s.ease(this.pos)));
            } // set new matrix on element

            target.matrix(at);
          }

          return this;
        },
        // adds an once-callback which is called at a specific position and never again
        once: function once(pos, fn, isEased) {
          var c = this.last();
          if (!isEased) pos = c.ease(pos);
          c.once[pos] = fn;
          return this;
        },
        _callStart: function _callStart() {
          setTimeout(
            function () {
              this.start();
            }.bind(this),
            0
          );
          return this;
        },
      },
      parent: SVG.Element,
      // Add method to parent elements
      construct: {
        // Get fx module or create a new one, then animate with given duration and ease
        animate: function animate(o, ease, delay) {
          return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay);
        },
        delay: function delay(_delay) {
          return (this.fx || (this.fx = new SVG.FX(this))).delay(_delay);
        },
        stop: function stop(jumpToEnd, clearQueue) {
          if (this.fx) {
            this.fx.stop(jumpToEnd, clearQueue);
          }

          return this;
        },
        finish: function finish() {
          if (this.fx) {
            this.fx.finish();
          }

          return this;
        },
      },
    }); // MorphObj is used whenever no morphable object is given

    SVG.MorphObj = SVG.invent({
      create: function create(from, to) {
        // prepare color for morphing
        if (SVG.Color.isColor(to)) return new SVG.Color(from).morph(to); // check if we have a list of values

        if (SVG.regex.delimiter.test(from)) {
          // prepare path for morphing
          if (SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to);
          // prepare value list for morphing
          else return new SVG.Array(from).morph(to);
        } // prepare number for morphing

        if (SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to); // prepare for plain morphing

        this.value = from;
        this.destination = to;
      },
      extend: {
        at: function at(pos, real) {
          return real < 1 ? this.value : this.destination;
        },
        valueOf: function valueOf() {
          return this.value;
        },
      },
    });
    SVG.extend(SVG.FX, {
      // Add animatable attributes
      attr: function attr(a, v, relative) {
        // apply attributes individually
        if (_typeof(a) === 'object') {
          for (var key in a) {
            this.attr(key, a[key]);
          }
        } else {
          this.add(a, v, 'attrs');
        }

        return this;
      },
      // Add animatable plot
      plot: function plot(a, b, c, d) {
        // Lines can be plotted with 4 arguments
        if (arguments.length == 4) {
          return this.plot([a, b, c, d]);
        }

        return this.add('plot', new (this.target().morphArray)(a));
      },
    });
    SVG.Box = SVG.invent({
      create: function create(x, y, width, height) {
        if (_typeof(x) === 'object' && !(x instanceof SVG.Element)) {
          // chromes getBoundingClientRect has no x and y property
          return SVG.Box.call(
            this,
            x.left != null ? x.left : x.x,
            x.top != null ? x.top : x.y,
            x.width,
            x.height
          );
        } else if (arguments.length == 4) {
          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;
        } // add center, right, bottom...

        fullBox(this);
      },
    });
    SVG.BBox = SVG.invent({
      // Initialize
      create: function create(element) {
        SVG.Box.apply(this, [].slice.call(arguments)); // get values if element is given

        if (element instanceof SVG.Element) {
          var box; // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered

          try {
            if (!document.documentElement.contains) {
              // This is IE - it does not support contains() for top-level SVGs
              var topParent = element.node;

              while (topParent.parentNode) {
                topParent = topParent.parentNode;
              }

              if (topParent != document) throw new Error('Element not in the dom');
            } else {
              // the element is NOT in the dom, throw error
              // disabling the check below which fixes issue #76
              // if (!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')
            } // find native bbox

            box = element.node.getBBox();
          } catch (e) {
            if (element instanceof SVG.Shape) {
              if (!SVG.parser.draw) {
                // fixes apexcharts/vue-apexcharts #14
                SVG.prepare();
              }

              var clone = element.clone(SVG.parser.draw.instance).show();

              if (clone && clone.node && typeof clone.node.getBBox === 'function') {
                // this check fixes jest unit tests
                box = clone.node.getBBox();
              }

              if (clone && typeof clone.remove === 'function') {
                clone.remove();
              }
            } else {
              box = {
                x: element.node.clientLeft,
                y: element.node.clientTop,
                width: element.node.clientWidth,
                height: element.node.clientHeight,
              };
            }
          }

          SVG.Box.call(this, box);
        }
      },
      // Define ancestor
      inherit: SVG.Box,
      // Define Parent
      parent: SVG.Element,
      // Constructor
      construct: {
        // Get bounding box
        bbox: function bbox() {
          return new SVG.BBox(this);
        },
      },
    });
    SVG.BBox.prototype.constructor = SVG.BBox;
    SVG.Matrix = SVG.invent({
      // Initialize
      create: function create(source) {
        var base = arrayToMatrix([1, 0, 0, 1, 0, 0]); // ensure source as object

        source =
          source === null
            ? base
            : source instanceof SVG.Element
            ? source.matrixify()
            : typeof source === 'string'
            ? arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat))
            : arguments.length == 6
            ? arrayToMatrix([].slice.call(arguments))
            : Array.isArray(source)
            ? arrayToMatrix(source)
            : source && _typeof(source) === 'object'
            ? source
            : base; // merge source

        for (var i = abcdef.length - 1; i >= 0; --i) {
          this[abcdef[i]] = source[abcdef[i]] != null ? source[abcdef[i]] : base[abcdef[i]];
        }
      },
      // Add methods
      extend: {
        // Extract individual transformations
        extract: function extract() {
          // find delta transform points
          var px = deltaTransformPoint(this, 0, 1);
          deltaTransformPoint(this, 1, 0);
          var skewX = (180 / Math.PI) * Math.atan2(px.y, px.x) - 90;
          return {
            // translation
            x: this.e,
            y: this.f,
            transformedX:
              (this.e * Math.cos((skewX * Math.PI) / 180) +
                this.f * Math.sin((skewX * Math.PI) / 180)) /
              Math.sqrt(this.a * this.a + this.b * this.b),
            transformedY:
              (this.f * Math.cos((skewX * Math.PI) / 180) +
                this.e * Math.sin((-skewX * Math.PI) / 180)) /
              Math.sqrt(this.c * this.c + this.d * this.d),
            // rotation
            rotation: skewX,
            a: this.a,
            b: this.b,
            c: this.c,
            d: this.d,
            e: this.e,
            f: this.f,
            matrix: new SVG.Matrix(this),
          };
        },
        // Clone matrix
        clone: function clone() {
          return new SVG.Matrix(this);
        },
        // Morph one matrix into another
        morph: function morph(matrix) {
          // store new destination
          this.destination = new SVG.Matrix(matrix);
          return this;
        },
        // Multiplies by given matrix
        multiply: function multiply(matrix) {
          return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()));
        },
        // Inverses matrix
        inverse: function inverse() {
          return new SVG.Matrix(this.native().inverse());
        },
        // Translate matrix
        translate: function translate(x, y) {
          return new SVG.Matrix(this.native().translate(x || 0, y || 0));
        },
        // Convert to native SVGMatrix
        native: function native() {
          // create new matrix
          var matrix = SVG.parser.native.createSVGMatrix(); // update with current values

          for (var i = abcdef.length - 1; i >= 0; i--) {
            matrix[abcdef[i]] = this[abcdef[i]];
          }

          return matrix;
        },
        // Convert matrix to string
        toString: function toString() {
          // Construct the matrix directly, avoid values that are too small
          return (
            'matrix(' +
            float32String(this.a) +
            ',' +
            float32String(this.b) +
            ',' +
            float32String(this.c) +
            ',' +
            float32String(this.d) +
            ',' +
            float32String(this.e) +
            ',' +
            float32String(this.f) +
            ')'
          );
        },
      },
      // Define parent
      parent: SVG.Element,
      // Add parent method
      construct: {
        // Get current matrix
        ctm: function ctm() {
          return new SVG.Matrix(this.node.getCTM());
        },
        // Get current screen matrix
        screenCTM: function screenCTM() {
          /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537
             This is needed because FF does not return the transformation matrix
             for the inner coordinate system when getScreenCTM() is called on nested svgs.
             However all other Browsers do that */
          if (this instanceof SVG.Nested) {
            var rect = this.rect(1, 1);
            var m = rect.node.getScreenCTM();
            rect.remove();
            return new SVG.Matrix(m);
          }

          return new SVG.Matrix(this.node.getScreenCTM());
        },
      },
    });
    SVG.Point = SVG.invent({
      // Initialize
      create: function create(x, y) {
        var source,
          base = {
            x: 0,
            y: 0,
          }; // ensure source as object

        source = Array.isArray(x)
          ? {
              x: x[0],
              y: x[1],
            }
          : _typeof(x) === 'object'
          ? {
              x: x.x,
              y: x.y,
            }
          : x != null
          ? {
              x: x,
              y: y != null ? y : x,
            }
          : base; // If y has no value, then x is used has its value
        // merge source

        this.x = source.x;
        this.y = source.y;
      },
      // Add methods
      extend: {
        // Clone point
        clone: function clone() {
          return new SVG.Point(this);
        },
        // Morph one point into another
        morph: function morph(x, y) {
          // store new destination
          this.destination = new SVG.Point(x, y);
          return this;
        },
      },
    });
    SVG.extend(SVG.Element, {
      // Get point
      point: function point(x, y) {
        return new SVG.Point(x, y).transform(this.screenCTM().inverse());
      },
    });
    SVG.extend(SVG.Element, {
      // Set svg element attribute
      attr: function attr(a, v, n) {
        // act as full getter
        if (a == null) {
          // get an object of attributes
          a = {};
          v = this.node.attributes;

          for (var n = v.length - 1; n >= 0; n--) {
            a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue)
              ? parseFloat(v[n].nodeValue)
              : v[n].nodeValue;
          }

          return a;
        } else if (_typeof(a) === 'object') {
          // apply every attribute individually if an object is passed
          for (var v_ in a) {
            this.attr(v_, a[v_]);
          }
        } else if (v === null) {
          // remove value
          this.node.removeAttribute(a);
        } else if (v == null) {
          // act as a getter if the first and only argument is not an object
          v = this.node.getAttribute(a);
          return v == null ? SVG.defaults.attrs[a] : SVG.regex.isNumber.test(v) ? parseFloat(v) : v;
        } else {
          // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0
          if (a == 'stroke-width') {
            this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null);
          } else if (a == 'stroke') {
            this._stroke = v;
          } // convert image fill and stroke to patterns

          if (a == 'fill' || a == 'stroke') {
            if (SVG.regex.isImage.test(v)) {
              v = this.doc().defs().image(v, 0, 0);
            }

            if (v instanceof SVG.Image) {
              v = this.doc()
                .defs()
                .pattern(0, 0, function () {
                  this.add(v);
                });
            }
          } // ensure correct numeric values (also accepts NaN and Infinity)

          if (typeof v === 'number') {
            v = new SVG.Number(v);
          } // ensure full hex color
          else if (SVG.Color.isColor(v)) {
            v = new SVG.Color(v);
          } // parse array values
          else if (Array.isArray(v)) {
            v = new SVG.Array(v);
          } // if the passed attribute is leading...

          if (a == 'leading') {
            // ... call the leading method instead
            if (this.leading) {
              this.leading(v);
            }
          } else {
            // set given attribute on node
            typeof n === 'string'
              ? this.node.setAttributeNS(n, a, v.toString())
              : this.node.setAttribute(a, v.toString());
          } // rebuild if required

          if (this.rebuild && (a == 'font-size' || a == 'x')) {
            this.rebuild(a, v);
          }
        }

        return this;
      },
    });
    SVG.extend(SVG.Element, {
      // Add transformations
      transform: function transform(o, relative) {
        // get target in case of the fx module, otherwise reference this
        var target = this,
          matrix;
        // act as a getter

        if (_typeof(o) !== 'object') {
          // get current matrix
          matrix = new SVG.Matrix(target).extract();
          return typeof o === 'string' ? matrix[o] : matrix;
        } // get current matrix

        matrix = new SVG.Matrix(target); // ensure relative flag

        relative = !!relative || !!o.relative; // act on matrix

        if (o.a != null) {
          matrix = relative // relative
            ? matrix.multiply(new SVG.Matrix(o)) // absolute
            : new SVG.Matrix(o);
        }

        return this.attr('transform', matrix);
      },
    });
    SVG.extend(SVG.Element, {
      // Reset all transformations
      untransform: function untransform() {
        return this.attr('transform', null);
      },
      // merge the whole transformation chain into one matrix and returns it
      matrixify: function matrixify() {
        var matrix = (this.attr('transform') || '')
          .split(SVG.regex.transforms)
          .slice(0, -1)
          .map(function (str) {
            // generate key => value pairs
            var kv = str.trim().split('(');
            return [
              kv[0],
              kv[1].split(SVG.regex.delimiter).map(function (str) {
                return parseFloat(str);
              }),
            ];
          }) // merge every transformation into one matrix
          .reduce(function (matrix, transform) {
            if (transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]));
            return matrix[transform[0]].apply(matrix, transform[1]);
          }, new SVG.Matrix());
        return matrix;
      },
      // add an element to another parent without changing the visual representation on the screen
      toParent: function toParent(parent) {
        if (this == parent) return this;
        var ctm = this.screenCTM();
        var pCtm = parent.screenCTM().inverse();
        this.addTo(parent).untransform().transform(pCtm.multiply(ctm));
        return this;
      },
      // same as above with parent equals root-svg
      toDoc: function toDoc() {
        return this.toParent(this.doc());
      },
    });
    SVG.Transformation = SVG.invent({
      create: function create(source, inversed) {
        if (arguments.length > 1 && typeof inversed !== 'boolean') {
          return this.constructor.call(this, [].slice.call(arguments));
        }

        if (Array.isArray(source)) {
          for (var i = 0, len = this.arguments.length; i < len; ++i) {
            this[this.arguments[i]] = source[i];
          }
        } else if (source && _typeof(source) === 'object') {
          for (var i = 0, len = this.arguments.length; i < len; ++i) {
            this[this.arguments[i]] = source[this.arguments[i]];
          }
        }

        this.inversed = false;

        if (inversed === true) {
          this.inversed = true;
        }
      },
    });
    SVG.Translate = SVG.invent({
      parent: SVG.Matrix,
      inherit: SVG.Transformation,
      create: function create(source, inversed) {
        this.constructor.apply(this, [].slice.call(arguments));
      },
      extend: {
        arguments: ['transformedX', 'transformedY'],
        method: 'translate',
      },
    });
    SVG.extend(SVG.Element, {
      // Dynamic style generator
      style: function style(s, v) {
        if (arguments.length == 0) {
          // get full style
          return this.node.style.cssText || '';
        } else if (arguments.length < 2) {
          // apply every style individually if an object is passed
          if (_typeof(s) === 'object') {
            for (var v_ in s) {
              this.style(v_, s[v_]);
            }
          } else if (SVG.regex.isCss.test(s)) {
            // parse css string
            s = s
              .split(/\s*;\s*/) // filter out suffix ; and stuff like ;;
              .filter(function (e) {
                return !!e;
              })
              .map(function (e) {
                return e.split(/\s*:\s*/);
              }); // apply every definition individually

            while ((v = s.pop())) {
              this.style(v[0], v[1]);
            }
          } else {
            // act as a getter if the first and only argument is not an object
            return this.node.style[camelCase(s)];
          }
        } else {
          this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v;
        }

        return this;
      },
    });
    SVG.Parent = SVG.invent({
      // Initialize node
      create: function create(element) {
        this.constructor.call(this, element);
      },
      // Inherit from
      inherit: SVG.Element,
      // Add class methods
      extend: {
        // Returns all child elements
        children: function children() {
          return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function (node) {
            return SVG.adopt(node);
          });
        },
        // Add given element at a position
        add: function add(element, i) {
          if (i == null) {
            this.node.appendChild(element.node);
          } else if (element.node != this.node.childNodes[i]) {
            this.node.insertBefore(element.node, this.node.childNodes[i]);
          }

          return this;
        },
        // Basically does the same as `add()` but returns the added element instead
        put: function put(element, i) {
          this.add(element, i);
          return element;
        },
        // Checks if the given element is a child
        has: function has(element) {
          return this.index(element) >= 0;
        },
        // Gets index of given element
        index: function index(element) {
          return [].slice.call(this.node.childNodes).indexOf(element.node);
        },
        // Get a element at the given index
        get: function get(i) {
          return SVG.adopt(this.node.childNodes[i]);
        },
        // Get first child
        first: function first() {
          return this.get(0);
        },
        // Get the last child
        last: function last() {
          return this.get(this.node.childNodes.length - 1);
        },
        // Iterates over all children and invokes a given block
        each: function each(block, deep) {
          var il,
            children = this.children();

          for (var i = 0, il = children.length; i < il; i++) {
            if (children[i] instanceof SVG.Element) {
              block.apply(children[i], [i, children]);
            }

            if (deep && children[i] instanceof SVG.Container) {
              children[i].each(block, deep);
            }
          }

          return this;
        },
        // Remove a given child
        removeElement: function removeElement(element) {
          this.node.removeChild(element.node);
          return this;
        },
        // Remove all elements in this container
        clear: function clear() {
          // remove children
          while (this.node.hasChildNodes()) {
            this.node.removeChild(this.node.lastChild);
          } // remove defs reference

          delete this._defs;
          return this;
        },
        // Get defs
        defs: function defs() {
          return this.doc().defs();
        },
      },
    });
    SVG.extend(SVG.Parent, {
      ungroup: function ungroup(parent, depth) {
        if (depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this;
        parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent));
        depth = depth || Infinity;
        this.each(function () {
          if (this instanceof SVG.Defs) return this;
          if (this instanceof SVG.Parent) return this.ungroup(parent, depth - 1);
          return this.toParent(parent);
        });
        this.node.firstChild || this.remove();
        return this;
      },
      flatten: function flatten(parent, depth) {
        return this.ungroup(parent, depth);
      },
    });
    SVG.Container = SVG.invent({
      // Initialize node
      create: function create(element) {
        this.constructor.call(this, element);
      },
      // Inherit from
      inherit: SVG.Parent,
    });
    SVG.ViewBox = SVG.invent({
      // Define parent
      parent: SVG.Container,
      // Add parent method
      construct: {},
    }); // Add events to elements
    [
      'click',
      'dblclick',
      'mousedown',
      'mouseup',
      'mouseover',
      'mouseout',
      'mousemove', // , 'mouseenter' -> not supported by IE
      // , 'mouseleave' -> not supported by IE
      'touchstart',
      'touchmove',
      'touchleave',
      'touchend',
      'touchcancel',
    ].forEach(function (event) {
      // add event to SVG.Element
      SVG.Element.prototype[event] = function (f) {
        // bind event to element rather than element node
        SVG.on(this.node, event, f);
        return this;
      };
    }); // Initialize listeners stack

    SVG.listeners = [];
    SVG.handlerMap = [];
    SVG.listenerId = 0; // Add event binder in the SVG namespace

    SVG.on = function (node, event, listener, binding, options) {
      // create listener, get object-index
      var l = listener.bind(binding || node.instance || node),
        index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1,
        ev = event.split('.')[0],
        ns = event.split('.')[1] || '*'; // ensure valid object

      SVG.listeners[index] = SVG.listeners[index] || {};
      SVG.listeners[index][ev] = SVG.listeners[index][ev] || {};
      SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {};

      if (!listener._svgjsListenerId) {
        listener._svgjsListenerId = ++SVG.listenerId;
      } // reference listener

      SVG.listeners[index][ev][ns][listener._svgjsListenerId] = l; // add listener

      node.addEventListener(
        ev,
        l,
        options || {
          passive: true,
        }
      );
    }; // Add event unbinder in the SVG namespace

    SVG.off = function (node, event, listener) {
      var index = SVG.handlerMap.indexOf(node),
        ev = event && event.split('.')[0],
        ns = event && event.split('.')[1],
        namespace = '';
      if (index == -1) return;

      if (listener) {
        if (typeof listener === 'function') listener = listener._svgjsListenerId;
        if (!listener) return; // remove listener reference

        if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {
          // remove listener
          node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false);
          delete SVG.listeners[index][ev][ns || '*'][listener];
        }
      } else if (ns && ev) {
        // remove all listeners for a namespaced event
        if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {
          for (var listener_ in SVG.listeners[index][ev][ns]) {
            SVG.off(node, [ev, ns].join('.'), listener_);
          }

          delete SVG.listeners[index][ev][ns];
        }
      } else if (ns) {
        // remove all listeners for a specific namespace
        for (var event_ in SVG.listeners[index]) {
          for (var namespace in SVG.listeners[index][event_]) {
            if (ns === namespace) {
              SVG.off(node, [event_, ns].join('.'));
            }
          }
        }
      } else if (ev) {
        // remove all listeners for the event
        if (SVG.listeners[index][ev]) {
          for (var namespace in SVG.listeners[index][ev]) {
            SVG.off(node, [ev, namespace].join('.'));
          }

          delete SVG.listeners[index][ev];
        }
      } else {
        // remove all listeners on a given node
        for (var event_ in SVG.listeners[index]) {
          SVG.off(node, event_);
        }

        delete SVG.listeners[index];
        delete SVG.handlerMap[index];
      }
    }; //

    SVG.extend(SVG.Element, {
      // Bind given event to listener
      on: function on(event, listener, binding, options) {
        SVG.on(this.node, event, listener, binding, options);
        return this;
      },
      // Unbind event from listener
      off: function off(event, listener) {
        SVG.off(this.node, event, listener);
        return this;
      },
      // Fire given event
      fire: function fire(event, data) {
        // Dispatch event
        if (event instanceof window.Event) {
          this.node.dispatchEvent(event);
        } else {
          this.node.dispatchEvent(
            (event = new SVG.CustomEvent(event, {
              detail: data,
              cancelable: true,
            }))
          );
        }

        this._event = event;
        return this;
      },
      event: function event() {
        return this._event;
      },
    });
    SVG.Defs = SVG.invent({
      // Initialize node
      create: 'defs',
      // Inherit from
      inherit: SVG.Container,
    });
    SVG.G = SVG.invent({
      // Initialize node
      create: 'g',
      // Inherit from
      inherit: SVG.Container,
      // Add class methods
      extend: {
        // Move over x-axis
        x: function x(_x2) {
          return _x2 == null
            ? this.transform('x')
            : this.transform(
                {
                  x: _x2 - this.x(),
                },
                true
              );
        },
      },
      // Add parent method
      construct: {
        // Create a group element
        group: function group() {
          return this.put(new SVG.G());
        },
      },
    });
    SVG.Doc = SVG.invent({
      // Initialize node
      create: function create(element) {
        if (element) {
          // ensure the presence of a dom element
          element = typeof element === 'string' ? document.getElementById(element) : element; // If the target is an svg element, use that element as the main wrapper.
          // This allows svg.js to work with svg documents as well.

          if (element.nodeName == 'svg') {
            this.constructor.call(this, element);
          } else {
            this.constructor.call(this, SVG.create('svg'));
            element.appendChild(this.node);
            this.size('100%', '100%');
          } // set svg element attributes and ensure defs node

          this.namespace().defs();
        }
      },
      // Inherit from
      inherit: SVG.Container,
      // Add class methods
      extend: {
        // Add namespaces
        namespace: function namespace() {
          return this.attr({
            xmlns: SVG.ns,
            version: '1.1',
          })
            .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)
            .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns);
        },
        // Creates and returns defs element
        defs: function defs() {
          if (!this._defs) {
            var defs; // Find or create a defs element in this instance

            if ((defs = this.node.getElementsByTagName('defs')[0])) {
              this._defs = SVG.adopt(defs);
            } else {
              this._defs = new SVG.Defs();
            } // Make sure the defs node is at the end of the stack

            this.node.appendChild(this._defs.node);
          }

          return this._defs;
        },
        // custom parent method
        parent: function parent() {
          if (!this.node.parentNode || this.node.parentNode.nodeName == '#document') return null;
          return this.node.parentNode;
        },
        // Removes the doc from the DOM
        remove: function remove() {
          if (this.parent()) {
            this.parent().removeChild(this.node);
          }

          return this;
        },
        clear: function clear() {
          // remove children
          while (this.node.hasChildNodes()) {
            this.node.removeChild(this.node.lastChild);
          } // remove defs reference

          delete this._defs; // add back parser

          if (SVG.parser.draw && !SVG.parser.draw.parentNode) {
            this.node.appendChild(SVG.parser.draw);
          }

          return this;
        },
        clone: function clone(parent) {
          // write dom data to the dom so the clone can pickup the data
          this.writeDataToDom(); // get reference to node

          var node = this.node; // clone element and assign new id

          var clone = assignNewId(node.cloneNode(true)); // insert the clone in the given parent or after myself

          if (parent) {
            (parent.node || parent).appendChild(clone.node);
          } else {
            node.parentNode.insertBefore(clone.node, node.nextSibling);
          }

          return clone;
        },
      },
    }); // ### This module adds backward / forward functionality to elements.
    //

    SVG.extend(SVG.Element, {
      // Get all siblings, including myself
    });
    SVG.Gradient = SVG.invent({
      // Initialize node
      create: function create(type) {
        this.constructor.call(this, SVG.create(type + 'Gradient')); // store type

        this.type = type;
      },
      // Inherit from
      inherit: SVG.Container,
      // Add class methods
      extend: {
        // Add a color stop
        at: function at(offset, color, opacity) {
          return this.put(new SVG.Stop()).update(offset, color, opacity);
        },
        // Update gradient
        update: function update(block) {
          // remove all stops
          this.clear(); // invoke passed block

          if (typeof block === 'function') {
            block.call(this, this);
          }

          return this;
        },
        // Return the fill id
        fill: function fill() {
          return 'url(#' + this.id() + ')';
        },
        // Alias string convertion to fill
        toString: function toString() {
          return this.fill();
        },
        // custom attr to handle transform
        attr: function attr(a, b, c) {
          if (a == 'transform') a = 'gradientTransform';
          return SVG.Container.prototype.attr.call(this, a, b, c);
        },
      },
      // Add parent method
      construct: {
        // Create gradient element in defs
        gradient: function gradient(type, block) {
          return this.defs().gradient(type, block);
        },
      },
    }); // Add animatable methods to both gradient and fx module

    SVG.extend(SVG.Gradient, SVG.FX, {
      // From position
      from: function from(x, y) {
        return (this._target || this).type == 'radial'
          ? this.attr({
              fx: new SVG.Number(x),
              fy: new SVG.Number(y),
            })
          : this.attr({
              x1: new SVG.Number(x),
              y1: new SVG.Number(y),
            });
      },
      // To position
      to: function to(x, y) {
        return (this._target || this).type == 'radial'
          ? this.attr({
              cx: new SVG.Number(x),
              cy: new SVG.Number(y),
            })
          : this.attr({
              x2: new SVG.Number(x),
              y2: new SVG.Number(y),
            });
      },
    }); // Base gradient generation

    SVG.extend(SVG.Defs, {
      // define gradient
      gradient: function gradient(type, block) {
        return this.put(new SVG.Gradient(type)).update(block);
      },
    });
    SVG.Stop = SVG.invent({
      // Initialize node
      create: 'stop',
      // Inherit from
      inherit: SVG.Element,
      // Add class methods
      extend: {
        // add color stops
        update: function update(o) {
          if (typeof o === 'number' || o instanceof SVG.Number) {
            o = {
              offset: arguments[0],
              color: arguments[1],
              opacity: arguments[2],
            };
          } // set attributes

          if (o.opacity != null) this.attr('stop-opacity', o.opacity);
          if (o.color != null) this.attr('stop-color', o.color);
          if (o.offset != null) this.attr('offset', new SVG.Number(o.offset));
          return this;
        },
      },
    });
    SVG.Pattern = SVG.invent({
      // Initialize node
      create: 'pattern',
      // Inherit from
      inherit: SVG.Container,
      // Add class methods
      extend: {
        // Return the fill id
        fill: function fill() {
          return 'url(#' + this.id() + ')';
        },
        // Update pattern by rebuilding
        update: function update(block) {
          // remove content
          this.clear(); // invoke passed block

          if (typeof block === 'function') {
            block.call(this, this);
          }

          return this;
        },
        // Alias string convertion to fill
        toString: function toString() {
          return this.fill();
        },
        // custom attr to handle transform
        attr: function attr(a, b, c) {
          if (a == 'transform') a = 'patternTransform';
          return SVG.Container.prototype.attr.call(this, a, b, c);
        },
      },
      // Add parent method
      construct: {
        // Create pattern element in defs
        pattern: function pattern(width, height, block) {
          return this.defs().pattern(width, height, block);
        },
      },
    });
    SVG.extend(SVG.Defs, {
      // Define gradient
      pattern: function pattern(width, height, block) {
        return this.put(new SVG.Pattern()).update(block).attr({
          x: 0,
          y: 0,
          width: width,
          height: height,
          patternUnits: 'userSpaceOnUse',
        });
      },
    });
    SVG.Shape = SVG.invent({
      // Initialize node
      create: function create(element) {
        this.constructor.call(this, element);
      },
      // Inherit from
      inherit: SVG.Element,
    });
    SVG.Symbol = SVG.invent({
      // Initialize node
      create: 'symbol',
      // Inherit from
      inherit: SVG.Container,
      construct: {
        // create symbol
        symbol: function symbol() {
          return this.put(new SVG.Symbol());
        },
      },
    });
    SVG.Use = SVG.invent({
      // Initialize node
      create: 'use',
      // Inherit from
      inherit: SVG.Shape,
      // Add class methods
      extend: {
        // Use element as a reference
        element: function element(_element, file) {
          // Set lined element
          return this.attr('href', (file || '') + '#' + _element, SVG.xlink);
        },
      },
      // Add parent method
      construct: {
        // Create a use element
        use: function use(element, file) {
          return this.put(new SVG.Use()).element(element, file);
        },
      },
    });
    SVG.Rect = SVG.invent({
      // Initialize node
      create: 'rect',
      // Inherit from
      inherit: SVG.Shape,
      // Add parent method
      construct: {
        // Create a rect element
        rect: function rect(width, height) {
          return this.put(new SVG.Rect()).size(width, height);
        },
      },
    });
    SVG.Circle = SVG.invent({
      // Initialize node
      create: 'circle',
      // Inherit from
      inherit: SVG.Shape,
      // Add parent method
      construct: {
        // Create circle element, based on ellipse
        circle: function circle(size) {
          return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0, 0);
        },
      },
    });
    SVG.extend(SVG.Circle, SVG.FX, {
      // Radius x value
      rx: function rx(_rx) {
        return this.attr('r', _rx);
      },
      // Alias radius x value
      ry: function ry(_ry) {
        return this.rx(_ry);
      },
    });
    SVG.Ellipse = SVG.invent({
      // Initialize node
      create: 'ellipse',
      // Inherit from
      inherit: SVG.Shape,
      // Add parent method
      construct: {
        // Create an ellipse
        ellipse: function ellipse(width, height) {
          return this.put(new SVG.Ellipse()).size(width, height).move(0, 0);
        },
      },
    });
    SVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {
      // Radius x value
      rx: function rx(_rx2) {
        return this.attr('rx', _rx2);
      },
      // Radius y value
      ry: function ry(_ry2) {
        return this.attr('ry', _ry2);
      },
    }); // Add common method

    SVG.extend(SVG.Circle, SVG.Ellipse, {
      // Move over x-axis
      x: function x(_x3) {
        return _x3 == null ? this.cx() - this.rx() : this.cx(_x3 + this.rx());
      },
      // Move over y-axis
      y: function y(_y2) {
        return _y2 == null ? this.cy() - this.ry() : this.cy(_y2 + this.ry());
      },
      // Move by center over x-axis
      cx: function cx(x) {
        return x == null ? this.attr('cx') : this.attr('cx', x);
      },
      // Move by center over y-axis
      cy: function cy(y) {
        return y == null ? this.attr('cy') : this.attr('cy', y);
      },
      // Set width of element
      width: function width(_width2) {
        return _width2 == null ? this.rx() * 2 : this.rx(new SVG.Number(_width2).divide(2));
      },
      // Set height of element
      height: function height(_height2) {
        return _height2 == null ? this.ry() * 2 : this.ry(new SVG.Number(_height2).divide(2));
      },
      // Custom size function
      size: function size(width, height) {
        var p = proportionalSize(this, width, height);
        return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));
      },
    });
    SVG.Line = SVG.invent({
      // Initialize node
      create: 'line',
      // Inherit from
      inherit: SVG.Shape,
      // Add class methods
      extend: {
        // Get array
        array: function array() {
          return new SVG.PointArray([
            [this.attr('x1'), this.attr('y1')],
            [this.attr('x2'), this.attr('y2')],
          ]);
        },
        // Overwrite native plot() method
        plot: function plot(x1, y1, x2, y2) {
          if (x1 == null) {
            return this.array();
          } else if (typeof y1 !== 'undefined') {
            x1 = {
              x1: x1,
              y1: y1,
              x2: x2,
              y2: y2,
            };
          } else {
            x1 = new SVG.PointArray(x1).toLine();
          }

          return this.attr(x1);
        },
        // Move by left top corner
        move: function move(x, y) {
          return this.attr(this.array().move(x, y).toLine());
        },
        // Set element size to given width and height
        size: function size(width, height) {
          var p = proportionalSize(this, width, height);
          return this.attr(this.array().size(p.width, p.height).toLine());
        },
      },
      // Add parent method
      construct: {
        // Create a line element
        line: function line(x1, y1, x2, y2) {
          // make sure plot is called as a setter
          // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray
          return SVG.Line.prototype.plot.apply(
            this.put(new SVG.Line()),
            x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]
          );
        },
      },
    });
    SVG.Polyline = SVG.invent({
      // Initialize node
      create: 'polyline',
      // Inherit from
      inherit: SVG.Shape,
      // Add parent method
      construct: {
        // Create a wrapped polyline element
        polyline: function polyline(p) {
          // make sure plot is called as a setter
          return this.put(new SVG.Polyline()).plot(p || new SVG.PointArray());
        },
      },
    });
    SVG.Polygon = SVG.invent({
      // Initialize node
      create: 'polygon',
      // Inherit from
      inherit: SVG.Shape,
      // Add parent method
      construct: {
        // Create a wrapped polygon element
        polygon: function polygon(p) {
          // make sure plot is called as a setter
          return this.put(new SVG.Polygon()).plot(p || new SVG.PointArray());
        },
      },
    }); // Add polygon-specific functions

    SVG.extend(SVG.Polyline, SVG.Polygon, {
      // Get array
      array: function array() {
        return this._array || (this._array = new SVG.PointArray(this.attr('points')));
      },
      // Plot new path
      plot: function plot(p) {
        return p == null
          ? this.array()
          : this.clear().attr(
              'points',
              typeof p === 'string' ? p : (this._array = new SVG.PointArray(p))
            );
      },
      // Clear array cache
      clear: function clear() {
        delete this._array;
        return this;
      },
      // Move by left top corner
      move: function move(x, y) {
        return this.attr('points', this.array().move(x, y));
      },
      // Set element size to given width and height
      size: function size(width, height) {
        var p = proportionalSize(this, width, height);
        return this.attr('points', this.array().size(p.width, p.height));
      },
    }); // unify all point to point elements

    SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {
      // Define morphable array
      morphArray: SVG.PointArray,
      // Move by left top corner over x-axis
      x: function x(_x4) {
        return _x4 == null ? this.bbox().x : this.move(_x4, this.bbox().y);
      },
      // Move by left top corner over y-axis
      y: function y(_y3) {
        return _y3 == null ? this.bbox().y : this.move(this.bbox().x, _y3);
      },
      // Set width of element
      width: function width(_width3) {
        var b = this.bbox();
        return _width3 == null ? b.width : this.size(_width3, b.height);
      },
      // Set height of element
      height: function height(_height3) {
        var b = this.bbox();
        return _height3 == null ? b.height : this.size(b.width, _height3);
      },
    });
    SVG.Path = SVG.invent({
      // Initialize node
      create: 'path',
      // Inherit from
      inherit: SVG.Shape,
      // Add class methods
      extend: {
        // Define morphable array
        morphArray: SVG.PathArray,
        // Get array
        array: function array() {
          return this._array || (this._array = new SVG.PathArray(this.attr('d')));
        },
        // Plot new path
        plot: function plot(d) {
          return d == null
            ? this.array()
            : this.clear().attr(
                'd',
                typeof d === 'string' ? d : (this._array = new SVG.PathArray(d))
              );
        },
        // Clear array cache
        clear: function clear() {
          delete this._array;
          return this;
        },
      },
      // Add parent method
      construct: {
        // Create a wrapped path element
        path: function path(d) {
          // make sure plot is called as a setter
          return this.put(new SVG.Path()).plot(d || new SVG.PathArray());
        },
      },
    });
    SVG.Image = SVG.invent({
      // Initialize node
      create: 'image',
      // Inherit from
      inherit: SVG.Shape,
      // Add class methods
      extend: {
        // (re)load image
        load: function load(url) {
          if (!url) return this;
          var self = this,
            img = new window.Image(); // preload image

          SVG.on(img, 'load', function () {
            SVG.off(img);
            var p = self.parent(SVG.Pattern);
            if (p === null) return; // ensure image size

            if (self.width() == 0 && self.height() == 0) {
              self.size(img.width, img.height);
            } // ensure pattern size if not set

            if (p && p.width() == 0 && p.height() == 0) {
              p.size(self.width(), self.height());
            } // callback

            if (typeof self._loaded === 'function') {
              self._loaded.call(self, {
                width: img.width,
                height: img.height,
                ratio: img.width / img.height,
                url: url,
              });
            }
          });
          SVG.on(img, 'error', function (e) {
            SVG.off(img);

            if (typeof self._error === 'function') {
              self._error.call(self, e);
            }
          });
          return this.attr('href', (img.src = this.src = url), SVG.xlink);
        },
        // Add loaded callback
        loaded: function loaded(_loaded) {
          this._loaded = _loaded;
          return this;
        },
        error: function error(_error) {
          this._error = _error;
          return this;
        },
      },
      // Add parent method
      construct: {
        // create image element, load image and set its size
        image: function image(source, width, height) {
          return this.put(new SVG.Image())
            .load(source)
            .size(width || 0, height || width || 0);
        },
      },
    });
    SVG.Text = SVG.invent({
      // Initialize node
      create: function create() {
        this.constructor.call(this, SVG.create('text'));
        this.dom.leading = new SVG.Number(1.3); // store leading value for rebuilding

        this._rebuild = true; // enable automatic updating of dy values

        this._build = false; // disable build mode for adding multiple lines
        // set default font

        this.attr('font-family', SVG.defaults.attrs['font-family']);
      },
      // Inherit from
      inherit: SVG.Shape,
      // Add class methods
      extend: {
        // Move over x-axis
        x: function x(_x5) {
          // act as getter
          if (_x5 == null) {
            return this.attr('x');
          }

          return this.attr('x', _x5);
        },
        // Set the text content
        text: function text(_text) {
          // act as getter
          if (typeof _text === 'undefined') {
            var _text = '';
            var children = this.node.childNodes;

            for (var i = 0, len = children.length; i < len; ++i) {
              // add newline if its not the first child and newLined is set to true
              if (
                i != 0 &&
                children[i].nodeType != 3 &&
                SVG.adopt(children[i]).dom.newLined == true
              ) {
                _text += '\n';
              } // add content of this node

              _text += children[i].textContent;
            }

            return _text;
          } // remove existing content

          this.clear().build(true);

          if (typeof _text === 'function') {
            // call block
            _text.call(this, this);
          } else {
            // store text and make sure text is not blank
            _text = _text.split('\n'); // build new lines

            for (var i = 0, il = _text.length; i < il; i++) {
              this.tspan(_text[i]).newLine();
            }
          } // disable build mode and rebuild lines

          return this.build(false).rebuild();
        },
        // Set font size
        size: function size(_size) {
          return this.attr('font-size', _size).rebuild();
        },
        // Set / get leading
        leading: function leading(value) {
          // act as getter
          if (value == null) {
            return this.dom.leading;
          } // act as setter

          this.dom.leading = new SVG.Number(value);
          return this.rebuild();
        },
        // Get all the first level lines
        lines: function lines() {
          var node = ((this.textPath && this.textPath()) || this).node; // filter tspans and map them to SVG.js instances

          var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function (el) {
            return SVG.adopt(el);
          }); // return an instance of SVG.set

          return new SVG.Set(lines);
        },
        // Rebuild appearance type
        rebuild: function rebuild(_rebuild) {
          // store new rebuild flag if given
          if (typeof _rebuild === 'boolean') {
            this._rebuild = _rebuild;
          } // define position of all lines

          if (this._rebuild) {
            var self = this,
              blankLineOffset = 0,
              dy = this.dom.leading * new SVG.Number(this.attr('font-size'));
            this.lines().each(function () {
              if (this.dom.newLined) {
                if (!self.textPath()) {
                  this.attr('x', self.attr('x'));
                }

                if (this.text() == '\n') {
                  blankLineOffset += dy;
                } else {
                  this.attr('dy', dy + blankLineOffset);
                  blankLineOffset = 0;
                }
              }
            });
            this.fire('rebuild');
          }

          return this;
        },
        // Enable / disable build mode
        build: function build(_build) {
          this._build = !!_build;
          return this;
        },
        // overwrite method from parent to set data properly
        setData: function setData(o) {
          this.dom = o;
          this.dom.leading = new SVG.Number(o.leading || 1.3);
          return this;
        },
      },
      // Add parent method
      construct: {
        // Create text element
        text: function text(_text2) {
          return this.put(new SVG.Text()).text(_text2);
        },
        // Create plain text element
        plain: function plain(text) {
          return this.put(new SVG.Text()).plain(text);
        },
      },
    });
    SVG.Tspan = SVG.invent({
      // Initialize node
      create: 'tspan',
      // Inherit from
      inherit: SVG.Shape,
      // Add class methods
      extend: {
        // Set text content
        text: function text(_text3) {
          if (_text3 == null) return this.node.textContent + (this.dom.newLined ? '\n' : '');
          typeof _text3 === 'function' ? _text3.call(this, this) : this.plain(_text3);
          return this;
        },
        // Shortcut dx
        dx: function dx(_dx) {
          return this.attr('dx', _dx);
        },
        // Shortcut dy
        dy: function dy(_dy) {
          return this.attr('dy', _dy);
        },
        // Create new line
        newLine: function newLine() {
          // fetch text parent
          var t = this.parent(SVG.Text); // mark new line

          this.dom.newLined = true; // apply new hy¡n

          return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x());
        },
      },
    });
    SVG.extend(SVG.Text, SVG.Tspan, {
      // Create plain text node
      plain: function plain(text) {
        // clear if build mode is disabled
        if (this._build === false) {
          this.clear();
        } // create text node

        this.node.appendChild(document.createTextNode(text));
        return this;
      },
      // Create a tspan
      tspan: function tspan(text) {
        var node = ((this.textPath && this.textPath()) || this).node,
          tspan = new SVG.Tspan(); // clear if build mode is disabled

        if (this._build === false) {
          this.clear();
        } // add new tspan

        node.appendChild(tspan.node);
        return tspan.text(text);
      },
      // Clear all lines
      clear: function clear() {
        var node = ((this.textPath && this.textPath()) || this).node; // remove existing child nodes

        while (node.hasChildNodes()) {
          node.removeChild(node.lastChild);
        }

        return this;
      },
      // Get length of text element
      length: function length() {
        return this.node.getComputedTextLength();
      },
    });
    SVG.TextPath = SVG.invent({
      // Initialize node
      create: 'textPath',
      // Inherit from
      inherit: SVG.Parent,
      // Define parent class
      parent: SVG.Text,
      // Add parent method
      construct: {
        morphArray: SVG.PathArray,
        // return the array of the path track element
        array: function array() {
          var track = this.track();
          return track ? track.array() : null;
        },
        // Plot path if any
        plot: function plot(d) {
          var track = this.track(),
            pathArray = null;

          if (track) {
            pathArray = track.plot(d);
          }

          return d == null ? pathArray : this;
        },
        // Get the path track element
        track: function track() {
          var path = this.textPath();

          if (path) {
            return path.reference('href');
          }
        },
        // Get the textPath child
        textPath: function textPath() {
          if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath') {
            return SVG.adopt(this.node.firstChild);
          }
        },
      },
    });
    SVG.Nested = SVG.invent({
      // Initialize node
      create: function create() {
        this.constructor.call(this, SVG.create('svg'));
        this.style('overflow', 'visible');
      },
      // Inherit from
      inherit: SVG.Container,
      // Add parent method
      construct: {
        // Create nested svg document
        nested: function nested() {
          return this.put(new SVG.Nested());
        },
      },
    }); // Define list of available attributes for stroke and fill

    var sugar = {
      stroke: [
        'color',
        'width',
        'opacity',
        'linecap',
        'linejoin',
        'miterlimit',
        'dasharray',
        'dashoffset',
      ],
      fill: ['color', 'opacity', 'rule'],
      prefix: function prefix(t, a) {
        return a == 'color' ? t : t + '-' + a;
      },
    }; // Add sugar for fill and stroke
    ['fill', 'stroke'].forEach(function (m) {
      var extension = {};

      extension[m] = function (o) {
        if (typeof o === 'undefined') {
          return this;
        }

        if (typeof o === 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function')) {
          this.attr(m, o);
        } // set all attributes from sugar.fill and sugar.stroke list
        else {
          for (var i = sugar[m].length - 1; i >= 0; i--) {
            if (o[sugar[m][i]] != null) {
              this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);
            }
          }
        }

        return this;
      };

      SVG.extend(SVG.Element, SVG.FX, extension);
    });
    SVG.extend(SVG.Element, SVG.FX, {
      // Map translate to transform
      translate: function translate(x, y) {
        return this.transform({
          x: x,
          y: y,
        });
      },
      // Map matrix to transform
      matrix: function matrix(m) {
        return this.attr(
          'transform',
          new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m)
        );
      },
      // Opacity
      opacity: function opacity(value) {
        return this.attr('opacity', value);
      },
      // Relative move over x axis
      dx: function dx(x) {
        return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true);
      },
      // Relative move over y axis
      dy: function dy(y) {
        return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true);
      },
    });
    SVG.extend(SVG.Path, {
      // Get path length
      length: function length() {
        return this.node.getTotalLength();
      },
      // Get point at length
      pointAt: function pointAt(length) {
        return this.node.getPointAtLength(length);
      },
    });
    SVG.Set = SVG.invent({
      // Initialize
      create: function create(members) {
        // Set initial state
        Array.isArray(members) ? (this.members = members) : this.clear();
      },
      // Add class methods
      extend: {
        // Add element to set
        add: function add() {
          var il,
            elements = [].slice.call(arguments);

          for (var i = 0, il = elements.length; i < il; i++) {
            this.members.push(elements[i]);
          }

          return this;
        },
        // Remove element from set
        remove: function remove(element) {
          var i = this.index(element); // remove given child

          if (i > -1) {
            this.members.splice(i, 1);
          }

          return this;
        },
        // Iterate over all members
        each: function each(block) {
          for (var i = 0, il = this.members.length; i < il; i++) {
            block.apply(this.members[i], [i, this.members]);
          }

          return this;
        },
        // Restore to defaults
        clear: function clear() {
          // initialize store
          this.members = [];
          return this;
        },
        // Get the length of a set
        length: function length() {
          return this.members.length;
        },
        // Checks if a given element is present in set
        has: function has(element) {
          return this.index(element) >= 0;
        },
        // retuns index of given element in set
        index: function index(element) {
          return this.members.indexOf(element);
        },
        // Get member at given index
        get: function get(i) {
          return this.members[i];
        },
        // Get first member
        first: function first() {
          return this.get(0);
        },
        // Get last member
        last: function last() {
          return this.get(this.members.length - 1);
        },
        // Default value
        valueOf: function valueOf() {
          return this.members;
        },
      },
      // Add parent method
      construct: {
        // Create a new set
        set: function set(members) {
          return new SVG.Set(members);
        },
      },
    });
    SVG.FX.Set = SVG.invent({
      // Initialize node
      create: function create(set) {
        // store reference to set
        this.set = set;
      },
    }); // Alias methods

    SVG.Set.inherit = function () {
      var methods = []; // gather shape methods

      for (var m in SVG.Shape.prototype) {
        if (
          typeof SVG.Shape.prototype[m] === 'function' &&
          typeof SVG.Set.prototype[m] !== 'function'
        ) {
          methods.push(m);
        }
      } // apply shape aliasses

      methods.forEach(function (method) {
        SVG.Set.prototype[method] = function () {
          for (var i = 0, il = this.members.length; i < il; i++) {
            if (this.members[i] && typeof this.members[i][method] === 'function') {
              this.members[i][method].apply(this.members[i], arguments);
            }
          }

          return method == 'animate' ? this.fx || (this.fx = new SVG.FX.Set(this)) : this;
        };
      }); // clear methods for the next round

      methods = []; // gather fx methods

      for (var m in SVG.FX.prototype) {
        if (
          typeof SVG.FX.prototype[m] === 'function' &&
          typeof SVG.FX.Set.prototype[m] !== 'function'
        ) {
          methods.push(m);
        }
      } // apply fx aliasses

      methods.forEach(function (method) {
        SVG.FX.Set.prototype[method] = function () {
          for (var i = 0, il = this.set.members.length; i < il; i++) {
            this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments);
          }

          return this;
        };
      });
    };

    SVG.extend(SVG.Element, {});
    SVG.extend(SVG.Element, {
      // Remember arbitrary data
      remember: function remember(k, v) {
        // remember every item in an object individually
        if (_typeof(arguments[0]) === 'object') {
          for (var v_ in k) {
            this.remember(v_, k[v_]);
          }
        } // retrieve memory
        else if (arguments.length == 1) {
          return this.memory()[k];
        } // store memory
        else {
          this.memory()[k] = v;
        }

        return this;
      },
      // Erase a given memory
      forget: function forget() {
        if (arguments.length == 0) {
          this._memory = {};
        } else {
          for (var i = arguments.length - 1; i >= 0; i--) {
            delete this.memory()[arguments[i]];
          }
        }

        return this;
      },
      // Initialize or return local memory object
      memory: function memory() {
        return this._memory || (this._memory = {});
      },
    }); // Method for getting an element by id

    SVG.get = function (id) {
      var node = document.getElementById(idFromReference(id) || id);
      return SVG.adopt(node);
    }; // Select elements by query string

    SVG.select = function (query, parent) {
      return new SVG.Set(
        SVG.utils.map((parent || document).querySelectorAll(query), function (node) {
          return SVG.adopt(node);
        })
      );
    };

    SVG.extend(SVG.Parent, {
      // Scoped select method
      select: function select(query) {
        return SVG.select(query, this.node);
      },
    });

    function pathRegReplace(a, b, c, d) {
      return c + d.replace(SVG.regex.dots, ' .');
    } // creates deep clone of array

    function _is(el, obj) {
      return el instanceof obj;
    } // tests if a given selector matches an element

    function _matches(el, selector) {
      return (
        el.matches ||
        el.matchesSelector ||
        el.msMatchesSelector ||
        el.mozMatchesSelector ||
        el.webkitMatchesSelector ||
        el.oMatchesSelector
      ).call(el, selector);
    } // Convert dash-separated-string to camelCase

    function camelCase(s) {
      return s.toLowerCase().replace(/-(.)/g, function (m, g) {
        return g.toUpperCase();
      });
    } // Capitalize first letter of a string

    function capitalize(s) {
      return s.charAt(0).toUpperCase() + s.slice(1);
    } // Ensure to six-based hex

    function fullHex(hex) {
      return hex.length == 4
        ? [
            '#',
            hex.substring(1, 2),
            hex.substring(1, 2),
            hex.substring(2, 3),
            hex.substring(2, 3),
            hex.substring(3, 4),
            hex.substring(3, 4),
          ].join('')
        : hex;
    } // Component to hex value

    function compToHex(comp) {
      var hex = comp.toString(16);
      return hex.length == 1 ? '0' + hex : hex;
    } // Calculate proportional width and height values when necessary

    function proportionalSize(element, width, height) {
      if (width == null || height == null) {
        var box = element.bbox();

        if (width == null) {
          width = (box.width / box.height) * height;
        } else if (height == null) {
          height = (box.height / box.width) * width;
        }
      }

      return {
        width: width,
        height: height,
      };
    } // Delta transform point

    function deltaTransformPoint(matrix, x, y) {
      return {
        x: x * matrix.a + y * matrix.c + 0,
        y: x * matrix.b + y * matrix.d + 0,
      };
    } // Map matrix array to object

    function arrayToMatrix(a) {
      return {
        a: a[0],
        b: a[1],
        c: a[2],
        d: a[3],
        e: a[4],
        f: a[5],
      };
    } // Parse matrix if required

    function parseMatrix(matrix) {
      if (!(matrix instanceof SVG.Matrix)) {
        matrix = new SVG.Matrix(matrix);
      }

      return matrix;
    } // Add centre point to transform object

    function arrayToString(a) {
      for (var i = 0, il = a.length, s = ''; i < il; i++) {
        s += a[i][0];

        if (a[i][1] != null) {
          s += a[i][1];

          if (a[i][2] != null) {
            s += ' ';
            s += a[i][2];

            if (a[i][3] != null) {
              s += ' ';
              s += a[i][3];
              s += ' ';
              s += a[i][4];

              if (a[i][5] != null) {
                s += ' ';
                s += a[i][5];
                s += ' ';
                s += a[i][6];

                if (a[i][7] != null) {
                  s += ' ';
                  s += a[i][7];
                }
              }
            }
          }
        }
      }

      return s + ' ';
    } // Deep new id assignment

    function assignNewId(node) {
      // do the same for SVG child nodes as well
      for (var i = node.childNodes.length - 1; i >= 0; i--) {
        if (node.childNodes[i] instanceof window.SVGElement) {
          assignNewId(node.childNodes[i]);
        }
      }

      return SVG.adopt(node).id(SVG.eid(node.nodeName));
    } // Add more bounding box properties

    function fullBox(b) {
      if (b.x == null) {
        b.x = 0;
        b.y = 0;
        b.width = 0;
        b.height = 0;
      }

      b.w = b.width;
      b.h = b.height;
      b.x2 = b.x + b.width;
      b.y2 = b.y + b.height;
      b.cx = b.x + b.width / 2;
      b.cy = b.y + b.height / 2;
      return b;
    } // Get id from reference string

    function idFromReference(url) {
      var m = (url || '').toString().match(SVG.regex.reference);
      if (m) return m[1];
    } // If values like 1e-88 are passed, this is not a valid 32 bit float,
    // but in those cases, we are so close to 0 that 0 works well!

    function float32String(v) {
      return Math.abs(v) > 1e-37 ? v : 0;
    } // Create matrix array for looping

    var abcdef = 'abcdef'.split(''); // Add CustomEvent to IE9 and IE10

    if (typeof window.CustomEvent !== 'function') {
      // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent
      var CustomEventPoly = function CustomEventPoly(event, options) {
        options = options || {
          bubbles: false,
          cancelable: false,
          detail: undefined,
        };
        var e = document.createEvent('CustomEvent');
        e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail);
        return e;
      };

      CustomEventPoly.prototype = window.Event.prototype;
      SVG.CustomEvent = CustomEventPoly;
    } else {
      SVG.CustomEvent = window.CustomEvent;
    }

    return SVG;
  });

  /*! svg.filter.js - v2.0.2 - 2016-02-24
   * https://github.com/wout/svg.filter.js
   * Copyright (c) 2016 Wout Fierens; Licensed MIT */
  (function () {
    // Main filter class
    SVG.Filter = SVG.invent({
      create: 'filter',
      inherit: SVG.Parent,
      extend: {
        // Static strings
        source: 'SourceGraphic',
        sourceAlpha: 'SourceAlpha',
        background: 'BackgroundImage',
        backgroundAlpha: 'BackgroundAlpha',
        fill: 'FillPaint',
        stroke: 'StrokePaint',

        autoSetIn: true,
        // Custom put method for leaner code
        put: function (element, i) {
          this.add(element, i);

          if (!element.attr('in') && this.autoSetIn) {
            element.attr('in', this.source);
          }
          if (!element.attr('result')) {
            element.attr('result', element);
          }

          return element;
        },
        // Blend effect
        blend: function (in1, in2, mode) {
          return this.put(new SVG.BlendEffect(in1, in2, mode));
        },
        // ColorMatrix effect
        colorMatrix: function (type, values) {
          return this.put(new SVG.ColorMatrixEffect(type, values));
        },
        // ConvolveMatrix effect
        convolveMatrix: function (matrix) {
          return this.put(new SVG.ConvolveMatrixEffect(matrix));
        },
        // ComponentTransfer effect
        componentTransfer: function (components) {
          return this.put(new SVG.ComponentTransferEffect(components));
        },
        // Composite effect
        composite: function (in1, in2, operator) {
          return this.put(new SVG.CompositeEffect(in1, in2, operator));
        },
        // Flood effect
        flood: function (color, opacity) {
          return this.put(new SVG.FloodEffect(color, opacity));
        },
        // Offset effect
        offset: function (x, y) {
          return this.put(new SVG.OffsetEffect(x, y));
        },
        // Image effect
        image: function (src) {
          return this.put(new SVG.ImageEffect(src));
        },
        // Merge effect
        merge: function () {
          //pass the array of arguments to the constructor because we dont know if the user gave us an array as the first arguemnt or wether they listed the effects in the arguments
          var args = [undefined];
          for (var i in arguments) args.push(arguments[i]);
          return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, args))());
        },
        // Gaussian Blur effect
        gaussianBlur: function (x, y) {
          return this.put(new SVG.GaussianBlurEffect(x, y));
        },
        // Morphology effect
        morphology: function (operator, radius) {
          return this.put(new SVG.MorphologyEffect(operator, radius));
        },
        // DiffuseLighting effect
        diffuseLighting: function (surfaceScale, diffuseConstant, kernelUnitLength) {
          return this.put(
            new SVG.DiffuseLightingEffect(surfaceScale, diffuseConstant, kernelUnitLength)
          );
        },
        // DisplacementMap effect
        displacementMap: function (in1, in2, scale, xChannelSelector, yChannelSelector) {
          return this.put(
            new SVG.DisplacementMapEffect(in1, in2, scale, xChannelSelector, yChannelSelector)
          );
        },
        // SpecularLighting effect
        specularLighting: function (
          surfaceScale,
          diffuseConstant,
          specularExponent,
          kernelUnitLength
        ) {
          return this.put(
            new SVG.SpecularLightingEffect(
              surfaceScale,
              diffuseConstant,
              specularExponent,
              kernelUnitLength
            )
          );
        },
        // Tile effect
        tile: function () {
          return this.put(new SVG.TileEffect());
        },
        // Turbulence effect
        turbulence: function (baseFrequency, numOctaves, seed, stitchTiles, type) {
          return this.put(
            new SVG.TurbulenceEffect(baseFrequency, numOctaves, seed, stitchTiles, type)
          );
        },
        // Default string value
        toString: function () {
          return 'url(#' + this.attr('id') + ')';
        },
      },
    });

    //add .filter function
    SVG.extend(SVG.Defs, {
      // Define filter
      filter: function (block) {
        var filter = this.put(new SVG.Filter());

        /* invoke passed block */
        if (typeof block === 'function') block.call(filter, filter);

        return filter;
      },
    });
    SVG.extend(SVG.Container, {
      // Define filter on defs
      filter: function (block) {
        return this.defs().filter(block);
      },
    });
    SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
      // Create filter element in defs and store reference
      filter: function (block) {
        this.filterer = block instanceof SVG.Element ? block : this.doc().filter(block);

        if (this.doc() && this.filterer.doc() !== this.doc()) {
          this.doc().defs().add(this.filterer);
        }

        this.attr('filter', this.filterer);

        return this.filterer;
      },
      // Remove filter
      unfilter: function (remove) {
        /* also remove the filter node */
        if (this.filterer && remove === true) this.filterer.remove();

        /* delete reference to filterer */
        delete this.filterer;

        /* remove filter attribute */
        return this.attr('filter', null);
      },
    });

    // Create SVG.Effect class
    SVG.Effect = SVG.invent({
      create: function () {
        this.constructor.call(this);
      },
      inherit: SVG.Element,
      extend: {
        // Set in attribute
        in: function (effect) {
          return effect == null
            ? (this.parent() &&
                this.parent()
                  .select('[result="' + this.attr('in') + '"]')
                  .get(0)) ||
                this.attr('in')
            : this.attr('in', effect);
        },
        // Named result
        result: function (result) {
          return result == null ? this.attr('result') : this.attr('result', result);
        },
        // Stringification
        toString: function () {
          return this.result();
        },
      },
    });

    // create class for parent effects like merge
    // Inherit from SVG.Parent
    SVG.ParentEffect = SVG.invent({
      create: function () {
        this.constructor.call(this);
      },
      inherit: SVG.Parent,
      extend: {
        // Set in attribute
        in: function (effect) {
          return effect == null
            ? (this.parent() &&
                this.parent()
                  .select('[result="' + this.attr('in') + '"]')
                  .get(0)) ||
                this.attr('in')
            : this.attr('in', effect);
        },
        // Named result
        result: function (result) {
          return result == null ? this.attr('result') : this.attr('result', result);
        },
        // Stringification
        toString: function () {
          return this.result();
        },
      },
    });

    //chaining
    var chainingEffects = {
      // Blend effect
      blend: function (in2, mode) {
        return this.parent() && this.parent().blend(this, in2, mode); //pass this as the first input
      },
      // ColorMatrix effect
      colorMatrix: function (type, values) {
        return this.parent() && this.parent().colorMatrix(type, values).in(this);
      },
      // ConvolveMatrix effect
      convolveMatrix: function (matrix) {
        return this.parent() && this.parent().convolveMatrix(matrix).in(this);
      },
      // ComponentTransfer effect
      componentTransfer: function (components) {
        return this.parent() && this.parent().componentTransfer(components).in(this);
      },
      // Composite effect
      composite: function (in2, operator) {
        return this.parent() && this.parent().composite(this, in2, operator); //pass this as the first input
      },
      // Flood effect
      flood: function (color, opacity) {
        return this.parent() && this.parent().flood(color, opacity); //this effect dont have inputs
      },
      // Offset effect
      offset: function (x, y) {
        return this.parent() && this.parent().offset(x, y).in(this);
      },
      // Image effect
      image: function (src) {
        return this.parent() && this.parent().image(src); //this effect dont have inputs
      },
      // Merge effect
      merge: function () {
        return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments)); //pass this as the first argument
      },
      // Gaussian Blur effect
      gaussianBlur: function (x, y) {
        return this.parent() && this.parent().gaussianBlur(x, y).in(this);
      },
      // Morphology effect
      morphology: function (operator, radius) {
        return this.parent() && this.parent().morphology(operator, radius).in(this);
      },
      // DiffuseLighting effect
      diffuseLighting: function (surfaceScale, diffuseConstant, kernelUnitLength) {
        return (
          this.parent() &&
          this.parent().diffuseLighting(surfaceScale, diffuseConstant, kernelUnitLength).in(this)
        );
      },
      // DisplacementMap effect
      displacementMap: function (in2, scale, xChannelSelector, yChannelSelector) {
        return (
          this.parent() &&
          this.parent().displacementMap(this, in2, scale, xChannelSelector, yChannelSelector)
        ); //pass this as the first input
      },
      // SpecularLighting effect
      specularLighting: function (
        surfaceScale,
        diffuseConstant,
        specularExponent,
        kernelUnitLength
      ) {
        return (
          this.parent() &&
          this.parent()
            .specularLighting(surfaceScale, diffuseConstant, specularExponent, kernelUnitLength)
            .in(this)
        );
      },
      // Tile effect
      tile: function () {
        return this.parent() && this.parent().tile().in(this);
      },
      // Turbulence effect
      turbulence: function (baseFrequency, numOctaves, seed, stitchTiles, type) {
        return (
          this.parent() &&
          this.parent().turbulence(baseFrequency, numOctaves, seed, stitchTiles, type).in(this)
        );
      },
    };
    SVG.extend(SVG.Effect, chainingEffects);
    SVG.extend(SVG.ParentEffect, chainingEffects);

    //crea class for child effects, like MergeNode, FuncR and lights
    SVG.ChildEffect = SVG.invent({
      create: function () {
        this.constructor.call(this);
      },
      inherit: SVG.Element,
      extend: {
        in: function (effect) {
          this.attr('in', effect);
        },
        //dont include any "result" functions because these types of nodes dont have them
      },
    });

    // Create all different effects
    var effects = {
      blend: function (in1, in2, mode) {
        this.attr({
          in: in1,
          in2: in2,
          mode: mode || 'normal',
        });
      },
      colorMatrix: function (type, values) {
        if (type == 'matrix') values = normaliseMatrix(values);

        this.attr({
          type: type,
          values: typeof values == 'undefined' ? null : values,
        });
      },
      convolveMatrix: function (matrix) {
        matrix = normaliseMatrix(matrix);

        this.attr({
          order: Math.sqrt(matrix.split(' ').length),
          kernelMatrix: matrix,
        });
      },
      composite: function (in1, in2, operator) {
        this.attr({
          in: in1,
          in2: in2,
          operator: operator,
        });
      },
      flood: function (color, opacity) {
        this.attr('flood-color', color);
        if (opacity != null) this.attr('flood-opacity', opacity);
      },
      offset: function (x, y) {
        this.attr({
          dx: x,
          dy: y,
        });
      },
      image: function (src) {
        this.attr('href', src, SVG.xlink);
      },
      displacementMap: function (in1, in2, scale, xChannelSelector, yChannelSelector) {
        this.attr({
          in: in1,
          in2: in2,
          scale: scale,
          xChannelSelector: xChannelSelector,
          yChannelSelector: yChannelSelector,
        });
      },
      gaussianBlur: function (x, y) {
        if (x != null || y != null)
          this.attr('stdDeviation', listString(Array.prototype.slice.call(arguments)));
        else this.attr('stdDeviation', '0 0');
      },
      morphology: function (operator, radius) {
        this.attr({
          operator: operator,
          radius: radius,
        });
      },
      tile: function () {},
      turbulence: function (baseFrequency, numOctaves, seed, stitchTiles, type) {
        this.attr({
          numOctaves: numOctaves,
          seed: seed,
          stitchTiles: stitchTiles,
          baseFrequency: baseFrequency,
          type: type,
        });
      },
    };

    // Create all parent effects
    var parentEffects = {
      merge: function () {
        var children;

        //test to see if we have a set
        if (arguments[0] instanceof SVG.Set) {
          var that = this;
          arguments[0].each(function (i) {
            if (this instanceof SVG.MergeNode) that.put(this);
            else if (this instanceof SVG.Effect || this instanceof SVG.ParentEffect)
              that.put(new SVG.MergeNode(this));
          });
        } else {
          //if the first argument is an array use it
          if (Array.isArray(arguments[0])) children = arguments[0];
          else children = arguments;

          for (var i = 0; i < children.length; i++) {
            if (children[i] instanceof SVG.MergeNode) {
              this.put(children[i]);
            } else this.put(new SVG.MergeNode(children[i]));
          }
        }
      },
      componentTransfer: function (compontents) {
        /* create rgb set */
        this.rgb = new SVG.Set();

        /* create components */
        ['r', 'g', 'b', 'a'].forEach(
          function (c) {
            /* create component */
            this[c] = new SVG['Func' + c.toUpperCase()]('identity');

            /* store component in set */
            this.rgb.add(this[c]);

            /* add component node */
            this.node.appendChild(this[c].node);
          }.bind(this)
        ); //lost context in foreach

        /* set components */
        if (compontents) {
          if (compontents.rgb) {
            ['r', 'g', 'b'].forEach(
              function (c) {
                this[c].attr(compontents.rgb);
              }.bind(this)
            );

            delete compontents.rgb;
          }

          /* set individual components */
          for (var c in compontents) this[c].attr(compontents[c]);
        }
      },
      diffuseLighting: function (surfaceScale, diffuseConstant, kernelUnitLength) {
        this.attr({
          surfaceScale: surfaceScale,
          diffuseConstant: diffuseConstant,
          kernelUnitLength: kernelUnitLength,
        });
      },
      specularLighting: function (
        surfaceScale,
        diffuseConstant,
        specularExponent,
        kernelUnitLength
      ) {
        this.attr({
          surfaceScale: surfaceScale,
          diffuseConstant: diffuseConstant,
          specularExponent: specularExponent,
          kernelUnitLength: kernelUnitLength,
        });
      },
    };

    // Create child effects like PointLight and MergeNode
    var childEffects = {
      distantLight: function (azimuth, elevation) {
        this.attr({
          azimuth: azimuth,
          elevation: elevation,
        });
      },
      pointLight: function (x, y, z) {
        this.attr({
          x: x,
          y: y,
          z: z,
        });
      },
      spotLight: function (x, y, z, pointsAtX, pointsAtY, pointsAtZ) {
        this.attr({
          x: x,
          y: y,
          z: z,
          pointsAtX: pointsAtX,
          pointsAtY: pointsAtY,
          pointsAtZ: pointsAtZ,
        });
      },
      mergeNode: function (in1) {
        this.attr('in', in1);
      },
    };

    // Create compontent functions
    ['r', 'g', 'b', 'a'].forEach(function (c) {
      /* create class */
      childEffects['Func' + c.toUpperCase()] = function (type) {
        this.attr('type', type);

        // take diffent arguments based on the type
        switch (type) {
          case 'table':
            this.attr('tableValues', arguments[1]);
            break;
          case 'linear':
            this.attr('slope', arguments[1]);
            this.attr('intercept', arguments[2]);
            break;
          case 'gamma':
            this.attr('amplitude', arguments[1]);
            this.attr('exponent', arguments[2]);
            this.attr('offset', arguments[2]);
            break;
        }
      };
    });

    //create effects
    foreach(effects, function (effect, i) {
      /* capitalize name */
      var name = i.charAt(0).toUpperCase() + i.slice(1);
      var proto = {};

      /* create class */
      SVG[name + 'Effect'] = SVG.invent({
        create: function () {
          //call super
          this.constructor.call(this, SVG.create('fe' + name));

          //call constructor for this effect
          effect.apply(this, arguments);

          //set the result
          this.result(this.attr('id') + 'Out');
        },
        inherit: SVG.Effect,
        extend: proto,
      });
    });

    //create parent effects
    foreach(parentEffects, function (effect, i) {
      /* capitalize name */
      var name = i.charAt(0).toUpperCase() + i.slice(1);
      var proto = {};

      /* create class */
      SVG[name + 'Effect'] = SVG.invent({
        create: function () {
          //call super
          this.constructor.call(this, SVG.create('fe' + name));

          //call constructor for this effect
          effect.apply(this, arguments);

          //set the result
          this.result(this.attr('id') + 'Out');
        },
        inherit: SVG.ParentEffect,
        extend: proto,
      });
    });

    //create child effects
    foreach(childEffects, function (effect, i) {
      /* capitalize name */
      var name = i.charAt(0).toUpperCase() + i.slice(1);
      var proto = {};

      /* create class */
      SVG[name] = SVG.invent({
        create: function () {
          //call super
          this.constructor.call(this, SVG.create('fe' + name));

          //call constructor for this effect
          effect.apply(this, arguments);
        },
        inherit: SVG.ChildEffect,
        extend: proto,
      });
    });

    // Effect-specific extensions
    SVG.extend(SVG.MergeEffect, {
      in: function (effect) {
        if (effect instanceof SVG.MergeNode) this.add(effect, 0);
        else this.add(new SVG.MergeNode(effect), 0);

        return this;
      },
    });
    SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {
      in2: function (effect) {
        return effect == null
          ? (this.parent() &&
              this.parent()
                .select('[result="' + this.attr('in2') + '"]')
                .get(0)) ||
              this.attr('in2')
          : this.attr('in2', effect);
      },
    });

    // Presets
    SVG.filter = {
      sepiatone: [
        0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0.0, 0.0,
        0.0, 1, 0,
      ],
    };

    // Helpers
    function normaliseMatrix(matrix) {
      /* convert possible array value to string */
      if (Array.isArray(matrix)) matrix = new SVG.Array(matrix);

      /* ensure there are no leading, tailing or double spaces */
      return matrix.toString().replace(/^\s+/, '').replace(/\s+$/, '').replace(/\s+/g, ' ');
    }

    function listString(list) {
      if (!Array.isArray(list)) return list;

      for (var i = 0, l = list.length, s = []; i < l; i++) s.push(list[i]);

      return s.join(' ');
    }

    function foreach() {
      //loops through mutiple objects
      var fn = function () {};
      if (typeof arguments[arguments.length - 1] == 'function') {
        fn = arguments[arguments.length - 1];
        Array.prototype.splice.call(arguments, arguments.length - 1, 1);
      }
      for (var k in arguments) {
        for (var i in arguments[k]) {
          fn(arguments[k][i], i, arguments[k]);
        }
      }
    }
  }.call(undefined));

  (function () {
    SVG.extend(SVG.PathArray, {
      morph: function (array) {
        var startArr = this.value,
          destArr = this.parse(array);

        var startOffsetM = 0,
          destOffsetM = 0;

        var startOffsetNextM = false,
          destOffsetNextM = false;

        while (true) {
          // stop if there is no M anymore
          if (startOffsetM === false && destOffsetM === false) break;

          // find the next M in path array
          startOffsetNextM = findNextM(startArr, startOffsetM === false ? false : startOffsetM + 1);
          destOffsetNextM = findNextM(destArr, destOffsetM === false ? false : destOffsetM + 1);

          // We have to add one M to the startArray
          if (startOffsetM === false) {
            var bbox = new SVG.PathArray(result.start).bbox();

            // when the last block had no bounding box we simply take the first M we got
            if (bbox.height == 0 || bbox.width == 0) {
              startOffsetM = startArr.push(startArr[0]) - 1;
            } else {
              // we take the middle of the bbox instead when we got one
              startOffsetM =
                startArr.push(['M', bbox.x + bbox.width / 2, bbox.y + bbox.height / 2]) - 1;
            }
          }

          // We have to add one M to the destArray
          if (destOffsetM === false) {
            var bbox = new SVG.PathArray(result.dest).bbox();

            if (bbox.height == 0 || bbox.width == 0) {
              destOffsetM = destArr.push(destArr[0]) - 1;
            } else {
              destOffsetM =
                destArr.push(['M', bbox.x + bbox.width / 2, bbox.y + bbox.height / 2]) - 1;
            }
          }

          // handle block from M to next M
          var result = handleBlock(
            startArr,
            startOffsetM,
            startOffsetNextM,
            destArr,
            destOffsetM,
            destOffsetNextM
          );

          // update the arrays to their new values
          startArr = startArr
            .slice(0, startOffsetM)
            .concat(
              result.start,
              startOffsetNextM === false ? [] : startArr.slice(startOffsetNextM)
            );
          destArr = destArr
            .slice(0, destOffsetM)
            .concat(result.dest, destOffsetNextM === false ? [] : destArr.slice(destOffsetNextM));

          // update offsets
          startOffsetM = startOffsetNextM === false ? false : startOffsetM + result.start.length;
          destOffsetM = destOffsetNextM === false ? false : destOffsetM + result.dest.length;
        }

        // copy back arrays
        this.value = startArr;
        this.destination = new SVG.PathArray();
        this.destination.value = destArr;

        return this;
      },
    });

    // sorry for the long declaration
    // slices out one block (from M to M) and syncronize it so the types and length match
    function handleBlock(
      startArr,
      startOffsetM,
      startOffsetNextM,
      destArr,
      destOffsetM,
      destOffsetNextM,
      undefined$1
    ) {
      // slice out the block we need
      var startArrTemp = startArr.slice(startOffsetM, startOffsetNextM || undefined$1),
        destArrTemp = destArr.slice(destOffsetM, destOffsetNextM || undefined$1);

      var i = 0,
        posStart = { pos: [0, 0], start: [0, 0] },
        posDest = { pos: [0, 0], start: [0, 0] };

      do {
        // convert shorthand types to long form
        startArrTemp[i] = simplyfy.call(posStart, startArrTemp[i]);
        destArrTemp[i] = simplyfy.call(posDest, destArrTemp[i]);

        // check if both shape types match
        // 2 elliptical arc curve commands ('A'), are considered different if the
        // flags (large-arc-flag, sweep-flag) don't match
        if (
          startArrTemp[i][0] != destArrTemp[i][0] ||
          startArrTemp[i][0] == 'M' ||
          (startArrTemp[i][0] == 'A' &&
            (startArrTemp[i][4] != destArrTemp[i][4] || startArrTemp[i][5] != destArrTemp[i][5]))
        ) {
          // if not, convert shapes to beziere
          Array.prototype.splice.apply(
            startArrTemp,
            [i, 1].concat(toBeziere.call(posStart, startArrTemp[i]))
          );
          Array.prototype.splice.apply(
            destArrTemp,
            [i, 1].concat(toBeziere.call(posDest, destArrTemp[i]))
          );
        } else {
          // only update positions otherwise
          startArrTemp[i] = setPosAndReflection.call(posStart, startArrTemp[i]);
          destArrTemp[i] = setPosAndReflection.call(posDest, destArrTemp[i]);
        }

        // we are at the end at both arrays. stop here
        if (++i == startArrTemp.length && i == destArrTemp.length) break;

        // destArray is longer. Add one element
        if (i == startArrTemp.length) {
          startArrTemp.push([
            'C',
            posStart.pos[0],
            posStart.pos[1],
            posStart.pos[0],
            posStart.pos[1],
            posStart.pos[0],
            posStart.pos[1],
          ]);
        }

        // startArr is longer. Add one element
        if (i == destArrTemp.length) {
          destArrTemp.push([
            'C',
            posDest.pos[0],
            posDest.pos[1],
            posDest.pos[0],
            posDest.pos[1],
            posDest.pos[0],
            posDest.pos[1],
          ]);
        }
      } while (true);

      // return the updated block
      return { start: startArrTemp, dest: destArrTemp };
    }

    // converts shorthand types to long form
    function simplyfy(val) {
      switch (val[0]) {
        case 'z': // shorthand line to start
        case 'Z':
          val[0] = 'L';
          val[1] = this.start[0];
          val[2] = this.start[1];
          break;
        case 'H': // shorthand horizontal line
          val[0] = 'L';
          val[2] = this.pos[1];
          break;
        case 'V': // shorthand vertical line
          val[0] = 'L';
          val[2] = val[1];
          val[1] = this.pos[0];
          break;
        case 'T': // shorthand quadratic beziere
          val[0] = 'Q';
          val[3] = val[1];
          val[4] = val[2];
          val[1] = this.reflection[1];
          val[2] = this.reflection[0];
          break;
        case 'S': // shorthand cubic beziere
          val[0] = 'C';
          val[6] = val[4];
          val[5] = val[3];
          val[4] = val[2];
          val[3] = val[1];
          val[2] = this.reflection[1];
          val[1] = this.reflection[0];
          break;
      }

      return val;
    }

    // updates reflection point and current position
    function setPosAndReflection(val) {
      var len = val.length;

      this.pos = [val[len - 2], val[len - 1]];

      if ('SCQT'.indexOf(val[0]) != -1)
        this.reflection = [2 * this.pos[0] - val[len - 4], 2 * this.pos[1] - val[len - 3]];

      return val;
    }

    // converts all types to cubic beziere
    function toBeziere(val) {
      var retVal = [val];

      switch (val[0]) {
        case 'M': // special handling for M
          this.pos = this.start = [val[1], val[2]];
          return retVal;
        case 'L':
          val[5] = val[3] = val[1];
          val[6] = val[4] = val[2];
          val[1] = this.pos[0];
          val[2] = this.pos[1];
          break;
        case 'Q':
          val[6] = val[4];
          val[5] = val[3];
          val[4] = (val[4] * 1) / 3 + (val[2] * 2) / 3;
          val[3] = (val[3] * 1) / 3 + (val[1] * 2) / 3;
          val[2] = (this.pos[1] * 1) / 3 + (val[2] * 2) / 3;
          val[1] = (this.pos[0] * 1) / 3 + (val[1] * 2) / 3;
          break;
        case 'A':
          retVal = arcToBeziere(this.pos, val);
          val = retVal[0];
          break;
      }

      val[0] = 'C';
      this.pos = [val[5], val[6]];
      this.reflection = [2 * val[5] - val[3], 2 * val[6] - val[4]];

      return retVal;
    }

    // finds the next position of type M
    function findNextM(arr, offset) {
      if (offset === false) return false;

      for (var i = offset, len = arr.length; i < len; ++i) {
        if (arr[i][0] == 'M') return i;
      }

      return false;
    }

    // Convert an arc segment into equivalent cubic Bezier curves
    // Depending on the arc, up to 4 curves might be used to represent it since a
    // curve gives a good approximation for only a quarter of an ellipse
    // The curves are returned as an array of SVG curve commands:
    // [ ['C', x1, y1, x2, y2, x, y] ... ]
    function arcToBeziere(pos, val) {
      // Parameters extraction, handle out-of-range parameters as specified in the SVG spec
      // See: https://www.w3.org/TR/SVG11/implnote.html#ArcOutOfRangeParameters
      var rx = Math.abs(val[1]),
        ry = Math.abs(val[2]),
        xAxisRotation = val[3] % 360,
        largeArcFlag = val[4],
        sweepFlag = val[5],
        x = val[6],
        y = val[7],
        A = new SVG.Point(pos),
        B = new SVG.Point(x, y),
        primedCoord,
        lambda,
        mat,
        k,
        c,
        cSquare,
        t,
        O,
        OA,
        OB,
        tetaStart,
        tetaEnd,
        deltaTeta,
        nbSectors,
        f,
        arcSegPoints,
        angle,
        sinAngle,
        cosAngle,
        pt,
        i,
        il,
        retVal = [],
        x1,
        y1,
        x2,
        y2;

      // Ensure radii are non-zero
      if (rx === 0 || ry === 0 || (A.x === B.x && A.y === B.y)) {
        // treat this arc as a straight line segment
        return [['C', A.x, A.y, B.x, B.y, B.x, B.y]];
      }

      // Ensure radii are large enough using the algorithm provided in the SVG spec
      // See: https://www.w3.org/TR/SVG11/implnote.html#ArcCorrectionOutOfRangeRadii
      primedCoord = new SVG.Point((A.x - B.x) / 2, (A.y - B.y) / 2).transform(
        new SVG.Matrix().rotate(xAxisRotation)
      );
      lambda =
        (primedCoord.x * primedCoord.x) / (rx * rx) + (primedCoord.y * primedCoord.y) / (ry * ry);
      if (lambda > 1) {
        lambda = Math.sqrt(lambda);
        rx = lambda * rx;
        ry = lambda * ry;
      }

      // To simplify calculations, we make the arc part of a unit circle (rayon is 1) instead of an ellipse
      mat = new SVG.Matrix()
        .rotate(xAxisRotation)
        .scale(1 / rx, 1 / ry)
        .rotate(-xAxisRotation);
      A = A.transform(mat);
      B = B.transform(mat);

      // Calculate the horizontal and vertical distance between the initial and final point of the arc
      k = [B.x - A.x, B.y - A.y];

      // Find the length of the chord formed by A and B
      cSquare = k[0] * k[0] + k[1] * k[1];
      c = Math.sqrt(cSquare);

      // Calculate the ratios of the horizontal and vertical distance on the length of the chord
      k[0] /= c;
      k[1] /= c;

      // Calculate the distance between the circle center and the chord midpoint
      // using this formula: t = sqrt(r^2 - c^2 / 4)
      // where t is the distance between the cirle center and the chord midpoint,
      //       r is the rayon of the circle and c is the chord length
      // From: http://www.ajdesigner.com/phpcircle/circle_segment_chord_t.php
      // Because of the imprecision of floating point numbers, cSquare might end
      // up being slightly above 4 which would result in a negative radicand
      // To prevent that, a test is made before computing the square root
      t = cSquare < 4 ? Math.sqrt(1 - cSquare / 4) : 0;

      // For most situations, there are actually two different ellipses that
      // satisfy the constraints imposed by the points A and B, the radii rx and ry,
      // and the xAxisRotation
      // When the flags largeArcFlag and sweepFlag are equal, it means that the
      // second ellipse is used as a solution
      // See: https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands
      if (largeArcFlag === sweepFlag) {
        t *= -1;
      }

      // Calculate the coordinates of the center of the circle from the midpoint of the chord
      // This is done by multiplying the ratios calculated previously by the distance between
      // the circle center and the chord midpoint and using these values to go from the midpoint
      // to the center of the circle
      // The negative of the vertical distance ratio is used to modify the x coordinate while
      // the horizontal distance ratio is used to modify the y coordinate
      // That is because the center of the circle is perpendicular to the chord and perpendicular
      // lines are negative reciprocals
      O = new SVG.Point((B.x + A.x) / 2 + t * -k[1], (B.y + A.y) / 2 + t * k[0]);
      // Move the center of the circle at the origin
      OA = new SVG.Point(A.x - O.x, A.y - O.y);
      OB = new SVG.Point(B.x - O.x, B.y - O.y);

      // Calculate the start and end angle
      tetaStart = Math.acos(OA.x / Math.sqrt(OA.x * OA.x + OA.y * OA.y));
      if (OA.y < 0) {
        tetaStart *= -1;
      }
      tetaEnd = Math.acos(OB.x / Math.sqrt(OB.x * OB.x + OB.y * OB.y));
      if (OB.y < 0) {
        tetaEnd *= -1;
      }

      // If sweep-flag is '1', then the arc will be drawn in a "positive-angle" direction,
      // make sure that the end angle is above the start angle
      if (sweepFlag && tetaStart > tetaEnd) {
        tetaEnd += 2 * Math.PI;
      }
      // If sweep-flag is '0', then the arc will be drawn in a "negative-angle" direction,
      // make sure that the end angle is below the start angle
      if (!sweepFlag && tetaStart < tetaEnd) {
        tetaEnd -= 2 * Math.PI;
      }

      // Find the number of Bezier curves that are required to represent the arc
      // A cubic Bezier curve gives a good enough approximation when representing at most a quarter of a circle
      nbSectors = Math.ceil((Math.abs(tetaStart - tetaEnd) * 2) / Math.PI);

      // Calculate the coordinates of the points of all the Bezier curves required to represent the arc
      // For an in-depth explanation of this part see: http://pomax.github.io/bezierinfo/#circles_cubic
      arcSegPoints = [];
      angle = tetaStart;
      deltaTeta = (tetaEnd - tetaStart) / nbSectors;
      f = (4 * Math.tan(deltaTeta / 4)) / 3;
      for (i = 0; i <= nbSectors; i++) {
        // The <= is because a Bezier curve have a start and a endpoint
        cosAngle = Math.cos(angle);
        sinAngle = Math.sin(angle);

        pt = new SVG.Point(O.x + cosAngle, O.y + sinAngle);
        arcSegPoints[i] = [
          new SVG.Point(pt.x + f * sinAngle, pt.y - f * cosAngle),
          pt,
          new SVG.Point(pt.x - f * sinAngle, pt.y + f * cosAngle),
        ];

        angle += deltaTeta;
      }

      // Remove the first control point of the first segment point and remove the second control point of the last segment point
      // These two control points are not used in the approximation of the arc, that is why they are removed
      arcSegPoints[0][0] = arcSegPoints[0][1].clone();
      arcSegPoints[arcSegPoints.length - 1][2] = arcSegPoints[arcSegPoints.length - 1][1].clone();

      // Revert the transformation that was applied to make the arc part of a unit circle instead of an ellipse
      mat = new SVG.Matrix().rotate(xAxisRotation).scale(rx, ry).rotate(-xAxisRotation);
      for (i = 0, il = arcSegPoints.length; i < il; i++) {
        arcSegPoints[i][0] = arcSegPoints[i][0].transform(mat);
        arcSegPoints[i][1] = arcSegPoints[i][1].transform(mat);
        arcSegPoints[i][2] = arcSegPoints[i][2].transform(mat);
      }

      // Convert the segments points to SVG curve commands
      for (i = 1, il = arcSegPoints.length; i < il; i++) {
        pt = arcSegPoints[i - 1][2];
        x1 = pt.x;
        y1 = pt.y;

        pt = arcSegPoints[i][0];
        x2 = pt.x;
        y2 = pt.y;

        pt = arcSegPoints[i][1];
        x = pt.x;
        y = pt.y;

        retVal.push(['C', x1, y1, x2, y2, x, y]);
      }

      return retVal;
    }
  })();

  /*! svg.draggable.js - v2.2.2 - 2019-01-08
   * https://github.com/svgdotjs/svg.draggable.js
   * Copyright (c) 2019 Wout Fierens; Licensed MIT */
  (function () {
    // creates handler, saves it
    function DragHandler(el) {
      el.remember('_draggable', this);
      this.el = el;
    }

    // Sets new parameter, starts dragging
    DragHandler.prototype.init = function (constraint, val) {
      var _this = this;
      this.constraint = constraint;
      this.value = val;
      this.el.on('mousedown.drag', function (e) {
        _this.start(e);
      });
      this.el.on('touchstart.drag', function (e) {
        _this.start(e);
      });
    };

    // transforms one point from screen to user coords
    DragHandler.prototype.transformPoint = function (event, offset) {
      event = event || window.event;
      var touches = (event.changedTouches && event.changedTouches[0]) || event;
      this.p.x = touches.clientX - (offset || 0);
      this.p.y = touches.clientY;
      return this.p.matrixTransform(this.m);
    };

    // gets elements bounding box with special handling of groups, nested and use
    DragHandler.prototype.getBBox = function () {
      var box = this.el.bbox();

      if (this.el instanceof SVG.Nested) box = this.el.rbox();

      if (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) {
        box.x = this.el.x();
        box.y = this.el.y();
      }

      return box;
    };

    // start dragging
    DragHandler.prototype.start = function (e) {
      // check for left button
      if (e.type == 'click' || e.type == 'mousedown' || e.type == 'mousemove') {
        if ((e.which || e.buttons) != 1) {
          return;
        }
      }

      var _this = this;

      // fire beforedrag event
      this.el.fire('beforedrag', { event: e, handler: this });
      if (this.el.event().defaultPrevented) return;

      // prevent browser drag behavior as soon as possible
      e.preventDefault();

      // prevent propagation to a parent that might also have dragging enabled
      e.stopPropagation();

      // search for parent on the fly to make sure we can call
      // draggable() even when element is not in the dom currently
      this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc);
      this.p = this.parent.node.createSVGPoint();

      // save current transformation matrix
      this.m = this.el.node.getScreenCTM().inverse();

      var box = this.getBBox();

      var anchorOffset;

      // fix text-anchor in text-element (#37)
      if (this.el instanceof SVG.Text) {
        anchorOffset = this.el.node.getComputedTextLength();

        switch (this.el.attr('text-anchor')) {
          case 'middle':
            anchorOffset /= 2;
            break;
          case 'start':
            anchorOffset = 0;
            break;
        }
      }

      this.startPoints = {
        // We take absolute coordinates since we are just using a delta here
        point: this.transformPoint(e, anchorOffset),
        box: box,
        transform: this.el.transform(),
      };

      // add drag and end events to window
      SVG.on(window, 'mousemove.drag', function (e) {
        _this.drag(e);
      });
      SVG.on(window, 'touchmove.drag', function (e) {
        _this.drag(e);
      });
      SVG.on(window, 'mouseup.drag', function (e) {
        _this.end(e);
      });
      SVG.on(window, 'touchend.drag', function (e) {
        _this.end(e);
      });

      // fire dragstart event
      this.el.fire('dragstart', { event: e, p: this.startPoints.point, m: this.m, handler: this });
    };

    // while dragging
    DragHandler.prototype.drag = function (e) {
      var box = this.getBBox(),
        p = this.transformPoint(e),
        x = this.startPoints.box.x + p.x - this.startPoints.point.x,
        y = this.startPoints.box.y + p.y - this.startPoints.point.y,
        c = this.constraint,
        gx = p.x - this.startPoints.point.x,
        gy = p.y - this.startPoints.point.y;

      this.el.fire('dragmove', {
        event: e,
        p: p,
        m: this.m,
        handler: this,
      });

      if (this.el.event().defaultPrevented) return p;

      // move the element to its new position, if possible by constraint
      if (typeof c == 'function') {
        var coord = c.call(this.el, x, y, this.m);

        // bool, just show us if movement is allowed or not
        if (typeof coord == 'boolean') {
          coord = {
            x: coord,
            y: coord,
          };
        }

        // if true, we just move. If !false its a number and we move it there
        if (coord.x === true) {
          this.el.x(x);
        } else if (coord.x !== false) {
          this.el.x(coord.x);
        }

        if (coord.y === true) {
          this.el.y(y);
        } else if (coord.y !== false) {
          this.el.y(coord.y);
        }
      } else if (typeof c == 'object') {
        // keep element within constrained box
        if (c.minX != null && x < c.minX) {
          x = c.minX;
          gx = x - this.startPoints.box.x;
        } else if (c.maxX != null && x > c.maxX - box.width) {
          x = c.maxX - box.width;
          gx = x - this.startPoints.box.x;
        }
        if (c.minY != null && y < c.minY) {
          y = c.minY;
          gy = y - this.startPoints.box.y;
        } else if (c.maxY != null && y > c.maxY - box.height) {
          y = c.maxY - box.height;
          gy = y - this.startPoints.box.y;
        }

        if (c.snapToGrid != null) {
          x = x - (x % c.snapToGrid);
          y = y - (y % c.snapToGrid);
          gx = gx - (gx % c.snapToGrid);
          gy = gy - (gy % c.snapToGrid);
        }

        if (this.el instanceof SVG.G)
          this.el.matrix(this.startPoints.transform).transform({ x: gx, y: gy }, true);
        else this.el.move(x, y);
      }

      // so we can use it in the end-method, too
      return p;
    };

    DragHandler.prototype.end = function (e) {
      // final drag
      var p = this.drag(e);

      // fire dragend event
      this.el.fire('dragend', { event: e, p: p, m: this.m, handler: this });

      // unbind events
      SVG.off(window, 'mousemove.drag');
      SVG.off(window, 'touchmove.drag');
      SVG.off(window, 'mouseup.drag');
      SVG.off(window, 'touchend.drag');
    };

    SVG.extend(SVG.Element, {
      // Make element draggable
      // Constraint might be an object (as described in readme.md) or a function in the form "function (x, y)" that gets called before every move.
      // The function can return a boolean or an object of the form {x, y}, to which the element will be moved. "False" skips moving, true moves to raw x, y.
      draggable: function (value, constraint) {
        // Check the parameters and reassign if needed
        if (typeof value == 'function' || typeof value == 'object') {
          constraint = value;
          value = true;
        }

        var dragHandler = this.remember('_draggable') || new DragHandler(this);

        // When no parameter is given, value is true
        value = typeof value === 'undefined' ? true : value;

        if (value) dragHandler.init(constraint || {}, value);
        else {
          this.off('mousedown.drag');
          this.off('touchstart.drag');
        }

        return this;
      },
    });
  }.call(undefined));

  (function () {
    function SelectHandler(el) {
      this.el = el;
      el.remember('_selectHandler', this);
      this.pointSelection = { isSelected: false };
      this.rectSelection = { isSelected: false };

      // helper list with position settings of each type of point
      this.pointsList = {
        lt: [0, 0],
        rt: ['width', 0],
        rb: ['width', 'height'],
        lb: [0, 'height'],
        t: ['width', 0],
        r: ['width', 'height'],
        b: ['width', 'height'],
        l: [0, 'height'],
      };

      // helper function to get point coordinates based on settings above and an object (bbox in our case)
      this.pointCoord = function (setting, object, isPointCentered) {
        var coord = typeof setting !== 'string' ? setting : object[setting];
        // Top, bottom, right and left points are placed in the center of element width/height
        return isPointCentered ? coord / 2 : coord;
      };

      this.pointCoords = function (point, object) {
        var settings = this.pointsList[point];

        return {
          x: this.pointCoord(settings[0], object, point === 't' || point === 'b'),
          y: this.pointCoord(settings[1], object, point === 'r' || point === 'l'),
        };
      };
    }

    SelectHandler.prototype.init = function (value, options) {
      var bbox = this.el.bbox();
      this.options = {};

      // store defaults list of points in order to verify users config
      var points = this.el.selectize.defaults.points;

      // Merging the defaults and the options-object together
      for (var i in this.el.selectize.defaults) {
        this.options[i] = this.el.selectize.defaults[i];
        if (options[i] !== undefined) {
          this.options[i] = options[i];
        }
      }

      // prepare & validate list of points to be added (or excluded)
      var pointsLists = ['points', 'pointsExclude'];

      for (var i in pointsLists) {
        var option = this.options[pointsLists[i]];

        if (typeof option === 'string') {
          if (option.length > 0) {
            // if set as comma separated string list => convert it into an array
            option = option.split(/\s*,\s*/i);
          } else {
            option = [];
          }
        } else if (typeof option === 'boolean' && pointsLists[i] === 'points') {
          // this is not needed, but let's have it for legacy support
          option = option ? points : [];
        }

        this.options[pointsLists[i]] = option;
      }

      // intersect correct all points options with users config (exclude unwanted points)
      // ES5 -> NO arrow functions nor Array.includes()
      this.options.points = [points, this.options.points].reduce(function (a, b) {
        return a.filter(function (c) {
          return b.indexOf(c) > -1;
        });
      });

      // exclude pointsExclude, if wanted
      this.options.points = [this.options.points, this.options.pointsExclude].reduce(function (
        a,
        b
      ) {
        return a.filter(function (c) {
          return b.indexOf(c) < 0;
        });
      });

      this.parent = this.el.parent();
      this.nested = this.nested || this.parent.group();
      this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));

      // When deepSelect is enabled and the element is a line/polyline/polygon, draw only points for moving
      if (this.options.deepSelect && ['line', 'polyline', 'polygon'].indexOf(this.el.type) !== -1) {
        this.selectPoints(value);
      } else {
        this.selectRect(value);
      }

      this.observe();
      this.cleanup();
    };

    SelectHandler.prototype.selectPoints = function (value) {
      this.pointSelection.isSelected = value;

      // When set is already there we dont have to create one
      if (this.pointSelection.set) {
        return this;
      }

      // Create our set of elements
      this.pointSelection.set = this.parent.set();
      // draw the points and mark the element as selected
      this.drawPoints();

      return this;
    };

    // create the point-array which contains the 2 points of a line or simply the points-array of polyline/polygon
    SelectHandler.prototype.getPointArray = function () {
      var bbox = this.el.bbox();

      return this.el
        .array()
        .valueOf()
        .map(function (el) {
          return [el[0] - bbox.x, el[1] - bbox.y];
        });
    };

    // Draws a points
    SelectHandler.prototype.drawPoints = function () {
      var _this = this,
        array = this.getPointArray();

      // go through the array of points
      for (var i = 0, len = array.length; i < len; ++i) {
        var curriedEvent = (function (k) {
          return function (ev) {
            ev = ev || window.event;
            ev.preventDefault ? ev.preventDefault() : (ev.returnValue = false);
            ev.stopPropagation();

            var x = ev.pageX || ev.touches[0].pageX;
            var y = ev.pageY || ev.touches[0].pageY;
            _this.el.fire('point', { x: x, y: y, i: k, event: ev });
          };
        })(i);

        // add every point to the set
        // add css-classes and a touchstart-event which fires our event for moving points
        var point = this.drawPoint(array[i][0], array[i][1])
          .addClass(this.options.classPoints)
          .addClass(this.options.classPoints + '_point')
          .on('touchstart', curriedEvent)
          .on('mousedown', curriedEvent);
        this.pointSelection.set.add(point);
      }
    };

    // The function to draw single point
    SelectHandler.prototype.drawPoint = function (cx, cy) {
      var pointType = this.options.pointType;

      switch (pointType) {
        case 'circle':
          return this.drawCircle(cx, cy);
        case 'rect':
          return this.drawRect(cx, cy);
        default:
          if (typeof pointType === 'function') {
            return pointType.call(this, cx, cy);
          }

          throw new Error('Unknown ' + pointType + ' point type!');
      }
    };

    // The function to draw the circle point
    SelectHandler.prototype.drawCircle = function (cx, cy) {
      return this.nested.circle(this.options.pointSize).center(cx, cy);
    };

    // The function to draw the rect point
    SelectHandler.prototype.drawRect = function (cx, cy) {
      return this.nested.rect(this.options.pointSize, this.options.pointSize).center(cx, cy);
    };

    // every time a point is moved, we have to update the positions of our point
    SelectHandler.prototype.updatePointSelection = function () {
      var array = this.getPointArray();

      this.pointSelection.set.each(function (i) {
        if (this.cx() === array[i][0] && this.cy() === array[i][1]) {
          return;
        }
        this.center(array[i][0], array[i][1]);
      });
    };

    SelectHandler.prototype.updateRectSelection = function () {
      var _this = this,
        bbox = this.el.bbox();

      this.rectSelection.set.get(0).attr({
        width: bbox.width,
        height: bbox.height,
      });

      // set.get(1) is always in the upper left corner. no need to move it
      if (this.options.points.length) {
        this.options.points.map(function (point, index) {
          var coords = _this.pointCoords(point, bbox);

          _this.rectSelection.set.get(index + 1).center(coords.x, coords.y);
        });
      }

      if (this.options.rotationPoint) {
        var length = this.rectSelection.set.length();

        this.rectSelection.set.get(length - 1).center(bbox.width / 2, 20);
      }
    };

    SelectHandler.prototype.selectRect = function (value) {
      var _this = this,
        bbox = this.el.bbox();

      this.rectSelection.isSelected = value;

      // when set is already p
      this.rectSelection.set = this.rectSelection.set || this.parent.set();

      // helperFunction to create a mouse-down function which triggers the event specified in `eventName`
      function getMoseDownFunc(eventName) {
        return function (ev) {
          ev = ev || window.event;
          ev.preventDefault ? ev.preventDefault() : (ev.returnValue = false);
          ev.stopPropagation();

          var x = ev.pageX || ev.touches[0].pageX;
          var y = ev.pageY || ev.touches[0].pageY;
          _this.el.fire(eventName, { x: x, y: y, event: ev });
        };
      }

      // create the selection-rectangle and add the css-class
      if (!this.rectSelection.set.get(0)) {
        this.rectSelection.set.add(
          this.nested.rect(bbox.width, bbox.height).addClass(this.options.classRect)
        );
      }

      // Draw Points at the edges, if enabled
      if (this.options.points.length && this.rectSelection.set.length() < 2) {
        var ename = 'touchstart',
          mname = 'mousedown';

        this.options.points.map(function (point, index) {
          var coords = _this.pointCoords(point, bbox);

          var pointElement = _this
            .drawPoint(coords.x, coords.y)
            .attr('class', _this.options.classPoints + '_' + point)
            .on(mname, getMoseDownFunc(point))
            .on(ename, getMoseDownFunc(point));
          _this.rectSelection.set.add(pointElement);
        });

        this.rectSelection.set.each(function () {
          this.addClass(_this.options.classPoints);
        });
      }

      // draw rotationPint, if enabled
      if (
        this.options.rotationPoint &&
        ((this.options.points && !this.rectSelection.set.get(9)) ||
          (!this.options.points && !this.rectSelection.set.get(1)))
      ) {
        var curriedEvent = function (ev) {
          ev = ev || window.event;
          ev.preventDefault ? ev.preventDefault() : (ev.returnValue = false);
          ev.stopPropagation();

          var x = ev.pageX || ev.touches[0].pageX;
          var y = ev.pageY || ev.touches[0].pageY;
          _this.el.fire('rot', { x: x, y: y, event: ev });
        };

        var pointElement = this.drawPoint(bbox.width / 2, 20)
          .attr('class', this.options.classPoints + '_rot')
          .on('touchstart', curriedEvent)
          .on('mousedown', curriedEvent);
        this.rectSelection.set.add(pointElement);
      }
    };

    SelectHandler.prototype.handler = function () {
      var bbox = this.el.bbox();
      this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));

      if (this.rectSelection.isSelected) {
        this.updateRectSelection();
      }

      if (this.pointSelection.isSelected) {
        this.updatePointSelection();
      }
    };

    SelectHandler.prototype.observe = function () {
      var _this = this;

      if (MutationObserver) {
        if (this.rectSelection.isSelected || this.pointSelection.isSelected) {
          this.observerInst =
            this.observerInst ||
            new MutationObserver(function () {
              _this.handler();
            });
          this.observerInst.observe(this.el.node, { attributes: true });
        } else {
          try {
            this.observerInst.disconnect();
            delete this.observerInst;
          } catch (e) {}
        }
      } else {
        this.el.off('DOMAttrModified.select');

        if (this.rectSelection.isSelected || this.pointSelection.isSelected) {
          this.el.on('DOMAttrModified.select', function () {
            _this.handler();
          });
        }
      }
    };

    SelectHandler.prototype.cleanup = function () {
      //var _this = this;

      if (!this.rectSelection.isSelected && this.rectSelection.set) {
        // stop watching the element, remove the selection
        this.rectSelection.set.each(function () {
          this.remove();
        });

        this.rectSelection.set.clear();
        delete this.rectSelection.set;
      }

      if (!this.pointSelection.isSelected && this.pointSelection.set) {
        // Remove all points, clear the set, stop watching the element
        this.pointSelection.set.each(function () {
          this.remove();
        });

        this.pointSelection.set.clear();
        delete this.pointSelection.set;
      }

      if (!this.pointSelection.isSelected && !this.rectSelection.isSelected) {
        this.nested.remove();
        delete this.nested;
      }
    };

    SVG.extend(SVG.Element, {
      // Select element with mouse
      selectize: function (value, options) {
        // Check the parameters and reassign if needed
        if (typeof value === 'object') {
          options = value;
          value = true;
        }

        var selectHandler = this.remember('_selectHandler') || new SelectHandler(this);

        selectHandler.init(value === undefined ? true : value, options || {});

        return this;
      },
    });

    SVG.Element.prototype.selectize.defaults = {
      points: ['lt', 'rt', 'rb', 'lb', 't', 'r', 'b', 'l'], // which points to draw, default all
      pointsExclude: [], // easier option if to exclude few than rewrite all
      classRect: 'svg_select_boundingRect', // Css-class added to the rect
      classPoints: 'svg_select_points', // Css-class added to the points
      pointSize: 7, // size of point
      rotationPoint: true, // If true, rotation point is drawn. Needed for rotation!
      deepSelect: false, // If true, moving of single points is possible (only line, polyline, polyon)
      pointType: 'circle', // Point type: circle or rect, default circle
    };
  })();

  (function () {
    (function () {
      function ResizeHandler(el) {
        el.remember('_resizeHandler', this);

        this.el = el;
        this.parameters = {};
        this.lastUpdateCall = null;
        this.p = el.doc().node.createSVGPoint();
      }

      ResizeHandler.prototype.transformPoint = function (x, y, m) {
        this.p.x = x - (this.offset.x - window.pageXOffset);
        this.p.y = y - (this.offset.y - window.pageYOffset);

        return this.p.matrixTransform(m || this.m);
      };

      ResizeHandler.prototype._extractPosition = function (event) {
        // Extract a position from a mouse/touch event.
        // Returns { x: .., y: .. }
        return {
          x: event.clientX != null ? event.clientX : event.touches[0].clientX,
          y: event.clientY != null ? event.clientY : event.touches[0].clientY,
        };
      };

      ResizeHandler.prototype.init = function (options) {
        var _this = this;

        this.stop();

        if (options === 'stop') {
          return;
        }

        this.options = {};

        // Merge options and defaults
        for (var i in this.el.resize.defaults) {
          this.options[i] = this.el.resize.defaults[i];
          if (typeof options[i] !== 'undefined') {
            this.options[i] = options[i];
          }
        }

        // We listen to all these events which are specifying different edges
        this.el.on('lt.resize', function (e) {
          _this.resize(e || window.event);
        }); // Left-Top
        this.el.on('rt.resize', function (e) {
          _this.resize(e || window.event);
        }); // Right-Top
        this.el.on('rb.resize', function (e) {
          _this.resize(e || window.event);
        }); // Right-Bottom
        this.el.on('lb.resize', function (e) {
          _this.resize(e || window.event);
        }); // Left-Bottom

        this.el.on('t.resize', function (e) {
          _this.resize(e || window.event);
        }); // Top
        this.el.on('r.resize', function (e) {
          _this.resize(e || window.event);
        }); // Right
        this.el.on('b.resize', function (e) {
          _this.resize(e || window.event);
        }); // Bottom
        this.el.on('l.resize', function (e) {
          _this.resize(e || window.event);
        }); // Left

        this.el.on('rot.resize', function (e) {
          _this.resize(e || window.event);
        }); // Rotation

        this.el.on('point.resize', function (e) {
          _this.resize(e || window.event);
        }); // Point-Moving

        // This call ensures, that the plugin reacts to a change of snapToGrid immediately
        this.update();
      };

      ResizeHandler.prototype.stop = function () {
        this.el.off('lt.resize');
        this.el.off('rt.resize');
        this.el.off('rb.resize');
        this.el.off('lb.resize');

        this.el.off('t.resize');
        this.el.off('r.resize');
        this.el.off('b.resize');
        this.el.off('l.resize');

        this.el.off('rot.resize');

        this.el.off('point.resize');

        return this;
      };

      ResizeHandler.prototype.resize = function (event) {
        var _this = this;

        this.m = this.el.node.getScreenCTM().inverse();
        this.offset = { x: window.pageXOffset, y: window.pageYOffset };

        var txPt = this._extractPosition(event.detail.event);
        this.parameters = {
          type: this.el.type, // the type of element
          p: this.transformPoint(txPt.x, txPt.y),
          x: event.detail.x, // x-position of the mouse when resizing started
          y: event.detail.y, // y-position of the mouse when resizing started
          box: this.el.bbox(), // The bounding-box of the element
          rotation: this.el.transform().rotation, // The current rotation of the element
        };

        // Add font-size parameter if the element type is text
        if (this.el.type === 'text') {
          this.parameters.fontSize = this.el.attr()['font-size'];
        }

        // the i-param in the event holds the index of the point which is moved, when using `deepSelect`
        if (event.detail.i !== undefined) {
          // get the point array
          var array = this.el.array().valueOf();

          // Save the index and the point which is moved
          this.parameters.i = event.detail.i;
          this.parameters.pointCoords = [array[event.detail.i][0], array[event.detail.i][1]];
        }

        // Lets check which edge of the bounding-box was clicked and resize the this.el according to this
        switch (event.type) {
          // Left-Top-Edge
          case 'lt':
            // We build a calculating function for every case which gives us the new position of the this.el
            this.calc = function (diffX, diffY) {
              // The procedure is always the same
              // First we snap the edge to the given grid (snapping to 1px grid is normal resizing)
              var snap = this.snapToGrid(diffX, diffY);

              // Now we check if the new height and width still valid (> 0)
              if (
                this.parameters.box.width - snap[0] > 0 &&
                this.parameters.box.height - snap[1] > 0
              ) {
                // ...if valid, we resize the this.el (which can include moving because the coord-system starts at the left-top and this edge is moving sometimes when resized)

                /*
                 * but first check if the element is text box, so we can change the font size instead of
                 * the width and height
                 */

                if (this.parameters.type === 'text') {
                  this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);
                  this.el.attr('font-size', this.parameters.fontSize - snap[0]);
                  return;
                }

                snap = this.checkAspectRatio(snap);

                this.el
                  .move(this.parameters.box.x + snap[0], this.parameters.box.y + snap[1])
                  .size(this.parameters.box.width - snap[0], this.parameters.box.height - snap[1]);
              }
            };
            break;

          // Right-Top
          case 'rt':
            // s.a.
            this.calc = function (diffX, diffY) {
              var snap = this.snapToGrid(diffX, diffY, 1 << 1);
              if (
                this.parameters.box.width + snap[0] > 0 &&
                this.parameters.box.height - snap[1] > 0
              ) {
                if (this.parameters.type === 'text') {
                  this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);
                  this.el.attr('font-size', this.parameters.fontSize + snap[0]);
                  return;
                }

                snap = this.checkAspectRatio(snap, true);

                this.el
                  .move(this.parameters.box.x, this.parameters.box.y + snap[1])
                  .size(this.parameters.box.width + snap[0], this.parameters.box.height - snap[1]);
              }
            };
            break;

          // Right-Bottom
          case 'rb':
            // s.a.
            this.calc = function (diffX, diffY) {
              var snap = this.snapToGrid(diffX, diffY, 0);
              if (
                this.parameters.box.width + snap[0] > 0 &&
                this.parameters.box.height + snap[1] > 0
              ) {
                if (this.parameters.type === 'text') {
                  this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);
                  this.el.attr('font-size', this.parameters.fontSize + snap[0]);
                  return;
                }

                snap = this.checkAspectRatio(snap);

                this.el
                  .move(this.parameters.box.x, this.parameters.box.y)
                  .size(this.parameters.box.width + snap[0], this.parameters.box.height + snap[1]);
              }
            };
            break;

          // Left-Bottom
          case 'lb':
            // s.a.
            this.calc = function (diffX, diffY) {
              var snap = this.snapToGrid(diffX, diffY, 1);
              if (
                this.parameters.box.width - snap[0] > 0 &&
                this.parameters.box.height + snap[1] > 0
              ) {
                if (this.parameters.type === 'text') {
                  this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);
                  this.el.attr('font-size', this.parameters.fontSize - snap[0]);
                  return;
                }

                snap = this.checkAspectRatio(snap, true);

                this.el
                  .move(this.parameters.box.x + snap[0], this.parameters.box.y)
                  .size(this.parameters.box.width - snap[0], this.parameters.box.height + snap[1]);
              }
            };
            break;

          // Top
          case 't':
            // s.a.
            this.calc = function (diffX, diffY) {
              var snap = this.snapToGrid(diffX, diffY, 1 << 1);
              if (this.parameters.box.height - snap[1] > 0) {
                // Disable the font-resizing if it is not from the corner of bounding-box
                if (this.parameters.type === 'text') {
                  return;
                }

                this.el
                  .move(this.parameters.box.x, this.parameters.box.y + snap[1])
                  .height(this.parameters.box.height - snap[1]);
              }
            };
            break;

          // Right
          case 'r':
            // s.a.
            this.calc = function (diffX, diffY) {
              var snap = this.snapToGrid(diffX, diffY, 0);
              if (this.parameters.box.width + snap[0] > 0) {
                if (this.parameters.type === 'text') {
                  return;
                }

                this.el
                  .move(this.parameters.box.x, this.parameters.box.y)
                  .width(this.parameters.box.width + snap[0]);
              }
            };
            break;

          // Bottom
          case 'b':
            // s.a.
            this.calc = function (diffX, diffY) {
              var snap = this.snapToGrid(diffX, diffY, 0);
              if (this.parameters.box.height + snap[1] > 0) {
                if (this.parameters.type === 'text') {
                  return;
                }

                this.el
                  .move(this.parameters.box.x, this.parameters.box.y)
                  .height(this.parameters.box.height + snap[1]);
              }
            };
            break;

          // Left
          case 'l':
            // s.a.
            this.calc = function (diffX, diffY) {
              var snap = this.snapToGrid(diffX, diffY, 1);
              if (this.parameters.box.width - snap[0] > 0) {
                if (this.parameters.type === 'text') {
                  return;
                }

                this.el
                  .move(this.parameters.box.x + snap[0], this.parameters.box.y)
                  .width(this.parameters.box.width - snap[0]);
              }
            };
            break;

          // Rotation
          case 'rot':
            // s.a.
            this.calc = function (diffX, diffY) {
              // yes this is kinda stupid but we need the mouse coords back...
              var current = { x: diffX + this.parameters.p.x, y: diffY + this.parameters.p.y };

              // start minus middle
              var sAngle = Math.atan2(
                this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2,
                this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2
              );

              // end minus middle
              var pAngle = Math.atan2(
                current.y - this.parameters.box.y - this.parameters.box.height / 2,
                current.x - this.parameters.box.x - this.parameters.box.width / 2
              );

              var angle =
                this.parameters.rotation +
                ((pAngle - sAngle) * 180) / Math.PI +
                this.options.snapToAngle / 2;

              // We have to move the element to the center of the box first and change the rotation afterwards
              // because rotation always works around a rotation-center, which is changed when moving the element
              // We also set the new rotation center to the center of the box.
              this.el
                .center(this.parameters.box.cx, this.parameters.box.cy)
                .rotate(
                  angle - (angle % this.options.snapToAngle),
                  this.parameters.box.cx,
                  this.parameters.box.cy
                );
            };
            break;

          // Moving one single Point (needed when an element is deepSelected which means you can move every single point of the object)
          case 'point':
            this.calc = function (diffX, diffY) {
              // Snapping the point to the grid
              var snap = this.snapToGrid(
                diffX,
                diffY,
                this.parameters.pointCoords[0],
                this.parameters.pointCoords[1]
              );

              // Get the point array
              var array = this.el.array().valueOf();

              // Changing the moved point in the array
              array[this.parameters.i][0] = this.parameters.pointCoords[0] + snap[0];
              array[this.parameters.i][1] = this.parameters.pointCoords[1] + snap[1];

              // And plot the new this.el
              this.el.plot(array);
            };
        }

        this.el.fire('resizestart', { dx: this.parameters.x, dy: this.parameters.y, event: event });
        // When resizing started, we have to register events for...
        // Touches.
        SVG.on(window, 'touchmove.resize', function (e) {
          _this.update(e || window.event);
        });
        SVG.on(window, 'touchend.resize', function () {
          _this.done();
        });
        // Mouse.
        SVG.on(window, 'mousemove.resize', function (e) {
          _this.update(e || window.event);
        });
        SVG.on(window, 'mouseup.resize', function () {
          _this.done();
        });
      };

      // The update-function redraws the element every time the mouse is moving
      ResizeHandler.prototype.update = function (event) {
        if (!event) {
          if (this.lastUpdateCall) {
            this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
          }
          return;
        }

        // Calculate the difference between the mouseposition at start and now
        var txPt = this._extractPosition(event);
        var p = this.transformPoint(txPt.x, txPt.y);

        var diffX = p.x - this.parameters.p.x,
          diffY = p.y - this.parameters.p.y;

        this.lastUpdateCall = [diffX, diffY];

        // Calculate the new position and height / width of the element
        this.calc(diffX, diffY);

        // Emit an event to say we have changed.
        this.el.fire('resizing', { dx: diffX, dy: diffY, event: event });
      };

      // Is called on mouseup.
      // Removes the update-function from the mousemove event
      ResizeHandler.prototype.done = function () {
        this.lastUpdateCall = null;
        SVG.off(window, 'mousemove.resize');
        SVG.off(window, 'mouseup.resize');
        SVG.off(window, 'touchmove.resize');
        SVG.off(window, 'touchend.resize');
        this.el.fire('resizedone');
      };

      // The flag is used to determine whether the resizing is used with a left-Point (first bit) and top-point (second bit)
      // In this cases the temp-values are calculated differently
      ResizeHandler.prototype.snapToGrid = function (diffX, diffY, flag, pointCoordsY) {
        var temp;

        // If `pointCoordsY` is given, a single Point has to be snapped (deepSelect). That's why we need a different temp-value
        if (typeof pointCoordsY !== 'undefined') {
          // Note that flag = pointCoordsX in this case
          temp = [
            (flag + diffX) % this.options.snapToGrid,
            (pointCoordsY + diffY) % this.options.snapToGrid,
          ];
        } else {
          // We check if the flag is set and if not we set a default-value (both bits set - which means upper-left-edge)
          flag = flag == null ? 1 | (1 << 1) : flag;
          temp = [
            (this.parameters.box.x + diffX + (flag & 1 ? 0 : this.parameters.box.width)) %
              this.options.snapToGrid,
            (this.parameters.box.y + diffY + (flag & (1 << 1) ? 0 : this.parameters.box.height)) %
              this.options.snapToGrid,
          ];
        }

        if (diffX < 0) {
          temp[0] -= this.options.snapToGrid;
        }
        if (diffY < 0) {
          temp[1] -= this.options.snapToGrid;
        }

        diffX -=
          Math.abs(temp[0]) < this.options.snapToGrid / 2
            ? temp[0]
            : temp[0] - (diffX < 0 ? -this.options.snapToGrid : this.options.snapToGrid);
        diffY -=
          Math.abs(temp[1]) < this.options.snapToGrid / 2
            ? temp[1]
            : temp[1] - (diffY < 0 ? -this.options.snapToGrid : this.options.snapToGrid);

        return this.constraintToBox(diffX, diffY, flag, pointCoordsY);
      };

      // keep element within constrained box
      ResizeHandler.prototype.constraintToBox = function (diffX, diffY, flag, pointCoordsY) {
        //return [diffX, diffY]
        var c = this.options.constraint || {};
        var orgX, orgY;

        if (typeof pointCoordsY !== 'undefined') {
          orgX = flag;
          orgY = pointCoordsY;
        } else {
          orgX = this.parameters.box.x + (flag & 1 ? 0 : this.parameters.box.width);
          orgY = this.parameters.box.y + (flag & (1 << 1) ? 0 : this.parameters.box.height);
        }

        if (typeof c.minX !== 'undefined' && orgX + diffX < c.minX) {
          diffX = c.minX - orgX;
        }

        if (typeof c.maxX !== 'undefined' && orgX + diffX > c.maxX) {
          diffX = c.maxX - orgX;
        }

        if (typeof c.minY !== 'undefined' && orgY + diffY < c.minY) {
          diffY = c.minY - orgY;
        }

        if (typeof c.maxY !== 'undefined' && orgY + diffY > c.maxY) {
          diffY = c.maxY - orgY;
        }

        return [diffX, diffY];
      };

      ResizeHandler.prototype.checkAspectRatio = function (snap, isReverse) {
        if (!this.options.saveAspectRatio) {
          return snap;
        }

        var updatedSnap = snap.slice();
        var aspectRatio = this.parameters.box.width / this.parameters.box.height;
        var newW = this.parameters.box.width + snap[0];
        var newH = this.parameters.box.height - snap[1];
        var newAspectRatio = newW / newH;

        if (newAspectRatio < aspectRatio) {
          // Height is too big. Adapt it
          updatedSnap[1] = newW / aspectRatio - this.parameters.box.height;
          isReverse && (updatedSnap[1] = -updatedSnap[1]);
        } else if (newAspectRatio > aspectRatio) {
          // Width is too big. Adapt it
          updatedSnap[0] = this.parameters.box.width - newH * aspectRatio;
          isReverse && (updatedSnap[0] = -updatedSnap[0]);
        }

        return updatedSnap;
      };

      SVG.extend(SVG.Element, {
        // Resize element with mouse
        resize: function (options) {
          (this.remember('_resizeHandler') || new ResizeHandler(this)).init(options || {});

          return this;
        },
      });

      SVG.Element.prototype.resize.defaults = {
        snapToAngle: 0.1, // Specifies the speed the rotation is happening when moving the mouse
        snapToGrid: 1, // Snaps to a grid of `snapToGrid` Pixels
        constraint: {}, // keep element within constrained box
        saveAspectRatio: false, // Save aspect ratio when resizing using lt, rt, rb or lb points
      };
    }.call(this));
  })();

  if (typeof window.Apex === 'undefined') {
    window.Apex = {};
  }

  var InitCtxVariables = /*#__PURE__*/ (function () {
    function InitCtxVariables(ctx) {
      _classCallCheck(this, InitCtxVariables);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(InitCtxVariables, [
      {
        key: 'initModules',
        value: function initModules() {
          this.ctx.publicMethods = [
            'updateOptions',
            'updateSeries',
            'appendData',
            'appendSeries',
            'toggleSeries',
            'showSeries',
            'hideSeries',
            'setLocale',
            'resetSeries',
            'zoomX',
            'toggleDataPointSelection',
            'dataURI',
            'addXaxisAnnotation',
            'addYaxisAnnotation',
            'addPointAnnotation',
            'clearAnnotations',
            'removeAnnotation',
            'paper',
            'destroy',
          ];
          this.ctx.eventList = [
            'click',
            'mousedown',
            'mousemove',
            'mouseleave',
            'touchstart',
            'touchmove',
            'touchleave',
            'mouseup',
            'touchend',
          ];
          this.ctx.animations = new Animations(this.ctx);
          this.ctx.axes = new Axes(this.ctx);
          this.ctx.core = new Core(this.ctx.el, this.ctx);
          this.ctx.config = new Config({});
          this.ctx.data = new Data(this.ctx);
          this.ctx.grid = new Grid(this.ctx);
          this.ctx.graphics = new Graphics(this.ctx);
          this.ctx.coreUtils = new CoreUtils(this.ctx);
          this.ctx.crosshairs = new Crosshairs(this.ctx);
          this.ctx.events = new Events(this.ctx);
          this.ctx.exports = new Exports(this.ctx);
          this.ctx.localization = new Localization(this.ctx);
          this.ctx.options = new Options();
          this.ctx.responsive = new Responsive(this.ctx);
          this.ctx.series = new Series(this.ctx);
          this.ctx.theme = new Theme(this.ctx);
          this.ctx.formatters = new Formatters(this.ctx);
          this.ctx.titleSubtitle = new TitleSubtitle(this.ctx);
          this.ctx.legend = new Legend(this.ctx);
          this.ctx.toolbar = new Toolbar(this.ctx);
          this.ctx.dimensions = new Dimensions(this.ctx);
          this.ctx.updateHelpers = new UpdateHelpers(this.ctx);
          this.ctx.zoomPanSelection = new ZoomPanSelection(this.ctx);
          this.ctx.w.globals.tooltip = new Tooltip(this.ctx);
        },
      },
    ]);

    return InitCtxVariables;
  })();

  var Destroy = /*#__PURE__*/ (function () {
    function Destroy(ctx) {
      _classCallCheck(this, Destroy);

      this.ctx = ctx;
      this.w = ctx.w;
    }

    _createClass(Destroy, [
      {
        key: 'clear',
        value: function clear(_ref) {
          var isUpdating = _ref.isUpdating;

          if (this.ctx.zoomPanSelection) {
            this.ctx.zoomPanSelection.destroy();
          }

          if (this.ctx.toolbar) {
            this.ctx.toolbar.destroy();
          }

          this.ctx.animations = null;
          this.ctx.axes = null;
          this.ctx.annotations = null;
          this.ctx.core = null;
          this.ctx.data = null;
          this.ctx.grid = null;
          this.ctx.series = null;
          this.ctx.responsive = null;
          this.ctx.theme = null;
          this.ctx.formatters = null;
          this.ctx.titleSubtitle = null;
          this.ctx.legend = null;
          this.ctx.dimensions = null;
          this.ctx.options = null;
          this.ctx.crosshairs = null;
          this.ctx.zoomPanSelection = null;
          this.ctx.updateHelpers = null;
          this.ctx.toolbar = null;
          this.ctx.localization = null;
          this.ctx.w.globals.tooltip = null;
          this.clearDomElements({
            isUpdating: isUpdating,
          });
        },
      },
      {
        key: 'killSVG',
        value: function killSVG(draw) {
          draw.each(function (i, children) {
            this.removeClass('*');
            this.off();
            this.stop();
          }, true);
          draw.ungroup();
          draw.clear();
        },
      },
      {
        key: 'clearDomElements',
        value: function clearDomElements(_ref2) {
          var _this = this;

          var isUpdating = _ref2.isUpdating;
          var elSVG = this.w.globals.dom.Paper.node; // fixes apexcharts.js#1654 & vue-apexcharts#256

          if (elSVG.parentNode && elSVG.parentNode.parentNode && !isUpdating) {
            elSVG.parentNode.parentNode.style.minHeight = 'unset';
          } // detach root event

          var baseEl = this.w.globals.dom.baseEl;

          if (baseEl) {
            // see https://github.com/apexcharts/vue-apexcharts/issues/275
            this.ctx.eventList.forEach(function (event) {
              baseEl.removeEventListener(event, _this.ctx.events.documentEvent);
            });
          }

          var domEls = this.w.globals.dom;

          if (this.ctx.el !== null) {
            // remove all child elements - resetting the whole chart
            while (this.ctx.el.firstChild) {
              this.ctx.el.removeChild(this.ctx.el.firstChild);
            }
          }

          this.killSVG(domEls.Paper);
          domEls.Paper.remove();
          domEls.elWrap = null;
          domEls.elGraphical = null;
          domEls.elAnnotations = null;
          domEls.elLegendWrap = null;
          domEls.baseEl = null;
          domEls.elGridRect = null;
          domEls.elGridRectMask = null;
          domEls.elGridRectMarkerMask = null;
          domEls.elForecastMask = null;
          domEls.elNonForecastMask = null;
          domEls.elDefs = null;
        },
      },
    ]);

    return Destroy;
  })();

  // Helpers to react to element resizes, regardless of what caused them
  // TODO Currently this creates a new ResizeObserver every time we want to observe an element for resizes
  // Ideally, we should be able to use a single observer for all elements
  var ros = new WeakMap(); // Map callbacks to ResizeObserver instances for easy removal

  function addResizeListener(el, fn) {
    var called = false;
    var ro = new ResizeObserver(function (r) {
      // ROs fire immediately after being created,
      // per spec: https://drafts.csswg.org/resize-observer/#ref-for-element%E2%91%A3
      // we don't want that so we just discard the first run
      if (called) {
        fn.call(el, r);
      }

      called = true;
    });

    if (el.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      // Document fragment, observe children instead (needed for Shadow DOM, see #1332)
      Array.from(el.children).forEach(function (c) {
        return ro.observe(c);
      });
    } else {
      ro.observe(el);
    }

    ros.set(fn, ro);
  }
  function removeResizeListener(el, fn) {
    var ro = ros.get(fn);

    if (ro) {
      ro.disconnect();
      ros.delete(fn);
    }
  }

  var css_248z =
    '.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n}\n\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.apexcharts-text tspan {\n  font-family: inherit;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, 0.8);\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #333;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-goals-group, \n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  display: flex;\n}\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\n  padding: 4px 8px;\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse;\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0;\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-left: -6px;\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #ECEFF1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-top: -6px;\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1;\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none;\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_boundingRect, .svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden;\n}\n.apexcharts-selection-rect + g .svg_select_boundingRect,\n.apexcharts-selection-rect + g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n\n.apexcharts-selection-rect + g .svg_select_points_l,\n.apexcharts-selection-rect + g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2;\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon,\n.apexcharts-reset-icon,\n.apexcharts-pan-icon,\n.apexcharts-selection-icon,\n.apexcharts-menu-icon,\n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\n  fill: #008FFB;\n}\n\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\n  fill: #333;\n}\n\n.apexcharts-selection-icon,\n.apexcharts-menu-icon {\n  position: relative;\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px;\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-reset-icon,\n.apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008FFB;\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  }\n}\n\n.apexcharts-datalabel.apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabels,\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-gridline,\n.apexcharts-annotation-rect,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line,\n.apexcharts-zoom-rect,\n.apexcharts-toolbar svg,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-radar-series path,\n.apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n\n/* Resize generated styles */\n\n@keyframes resizeanim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.resize-triggers,\n.resize-triggers>div,\n.contract-trigger:before {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n.resize-triggers>div {\n  background: #eee;\n  overflow: auto;\n}\n\n.contract-trigger:before {\n  width: 200%;\n  height: 200%;\n}';

  /**
   *
   * @module ApexCharts
   **/

  var ApexCharts$1 = /*#__PURE__*/ (function () {
    function ApexCharts(el, opts) {
      _classCallCheck(this, ApexCharts);

      this.opts = opts;
      this.ctx = this; // Pass the user supplied options to the Base Class where these options will be extended with defaults. The returned object from Base Class will become the config object in the entire codebase.

      this.w = new Base(opts).init();
      this.el = el;
      this.w.globals.cuid = Utils$1.randomId();
      this.w.globals.chartID = this.w.config.chart.id
        ? Utils$1.escapeString(this.w.config.chart.id)
        : this.w.globals.cuid;
      var initCtx = new InitCtxVariables(this);
      initCtx.initModules();
      this.create = Utils$1.bind(this.create, this);
      this.windowResizeHandler = this._windowResizeHandler.bind(this);
      this.parentResizeHandler = this._parentResizeCallback.bind(this);
    }
    /**
     * The primary method user will call to render the chart.
     */

    _createClass(
      ApexCharts,
      [
        {
          key: 'render',
          value: function render() {
            var _this = this;

            // main method
            return new Promise(function (resolve, reject) {
              // only draw chart, if element found
              if (_this.el !== null) {
                if (typeof Apex._chartInstances === 'undefined') {
                  Apex._chartInstances = [];
                }

                if (_this.w.config.chart.id) {
                  Apex._chartInstances.push({
                    id: _this.w.globals.chartID,
                    group: _this.w.config.chart.group,
                    chart: _this,
                  });
                } // set the locale here

                _this.setLocale(_this.w.config.chart.defaultLocale);

                var beforeMount = _this.w.config.chart.events.beforeMount;

                if (typeof beforeMount === 'function') {
                  beforeMount(_this, _this.w);
                }

                _this.events.fireEvent('beforeMount', [_this, _this.w]);

                window.addEventListener('resize', _this.windowResizeHandler);
                addResizeListener(_this.el.parentNode, _this.parentResizeHandler); // Add CSS if not already added

                if (!_this.css) {
                  var rootNode = _this.el.getRootNode && _this.el.getRootNode();

                  var inShadowRoot = Utils$1.is('ShadowRoot', rootNode);
                  var doc = _this.el.ownerDocument;
                  var globalCSS = doc.getElementById('apexcharts-css');

                  if (inShadowRoot || !globalCSS) {
                    _this.css = document.createElement('style');
                    _this.css.id = 'apexcharts-css';
                    _this.css.textContent = css_248z;

                    if (inShadowRoot) {
                      // We are in Shadow DOM, add to shadow root
                      rootNode.prepend(_this.css);
                    } else {
                      // Add to <head> of element's document
                      doc.head.appendChild(_this.css);
                    }
                  }
                }

                var graphData = _this.create(_this.w.config.series, {});

                if (!graphData) return resolve(_this);

                _this
                  .mount(graphData)
                  .then(function () {
                    if (typeof _this.w.config.chart.events.mounted === 'function') {
                      _this.w.config.chart.events.mounted(_this, _this.w);
                    }

                    _this.events.fireEvent('mounted', [_this, _this.w]);

                    resolve(graphData);
                  })
                  .catch(function (e) {
                    reject(e); // handle error in case no data or element not found
                  });
              } else {
                reject(new Error('Element not found'));
              }
            });
          },
        },
        {
          key: 'create',
          value: function create(ser, opts) {
            var w = this.w;
            var initCtx = new InitCtxVariables(this);
            initCtx.initModules();
            var gl = this.w.globals;
            gl.noData = false;
            gl.animationEnded = false;
            this.responsive.checkResponsiveConfig(opts);

            if (w.config.xaxis.convertedCatToNumeric) {
              var defaults = new Defaults(w.config);
              defaults.convertCatToNumericXaxis(w.config, this.ctx);
            }

            if (this.el === null) {
              gl.animationEnded = true;
              return null;
            }

            this.core.setupElements();

            if (w.config.chart.type === 'treemap') {
              w.config.grid.show = false;
              w.config.yaxis[0].show = false;
            }

            if (gl.svgWidth === 0) {
              // if the element is hidden, skip drawing
              gl.animationEnded = true;
              return null;
            }

            var combo = CoreUtils.checkComboSeries(ser);
            gl.comboCharts = combo.comboCharts;
            gl.comboBarCount = combo.comboBarCount;
            var allSeriesAreEmpty = ser.every(function (s) {
              return s.data && s.data.length === 0;
            });

            if (ser.length === 0 || allSeriesAreEmpty) {
              this.series.handleNoData();
            }

            this.events.setupEventHandlers(); // Handle the data inputted by user and set some of the global variables (for eg, if data is datetime / numeric / category). Don't calculate the range / min / max at this time

            this.data.parseData(ser); // this is a good time to set theme colors first

            this.theme.init(); // as markers accepts array, we need to setup global markers for easier access

            var markers = new Markers(this);
            markers.setGlobalMarkerSize(); // labelFormatters should be called before dimensions as in dimensions we need text labels width

            this.formatters.setLabelFormatters();
            this.titleSubtitle.draw(); // legend is calculated here before coreCalculations because it affects the plottable area
            // if there is some data to show or user collapsed all series, then proceed drawing legend

            if (
              !gl.noData ||
              gl.collapsedSeries.length === gl.series.length ||
              w.config.legend.showForSingleSeries
            ) {
              this.legend.init();
            } // check whether in multiple series, all series share the same X

            this.series.hasAllSeriesEqualX(); // coreCalculations will give the min/max range and yaxis/axis values. It should be called here to set series variable from config to globals

            if (gl.axisCharts) {
              this.core.coreCalculations();

              if (w.config.xaxis.type !== 'category') {
                // as we have minX and maxX values, determine the default DateTimeFormat for time series
                this.formatters.setLabelFormatters();
              }

              this.ctx.toolbar.minX = w.globals.minX;
              this.ctx.toolbar.maxX = w.globals.maxX;
            } // we need to generate yaxis for heatmap separately as we are not showing numerics there, but seriesNames. There are some tweaks which are required for heatmap to align labels correctly which are done in below function
            // Also we need to do this before calculating Dimensions plotCoords() method of Dimensions

            this.formatters.heatmapLabelFormatters(); // We got plottable area here, next task would be to calculate axis areas

            this.dimensions.plotCoords();
            var xyRatios = this.core.xySettings();
            this.grid.createGridMask();
            var elGraph = this.core.plotChartType(ser, xyRatios);
            var dataLabels = new DataLabels(this);
            dataLabels.bringForward();

            if (w.config.dataLabels.background.enabled) {
              dataLabels.dataLabelsBackground();
            } // after all the drawing calculations, shift the graphical area (actual charts/bars) excluding legends

            this.core.shiftGraphPosition();
            var dim = {
              plot: {
                left: w.globals.translateX,
                top: w.globals.translateY,
                width: w.globals.gridWidth,
                height: w.globals.gridHeight,
              },
            };
            return {
              elGraph: elGraph,
              xyRatios: xyRatios,
              elInner: w.globals.dom.elGraphical,
              dimensions: dim,
            };
          },
        },
        {
          key: 'mount',
          value: function mount() {
            var _this2 = this;

            var graphData =
              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var me = this;
            var w = me.w;
            return new Promise(function (resolve, reject) {
              // no data to display
              if (me.el === null) {
                return reject(new Error('Not enough data to display or target element not found'));
              } else if (graphData === null || w.globals.allSeriesCollapsed) {
                me.series.handleNoData();
              }

              if (w.config.chart.type !== 'treemap') {
                me.axes.drawAxis(w.config.chart.type, graphData.xyRatios);
              }

              me.grid = new Grid(me);
              var elgrid = me.grid.drawGrid();
              me.annotations = new Annotations(me);
              me.annotations.drawImageAnnos();
              me.annotations.drawTextAnnos();

              if (w.config.grid.position === 'back' && elgrid) {
                w.globals.dom.elGraphical.add(elgrid.el);
              }

              var xAxis = new XAxis(_this2.ctx);
              var yaxis = new YAxis(_this2.ctx);

              if (elgrid !== null) {
                xAxis.xAxisLabelCorrections(elgrid.xAxisTickWidth);
                yaxis.setYAxisTextAlignments();
                w.config.yaxis.map(function (yaxe, index) {
                  if (w.globals.ignoreYAxisIndexes.indexOf(index) === -1) {
                    yaxis.yAxisTitleRotate(index, yaxe.opposite);
                  }
                });
              }

              if (w.config.annotations.position === 'back') {
                w.globals.dom.Paper.add(w.globals.dom.elAnnotations);
                me.annotations.drawAxesAnnotations();
              }

              if (Array.isArray(graphData.elGraph)) {
                for (var g = 0; g < graphData.elGraph.length; g++) {
                  w.globals.dom.elGraphical.add(graphData.elGraph[g]);
                }
              } else {
                w.globals.dom.elGraphical.add(graphData.elGraph);
              }

              if (w.config.grid.position === 'front' && elgrid) {
                w.globals.dom.elGraphical.add(elgrid.el);
              }

              if (w.config.xaxis.crosshairs.position === 'front') {
                me.crosshairs.drawXCrosshairs();
              }

              if (w.config.yaxis[0].crosshairs.position === 'front') {
                me.crosshairs.drawYCrosshairs();
              }

              if (w.config.annotations.position === 'front') {
                w.globals.dom.Paper.add(w.globals.dom.elAnnotations);
                me.annotations.drawAxesAnnotations();
              }

              if (!w.globals.noData) {
                // draw tooltips at the end
                if (w.config.tooltip.enabled && !w.globals.noData) {
                  me.w.globals.tooltip.drawTooltip(graphData.xyRatios);
                }

                if (
                  w.globals.axisCharts &&
                  (w.globals.isXNumeric ||
                    w.config.xaxis.convertedCatToNumeric ||
                    w.globals.isRangeBar)
                ) {
                  if (
                    w.config.chart.zoom.enabled ||
                    (w.config.chart.selection && w.config.chart.selection.enabled) ||
                    (w.config.chart.pan && w.config.chart.pan.enabled)
                  ) {
                    me.zoomPanSelection.init({
                      xyRatios: graphData.xyRatios,
                    });
                  }
                } else {
                  var tools = w.config.chart.toolbar.tools;
                  var toolsArr = ['zoom', 'zoomin', 'zoomout', 'selection', 'pan', 'reset'];
                  toolsArr.forEach(function (t) {
                    tools[t] = false;
                  });
                }

                if (w.config.chart.toolbar.show && !w.globals.allSeriesCollapsed) {
                  me.toolbar.createToolbar();
                }
              }

              if (w.globals.memory.methodsToExec.length > 0) {
                w.globals.memory.methodsToExec.forEach(function (fn) {
                  fn.method(fn.params, false, fn.context);
                });
              }

              if (!w.globals.axisCharts && !w.globals.noData) {
                me.core.resizeNonAxisCharts();
              }

              resolve(me);
            });
          },
          /**
           * Destroy the chart instance by removing all elements which also clean up event listeners on those elements.
           */
        },
        {
          key: 'destroy',
          value: function destroy() {
            window.removeEventListener('resize', this.windowResizeHandler);
            removeResizeListener(this.el.parentNode, this.parentResizeHandler); // remove the chart's instance from the global Apex._chartInstances

            var chartID = this.w.config.chart.id;

            if (chartID) {
              Apex._chartInstances.forEach(function (c, i) {
                if (c.id === Utils$1.escapeString(chartID)) {
                  Apex._chartInstances.splice(i, 1);
                }
              });
            }

            new Destroy(this.ctx).clear({
              isUpdating: false,
            });
          },
          /**
           * Allows users to update Options after the chart has rendered.
           *
           * @param {object} options - A new config object can be passed which will be merged with the existing config object
           * @param {boolean} redraw - should redraw from beginning or should use existing paths and redraw from there
           * @param {boolean} animate - should animate or not on updating Options
           */
        },
        {
          key: 'updateOptions',
          value: function updateOptions(options) {
            var _this3 = this;

            var redraw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var animate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var updateSyncedCharts =
              arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var overwriteInitialConfig =
              arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
            var w = this.w; // when called externally, clear some global variables
            // fixes apexcharts.js#1488

            w.globals.selection = undefined;

            if (options.series) {
              this.series.resetSeries(false, true, false);

              if (options.series.length && options.series[0].data) {
                options.series = options.series.map(function (s, i) {
                  return _this3.updateHelpers._extendSeries(s, i);
                });
              } // user updated the series via updateOptions() function.
              // Hence, we need to reset axis min/max to avoid zooming issues

              this.updateHelpers.revertDefaultAxisMinMax();
            } // user has set x-axis min/max externally - hence we need to forcefully set the xaxis min/max

            if (options.xaxis) {
              options = this.updateHelpers.forceXAxisUpdate(options);
            }

            if (options.yaxis) {
              options = this.updateHelpers.forceYAxisUpdate(options);
            }

            if (w.globals.collapsedSeriesIndices.length > 0) {
              this.series.clearPreviousPaths();
            }
            /* update theme mode#459 */

            if (options.theme) {
              options = this.theme.updateThemeOptions(options);
            }

            return this.updateHelpers._updateOptions(
              options,
              redraw,
              animate,
              updateSyncedCharts,
              overwriteInitialConfig
            );
          },
          /**
           * Allows users to update Series after the chart has rendered.
           *
           * @param {array} series - New series which will override the existing
           */
        },
        {
          key: 'updateSeries',
          value: function updateSeries() {
            var newSeries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var overwriteInitialSeries =
              arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            this.series.resetSeries(false);
            this.updateHelpers.revertDefaultAxisMinMax();
            return this.updateHelpers._updateSeries(newSeries, animate, overwriteInitialSeries);
          },
          /**
           * Allows users to append a new series after the chart has rendered.
           *
           * @param {array} newSerie - New serie which will be appended to the existing series
           */
        },
        {
          key: 'appendSeries',
          value: function appendSeries(newSerie) {
            var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var overwriteInitialSeries =
              arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var newSeries = this.w.config.series.slice();
            newSeries.push(newSerie);
            this.series.resetSeries(false);
            this.updateHelpers.revertDefaultAxisMinMax();
            return this.updateHelpers._updateSeries(newSeries, animate, overwriteInitialSeries);
          },
          /**
           * Allows users to append Data to series.
           *
           * @param {array} newData - New data in the same format as series
           */
        },
        {
          key: 'appendData',
          value: function appendData(newData) {
            var overwriteInitialSeries =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var me = this;
            me.w.globals.dataChanged = true;
            me.series.getPreviousPaths();
            var newSeries = me.w.config.series.slice();

            for (var i = 0; i < newSeries.length; i++) {
              if (newData[i] !== null && typeof newData[i] !== 'undefined') {
                for (var j = 0; j < newData[i].data.length; j++) {
                  newSeries[i].data.push(newData[i].data[j]);
                }
              }
            }

            me.w.config.series = newSeries;

            if (overwriteInitialSeries) {
              me.w.globals.initialSeries = Utils$1.clone(me.w.config.series);
            }

            return this.update();
          },
        },
        {
          key: 'update',
          value: function update(options) {
            var _this4 = this;

            return new Promise(function (resolve, reject) {
              new Destroy(_this4.ctx).clear({
                isUpdating: true,
              });

              var graphData = _this4.create(_this4.w.config.series, options);

              if (!graphData) return resolve(_this4);

              _this4
                .mount(graphData)
                .then(function () {
                  if (typeof _this4.w.config.chart.events.updated === 'function') {
                    _this4.w.config.chart.events.updated(_this4, _this4.w);
                  }

                  _this4.events.fireEvent('updated', [_this4, _this4.w]);

                  _this4.w.globals.isDirty = true;
                  resolve(_this4);
                })
                .catch(function (e) {
                  reject(e);
                });
            });
          },
          /**
           * Get all charts in the same "group" (including the instance which is called upon) to sync them when user zooms in/out or pan.
           */
        },
        {
          key: 'getSyncedCharts',
          value: function getSyncedCharts() {
            var chartGroups = this.getGroupedCharts();
            var allCharts = [this];

            if (chartGroups.length) {
              allCharts = [];
              chartGroups.forEach(function (ch) {
                allCharts.push(ch);
              });
            }

            return allCharts;
          },
          /**
           * Get charts in the same "group" (excluding the instance which is called upon) to perform operations on the other charts of the same group (eg., tooltip hovering)
           */
        },
        {
          key: 'getGroupedCharts',
          value: function getGroupedCharts() {
            var _this5 = this;

            return Apex._chartInstances
              .filter(function (ch) {
                if (ch.group) {
                  return true;
                }
              })
              .map(function (ch) {
                return _this5.w.config.chart.group === ch.group ? ch.chart : _this5;
              });
          },
        },
        {
          key: 'toggleSeries',
          value: function toggleSeries(seriesName) {
            return this.series.toggleSeries(seriesName);
          },
        },
        {
          key: 'highlightSeriesOnLegendHover',
          value: function highlightSeriesOnLegendHover(e, targetElement) {
            return this.series.toggleSeriesOnHover(e, targetElement);
          },
        },
        {
          key: 'showSeries',
          value: function showSeries(seriesName) {
            this.series.showSeries(seriesName);
          },
        },
        {
          key: 'hideSeries',
          value: function hideSeries(seriesName) {
            this.series.hideSeries(seriesName);
          },
        },
        {
          key: 'resetSeries',
          value: function resetSeries() {
            var shouldUpdateChart =
              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var shouldResetZoom =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            this.series.resetSeries(shouldUpdateChart, shouldResetZoom);
          }, // Public method to add event listener on chart context
        },
        {
          key: 'addEventListener',
          value: function addEventListener(name, handler) {
            this.events.addEventListener(name, handler);
          }, // Public method to remove event listener on chart context
        },
        {
          key: 'removeEventListener',
          value: function removeEventListener(name, handler) {
            this.events.removeEventListener(name, handler);
          },
        },
        {
          key: 'addXaxisAnnotation',
          value: function addXaxisAnnotation(opts) {
            var pushToMemory =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var context =
              arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var me = this;

            if (context) {
              me = context;
            }

            me.annotations.addXaxisAnnotationExternal(opts, pushToMemory, me);
          },
        },
        {
          key: 'addYaxisAnnotation',
          value: function addYaxisAnnotation(opts) {
            var pushToMemory =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var context =
              arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var me = this;

            if (context) {
              me = context;
            }

            me.annotations.addYaxisAnnotationExternal(opts, pushToMemory, me);
          },
        },
        {
          key: 'addPointAnnotation',
          value: function addPointAnnotation(opts) {
            var pushToMemory =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var context =
              arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var me = this;

            if (context) {
              me = context;
            }

            me.annotations.addPointAnnotationExternal(opts, pushToMemory, me);
          },
        },
        {
          key: 'clearAnnotations',
          value: function clearAnnotations() {
            var context =
              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            var me = this;

            if (context) {
              me = context;
            }

            me.annotations.clearAnnotations(me);
          },
        },
        {
          key: 'removeAnnotation',
          value: function removeAnnotation(id) {
            var context =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var me = this;

            if (context) {
              me = context;
            }

            me.annotations.removeAnnotation(me, id);
          },
        },
        {
          key: 'getChartArea',
          value: function getChartArea() {
            var el = this.w.globals.dom.baseEl.querySelector('.apexcharts-inner');
            return el;
          },
        },
        {
          key: 'getSeriesTotalXRange',
          value: function getSeriesTotalXRange(minX, maxX) {
            return this.coreUtils.getSeriesTotalsXRange(minX, maxX);
          },
        },
        {
          key: 'getHighestValueInSeries',
          value: function getHighestValueInSeries() {
            var seriesIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var range = new Range(this.ctx);
            return range.getMinYMaxY(seriesIndex).highestY;
          },
        },
        {
          key: 'getLowestValueInSeries',
          value: function getLowestValueInSeries() {
            var seriesIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var range = new Range(this.ctx);
            return range.getMinYMaxY(seriesIndex).lowestY;
          },
        },
        {
          key: 'getSeriesTotal',
          value: function getSeriesTotal() {
            return this.w.globals.seriesTotals;
          },
        },
        {
          key: 'toggleDataPointSelection',
          value: function toggleDataPointSelection(seriesIndex, dataPointIndex) {
            return this.updateHelpers.toggleDataPointSelection(seriesIndex, dataPointIndex);
          },
        },
        {
          key: 'zoomX',
          value: function zoomX(min, max) {
            this.ctx.toolbar.zoomUpdateOptions(min, max);
          },
        },
        {
          key: 'setLocale',
          value: function setLocale(localeName) {
            this.localization.setCurrentLocaleValues(localeName);
          },
        },
        {
          key: 'dataURI',
          value: function dataURI(options) {
            var exp = new Exports(this.ctx);
            return exp.dataURI(options);
          },
        },
        {
          key: 'paper',
          value: function paper() {
            return this.w.globals.dom.Paper;
          },
        },
        {
          key: '_parentResizeCallback',
          value: function _parentResizeCallback() {
            if (this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize) {
              this._windowResize();
            }
          },
          /**
           * Handle window resize and re-draw the whole chart.
           */
        },
        {
          key: '_windowResize',
          value: function _windowResize() {
            var _this6 = this;

            clearTimeout(this.w.globals.resizeTimer);
            this.w.globals.resizeTimer = window.setTimeout(function () {
              _this6.w.globals.resized = true;
              _this6.w.globals.dataChanged = false; // we need to redraw the whole chart on window resize (with a small delay).

              _this6.ctx.update();
            }, 150);
          },
        },
        {
          key: '_windowResizeHandler',
          value: function _windowResizeHandler() {
            var redraw = this.w.config.chart.redrawOnWindowResize;

            if (typeof redraw === 'function') {
              redraw = redraw();
            }

            redraw && this._windowResize();
          },
        },
      ],
      [
        {
          key: 'getChartByID',
          value: function getChartByID(id) {
            var chartId = Utils$1.escapeString(id);

            var c = Apex._chartInstances.filter(function (ch) {
              return ch.id === chartId;
            })[0];

            return c && c.chart;
          },
          /**
           * Allows the user to provide data attrs in the element and the chart will render automatically when this method is called by searching for the elements containing 'data-apexcharts' attribute
           */
        },
        {
          key: 'initOnLoad',
          value: function initOnLoad() {
            var els = document.querySelectorAll('[data-apexcharts]');

            for (var i = 0; i < els.length; i++) {
              var el = els[i];
              var options = JSON.parse(els[i].getAttribute('data-options'));
              var apexChart = new ApexCharts(el, options);
              apexChart.render();
            }
          },
          /**
           * This static method allows users to call chart methods without necessarily from the
           * instance of the chart in case user has assigned chartID to the targeted chart.
           * The chartID is used for mapping the instance stored in Apex._chartInstances global variable
           *
           * This is helpful in cases when you don't have reference of the chart instance
           * easily and need to call the method from anywhere.
           * For eg, in React/Vue applications when you have many parent/child components,
           * and need easy reference to other charts for performing dynamic operations
           *
           * @param {string} chartID - The unique identifier which will be used to call methods
           * on that chart instance
           * @param {function} fn - The method name to call
           * @param {object} opts - The parameters which are accepted in the original method will be passed here in the same order.
           */
        },
        {
          key: 'exec',
          value: function exec(chartID, fn) {
            var chart = this.getChartByID(chartID);
            if (!chart) return; // turn on the global exec flag to indicate this method was called

            chart.w.globals.isExecCalled = true;
            var ret = null;

            if (chart.publicMethods.indexOf(fn) !== -1) {
              for (
                var _len = arguments.length, opts = new Array(_len > 2 ? _len - 2 : 0), _key = 2;
                _key < _len;
                _key++
              ) {
                opts[_key - 2] = arguments[_key];
              }

              ret = chart[fn].apply(chart, opts);
            }

            return ret;
          },
        },
        {
          key: 'merge',
          value: function merge(target, source) {
            return Utils$1.extend(target, source);
          },
        },
      ]
    );

    return ApexCharts;
  })();

  return ApexCharts$1;
});
// #endregion

// #region / Sweetalert2 v11.4.4
//    _____                  _        _           _   ___
//   / ____|                | |      | |         | | |__ \
//  | (_____      _____  ___| |_ __ _| | ___ _ __| |_   ) |
//   \___ \ \ /\ / / _ \/ _ \ __/ _` | |/ _ \ '__| __| / /
//   ____) \ V  V /  __/  __/ || (_| | |  __/ |  | |_ / /_
//  |_____/ \_/\_/ \___|\___|\__\__,_|_|\___|_|   \__|____|
//
//                                                          v11.4.4
/*!
 * sweetalert2 v11.4.4 (https://sweetalert2.github.io/)
 * Released under the MIT License (https://github.com/sweetalert2/sweetalert2/blob/master/LICENSE)
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined'
    ? (module.exports = factory())
    : typeof define === 'function' && define.amd
    ? define(factory)
    : ((global = global || self), (global.Sweetalert2 = factory()));
})(this, function () {
  'use strict';

  const consolePrefix = 'SweetAlert2:';
  /**
   * Filter the unique values into a new array
   * @param arr
   */

  const uniqueArray = (arr) => {
    const result = [];

    for (let i = 0; i < arr.length; i++) {
      if (result.indexOf(arr[i]) === -1) {
        result.push(arr[i]);
      }
    }

    return result;
  };
  /**
   * Capitalize the first letter of a string
   * @param {string} str
   * @returns {string}
   */

  const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);
  /**
   * @param {NodeList | HTMLCollection | NamedNodeMap} nodeList
   * @returns {array}
   */

  const toArray = (nodeList) => Array.prototype.slice.call(nodeList);
  /**
   * Standardize console warnings
   * @param {string | array} message
   */

  const warn = (message) => {
    console.warn(
      ''
        .concat(consolePrefix, ' ')
        .concat(typeof message === 'object' ? message.join(' ') : message)
    );
  };
  /**
   * Standardize console errors
   * @param {string} message
   */

  const error = (message) => {
    console.error(''.concat(consolePrefix, ' ').concat(message));
  };
  /**
   * Private global state for `warnOnce`
   * @type {Array}
   * @private
   */

  const previousWarnOnceMessages = [];
  /**
   * Show a console warning, but only if it hasn't already been shown
   * @param {string} message
   */

  const warnOnce = (message) => {
    if (!previousWarnOnceMessages.includes(message)) {
      previousWarnOnceMessages.push(message);
      warn(message);
    }
  };
  /**
   * Show a one-time console warning about deprecated params/methods
   */

  const warnAboutDeprecation = (deprecatedParam, useInstead) => {
    warnOnce(
      '"'
        .concat(
          deprecatedParam,
          '" is deprecated and will be removed in the next major release. Please use "'
        )
        .concat(useInstead, '" instead.')
    );
  };
  /**
   * If `arg` is a function, call it (with no arguments or context) and return the result.
   * Otherwise, just pass the value through
   * @param arg
   */

  const callIfFunction = (arg) => (typeof arg === 'function' ? arg() : arg);
  const hasToPromiseFn = (arg) => arg && typeof arg.toPromise === 'function';
  const asPromise = (arg) => (hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg));
  const isPromise = (arg) => arg && Promise.resolve(arg) === arg;

  const defaultParams = {
    title: '',
    titleText: '',
    text: '',
    html: '',
    footer: '',
    icon: undefined,
    iconColor: undefined,
    iconHtml: undefined,
    template: undefined,
    toast: false,
    showClass: {
      popup: 'swal2-show',
      backdrop: 'swal2-backdrop-show',
      icon: 'swal2-icon-show',
    },
    hideClass: {
      popup: 'swal2-hide',
      backdrop: 'swal2-backdrop-hide',
      icon: 'swal2-icon-hide',
    },
    customClass: {},
    target: 'body',
    color: undefined,
    backdrop: true,
    heightAuto: true,
    allowOutsideClick: true,
    allowEscapeKey: true,
    allowEnterKey: true,
    stopKeydownPropagation: true,
    keydownListenerCapture: false,
    showConfirmButton: true,
    showDenyButton: false,
    showCancelButton: false,
    preConfirm: undefined,
    preDeny: undefined,
    confirmButtonText: 'OK',
    confirmButtonAriaLabel: '',
    confirmButtonColor: undefined,
    denyButtonText: 'No',
    denyButtonAriaLabel: '',
    denyButtonColor: undefined,
    cancelButtonText: 'Cancel',
    cancelButtonAriaLabel: '',
    cancelButtonColor: undefined,
    buttonsStyling: true,
    reverseButtons: false,
    focusConfirm: true,
    focusDeny: false,
    focusCancel: false,
    returnFocus: true,
    showCloseButton: false,
    closeButtonHtml: '&times;',
    closeButtonAriaLabel: 'Close this dialog',
    loaderHtml: '',
    showLoaderOnConfirm: false,
    showLoaderOnDeny: false,
    imageUrl: undefined,
    imageWidth: undefined,
    imageHeight: undefined,
    imageAlt: '',
    timer: undefined,
    timerProgressBar: false,
    width: undefined,
    padding: undefined,
    background: undefined,
    input: undefined,
    inputPlaceholder: '',
    inputLabel: '',
    inputValue: '',
    inputOptions: {},
    inputAutoTrim: true,
    inputAttributes: {},
    inputValidator: undefined,
    returnInputValueOnDeny: false,
    validationMessage: undefined,
    grow: false,
    position: 'center',
    progressSteps: [],
    currentProgressStep: undefined,
    progressStepsDistance: undefined,
    willOpen: undefined,
    didOpen: undefined,
    didRender: undefined,
    willClose: undefined,
    didClose: undefined,
    didDestroy: undefined,
    scrollbarPadding: true,
  };
  const updatableParams = [
    'allowEscapeKey',
    'allowOutsideClick',
    'background',
    'buttonsStyling',
    'cancelButtonAriaLabel',
    'cancelButtonColor',
    'cancelButtonText',
    'closeButtonAriaLabel',
    'closeButtonHtml',
    'color',
    'confirmButtonAriaLabel',
    'confirmButtonColor',
    'confirmButtonText',
    'currentProgressStep',
    'customClass',
    'denyButtonAriaLabel',
    'denyButtonColor',
    'denyButtonText',
    'didClose',
    'didDestroy',
    'footer',
    'hideClass',
    'html',
    'icon',
    'iconColor',
    'iconHtml',
    'imageAlt',
    'imageHeight',
    'imageUrl',
    'imageWidth',
    'preConfirm',
    'preDeny',
    'progressSteps',
    'returnFocus',
    'reverseButtons',
    'showCancelButton',
    'showCloseButton',
    'showConfirmButton',
    'showDenyButton',
    'text',
    'title',
    'titleText',
    'willClose',
  ];
  const deprecatedParams = {};
  const toastIncompatibleParams = [
    'allowOutsideClick',
    'allowEnterKey',
    'backdrop',
    'focusConfirm',
    'focusDeny',
    'focusCancel',
    'returnFocus',
    'heightAuto',
    'keydownListenerCapture',
  ];
  /**
   * Is valid parameter
   * @param {string} paramName
   */

  const isValidParameter = (paramName) => {
    return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
  };
  /**
   * Is valid parameter for Swal.update() method
   * @param {string} paramName
   */

  const isUpdatableParameter = (paramName) => {
    return updatableParams.indexOf(paramName) !== -1;
  };
  /**
   * Is deprecated parameter
   * @param {string} paramName
   */

  const isDeprecatedParameter = (paramName) => {
    return deprecatedParams[paramName];
  };

  const checkIfParamIsValid = (param) => {
    if (!isValidParameter(param)) {
      warn('Unknown parameter "'.concat(param, '"'));
    }
  };

  const checkIfToastParamIsValid = (param) => {
    if (toastIncompatibleParams.includes(param)) {
      warn('The parameter "'.concat(param, '" is incompatible with toasts'));
    }
  };

  const checkIfParamIsDeprecated = (param) => {
    if (isDeprecatedParameter(param)) {
      warnAboutDeprecation(param, isDeprecatedParameter(param));
    }
  };
  /**
   * Show relevant warnings for given params
   *
   * @param params
   */

  const showWarningsForParams = (params) => {
    if (!params.backdrop && params.allowOutsideClick) {
      warn('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
    }

    for (const param in params) {
      checkIfParamIsValid(param);

      if (params.toast) {
        checkIfToastParamIsValid(param);
      }

      checkIfParamIsDeprecated(param);
    }
  };

  const swalPrefix = 'swal2-';
  const prefix = (items) => {
    const result = {};

    for (const i in items) {
      result[items[i]] = swalPrefix + items[i];
    }

    return result;
  };
  const swalClasses = prefix([
    'container',
    'shown',
    'height-auto',
    'iosfix',
    'popup',
    'modal',
    'no-backdrop',
    'no-transition',
    'toast',
    'toast-shown',
    'show',
    'hide',
    'close',
    'title',
    'html-container',
    'actions',
    'confirm',
    'deny',
    'cancel',
    'default-outline',
    'footer',
    'icon',
    'icon-content',
    'image',
    'input',
    'file',
    'range',
    'select',
    'radio',
    'checkbox',
    'label',
    'textarea',
    'inputerror',
    'input-label',
    'validation-message',
    'progress-steps',
    'active-progress-step',
    'progress-step',
    'progress-step-line',
    'loader',
    'loading',
    'styled',
    'top',
    'top-start',
    'top-end',
    'top-left',
    'top-right',
    'center',
    'center-start',
    'center-end',
    'center-left',
    'center-right',
    'bottom',
    'bottom-start',
    'bottom-end',
    'bottom-left',
    'bottom-right',
    'grow-row',
    'grow-column',
    'grow-fullscreen',
    'rtl',
    'timer-progress-bar',
    'timer-progress-bar-container',
    'scrollbar-measure',
    'icon-success',
    'icon-warning',
    'icon-info',
    'icon-question',
    'icon-error',
  ]);
  const iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);

  /**
   * Gets the popup container which contains the backdrop and the popup itself.
   *
   * @returns {HTMLElement | null}
   */

  const getContainer = () => document.body.querySelector('.'.concat(swalClasses.container));
  const elementBySelector = (selectorString) => {
    const container = getContainer();
    return container ? container.querySelector(selectorString) : null;
  };

  const elementByClass = (className) => {
    return elementBySelector('.'.concat(className));
  };

  const getPopup = () => elementByClass(swalClasses.popup);
  const getIcon = () => elementByClass(swalClasses.icon);
  const getTitle = () => elementByClass(swalClasses.title);
  const getHtmlContainer = () => elementByClass(swalClasses['html-container']);
  const getImage = () => elementByClass(swalClasses.image);
  const getProgressSteps = () => elementByClass(swalClasses['progress-steps']);
  const getValidationMessage = () => elementByClass(swalClasses['validation-message']);
  const getConfirmButton = () =>
    elementBySelector('.'.concat(swalClasses.actions, ' .').concat(swalClasses.confirm));
  const getDenyButton = () =>
    elementBySelector('.'.concat(swalClasses.actions, ' .').concat(swalClasses.deny));
  const getInputLabel = () => elementByClass(swalClasses['input-label']);
  const getLoader = () => elementBySelector('.'.concat(swalClasses.loader));
  const getCancelButton = () =>
    elementBySelector('.'.concat(swalClasses.actions, ' .').concat(swalClasses.cancel));
  const getActions = () => elementByClass(swalClasses.actions);
  const getFooter = () => elementByClass(swalClasses.footer);
  const getTimerProgressBar = () => elementByClass(swalClasses['timer-progress-bar']);
  const getCloseButton = () => elementByClass(swalClasses.close); // https://github.com/jkup/focusable/blob/master/index.js

  const focusable =
    '\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n';
  const getFocusableElements = () => {
    const focusableElementsWithTabindex = toArray(
      getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')
    ) // sort according to tabindex
      .sort((a, b) => {
        const tabindexA = parseInt(a.getAttribute('tabindex'));
        const tabindexB = parseInt(b.getAttribute('tabindex'));

        if (tabindexA > tabindexB) {
          return 1;
        } else if (tabindexA < tabindexB) {
          return -1;
        }

        return 0;
      });
    const otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(
      (el) => el.getAttribute('tabindex') !== '-1'
    );
    return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter((el) =>
      isVisible(el)
    );
  };
  const isModal = () => {
    return (
      hasClass(document.body, swalClasses.shown) &&
      !hasClass(document.body, swalClasses['toast-shown']) &&
      !hasClass(document.body, swalClasses['no-backdrop'])
    );
  };
  const isToast = () => {
    return getPopup() && hasClass(getPopup(), swalClasses.toast);
  };
  const isLoading = () => {
    return getPopup().hasAttribute('data-loading');
  };

  const states = {
    previousBodyPadding: null,
  };
  /**
   * Securely set innerHTML of an element
   * https://github.com/sweetalert2/sweetalert2/issues/1926
   *
   * @param {HTMLElement} elem
   * @param {string} html
   */

  const setInnerHtml = (elem, html) => {
    elem.textContent = '';

    if (html) {
      const parser = new DOMParser();
      const parsed = parser.parseFromString(html, 'text/html');
      toArray(parsed.querySelector('head').childNodes).forEach((child) => {
        elem.appendChild(child);
      });
      toArray(parsed.querySelector('body').childNodes).forEach((child) => {
        elem.appendChild(child);
      });
    }
  };
  /**
   * @param {HTMLElement} elem
   * @param {string} className
   * @returns {boolean}
   */

  const hasClass = (elem, className) => {
    if (!className) {
      return false;
    }

    const classList = className.split(/\s+/);

    for (let i = 0; i < classList.length; i++) {
      if (!elem.classList.contains(classList[i])) {
        return false;
      }
    }

    return true;
  };

  const removeCustomClasses = (elem, params) => {
    toArray(elem.classList).forEach((className) => {
      if (
        !Object.values(swalClasses).includes(className) &&
        !Object.values(iconTypes).includes(className) &&
        !Object.values(params.showClass).includes(className)
      ) {
        elem.classList.remove(className);
      }
    });
  };

  const applyCustomClass = (elem, params, className) => {
    removeCustomClasses(elem, params);

    if (params.customClass && params.customClass[className]) {
      if (
        typeof params.customClass[className] !== 'string' &&
        !params.customClass[className].forEach
      ) {
        return warn(
          'Invalid type of customClass.'
            .concat(className, '! Expected string or iterable object, got "')
            .concat(typeof params.customClass[className], '"')
        );
      }

      addClass(elem, params.customClass[className]);
    }
  };
  /**
   * @param {HTMLElement} popup
   * @param {string} inputType
   * @returns {HTMLInputElement | null}
   */

  const getInput = (popup, inputType) => {
    if (!inputType) {
      return null;
    }

    switch (inputType) {
      case 'select':
      case 'textarea':
      case 'file':
        return popup.querySelector(
          '.'.concat(swalClasses.popup, ' > .').concat(swalClasses[inputType])
        );

      case 'checkbox':
        return popup.querySelector(
          '.'.concat(swalClasses.popup, ' > .').concat(swalClasses.checkbox, ' input')
        );

      case 'radio':
        return (
          popup.querySelector(
            '.'.concat(swalClasses.popup, ' > .').concat(swalClasses.radio, ' input:checked')
          ) ||
          popup.querySelector(
            '.'.concat(swalClasses.popup, ' > .').concat(swalClasses.radio, ' input:first-child')
          )
        );

      case 'range':
        return popup.querySelector(
          '.'.concat(swalClasses.popup, ' > .').concat(swalClasses.range, ' input')
        );

      default:
        return popup.querySelector('.'.concat(swalClasses.popup, ' > .').concat(swalClasses.input));
    }
  };
  /**
   * @param {HTMLInputElement} input
   */

  const focusInput = (input) => {
    input.focus(); // place cursor at end of text in text input

    if (input.type !== 'file') {
      // http://stackoverflow.com/a/2345915
      const val = input.value;
      input.value = '';
      input.value = val;
    }
  };
  /**
   * @param {HTMLElement | HTMLElement[] | null} target
   * @param {string | string[]} classList
   * @param {boolean} condition
   */

  const toggleClass = (target, classList, condition) => {
    if (!target || !classList) {
      return;
    }

    if (typeof classList === 'string') {
      classList = classList.split(/\s+/).filter(Boolean);
    }

    classList.forEach((className) => {
      if (Array.isArray(target)) {
        target.forEach((elem) => {
          condition ? elem.classList.add(className) : elem.classList.remove(className);
        });
      } else {
        condition ? target.classList.add(className) : target.classList.remove(className);
      }
    });
  };
  /**
   * @param {HTMLElement | HTMLElement[] | null} target
   * @param {string | string[]} classList
   */

  const addClass = (target, classList) => {
    toggleClass(target, classList, true);
  };
  /**
   * @param {HTMLElement | HTMLElement[] | null} target
   * @param {string | string[]} classList
   */

  const removeClass = (target, classList) => {
    toggleClass(target, classList, false);
  };
  /**
   * Get direct child of an element by class name
   *
   * @param {HTMLElement} elem
   * @param {string} className
   * @returns {HTMLElement | null}
   */

  const getDirectChildByClass = (elem, className) => {
    const childNodes = toArray(elem.childNodes);

    for (let i = 0; i < childNodes.length; i++) {
      if (hasClass(childNodes[i], className)) {
        return childNodes[i];
      }
    }
  };
  /**
   * @param {HTMLElement} elem
   * @param {string} property
   * @param {*} value
   */

  const applyNumericalStyle = (elem, property, value) => {
    if (value === ''.concat(parseInt(value))) {
      value = parseInt(value);
    }

    if (value || parseInt(value) === 0) {
      elem.style[property] = typeof value === 'number' ? ''.concat(value, 'px') : value;
    } else {
      elem.style.removeProperty(property);
    }
  };
  /**
   * @param {HTMLElement} elem
   * @param {string} display
   */

  const show = function (elem) {
    let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';
    elem.style.display = display;
  };
  /**
   * @param {HTMLElement} elem
   */

  const hide = (elem) => {
    elem.style.display = 'none';
  };
  const setStyle = (parent, selector, property, value) => {
    const el = parent.querySelector(selector);

    if (el) {
      el.style[property] = value;
    }
  };
  const toggle = (elem, condition, display) => {
    condition ? show(elem, display) : hide(elem);
  }; // borrowed from jquery $(elem).is(':visible') implementation

  const isVisible = (elem) =>
    !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
  const allButtonsAreHidden = () =>
    !isVisible(getConfirmButton()) && !isVisible(getDenyButton()) && !isVisible(getCancelButton());
  const isScrollable = (elem) => !!(elem.scrollHeight > elem.clientHeight); // borrowed from https://stackoverflow.com/a/46352119

  const hasCssAnimation = (elem) => {
    const style = window.getComputedStyle(elem);
    const animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
    const transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
    return animDuration > 0 || transDuration > 0;
  };
  const animateTimerProgressBar = function (timer) {
    let reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const timerProgressBar = getTimerProgressBar();

    if (isVisible(timerProgressBar)) {
      if (reset) {
        timerProgressBar.style.transition = 'none';
        timerProgressBar.style.width = '100%';
      }

      setTimeout(() => {
        timerProgressBar.style.transition = 'width '.concat(timer / 1000, 's linear');
        timerProgressBar.style.width = '0%';
      }, 10);
    }
  };
  const stopTimerProgressBar = () => {
    const timerProgressBar = getTimerProgressBar();
    const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
    timerProgressBar.style.removeProperty('transition');
    timerProgressBar.style.width = '100%';
    const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
    const timerProgressBarPercent = (timerProgressBarWidth / timerProgressBarFullWidth) * 100;
    timerProgressBar.style.removeProperty('transition');
    timerProgressBar.style.width = ''.concat(timerProgressBarPercent, '%');
  };

  /**
   * Detect Node env
   *
   * @returns {boolean}
   */
  const isNodeEnv = () => typeof window === 'undefined' || typeof document === 'undefined';

  const RESTORE_FOCUS_TIMEOUT = 100;

  const globalState = {};

  const focusPreviousActiveElement = () => {
    if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {
      globalState.previousActiveElement.focus();
      globalState.previousActiveElement = null;
    } else if (document.body) {
      document.body.focus();
    }
  }; // Restore previous active (focused) element

  const restoreActiveElement = (returnFocus) => {
    return new Promise((resolve) => {
      if (!returnFocus) {
        return resolve();
      }

      const x = window.scrollX;
      const y = window.scrollY;
      globalState.restoreFocusTimeout = setTimeout(() => {
        focusPreviousActiveElement();
        resolve();
      }, RESTORE_FOCUS_TIMEOUT); // issues/900

      window.scrollTo(x, y);
    });
  };

  const sweetHTML = '\n <div aria-labelledby="'
    .concat(swalClasses.title, '" aria-describedby="')
    .concat(swalClasses['html-container'], '" class="')
    .concat(swalClasses.popup, '" tabindex="-1">\n   <button type="button" class="')
    .concat(swalClasses.close, '"></button>\n   <ul class="')
    .concat(swalClasses['progress-steps'], '"></ul>\n   <div class="')
    .concat(swalClasses.icon, '"></div>\n   <img class="')
    .concat(swalClasses.image, '" />\n   <h2 class="')
    .concat(swalClasses.title, '" id="')
    .concat(swalClasses.title, '"></h2>\n   <div class="')
    .concat(swalClasses['html-container'], '" id="')
    .concat(swalClasses['html-container'], '"></div>\n   <input class="')
    .concat(swalClasses.input, '" />\n   <input type="file" class="')
    .concat(swalClasses.file, '" />\n   <div class="')
    .concat(
      swalClasses.range,
      '">\n     <input type="range" />\n     <output></output>\n   </div>\n   <select class="'
    )
    .concat(swalClasses.select, '"></select>\n   <div class="')
    .concat(swalClasses.radio, '"></div>\n   <label for="')
    .concat(swalClasses.checkbox, '" class="')
    .concat(swalClasses.checkbox, '">\n     <input type="checkbox" />\n     <span class="')
    .concat(swalClasses.label, '"></span>\n   </label>\n   <textarea class="')
    .concat(swalClasses.textarea, '"></textarea>\n   <div class="')
    .concat(swalClasses['validation-message'], '" id="')
    .concat(swalClasses['validation-message'], '"></div>\n   <div class="')
    .concat(swalClasses.actions, '">\n     <div class="')
    .concat(swalClasses.loader, '"></div>\n     <button type="button" class="')
    .concat(swalClasses.confirm, '"></button>\n     <button type="button" class="')
    .concat(swalClasses.deny, '"></button>\n     <button type="button" class="')
    .concat(swalClasses.cancel, '"></button>\n   </div>\n   <div class="')
    .concat(swalClasses.footer, '"></div>\n   <div class="')
    .concat(swalClasses['timer-progress-bar-container'], '">\n     <div class="')
    .concat(swalClasses['timer-progress-bar'], '"></div>\n   </div>\n </div>\n')
    .replace(/(^|\n)\s*/g, '');

  const resetOldContainer = () => {
    const oldContainer = getContainer();

    if (!oldContainer) {
      return false;
    }

    oldContainer.remove();
    removeClass(
      [document.documentElement, document.body],
      [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]
    );
    return true;
  };

  const resetValidationMessage = () => {
    globalState.currentInstance.resetValidationMessage();
  };

  const addInputChangeListeners = () => {
    const popup = getPopup();
    const input = getDirectChildByClass(popup, swalClasses.input);
    const file = getDirectChildByClass(popup, swalClasses.file);
    const range = popup.querySelector('.'.concat(swalClasses.range, ' input'));
    const rangeOutput = popup.querySelector('.'.concat(swalClasses.range, ' output'));
    const select = getDirectChildByClass(popup, swalClasses.select);
    const checkbox = popup.querySelector('.'.concat(swalClasses.checkbox, ' input'));
    const textarea = getDirectChildByClass(popup, swalClasses.textarea);
    input.oninput = resetValidationMessage;
    file.onchange = resetValidationMessage;
    select.onchange = resetValidationMessage;
    checkbox.onchange = resetValidationMessage;
    textarea.oninput = resetValidationMessage;

    range.oninput = () => {
      resetValidationMessage();
      rangeOutput.value = range.value;
    };

    range.onchange = () => {
      resetValidationMessage();
      range.nextSibling.value = range.value;
    };
  };

  const getTarget = (target) =>
    typeof target === 'string' ? document.querySelector(target) : target;

  const setupAccessibility = (params) => {
    const popup = getPopup();
    popup.setAttribute('role', params.toast ? 'alert' : 'dialog');
    popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');

    if (!params.toast) {
      popup.setAttribute('aria-modal', 'true');
    }
  };

  const setupRTL = (targetElement) => {
    if (window.getComputedStyle(targetElement).direction === 'rtl') {
      addClass(getContainer(), swalClasses.rtl);
    }
  };
  /*
   * Add modal + backdrop to DOM
   */

  const init = (params) => {
    // Clean up the old popup container if it exists
    const oldContainerExisted = resetOldContainer();
    /* istanbul ignore if */

    if (isNodeEnv()) {
      error('SweetAlert2 requires document to initialize');
      return;
    }

    const container = document.createElement('div');
    container.className = swalClasses.container;

    if (oldContainerExisted) {
      addClass(container, swalClasses['no-transition']);
    }

    setInnerHtml(container, sweetHTML);
    const targetElement = getTarget(params.target);
    targetElement.appendChild(container);
    setupAccessibility(params);
    setupRTL(targetElement);
    addInputChangeListeners();
  };

  /**
   * @param {HTMLElement | object | string} param
   * @param {HTMLElement} target
   */

  const parseHtmlToContainer = (param, target) => {
    // DOM element
    if (param instanceof HTMLElement) {
      target.appendChild(param);
    } // Object
    else if (typeof param === 'object') {
      handleObject(param, target);
    } // Plain string
    else if (param) {
      setInnerHtml(target, param);
    }
  };
  /**
   * @param {object} param
   * @param {HTMLElement} target
   */

  const handleObject = (param, target) => {
    // JQuery element(s)
    if (param.jquery) {
      handleJqueryElem(target, param);
    } // For other objects use their string representation
    else {
      setInnerHtml(target, param.toString());
    }
  };

  const handleJqueryElem = (target, elem) => {
    target.textContent = '';

    if (0 in elem) {
      for (let i = 0; i in elem; i++) {
        target.appendChild(elem[i].cloneNode(true));
      }
    } else {
      target.appendChild(elem.cloneNode(true));
    }
  };

  const animationEndEvent = (() => {
    // Prevent run in Node env

    /* istanbul ignore if */
    if (isNodeEnv()) {
      return false;
    }

    const testEl = document.createElement('div');
    const transEndEventNames = {
      WebkitAnimation: 'webkitAnimationEnd',
      // Chrome, Safari and Opera
      animation: 'animationend', // Standard syntax
    };

    for (const i in transEndEventNames) {
      if (
        Object.prototype.hasOwnProperty.call(transEndEventNames, i) &&
        typeof testEl.style[i] !== 'undefined'
      ) {
        return transEndEventNames[i];
      }
    }

    return false;
  })();

  // https://github.com/twbs/bootstrap/blob/master/js/src/modal.js

  const measureScrollbar = () => {
    const scrollDiv = document.createElement('div');
    scrollDiv.className = swalClasses['scrollbar-measure'];
    document.body.appendChild(scrollDiv);
    const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  };

  const renderActions = (instance, params) => {
    const actions = getActions();
    const loader = getLoader(); // Actions (buttons) wrapper

    if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {
      hide(actions);
    } else {
      show(actions);
    } // Custom class

    applyCustomClass(actions, params, 'actions'); // Render all the buttons

    renderButtons(actions, loader, params); // Loader

    setInnerHtml(loader, params.loaderHtml);
    applyCustomClass(loader, params, 'loader');
  };

  function renderButtons(actions, loader, params) {
    const confirmButton = getConfirmButton();
    const denyButton = getDenyButton();
    const cancelButton = getCancelButton(); // Render buttons

    renderButton(confirmButton, 'confirm', params);
    renderButton(denyButton, 'deny', params);
    renderButton(cancelButton, 'cancel', params);
    handleButtonsStyling(confirmButton, denyButton, cancelButton, params);

    if (params.reverseButtons) {
      if (params.toast) {
        actions.insertBefore(cancelButton, confirmButton);
        actions.insertBefore(denyButton, confirmButton);
      } else {
        actions.insertBefore(cancelButton, loader);
        actions.insertBefore(denyButton, loader);
        actions.insertBefore(confirmButton, loader);
      }
    }
  }

  function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {
    if (!params.buttonsStyling) {
      return removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
    }

    addClass([confirmButton, denyButton, cancelButton], swalClasses.styled); // Buttons background colors

    if (params.confirmButtonColor) {
      confirmButton.style.backgroundColor = params.confirmButtonColor;
      addClass(confirmButton, swalClasses['default-outline']);
    }

    if (params.denyButtonColor) {
      denyButton.style.backgroundColor = params.denyButtonColor;
      addClass(denyButton, swalClasses['default-outline']);
    }

    if (params.cancelButtonColor) {
      cancelButton.style.backgroundColor = params.cancelButtonColor;
      addClass(cancelButton, swalClasses['default-outline']);
    }
  }

  function renderButton(button, buttonType, params) {
    toggle(
      button,
      params['show'.concat(capitalizeFirstLetter(buttonType), 'Button')],
      'inline-block'
    );
    setInnerHtml(button, params[''.concat(buttonType, 'ButtonText')]); // Set caption text

    button.setAttribute('aria-label', params[''.concat(buttonType, 'ButtonAriaLabel')]); // ARIA label
    // Add buttons custom classes

    button.className = swalClasses[buttonType];
    applyCustomClass(button, params, ''.concat(buttonType, 'Button'));
    addClass(button, params[''.concat(buttonType, 'ButtonClass')]);
  }

  function handleBackdropParam(container, backdrop) {
    if (typeof backdrop === 'string') {
      container.style.background = backdrop;
    } else if (!backdrop) {
      addClass([document.documentElement, document.body], swalClasses['no-backdrop']);
    }
  }

  function handlePositionParam(container, position) {
    if (position in swalClasses) {
      addClass(container, swalClasses[position]);
    } else {
      warn('The "position" parameter is not valid, defaulting to "center"');
      addClass(container, swalClasses.center);
    }
  }

  function handleGrowParam(container, grow) {
    if (grow && typeof grow === 'string') {
      const growClass = 'grow-'.concat(grow);

      if (growClass in swalClasses) {
        addClass(container, swalClasses[growClass]);
      }
    }
  }

  const renderContainer = (instance, params) => {
    const container = getContainer();

    if (!container) {
      return;
    }

    handleBackdropParam(container, params.backdrop);
    handlePositionParam(container, params.position);
    handleGrowParam(container, params.grow); // Custom class

    applyCustomClass(container, params, 'container');
  };

  /**
   * This module contains `WeakMap`s for each effectively-"private  property" that a `Swal` has.
   * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
   * This is the approach that Babel will probably take to implement private methods/fields
   *   https://github.com/tc39/proposal-private-methods
   *   https://github.com/babel/babel/pull/7555
   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
   *   then we can use that language feature.
   */
  var privateProps = {
    awaitingPromise: new WeakMap(),
    promise: new WeakMap(),
    innerParams: new WeakMap(),
    domCache: new WeakMap(),
  };

  const inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];
  const renderInput = (instance, params) => {
    const popup = getPopup();
    const innerParams = privateProps.innerParams.get(instance);
    const rerender = !innerParams || params.input !== innerParams.input;
    inputTypes.forEach((inputType) => {
      const inputClass = swalClasses[inputType];
      const inputContainer = getDirectChildByClass(popup, inputClass); // set attributes

      setAttributes(inputType, params.inputAttributes); // set class

      inputContainer.className = inputClass;

      if (rerender) {
        hide(inputContainer);
      }
    });

    if (params.input) {
      if (rerender) {
        showInput(params);
      } // set custom class

      setCustomClass(params);
    }
  };

  const showInput = (params) => {
    if (!renderInputType[params.input]) {
      return error(
        'Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "'.concat(
          params.input,
          '"'
        )
      );
    }

    const inputContainer = getInputContainer(params.input);
    const input = renderInputType[params.input](inputContainer, params);
    show(input); // input autofocus

    setTimeout(() => {
      focusInput(input);
    });
  };

  const removeAttributes = (input) => {
    for (let i = 0; i < input.attributes.length; i++) {
      const attrName = input.attributes[i].name;

      if (!['type', 'value', 'style'].includes(attrName)) {
        input.removeAttribute(attrName);
      }
    }
  };

  const setAttributes = (inputType, inputAttributes) => {
    const input = getInput(getPopup(), inputType);

    if (!input) {
      return;
    }

    removeAttributes(input);

    for (const attr in inputAttributes) {
      input.setAttribute(attr, inputAttributes[attr]);
    }
  };

  const setCustomClass = (params) => {
    const inputContainer = getInputContainer(params.input);

    if (params.customClass) {
      addClass(inputContainer, params.customClass.input);
    }
  };

  const setInputPlaceholder = (input, params) => {
    if (!input.placeholder || params.inputPlaceholder) {
      input.placeholder = params.inputPlaceholder;
    }
  };

  const setInputLabel = (input, prependTo, params) => {
    if (params.inputLabel) {
      input.id = swalClasses.input;
      const label = document.createElement('label');
      const labelClass = swalClasses['input-label'];
      label.setAttribute('for', input.id);
      label.className = labelClass;
      addClass(label, params.customClass.inputLabel);
      label.innerText = params.inputLabel;
      prependTo.insertAdjacentElement('beforebegin', label);
    }
  };

  const getInputContainer = (inputType) => {
    const inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;
    return getDirectChildByClass(getPopup(), inputClass);
  };

  const renderInputType = {};

  renderInputType.text =
    renderInputType.email =
    renderInputType.password =
    renderInputType.number =
    renderInputType.tel =
    renderInputType.url =
      (input, params) => {
        if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {
          input.value = params.inputValue;
        } else if (!isPromise(params.inputValue)) {
          warn(
            'Unexpected type of inputValue! Expected "string", "number" or "Promise", got "'.concat(
              typeof params.inputValue,
              '"'
            )
          );
        }

        setInputLabel(input, input, params);
        setInputPlaceholder(input, params);
        input.type = params.input;
        return input;
      };

  renderInputType.file = (input, params) => {
    setInputLabel(input, input, params);
    setInputPlaceholder(input, params);
    return input;
  };

  renderInputType.range = (range, params) => {
    const rangeInput = range.querySelector('input');
    const rangeOutput = range.querySelector('output');
    rangeInput.value = params.inputValue;
    rangeInput.type = params.input;
    rangeOutput.value = params.inputValue;
    setInputLabel(rangeInput, range, params);
    return range;
  };

  renderInputType.select = (select, params) => {
    select.textContent = '';

    if (params.inputPlaceholder) {
      const placeholder = document.createElement('option');
      setInnerHtml(placeholder, params.inputPlaceholder);
      placeholder.value = '';
      placeholder.disabled = true;
      placeholder.selected = true;
      select.appendChild(placeholder);
    }

    setInputLabel(select, select, params);
    return select;
  };

  renderInputType.radio = (radio) => {
    radio.textContent = '';
    return radio;
  };

  renderInputType.checkbox = (checkboxContainer, params) => {
    /** @type {HTMLInputElement} */
    const checkbox = getInput(getPopup(), 'checkbox');
    checkbox.value = '1';
    checkbox.id = swalClasses.checkbox;
    checkbox.checked = Boolean(params.inputValue);
    const label = checkboxContainer.querySelector('span');
    setInnerHtml(label, params.inputPlaceholder);
    return checkboxContainer;
  };

  renderInputType.textarea = (textarea, params) => {
    textarea.value = params.inputValue;
    setInputPlaceholder(textarea, params);
    setInputLabel(textarea, textarea, params);

    const getMargin = (el) =>
      parseInt(window.getComputedStyle(el).marginLeft) +
      parseInt(window.getComputedStyle(el).marginRight); // https://github.com/sweetalert2/sweetalert2/issues/2291

    setTimeout(() => {
      // https://github.com/sweetalert2/sweetalert2/issues/1699
      if ('MutationObserver' in window) {
        const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);

        const textareaResizeHandler = () => {
          const textareaWidth = textarea.offsetWidth + getMargin(textarea);

          if (textareaWidth > initialPopupWidth) {
            getPopup().style.width = ''.concat(textareaWidth, 'px');
          } else {
            getPopup().style.width = null;
          }
        };

        new MutationObserver(textareaResizeHandler).observe(textarea, {
          attributes: true,
          attributeFilter: ['style'],
        });
      }
    });
    return textarea;
  };

  const renderContent = (instance, params) => {
    const htmlContainer = getHtmlContainer();
    applyCustomClass(htmlContainer, params, 'htmlContainer'); // Content as HTML

    if (params.html) {
      parseHtmlToContainer(params.html, htmlContainer);
      show(htmlContainer, 'block');
    } // Content as plain text
    else if (params.text) {
      htmlContainer.textContent = params.text;
      show(htmlContainer, 'block');
    } // No content
    else {
      hide(htmlContainer);
    }

    renderInput(instance, params);
  };

  const renderFooter = (instance, params) => {
    const footer = getFooter();
    toggle(footer, params.footer);

    if (params.footer) {
      parseHtmlToContainer(params.footer, footer);
    } // Custom class

    applyCustomClass(footer, params, 'footer');
  };

  const renderCloseButton = (instance, params) => {
    const closeButton = getCloseButton();
    setInnerHtml(closeButton, params.closeButtonHtml); // Custom class

    applyCustomClass(closeButton, params, 'closeButton');
    toggle(closeButton, params.showCloseButton);
    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);
  };

  const renderIcon = (instance, params) => {
    const innerParams = privateProps.innerParams.get(instance);
    const icon = getIcon(); // if the given icon already rendered, apply the styling without re-rendering the icon

    if (innerParams && params.icon === innerParams.icon) {
      // Custom or default content
      setContent(icon, params);
      applyStyles(icon, params);
      return;
    }

    if (!params.icon && !params.iconHtml) {
      return hide(icon);
    }

    if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {
      error(
        'Unknown icon! Expected "success", "error", "warning", "info" or "question", got "'.concat(
          params.icon,
          '"'
        )
      );
      return hide(icon);
    }

    show(icon); // Custom or default content

    setContent(icon, params);
    applyStyles(icon, params); // Animate icon

    addClass(icon, params.showClass.icon);
  };

  const applyStyles = (icon, params) => {
    for (const iconType in iconTypes) {
      if (params.icon !== iconType) {
        removeClass(icon, iconTypes[iconType]);
      }
    }

    addClass(icon, iconTypes[params.icon]); // Icon color

    setColor(icon, params); // Success icon background color

    adjustSuccessIconBackgroundColor(); // Custom class

    applyCustomClass(icon, params, 'icon');
  }; // Adjust success icon background color to match the popup background color

  const adjustSuccessIconBackgroundColor = () => {
    const popup = getPopup();
    const popupBackgroundColor = window
      .getComputedStyle(popup)
      .getPropertyValue('background-color');
    const successIconParts = popup.querySelectorAll(
      '[class^=swal2-success-circular-line], .swal2-success-fix'
    );

    for (let i = 0; i < successIconParts.length; i++) {
      successIconParts[i].style.backgroundColor = popupBackgroundColor;
    }
  };

  const successIconHtml =
    '\n  <div class="swal2-success-circular-line-left"></div>\n  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n  <div class="swal2-success-circular-line-right"></div>\n';
  const errorIconHtml =
    '\n  <span class="swal2-x-mark">\n    <span class="swal2-x-mark-line-left"></span>\n    <span class="swal2-x-mark-line-right"></span>\n  </span>\n';

  const setContent = (icon, params) => {
    icon.textContent = '';

    if (params.iconHtml) {
      setInnerHtml(icon, iconContent(params.iconHtml));
    } else if (params.icon === 'success') {
      setInnerHtml(icon, successIconHtml);
    } else if (params.icon === 'error') {
      setInnerHtml(icon, errorIconHtml);
    } else {
      const defaultIconHtml = {
        question: '?',
        warning: '!',
        info: 'i',
      };
      setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]));
    }
  };

  const setColor = (icon, params) => {
    if (!params.iconColor) {
      return;
    }

    icon.style.color = params.iconColor;
    icon.style.borderColor = params.iconColor;

    for (const sel of [
      '.swal2-success-line-tip',
      '.swal2-success-line-long',
      '.swal2-x-mark-line-left',
      '.swal2-x-mark-line-right',
    ]) {
      setStyle(icon, sel, 'backgroundColor', params.iconColor);
    }

    setStyle(icon, '.swal2-success-ring', 'borderColor', params.iconColor);
  };

  const iconContent = (content) =>
    '<div class="'.concat(swalClasses['icon-content'], '">').concat(content, '</div>');

  const renderImage = (instance, params) => {
    const image = getImage();

    if (!params.imageUrl) {
      return hide(image);
    }

    show(image, ''); // Src, alt

    image.setAttribute('src', params.imageUrl);
    image.setAttribute('alt', params.imageAlt); // Width, height

    applyNumericalStyle(image, 'width', params.imageWidth);
    applyNumericalStyle(image, 'height', params.imageHeight); // Class

    image.className = swalClasses.image;
    applyCustomClass(image, params, 'image');
  };

  const createStepElement = (step) => {
    const stepEl = document.createElement('li');
    addClass(stepEl, swalClasses['progress-step']);
    setInnerHtml(stepEl, step);
    return stepEl;
  };

  const createLineElement = (params) => {
    const lineEl = document.createElement('li');
    addClass(lineEl, swalClasses['progress-step-line']);

    if (params.progressStepsDistance) {
      lineEl.style.width = params.progressStepsDistance;
    }

    return lineEl;
  };

  const renderProgressSteps = (instance, params) => {
    const progressStepsContainer = getProgressSteps();

    if (!params.progressSteps || params.progressSteps.length === 0) {
      return hide(progressStepsContainer);
    }

    show(progressStepsContainer);
    progressStepsContainer.textContent = '';

    if (params.currentProgressStep >= params.progressSteps.length) {
      warn(
        'Invalid currentProgressStep parameter, it should be less than progressSteps.length ' +
          '(currentProgressStep like JS arrays starts from 0)'
      );
    }

    params.progressSteps.forEach((step, index) => {
      const stepEl = createStepElement(step);
      progressStepsContainer.appendChild(stepEl);

      if (index === params.currentProgressStep) {
        addClass(stepEl, swalClasses['active-progress-step']);
      }

      if (index !== params.progressSteps.length - 1) {
        const lineEl = createLineElement(params);
        progressStepsContainer.appendChild(lineEl);
      }
    });
  };

  const renderTitle = (instance, params) => {
    const title = getTitle();
    toggle(title, params.title || params.titleText, 'block');

    if (params.title) {
      parseHtmlToContainer(params.title, title);
    }

    if (params.titleText) {
      title.innerText = params.titleText;
    } // Custom class

    applyCustomClass(title, params, 'title');
  };

  const renderPopup = (instance, params) => {
    const container = getContainer();
    const popup = getPopup(); // Width
    // https://github.com/sweetalert2/sweetalert2/issues/2170

    if (params.toast) {
      applyNumericalStyle(container, 'width', params.width);
      popup.style.width = '100%';
      popup.insertBefore(getLoader(), getIcon());
    } else {
      applyNumericalStyle(popup, 'width', params.width);
    } // Padding

    applyNumericalStyle(popup, 'padding', params.padding); // Color

    if (params.color) {
      popup.style.color = params.color;
    } // Background

    if (params.background) {
      popup.style.background = params.background;
    }

    hide(getValidationMessage()); // Classes

    addClasses(popup, params);
  };

  const addClasses = (popup, params) => {
    // Default Class + showClass when updating Swal.update({})
    popup.className = ''
      .concat(swalClasses.popup, ' ')
      .concat(isVisible(popup) ? params.showClass.popup : '');

    if (params.toast) {
      addClass([document.documentElement, document.body], swalClasses['toast-shown']);
      addClass(popup, swalClasses.toast);
    } else {
      addClass(popup, swalClasses.modal);
    } // Custom class

    applyCustomClass(popup, params, 'popup');

    if (typeof params.customClass === 'string') {
      addClass(popup, params.customClass);
    } // Icon class (#1842)

    if (params.icon) {
      addClass(popup, swalClasses['icon-'.concat(params.icon)]);
    }
  };

  const render = (instance, params) => {
    renderPopup(instance, params);
    renderContainer(instance, params);
    renderProgressSteps(instance, params);
    renderIcon(instance, params);
    renderImage(instance, params);
    renderTitle(instance, params);
    renderCloseButton(instance, params);
    renderContent(instance, params);
    renderActions(instance, params);
    renderFooter(instance, params);

    if (typeof params.didRender === 'function') {
      params.didRender(getPopup());
    }
  };

  const DismissReason = Object.freeze({
    cancel: 'cancel',
    backdrop: 'backdrop',
    close: 'close',
    esc: 'esc',
    timer: 'timer',
  });

  // Adding aria-hidden="true" to elements outside of the active modal dialog ensures that
  // elements not within the active modal dialog will not be surfaced if a user opens a screen
  // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.

  const setAriaHidden = () => {
    const bodyChildren = toArray(document.body.children);
    bodyChildren.forEach((el) => {
      if (el === getContainer() || el.contains(getContainer())) {
        return;
      }

      if (el.hasAttribute('aria-hidden')) {
        el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));
      }

      el.setAttribute('aria-hidden', 'true');
    });
  };
  const unsetAriaHidden = () => {
    const bodyChildren = toArray(document.body.children);
    bodyChildren.forEach((el) => {
      if (el.hasAttribute('data-previous-aria-hidden')) {
        el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));
        el.removeAttribute('data-previous-aria-hidden');
      } else {
        el.removeAttribute('aria-hidden');
      }
    });
  };

  const swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];
  const getTemplateParams = (params) => {
    const template =
      typeof params.template === 'string'
        ? document.querySelector(params.template)
        : params.template;

    if (!template) {
      return {};
    }
    /** @type {DocumentFragment} */

    const templateContent = template.content;
    showWarningsForElements(templateContent);
    const result = Object.assign(
      getSwalParams(templateContent),
      getSwalButtons(templateContent),
      getSwalImage(templateContent),
      getSwalIcon(templateContent),
      getSwalInput(templateContent),
      getSwalStringParams(templateContent, swalStringParams)
    );
    return result;
  };
  /**
   * @param {DocumentFragment} templateContent
   */

  const getSwalParams = (templateContent) => {
    const result = {};
    toArray(templateContent.querySelectorAll('swal-param')).forEach((param) => {
      showWarningsForAttributes(param, ['name', 'value']);
      const paramName = param.getAttribute('name');
      const value = param.getAttribute('value');

      if (typeof defaultParams[paramName] === 'boolean' && value === 'false') {
        result[paramName] = false;
      }

      if (typeof defaultParams[paramName] === 'object') {
        result[paramName] = JSON.parse(value);
      }
    });
    return result;
  };
  /**
   * @param {DocumentFragment} templateContent
   */

  const getSwalButtons = (templateContent) => {
    const result = {};
    toArray(templateContent.querySelectorAll('swal-button')).forEach((button) => {
      showWarningsForAttributes(button, ['type', 'color', 'aria-label']);
      const type = button.getAttribute('type');
      result[''.concat(type, 'ButtonText')] = button.innerHTML;
      result['show'.concat(capitalizeFirstLetter(type), 'Button')] = true;

      if (button.hasAttribute('color')) {
        result[''.concat(type, 'ButtonColor')] = button.getAttribute('color');
      }

      if (button.hasAttribute('aria-label')) {
        result[''.concat(type, 'ButtonAriaLabel')] = button.getAttribute('aria-label');
      }
    });
    return result;
  };
  /**
   * @param {DocumentFragment} templateContent
   */

  const getSwalImage = (templateContent) => {
    const result = {};
    /** @type {HTMLElement} */

    const image = templateContent.querySelector('swal-image');

    if (image) {
      showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);

      if (image.hasAttribute('src')) {
        result.imageUrl = image.getAttribute('src');
      }

      if (image.hasAttribute('width')) {
        result.imageWidth = image.getAttribute('width');
      }

      if (image.hasAttribute('height')) {
        result.imageHeight = image.getAttribute('height');
      }

      if (image.hasAttribute('alt')) {
        result.imageAlt = image.getAttribute('alt');
      }
    }

    return result;
  };
  /**
   * @param {DocumentFragment} templateContent
   */

  const getSwalIcon = (templateContent) => {
    const result = {};
    /** @type {HTMLElement} */

    const icon = templateContent.querySelector('swal-icon');

    if (icon) {
      showWarningsForAttributes(icon, ['type', 'color']);

      if (icon.hasAttribute('type')) {
        result.icon = icon.getAttribute('type');
      }

      if (icon.hasAttribute('color')) {
        result.iconColor = icon.getAttribute('color');
      }

      result.iconHtml = icon.innerHTML;
    }

    return result;
  };
  /**
   * @param {DocumentFragment} templateContent
   */

  const getSwalInput = (templateContent) => {
    const result = {};
    /** @type {HTMLElement} */

    const input = templateContent.querySelector('swal-input');

    if (input) {
      showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);
      result.input = input.getAttribute('type') || 'text';

      if (input.hasAttribute('label')) {
        result.inputLabel = input.getAttribute('label');
      }

      if (input.hasAttribute('placeholder')) {
        result.inputPlaceholder = input.getAttribute('placeholder');
      }

      if (input.hasAttribute('value')) {
        result.inputValue = input.getAttribute('value');
      }
    }

    const inputOptions = templateContent.querySelectorAll('swal-input-option');

    if (inputOptions.length) {
      result.inputOptions = {};
      toArray(inputOptions).forEach((option) => {
        showWarningsForAttributes(option, ['value']);
        const optionValue = option.getAttribute('value');
        const optionName = option.innerHTML;
        result.inputOptions[optionValue] = optionName;
      });
    }

    return result;
  };
  /**
   * @param {DocumentFragment} templateContent
   * @param {string[]} paramNames
   */

  const getSwalStringParams = (templateContent, paramNames) => {
    const result = {};

    for (const i in paramNames) {
      const paramName = paramNames[i];
      /** @type {HTMLElement} */

      const tag = templateContent.querySelector(paramName);

      if (tag) {
        showWarningsForAttributes(tag, []);
        result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();
      }
    }

    return result;
  };
  /**
   * @param {DocumentFragment} templateContent
   */

  const showWarningsForElements = (templateContent) => {
    const allowedElements = swalStringParams.concat([
      'swal-param',
      'swal-button',
      'swal-image',
      'swal-icon',
      'swal-input',
      'swal-input-option',
    ]);
    toArray(templateContent.children).forEach((el) => {
      const tagName = el.tagName.toLowerCase();

      if (allowedElements.indexOf(tagName) === -1) {
        warn('Unrecognized element <'.concat(tagName, '>'));
      }
    });
  };
  /**
   * @param {HTMLElement} el
   * @param {string[]} allowedAttributes
   */

  const showWarningsForAttributes = (el, allowedAttributes) => {
    toArray(el.attributes).forEach((attribute) => {
      if (allowedAttributes.indexOf(attribute.name) === -1) {
        warn([
          'Unrecognized attribute "'
            .concat(attribute.name, '" on <')
            .concat(el.tagName.toLowerCase(), '>.'),
          ''.concat(
            allowedAttributes.length
              ? 'Allowed attributes are: '.concat(allowedAttributes.join(', '))
              : 'To set the value, use HTML within the element.'
          ),
        ]);
      }
    });
  };

  var defaultInputValidators = {
    email: (string, validationMessage) => {
      return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string)
        ? Promise.resolve()
        : Promise.resolve(validationMessage || 'Invalid email address');
    },
    url: (string, validationMessage) => {
      // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013
      return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(
        string
      )
        ? Promise.resolve()
        : Promise.resolve(validationMessage || 'Invalid URL');
    },
  };

  function setDefaultInputValidators(params) {
    // Use default `inputValidator` for supported input types if not provided
    if (!params.inputValidator) {
      Object.keys(defaultInputValidators).forEach((key) => {
        if (params.input === key) {
          params.inputValidator = defaultInputValidators[key];
        }
      });
    }
  }

  function validateCustomTargetElement(params) {
    // Determine if the custom target element is valid
    if (
      !params.target ||
      (typeof params.target === 'string' && !document.querySelector(params.target)) ||
      (typeof params.target !== 'string' && !params.target.appendChild)
    ) {
      warn('Target parameter is not valid, defaulting to "body"');
      params.target = 'body';
    }
  }
  /**
   * Set type, text and actions on popup
   *
   * @param params
   */

  function setParameters(params) {
    setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm

    if (params.showLoaderOnConfirm && !params.preConfirm) {
      warn(
        'showLoaderOnConfirm is set to true, but preConfirm is not defined.\n' +
          'showLoaderOnConfirm should be used together with preConfirm, see usage example:\n' +
          'https://sweetalert2.github.io/#ajax-request'
      );
    }

    validateCustomTargetElement(params); // Replace newlines with <br> in title

    if (typeof params.title === 'string') {
      params.title = params.title.split('\n').join('<br />');
    }

    init(params);
  }

  class Timer {
    constructor(callback, delay) {
      this.callback = callback;
      this.remaining = delay;
      this.running = false;
      this.start();
    }

    start() {
      if (!this.running) {
        this.running = true;
        this.started = new Date();
        this.id = setTimeout(this.callback, this.remaining);
      }

      return this.remaining;
    }

    stop() {
      if (this.running) {
        this.running = false;
        clearTimeout(this.id);
        this.remaining -= new Date().getTime() - this.started.getTime();
      }

      return this.remaining;
    }

    increase(n) {
      const running = this.running;

      if (running) {
        this.stop();
      }

      this.remaining += n;

      if (running) {
        this.start();
      }

      return this.remaining;
    }

    getTimerLeft() {
      if (this.running) {
        this.stop();
        this.start();
      }

      return this.remaining;
    }

    isRunning() {
      return this.running;
    }
  }

  const fixScrollbar = () => {
    // for queues, do not do this more than once
    if (states.previousBodyPadding !== null) {
      return;
    } // if the body has overflow

    if (document.body.scrollHeight > window.innerHeight) {
      // add padding so the content doesn't shift after removal of scrollbar
      states.previousBodyPadding = parseInt(
        window.getComputedStyle(document.body).getPropertyValue('padding-right')
      );
      document.body.style.paddingRight = ''.concat(
        states.previousBodyPadding + measureScrollbar(),
        'px'
      );
    }
  };
  const undoScrollbar = () => {
    if (states.previousBodyPadding !== null) {
      document.body.style.paddingRight = ''.concat(states.previousBodyPadding, 'px');
      states.previousBodyPadding = null;
    }
  };

  /* istanbul ignore file */

  const iOSfix = () => {
    const iOS = // @ts-ignore
      (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) ||
      (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);

    if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
      const offset = document.body.scrollTop;
      document.body.style.top = ''.concat(offset * -1, 'px');
      addClass(document.body, swalClasses.iosfix);
      lockBodyScroll();
      addBottomPaddingForTallPopups();
    }
  };
  /**
   * https://github.com/sweetalert2/sweetalert2/issues/1948
   */

  const addBottomPaddingForTallPopups = () => {
    const ua = navigator.userAgent;
    const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
    const webkit = !!ua.match(/WebKit/i);
    const iOSSafari = iOS && webkit && !ua.match(/CriOS/i);

    if (iOSSafari) {
      const bottomPanelHeight = 44;

      if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {
        getContainer().style.paddingBottom = ''.concat(bottomPanelHeight, 'px');
      }
    }
  };
  /**
   * https://github.com/sweetalert2/sweetalert2/issues/1246
   */

  const lockBodyScroll = () => {
    const container = getContainer();
    let preventTouchMove;

    container.ontouchstart = (e) => {
      preventTouchMove = shouldPreventTouchMove(e);
    };

    container.ontouchmove = (e) => {
      if (preventTouchMove) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
  };

  const shouldPreventTouchMove = (event) => {
    const target = event.target;
    const container = getContainer();

    if (isStylus(event) || isZoom(event)) {
      return false;
    }

    if (target === container) {
      return true;
    }

    if (
      !isScrollable(container) &&
      target.tagName !== 'INPUT' && // #1603
      target.tagName !== 'TEXTAREA' && // #2266
      !(
        isScrollable(getHtmlContainer()) && // #1944
        getHtmlContainer().contains(target)
      )
    ) {
      return true;
    }

    return false;
  };
  /**
   * https://github.com/sweetalert2/sweetalert2/issues/1786
   *
   * @param {*} event
   * @returns {boolean}
   */

  const isStylus = (event) => {
    return event.touches && event.touches.length && event.touches[0].touchType === 'stylus';
  };
  /**
   * https://github.com/sweetalert2/sweetalert2/issues/1891
   *
   * @param {TouchEvent} event
   * @returns {boolean}
   */

  const isZoom = (event) => {
    return event.touches && event.touches.length > 1;
  };

  const undoIOSfix = () => {
    if (hasClass(document.body, swalClasses.iosfix)) {
      const offset = parseInt(document.body.style.top, 10);
      removeClass(document.body, swalClasses.iosfix);
      document.body.style.top = '';
      document.body.scrollTop = offset * -1;
    }
  };

  const SHOW_CLASS_TIMEOUT = 10;
  /**
   * Open popup, add necessary classes and styles, fix scrollbar
   *
   * @param params
   */

  const openPopup = (params) => {
    const container = getContainer();
    const popup = getPopup();

    if (typeof params.willOpen === 'function') {
      params.willOpen(popup);
    }

    const bodyStyles = window.getComputedStyle(document.body);
    const initialBodyOverflow = bodyStyles.overflowY;
    addClasses$1(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'

    setTimeout(() => {
      setScrollingVisibility(container, popup);
    }, SHOW_CLASS_TIMEOUT);

    if (isModal()) {
      fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);
      setAriaHidden();
    }

    if (!isToast() && !globalState.previousActiveElement) {
      globalState.previousActiveElement = document.activeElement;
    }

    if (typeof params.didOpen === 'function') {
      setTimeout(() => params.didOpen(popup));
    }

    removeClass(container, swalClasses['no-transition']);
  };

  const swalOpenAnimationFinished = (event) => {
    const popup = getPopup();

    if (event.target !== popup) {
      return;
    }

    const container = getContainer();
    popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
    container.style.overflowY = 'auto';
  };

  const setScrollingVisibility = (container, popup) => {
    if (animationEndEvent && hasCssAnimation(popup)) {
      container.style.overflowY = 'hidden';
      popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);
    } else {
      container.style.overflowY = 'auto';
    }
  };

  const fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow) => {
    iOSfix();

    if (scrollbarPadding && initialBodyOverflow !== 'hidden') {
      fixScrollbar();
    } // sweetalert2/issues/1247

    setTimeout(() => {
      container.scrollTop = 0;
    });
  };

  const addClasses$1 = (container, popup, params) => {
    addClass(container, params.showClass.backdrop); // this workaround with opacity is needed for https://github.com/sweetalert2/sweetalert2/issues/2059

    popup.style.setProperty('opacity', '0', 'important');
    show(popup, 'grid');
    setTimeout(() => {
      // Animate popup right after showing it
      addClass(popup, params.showClass.popup); // and remove the opacity workaround

      popup.style.removeProperty('opacity');
    }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062

    addClass([document.documentElement, document.body], swalClasses.shown);

    if (params.heightAuto && params.backdrop && !params.toast) {
      addClass([document.documentElement, document.body], swalClasses['height-auto']);
    }
  };

  /**
   * Shows loader (spinner), this is useful with AJAX requests.
   * By default the loader be shown instead of the "Confirm" button.
   */

  const showLoading = (buttonToReplace) => {
    let popup = getPopup();

    if (!popup) {
      new Swal(); // eslint-disable-line no-new
    }

    popup = getPopup();
    const loader = getLoader();

    if (isToast()) {
      hide(getIcon());
    } else {
      replaceButton(popup, buttonToReplace);
    }

    show(loader);
    popup.setAttribute('data-loading', true);
    popup.setAttribute('aria-busy', true);
    popup.focus();
  };

  const replaceButton = (popup, buttonToReplace) => {
    const actions = getActions();
    const loader = getLoader();

    if (!buttonToReplace && isVisible(getConfirmButton())) {
      buttonToReplace = getConfirmButton();
    }

    show(actions);

    if (buttonToReplace) {
      hide(buttonToReplace);
      loader.setAttribute('data-button-to-replace', buttonToReplace.className);
    }

    loader.parentNode.insertBefore(loader, buttonToReplace);
    addClass([popup, actions], swalClasses.loading);
  };

  const handleInputOptionsAndValue = (instance, params) => {
    if (params.input === 'select' || params.input === 'radio') {
      handleInputOptions(instance, params);
    } else if (
      ['text', 'email', 'number', 'tel', 'textarea'].includes(params.input) &&
      (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))
    ) {
      showLoading(getConfirmButton());
      handleInputValue(instance, params);
    }
  };
  const getInputValue = (instance, innerParams) => {
    const input = instance.getInput();

    if (!input) {
      return null;
    }

    switch (innerParams.input) {
      case 'checkbox':
        return getCheckboxValue(input);

      case 'radio':
        return getRadioValue(input);

      case 'file':
        return getFileValue(input);

      default:
        return innerParams.inputAutoTrim ? input.value.trim() : input.value;
    }
  };

  const getCheckboxValue = (input) => (input.checked ? 1 : 0);

  const getRadioValue = (input) => (input.checked ? input.value : null);

  const getFileValue = (input) =>
    input.files.length
      ? input.getAttribute('multiple') !== null
        ? input.files
        : input.files[0]
      : null;

  const handleInputOptions = (instance, params) => {
    const popup = getPopup();

    const processInputOptions = (inputOptions) =>
      populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params);

    if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {
      showLoading(getConfirmButton());
      asPromise(params.inputOptions).then((inputOptions) => {
        instance.hideLoading();
        processInputOptions(inputOptions);
      });
    } else if (typeof params.inputOptions === 'object') {
      processInputOptions(params.inputOptions);
    } else {
      error(
        'Unexpected type of inputOptions! Expected object, Map or Promise, got '.concat(
          typeof params.inputOptions
        )
      );
    }
  };

  const handleInputValue = (instance, params) => {
    const input = instance.getInput();
    hide(input);
    asPromise(params.inputValue)
      .then((inputValue) => {
        input.value =
          params.input === 'number' ? parseFloat(inputValue) || 0 : ''.concat(inputValue);
        show(input);
        input.focus();
        instance.hideLoading();
      })
      .catch((err) => {
        error('Error in inputValue promise: '.concat(err));
        input.value = '';
        show(input);
        input.focus();
        instance.hideLoading();
      });
  };

  const populateInputOptions = {
    select: (popup, inputOptions, params) => {
      const select = getDirectChildByClass(popup, swalClasses.select);

      const renderOption = (parent, optionLabel, optionValue) => {
        const option = document.createElement('option');
        option.value = optionValue;
        setInnerHtml(option, optionLabel);
        option.selected = isSelected(optionValue, params.inputValue);
        parent.appendChild(option);
      };

      inputOptions.forEach((inputOption) => {
        const optionValue = inputOption[0];
        const optionLabel = inputOption[1]; // <optgroup> spec:
        // https://www.w3.org/TR/html401/interact/forms.html#h-17.6
        // "...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)..."
        // check whether this is a <optgroup>

        if (Array.isArray(optionLabel)) {
          // if it is an array, then it is an <optgroup>
          const optgroup = document.createElement('optgroup');
          optgroup.label = optionValue;
          optgroup.disabled = false; // not configurable for now

          select.appendChild(optgroup);
          optionLabel.forEach((o) => renderOption(optgroup, o[1], o[0]));
        } else {
          // case of <option>
          renderOption(select, optionLabel, optionValue);
        }
      });
      select.focus();
    },
    radio: (popup, inputOptions, params) => {
      const radio = getDirectChildByClass(popup, swalClasses.radio);
      inputOptions.forEach((inputOption) => {
        const radioValue = inputOption[0];
        const radioLabel = inputOption[1];
        const radioInput = document.createElement('input');
        const radioLabelElement = document.createElement('label');
        radioInput.type = 'radio';
        radioInput.name = swalClasses.radio;
        radioInput.value = radioValue;

        if (isSelected(radioValue, params.inputValue)) {
          radioInput.checked = true;
        }

        const label = document.createElement('span');
        setInnerHtml(label, radioLabel);
        label.className = swalClasses.label;
        radioLabelElement.appendChild(radioInput);
        radioLabelElement.appendChild(label);
        radio.appendChild(radioLabelElement);
      });
      const radios = radio.querySelectorAll('input');

      if (radios.length) {
        radios[0].focus();
      }
    },
  };
  /**
   * Converts `inputOptions` into an array of `[value, label]`s
   * @param inputOptions
   */

  const formatInputOptions = (inputOptions) => {
    const result = [];

    if (typeof Map !== 'undefined' && inputOptions instanceof Map) {
      inputOptions.forEach((value, key) => {
        let valueFormatted = value;

        if (typeof valueFormatted === 'object') {
          // case of <optgroup>
          valueFormatted = formatInputOptions(valueFormatted);
        }

        result.push([key, valueFormatted]);
      });
    } else {
      Object.keys(inputOptions).forEach((key) => {
        let valueFormatted = inputOptions[key];

        if (typeof valueFormatted === 'object') {
          // case of <optgroup>
          valueFormatted = formatInputOptions(valueFormatted);
        }

        result.push([key, valueFormatted]);
      });
    }

    return result;
  };

  const isSelected = (optionValue, inputValue) => {
    return inputValue && inputValue.toString() === optionValue.toString();
  };

  /**
   * Hides loader and shows back the button which was hidden by .showLoading()
   */

  function hideLoading() {
    // do nothing if popup is closed
    const innerParams = privateProps.innerParams.get(this);

    if (!innerParams) {
      return;
    }

    const domCache = privateProps.domCache.get(this);
    hide(domCache.loader);

    if (isToast()) {
      if (innerParams.icon) {
        show(getIcon());
      }
    } else {
      showRelatedButton(domCache);
    }

    removeClass([domCache.popup, domCache.actions], swalClasses.loading);
    domCache.popup.removeAttribute('aria-busy');
    domCache.popup.removeAttribute('data-loading');
    domCache.confirmButton.disabled = false;
    domCache.denyButton.disabled = false;
    domCache.cancelButton.disabled = false;
  }

  const showRelatedButton = (domCache) => {
    const buttonToReplace = domCache.popup.getElementsByClassName(
      domCache.loader.getAttribute('data-button-to-replace')
    );

    if (buttonToReplace.length) {
      show(buttonToReplace[0], 'inline-block');
    } else if (allButtonsAreHidden()) {
      hide(domCache.actions);
    }
  };

  /**
   * Gets the input DOM node, this method works with input parameter.
   * @returns {HTMLElement | null}
   */

  function getInput$1(instance) {
    const innerParams = privateProps.innerParams.get(instance || this);
    const domCache = privateProps.domCache.get(instance || this);

    if (!domCache) {
      return null;
    }

    return getInput(domCache.popup, innerParams.input);
  }

  /**
   * This module contains `WeakMap`s for each effectively-"private  property" that a `Swal` has.
   * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
   * This is the approach that Babel will probably take to implement private methods/fields
   *   https://github.com/tc39/proposal-private-methods
   *   https://github.com/babel/babel/pull/7555
   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
   *   then we can use that language feature.
   */
  var privateMethods = {
    swalPromiseResolve: new WeakMap(),
    swalPromiseReject: new WeakMap(),
  };

  /*
   * Instance method to close sweetAlert
   */

  function removePopupAndResetState(instance, container, returnFocus, didClose) {
    if (isToast()) {
      triggerDidCloseAndDispose(instance, didClose);
    } else {
      restoreActiveElement(returnFocus).then(() => triggerDidCloseAndDispose(instance, didClose));
      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture,
      });
      globalState.keydownHandlerAdded = false;
    }

    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // workaround for #2088
    // for some reason removing the container in Safari will scroll the document to bottom

    if (isSafari) {
      container.setAttribute('style', 'display:none !important');
      container.removeAttribute('class');
      container.innerHTML = '';
    } else {
      container.remove();
    }

    if (isModal()) {
      undoScrollbar();
      undoIOSfix();
      unsetAriaHidden();
    }

    removeBodyClasses();
  }

  function removeBodyClasses() {
    removeClass(
      [document.documentElement, document.body],
      [
        swalClasses.shown,
        swalClasses['height-auto'],
        swalClasses['no-backdrop'],
        swalClasses['toast-shown'],
      ]
    );
  }

  function close(resolveValue) {
    resolveValue = prepareResolveValue(resolveValue);
    const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
    const didClose = triggerClosePopup(this);

    if (this.isAwaitingPromise()) {
      // A swal awaiting for a promise (after a click on Confirm or Deny) cannot be dismissed anymore #2335
      if (!resolveValue.isDismissed) {
        handleAwaitingPromise(this);
        swalPromiseResolve(resolveValue);
      }
    } else if (didClose) {
      // Resolve Swal promise
      swalPromiseResolve(resolveValue);
    }
  }
  function isAwaitingPromise() {
    return !!privateProps.awaitingPromise.get(this);
  }

  const triggerClosePopup = (instance) => {
    const popup = getPopup();

    if (!popup) {
      return false;
    }

    const innerParams = privateProps.innerParams.get(instance);

    if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {
      return false;
    }

    removeClass(popup, innerParams.showClass.popup);
    addClass(popup, innerParams.hideClass.popup);
    const backdrop = getContainer();
    removeClass(backdrop, innerParams.showClass.backdrop);
    addClass(backdrop, innerParams.hideClass.backdrop);
    handlePopupAnimation(instance, popup, innerParams);
    return true;
  };

  function rejectPromise(error) {
    const rejectPromise = privateMethods.swalPromiseReject.get(this);
    handleAwaitingPromise(this);

    if (rejectPromise) {
      // Reject Swal promise
      rejectPromise(error);
    }
  }
  const handleAwaitingPromise = (instance) => {
    if (instance.isAwaitingPromise()) {
      privateProps.awaitingPromise.delete(instance); // The instance might have been previously partly destroyed, we must resume the destroy process in this case #2335

      if (!privateProps.innerParams.get(instance)) {
        instance._destroy();
      }
    }
  };

  const prepareResolveValue = (resolveValue) => {
    // When user calls Swal.close()
    if (typeof resolveValue === 'undefined') {
      return {
        isConfirmed: false,
        isDenied: false,
        isDismissed: true,
      };
    }

    return Object.assign(
      {
        isConfirmed: false,
        isDenied: false,
        isDismissed: false,
      },
      resolveValue
    );
  };

  const handlePopupAnimation = (instance, popup, innerParams) => {
    const container = getContainer(); // If animation is supported, animate

    const animationIsSupported = animationEndEvent && hasCssAnimation(popup);

    if (typeof innerParams.willClose === 'function') {
      innerParams.willClose(popup);
    }

    if (animationIsSupported) {
      animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);
    } else {
      // Otherwise, remove immediately
      removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);
    }
  };

  const animatePopup = (instance, popup, container, returnFocus, didClose) => {
    globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(
      null,
      instance,
      container,
      returnFocus,
      didClose
    );
    popup.addEventListener(animationEndEvent, function (e) {
      if (e.target === popup) {
        globalState.swalCloseEventFinishedCallback();
        delete globalState.swalCloseEventFinishedCallback;
      }
    });
  };

  const triggerDidCloseAndDispose = (instance, didClose) => {
    setTimeout(() => {
      if (typeof didClose === 'function') {
        didClose.bind(instance.params)();
      }

      instance._destroy();
    });
  };

  function setButtonsDisabled(instance, buttons, disabled) {
    const domCache = privateProps.domCache.get(instance);
    buttons.forEach((button) => {
      domCache[button].disabled = disabled;
    });
  }

  function setInputDisabled(input, disabled) {
    if (!input) {
      return false;
    }

    if (input.type === 'radio') {
      const radiosContainer = input.parentNode.parentNode;
      const radios = radiosContainer.querySelectorAll('input');

      for (let i = 0; i < radios.length; i++) {
        radios[i].disabled = disabled;
      }
    } else {
      input.disabled = disabled;
    }
  }

  function enableButtons() {
    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], false);
  }
  function disableButtons() {
    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], true);
  }
  function enableInput() {
    return setInputDisabled(this.getInput(), false);
  }
  function disableInput() {
    return setInputDisabled(this.getInput(), true);
  }

  function showValidationMessage(error) {
    const domCache = privateProps.domCache.get(this);
    const params = privateProps.innerParams.get(this);
    setInnerHtml(domCache.validationMessage, error);
    domCache.validationMessage.className = swalClasses['validation-message'];

    if (params.customClass && params.customClass.validationMessage) {
      addClass(domCache.validationMessage, params.customClass.validationMessage);
    }

    show(domCache.validationMessage);
    const input = this.getInput();

    if (input) {
      input.setAttribute('aria-invalid', true);
      input.setAttribute('aria-describedby', swalClasses['validation-message']);
      focusInput(input);
      addClass(input, swalClasses.inputerror);
    }
  } // Hide block with validation message

  function resetValidationMessage$1() {
    const domCache = privateProps.domCache.get(this);

    if (domCache.validationMessage) {
      hide(domCache.validationMessage);
    }

    const input = this.getInput();

    if (input) {
      input.removeAttribute('aria-invalid');
      input.removeAttribute('aria-describedby');
      removeClass(input, swalClasses.inputerror);
    }
  }

  function getProgressSteps$1() {
    const domCache = privateProps.domCache.get(this);
    return domCache.progressSteps;
  }

  /**
   * Updates popup parameters.
   */

  function update(params) {
    const popup = getPopup();
    const innerParams = privateProps.innerParams.get(this);

    if (!popup || hasClass(popup, innerParams.hideClass.popup)) {
      return warn(
        "You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup."
      );
    }

    const validUpdatableParams = filterValidParams(params);
    const updatedParams = Object.assign({}, innerParams, validUpdatableParams);
    render(this, updatedParams);
    privateProps.innerParams.set(this, updatedParams);
    Object.defineProperties(this, {
      params: {
        value: Object.assign({}, this.params, params),
        writable: false,
        enumerable: true,
      },
    });
  }

  const filterValidParams = (params) => {
    const validUpdatableParams = {};
    Object.keys(params).forEach((param) => {
      if (isUpdatableParameter(param)) {
        validUpdatableParams[param] = params[param];
      } else {
        warn(
          'Invalid parameter to update: "'.concat(
            param,
            '". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\n\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md'
          )
        );
      }
    });
    return validUpdatableParams;
  };

  function _destroy() {
    const domCache = privateProps.domCache.get(this);
    const innerParams = privateProps.innerParams.get(this);

    if (!innerParams) {
      disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335

      return; // This instance has already been destroyed
    } // Check if there is another Swal closing

    if (domCache.popup && globalState.swalCloseEventFinishedCallback) {
      globalState.swalCloseEventFinishedCallback();
      delete globalState.swalCloseEventFinishedCallback;
    } // Check if there is a swal disposal defer timer

    if (globalState.deferDisposalTimer) {
      clearTimeout(globalState.deferDisposalTimer);
      delete globalState.deferDisposalTimer;
    }

    if (typeof innerParams.didDestroy === 'function') {
      innerParams.didDestroy();
    }

    disposeSwal(this);
  }

  const disposeSwal = (instance) => {
    disposeWeakMaps(instance); // Unset this.params so GC will dispose it (#1569)

    delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)

    delete globalState.keydownHandler;
    delete globalState.keydownTarget; // Unset currentInstance

    delete globalState.currentInstance;
  };

  const disposeWeakMaps = (instance) => {
    // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335
    if (instance.isAwaitingPromise()) {
      unsetWeakMaps(privateProps, instance);
      privateProps.awaitingPromise.set(instance, true);
    } else {
      unsetWeakMaps(privateMethods, instance);
      unsetWeakMaps(privateProps, instance);
    }
  };

  const unsetWeakMaps = (obj, instance) => {
    for (const i in obj) {
      obj[i].delete(instance);
    }
  };

  var instanceMethods = /*#__PURE__*/ Object.freeze({
    hideLoading: hideLoading,
    disableLoading: hideLoading,
    getInput: getInput$1,
    close: close,
    isAwaitingPromise: isAwaitingPromise,
    rejectPromise: rejectPromise,
    handleAwaitingPromise: handleAwaitingPromise,
    closePopup: close,
    closeModal: close,
    closeToast: close,
    enableButtons: enableButtons,
    disableButtons: disableButtons,
    enableInput: enableInput,
    disableInput: disableInput,
    showValidationMessage: showValidationMessage,
    resetValidationMessage: resetValidationMessage$1,
    getProgressSteps: getProgressSteps$1,
    update: update,
    _destroy: _destroy,
  });

  const handleConfirmButtonClick = (instance) => {
    const innerParams = privateProps.innerParams.get(instance);
    instance.disableButtons();

    if (innerParams.input) {
      handleConfirmOrDenyWithInput(instance, 'confirm');
    } else {
      confirm(instance, true);
    }
  };
  const handleDenyButtonClick = (instance) => {
    const innerParams = privateProps.innerParams.get(instance);
    instance.disableButtons();

    if (innerParams.returnInputValueOnDeny) {
      handleConfirmOrDenyWithInput(instance, 'deny');
    } else {
      deny(instance, false);
    }
  };
  const handleCancelButtonClick = (instance, dismissWith) => {
    instance.disableButtons();
    dismissWith(DismissReason.cancel);
  };

  const handleConfirmOrDenyWithInput = (
    instance,
    type
    /* 'confirm' | 'deny' */
  ) => {
    const innerParams = privateProps.innerParams.get(instance);

    if (!innerParams.input) {
      return error(
        'The "input" parameter is needed to be set when using returnInputValueOn'.concat(
          capitalizeFirstLetter(type)
        )
      );
    }

    const inputValue = getInputValue(instance, innerParams);

    if (innerParams.inputValidator) {
      handleInputValidator(instance, inputValue, type);
    } else if (!instance.getInput().checkValidity()) {
      instance.enableButtons();
      instance.showValidationMessage(innerParams.validationMessage);
    } else if (type === 'deny') {
      deny(instance, inputValue);
    } else {
      confirm(instance, inputValue);
    }
  };

  const handleInputValidator = (
    instance,
    inputValue,
    type
    /* 'confirm' | 'deny' */
  ) => {
    const innerParams = privateProps.innerParams.get(instance);
    instance.disableInput();
    const validationPromise = Promise.resolve().then(() =>
      asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage))
    );
    validationPromise.then((validationMessage) => {
      instance.enableButtons();
      instance.enableInput();

      if (validationMessage) {
        instance.showValidationMessage(validationMessage);
      } else if (type === 'deny') {
        deny(instance, inputValue);
      } else {
        confirm(instance, inputValue);
      }
    });
  };

  const deny = (instance, value) => {
    const innerParams = privateProps.innerParams.get(instance || undefined);

    if (innerParams.showLoaderOnDeny) {
      showLoading(getDenyButton());
    }

    if (innerParams.preDeny) {
      privateProps.awaitingPromise.set(instance || undefined, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received

      const preDenyPromise = Promise.resolve().then(() =>
        asPromise(innerParams.preDeny(value, innerParams.validationMessage))
      );
      preDenyPromise
        .then((preDenyValue) => {
          if (preDenyValue === false) {
            instance.hideLoading();
            handleAwaitingPromise(instance);
          } else {
            instance.closePopup({
              isDenied: true,
              value: typeof preDenyValue === 'undefined' ? value : preDenyValue,
            });
          }
        })
        .catch((error$$1) => rejectWith(instance || undefined, error$$1));
    } else {
      instance.closePopup({
        isDenied: true,
        value,
      });
    }
  };

  const succeedWith = (instance, value) => {
    instance.closePopup({
      isConfirmed: true,
      value,
    });
  };

  const rejectWith = (instance, error$$1) => {
    instance.rejectPromise(error$$1);
  };

  const confirm = (instance, value) => {
    const innerParams = privateProps.innerParams.get(instance || undefined);

    if (innerParams.showLoaderOnConfirm) {
      showLoading();
    }

    if (innerParams.preConfirm) {
      instance.resetValidationMessage();
      privateProps.awaitingPromise.set(instance || undefined, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received

      const preConfirmPromise = Promise.resolve().then(() =>
        asPromise(innerParams.preConfirm(value, innerParams.validationMessage))
      );
      preConfirmPromise
        .then((preConfirmValue) => {
          if (isVisible(getValidationMessage()) || preConfirmValue === false) {
            instance.hideLoading();
            handleAwaitingPromise(instance);
          } else {
            succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);
          }
        })
        .catch((error$$1) => rejectWith(instance || undefined, error$$1));
    } else {
      succeedWith(instance, value);
    }
  };

  const handlePopupClick = (instance, domCache, dismissWith) => {
    const innerParams = privateProps.innerParams.get(instance);

    if (innerParams.toast) {
      handleToastClick(instance, domCache, dismissWith);
    } else {
      // Ignore click events that had mousedown on the popup but mouseup on the container
      // This can happen when the user drags a slider
      handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup

      handleContainerMousedown(domCache);
      handleModalClick(instance, domCache, dismissWith);
    }
  };

  const handleToastClick = (instance, domCache, dismissWith) => {
    // Closing toast by internal click
    domCache.popup.onclick = () => {
      const innerParams = privateProps.innerParams.get(instance);

      if (
        innerParams &&
        (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)
      ) {
        return;
      }

      dismissWith(DismissReason.close);
    };
  };
  /**
   * @param {*} innerParams
   * @returns {boolean}
   */

  const isAnyButtonShown = (innerParams) => {
    return (
      innerParams.showConfirmButton ||
      innerParams.showDenyButton ||
      innerParams.showCancelButton ||
      innerParams.showCloseButton
    );
  };

  let ignoreOutsideClick = false;

  const handleModalMousedown = (domCache) => {
    domCache.popup.onmousedown = () => {
      domCache.container.onmouseup = function (e) {
        domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't
        // have any other direct children aside of the popup

        if (e.target === domCache.container) {
          ignoreOutsideClick = true;
        }
      };
    };
  };

  const handleContainerMousedown = (domCache) => {
    domCache.container.onmousedown = () => {
      domCache.popup.onmouseup = function (e) {
        domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup

        if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
          ignoreOutsideClick = true;
        }
      };
    };
  };

  const handleModalClick = (instance, domCache, dismissWith) => {
    domCache.container.onclick = (e) => {
      const innerParams = privateProps.innerParams.get(instance);

      if (ignoreOutsideClick) {
        ignoreOutsideClick = false;
        return;
      }

      if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
        dismissWith(DismissReason.backdrop);
      }
    };
  };

  /*
   * Global function to determine if SweetAlert2 popup is shown
   */

  const isVisible$1 = () => {
    return isVisible(getPopup());
  };
  /*
   * Global function to click 'Confirm' button
   */

  const clickConfirm = () => getConfirmButton() && getConfirmButton().click();
  /*
   * Global function to click 'Deny' button
   */

  const clickDeny = () => getDenyButton() && getDenyButton().click();
  /*
   * Global function to click 'Cancel' button
   */

  const clickCancel = () => getCancelButton() && getCancelButton().click();

  const addKeydownHandler = (instance, globalState, innerParams, dismissWith) => {
    if (globalState.keydownTarget && globalState.keydownHandlerAdded) {
      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture,
      });
      globalState.keydownHandlerAdded = false;
    }

    if (!innerParams.toast) {
      globalState.keydownHandler = (e) => keydownHandler(instance, e, dismissWith);

      globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
      globalState.keydownListenerCapture = innerParams.keydownListenerCapture;
      globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture,
      });
      globalState.keydownHandlerAdded = true;
    }
  }; // Focus handling

  const setFocus = (innerParams, index, increment) => {
    const focusableElements = getFocusableElements(); // search for visible elements and select the next possible match

    if (focusableElements.length) {
      index = index + increment; // rollover to first item

      if (index === focusableElements.length) {
        index = 0; // go to last item
      } else if (index === -1) {
        index = focusableElements.length - 1;
      }

      return focusableElements[index].focus();
    } // no visible focusable elements, focus the popup

    getPopup().focus();
  };
  const arrowKeysNextButton = ['ArrowRight', 'ArrowDown'];
  const arrowKeysPreviousButton = ['ArrowLeft', 'ArrowUp'];

  const keydownHandler = (instance, e, dismissWith) => {
    const innerParams = privateProps.innerParams.get(instance);

    if (!innerParams) {
      return; // This instance has already been destroyed
    } // Ignore keydown during IME composition
    // https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event#ignoring_keydown_during_ime_composition
    // https://github.com/sweetalert2/sweetalert2/issues/720
    // https://github.com/sweetalert2/sweetalert2/issues/2406

    if (e.isComposing || e.keyCode === 229) {
      return;
    }

    if (innerParams.stopKeydownPropagation) {
      e.stopPropagation();
    } // ENTER

    if (e.key === 'Enter') {
      handleEnter(instance, e, innerParams);
    } // TAB
    else if (e.key === 'Tab') {
      handleTab(e, innerParams);
    } // ARROWS - switch focus between buttons
    else if ([...arrowKeysNextButton, ...arrowKeysPreviousButton].includes(e.key)) {
      handleArrows(e.key);
    } // ESC
    else if (e.key === 'Escape') {
      handleEsc(e, innerParams, dismissWith);
    }
  };

  const handleEnter = (instance, e, innerParams) => {
    // https://github.com/sweetalert2/sweetalert2/issues/2386
    if (!callIfFunction(innerParams.allowEnterKey)) {
      return;
    }

    if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {
      if (['textarea', 'file'].includes(innerParams.input)) {
        return; // do not submit
      }

      clickConfirm();
      e.preventDefault();
    }
  };

  const handleTab = (e, innerParams) => {
    const targetElement = e.target;
    const focusableElements = getFocusableElements();
    let btnIndex = -1;

    for (let i = 0; i < focusableElements.length; i++) {
      if (targetElement === focusableElements[i]) {
        btnIndex = i;
        break;
      }
    } // Cycle to the next button

    if (!e.shiftKey) {
      setFocus(innerParams, btnIndex, 1);
    } // Cycle to the prev button
    else {
      setFocus(innerParams, btnIndex, -1);
    }

    e.stopPropagation();
    e.preventDefault();
  };

  const handleArrows = (key) => {
    const confirmButton = getConfirmButton();
    const denyButton = getDenyButton();
    const cancelButton = getCancelButton();

    if (![confirmButton, denyButton, cancelButton].includes(document.activeElement)) {
      return;
    }

    const sibling = arrowKeysNextButton.includes(key)
      ? 'nextElementSibling'
      : 'previousElementSibling';
    let buttonToFocus = document.activeElement;

    for (let i = 0; i < getActions().children.length; i++) {
      buttonToFocus = buttonToFocus[sibling];

      if (!buttonToFocus) {
        return;
      }

      if (isVisible(buttonToFocus) && buttonToFocus instanceof HTMLButtonElement) {
        break;
      }
    }

    if (buttonToFocus instanceof HTMLButtonElement) {
      buttonToFocus.focus();
    }
  };

  const handleEsc = (e, innerParams, dismissWith) => {
    if (callIfFunction(innerParams.allowEscapeKey)) {
      e.preventDefault();
      dismissWith(DismissReason.esc);
    }
  };

  const isJqueryElement = (elem) => typeof elem === 'object' && elem.jquery;

  const isElement = (elem) => elem instanceof Element || isJqueryElement(elem);

  const argsToParams = (args) => {
    const params = {};

    if (typeof args[0] === 'object' && !isElement(args[0])) {
      Object.assign(params, args[0]);
    } else {
      ['title', 'html', 'icon'].forEach((name, index) => {
        const arg = args[index];

        if (typeof arg === 'string' || isElement(arg)) {
          params[name] = arg;
        } else if (arg !== undefined) {
          error(
            'Unexpected type of '
              .concat(name, '! Expected "string" or "Element", got ')
              .concat(typeof arg)
          );
        }
      });
    }

    return params;
  };

  function fire() {
    const Swal = this; // eslint-disable-line @typescript-eslint/no-this-alias

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new Swal(...args);
  }

  /**
   * Returns an extended version of `Swal` containing `params` as defaults.
   * Useful for reusing Swal configuration.
   *
   * For example:
   *
   * Before:
   * const textPromptOptions = { input: 'text', showCancelButton: true }
   * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })
   * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })
   *
   * After:
   * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })
   * const {value: firstName} = await TextPrompt('What is your first name?')
   * const {value: lastName} = await TextPrompt('What is your last name?')
   *
   * @param mixinParams
   */
  function mixin(mixinParams) {
    class MixinSwal extends this {
      _main(params, priorityMixinParams) {
        return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));
      }
    }

    return MixinSwal;
  }

  /**
   * If `timer` parameter is set, returns number of milliseconds of timer remained.
   * Otherwise, returns undefined.
   */

  const getTimerLeft = () => {
    return globalState.timeout && globalState.timeout.getTimerLeft();
  };
  /**
   * Stop timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  const stopTimer = () => {
    if (globalState.timeout) {
      stopTimerProgressBar();
      return globalState.timeout.stop();
    }
  };
  /**
   * Resume timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  const resumeTimer = () => {
    if (globalState.timeout) {
      const remaining = globalState.timeout.start();
      animateTimerProgressBar(remaining);
      return remaining;
    }
  };
  /**
   * Resume timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  const toggleTimer = () => {
    const timer = globalState.timeout;
    return timer && (timer.running ? stopTimer() : resumeTimer());
  };
  /**
   * Increase timer. Returns number of milliseconds of an updated timer.
   * If `timer` parameter isn't set, returns undefined.
   */

  const increaseTimer = (n) => {
    if (globalState.timeout) {
      const remaining = globalState.timeout.increase(n);
      animateTimerProgressBar(remaining, true);
      return remaining;
    }
  };
  /**
   * Check if timer is running. Returns true if timer is running
   * or false if timer is paused or stopped.
   * If `timer` parameter isn't set, returns undefined
   */

  const isTimerRunning = () => {
    return globalState.timeout && globalState.timeout.isRunning();
  };

  let bodyClickListenerAdded = false;
  const clickHandlers = {};
  function bindClickHandler() {
    let attr =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data-swal-template';
    clickHandlers[attr] = this;

    if (!bodyClickListenerAdded) {
      document.body.addEventListener('click', bodyClickListener);
      bodyClickListenerAdded = true;
    }
  }

  const bodyClickListener = (event) => {
    for (let el = event.target; el && el !== document; el = el.parentNode) {
      for (const attr in clickHandlers) {
        const template = el.getAttribute(attr);

        if (template) {
          clickHandlers[attr].fire({
            template,
          });
          return;
        }
      }
    }
  };

  var staticMethods = /*#__PURE__*/ Object.freeze({
    isValidParameter: isValidParameter,
    isUpdatableParameter: isUpdatableParameter,
    isDeprecatedParameter: isDeprecatedParameter,
    argsToParams: argsToParams,
    isVisible: isVisible$1,
    clickConfirm: clickConfirm,
    clickDeny: clickDeny,
    clickCancel: clickCancel,
    getContainer: getContainer,
    getPopup: getPopup,
    getTitle: getTitle,
    getHtmlContainer: getHtmlContainer,
    getImage: getImage,
    getIcon: getIcon,
    getInputLabel: getInputLabel,
    getCloseButton: getCloseButton,
    getActions: getActions,
    getConfirmButton: getConfirmButton,
    getDenyButton: getDenyButton,
    getCancelButton: getCancelButton,
    getLoader: getLoader,
    getFooter: getFooter,
    getTimerProgressBar: getTimerProgressBar,
    getFocusableElements: getFocusableElements,
    getValidationMessage: getValidationMessage,
    isLoading: isLoading,
    fire: fire,
    mixin: mixin,
    showLoading: showLoading,
    enableLoading: showLoading,
    getTimerLeft: getTimerLeft,
    stopTimer: stopTimer,
    resumeTimer: resumeTimer,
    toggleTimer: toggleTimer,
    increaseTimer: increaseTimer,
    isTimerRunning: isTimerRunning,
    bindClickHandler: bindClickHandler,
  });

  let currentInstance;

  class SweetAlert {
    constructor() {
      // Prevent run in Node env
      if (typeof window === 'undefined') {
        return;
      }

      currentInstance = this; // @ts-ignore

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      const outerParams = Object.freeze(this.constructor.argsToParams(args));
      Object.defineProperties(this, {
        params: {
          value: outerParams,
          writable: false,
          enumerable: true,
          configurable: true,
        },
      }); // @ts-ignore

      const promise = this._main(this.params);

      privateProps.promise.set(this, promise);
    }

    _main(userParams) {
      let mixinParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      showWarningsForParams(Object.assign({}, mixinParams, userParams));

      if (globalState.currentInstance) {
        globalState.currentInstance._destroy();

        if (isModal()) {
          unsetAriaHidden();
        }
      }

      globalState.currentInstance = this;
      const innerParams = prepareParams(userParams, mixinParams);
      setParameters(innerParams);
      Object.freeze(innerParams); // clear the previous timer

      if (globalState.timeout) {
        globalState.timeout.stop();
        delete globalState.timeout;
      } // clear the restore focus timeout

      clearTimeout(globalState.restoreFocusTimeout);
      const domCache = populateDomCache(this);
      render(this, innerParams);
      privateProps.innerParams.set(this, innerParams);
      return swalPromise(this, domCache, innerParams);
    } // `catch` cannot be the name of a module export, so we define our thenable methods here instead

    then(onFulfilled) {
      const promise = privateProps.promise.get(this);
      return promise.then(onFulfilled);
    }

    finally(onFinally) {
      const promise = privateProps.promise.get(this);
      return promise.finally(onFinally);
    }
  }

  const swalPromise = (instance, domCache, innerParams) => {
    return new Promise((resolve, reject) => {
      // functions to handle all closings/dismissals
      const dismissWith = (dismiss) => {
        instance.closePopup({
          isDismissed: true,
          dismiss,
        });
      };

      privateMethods.swalPromiseResolve.set(instance, resolve);
      privateMethods.swalPromiseReject.set(instance, reject);

      domCache.confirmButton.onclick = () => handleConfirmButtonClick(instance);

      domCache.denyButton.onclick = () => handleDenyButtonClick(instance);

      domCache.cancelButton.onclick = () => handleCancelButtonClick(instance, dismissWith);

      domCache.closeButton.onclick = () => dismissWith(DismissReason.close);

      handlePopupClick(instance, domCache, dismissWith);
      addKeydownHandler(instance, globalState, innerParams, dismissWith);
      handleInputOptionsAndValue(instance, innerParams);
      openPopup(innerParams);
      setupTimer(globalState, innerParams, dismissWith);
      initFocus(domCache, innerParams); // Scroll container to top on open (#1247, #1946)

      setTimeout(() => {
        domCache.container.scrollTop = 0;
      });
    });
  };

  const prepareParams = (userParams, mixinParams) => {
    const templateParams = getTemplateParams(userParams);
    const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams); // precedence is described in #2131

    params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);
    params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);
    return params;
  };

  const populateDomCache = (instance) => {
    const domCache = {
      popup: getPopup(),
      container: getContainer(),
      actions: getActions(),
      confirmButton: getConfirmButton(),
      denyButton: getDenyButton(),
      cancelButton: getCancelButton(),
      loader: getLoader(),
      closeButton: getCloseButton(),
      validationMessage: getValidationMessage(),
      progressSteps: getProgressSteps(),
    };
    privateProps.domCache.set(instance, domCache);
    return domCache;
  };

  const setupTimer = (globalState$$1, innerParams, dismissWith) => {
    const timerProgressBar = getTimerProgressBar();
    hide(timerProgressBar);

    if (innerParams.timer) {
      globalState$$1.timeout = new Timer(() => {
        dismissWith('timer');
        delete globalState$$1.timeout;
      }, innerParams.timer);

      if (innerParams.timerProgressBar) {
        show(timerProgressBar);
        applyCustomClass(timerProgressBar, innerParams, 'timerProgressBar');
        setTimeout(() => {
          if (globalState$$1.timeout && globalState$$1.timeout.running) {
            // timer can be already stopped or unset at this point
            animateTimerProgressBar(innerParams.timer);
          }
        });
      }
    }
  };

  const initFocus = (domCache, innerParams) => {
    if (innerParams.toast) {
      return;
    }

    if (!callIfFunction(innerParams.allowEnterKey)) {
      return blurActiveElement();
    }

    if (!focusButton(domCache, innerParams)) {
      setFocus(innerParams, -1, 1);
    }
  };

  const focusButton = (domCache, innerParams) => {
    if (innerParams.focusDeny && isVisible(domCache.denyButton)) {
      domCache.denyButton.focus();
      return true;
    }

    if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {
      domCache.cancelButton.focus();
      return true;
    }

    if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {
      domCache.confirmButton.focus();
      return true;
    }

    return false;
  };

  const blurActiveElement = () => {
    if (
      document.activeElement instanceof HTMLElement &&
      typeof document.activeElement.blur === 'function'
    ) {
      document.activeElement.blur();
    }
  }; // Assign instance methods from src/instanceMethods/*.js to prototype

  Object.assign(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor

  Object.assign(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility

  Object.keys(instanceMethods).forEach((key) => {
    SweetAlert[key] = function () {
      if (currentInstance) {
        return currentInstance[key](...arguments);
      }
    };
  });
  SweetAlert.DismissReason = DismissReason;
  SweetAlert.version = '11.4.4';

  const Swal = SweetAlert; // @ts-ignore

  Swal.default = Swal;

  return Swal;
});
if (typeof this !== 'undefined' && this.Sweetalert2) {
  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2;
}

'undefined' != typeof document &&
  (function (e, t) {
    var n = e.createElement('style');
    if ((e.getElementsByTagName('head')[0].appendChild(n), n.styleSheet))
      n.styleSheet.disabled || (n.styleSheet.cssText = t);
    else
      try {
        n.innerHTML = t;
      } catch (e) {
        n.innerText = t;
      }
  })(
    document,
    '.swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4!important;grid-row:1/4!important;grid-template-columns:1fr 99fr 1fr;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-popup.swal2-toast>*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:700}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:grid;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(-webkit-min-content,auto) minmax(-webkit-min-content,auto) minmax(-webkit-min-content,auto);grid-template-rows:minmax(min-content,auto) minmax(min-content,auto) minmax(min-content,auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-bottom-start,.swal2-container.swal2-center-start,.swal2-container.swal2-top-start{grid-template-columns:minmax(0,1fr) auto auto}.swal2-container.swal2-bottom,.swal2-container.swal2-center,.swal2-container.swal2-top{grid-template-columns:auto minmax(0,1fr) auto}.swal2-container.swal2-bottom-end,.swal2-container.swal2-center-end,.swal2-container.swal2-top-end{grid-template-columns:auto auto minmax(0,1fr)}.swal2-container.swal2-top-start>.swal2-popup{align-self:start}.swal2-container.swal2-top>.swal2-popup{grid-column:2;align-self:start;justify-self:center}.swal2-container.swal2-top-end>.swal2-popup,.swal2-container.swal2-top-right>.swal2-popup{grid-column:3;align-self:start;justify-self:end}.swal2-container.swal2-center-left>.swal2-popup,.swal2-container.swal2-center-start>.swal2-popup{grid-row:2;align-self:center}.swal2-container.swal2-center>.swal2-popup{grid-column:2;grid-row:2;align-self:center;justify-self:center}.swal2-container.swal2-center-end>.swal2-popup,.swal2-container.swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;align-self:center;justify-self:end}.swal2-container.swal2-bottom-left>.swal2-popup,.swal2-container.swal2-bottom-start>.swal2-popup{grid-column:1;grid-row:3;align-self:end}.swal2-container.swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;justify-self:center;align-self:end}.swal2-container.swal2-bottom-end>.swal2-popup,.swal2-container.swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;align-self:end;justify-self:end}.swal2-container.swal2-grow-fullscreen>.swal2-popup,.swal2-container.swal2-grow-row>.swal2-popup{grid-column:1/4;width:100%}.swal2-container.swal2-grow-column>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}.swal2-container.swal2-no-transition{transition:none!important}.swal2-popup{display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0,100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-title{position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 transparent #2778c4 transparent}.swal2-styled{margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px transparent;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}.swal2-styled.swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}.swal2-styled.swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}.swal2-styled.swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}.swal2-styled.swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled:focus{outline:0}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto!important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:2em auto 1em}.swal2-close{z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:0 0;color:#ccc;font-family:serif;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-close:focus{outline:0;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em 2em 3px}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px transparent;color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em 2em 3px;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-file{width:75%;margin-right:auto;margin-left:auto;background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{flex-shrink:0;margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto 0}.swal2-validation-message{align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:.25em solid transparent;border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-warning.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-i-mark .5s;animation:swal2-animate-i-mark .5s}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-info.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-i-mark .8s;animation:swal2-animate-i-mark .8s}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-question.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-question-mark .8s;animation:swal2-animate-question-mark .8s}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@-webkit-keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@-webkit-keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{background-color:transparent!important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:transparent;pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}'
  );

//
// SweetAlert2 Initialization
//

// Set Defaults
swal.mixin({
  width: 400,
  heightAuto: false,
  padding: '2.5rem',
  buttonsStyling: false,
  confirmButtonClass: 'btn btn-success',
  confirmButtonColor: null,
  cancelButtonClass: 'btn btn-secondary',
  cancelButtonColor: null,
});
// #endregion

// #region / Vanilla Lazyload v17.6.1
//  __      __         _ _ _         _                     _                 _
//  \ \    / /        (_) | |       | |                   | |               | |
//   \ \  / /_ _ _ __  _| | | __ _  | |     __ _ _____   _| | ___   __ _  __| |
//    \ \/ / _` | '_ \| | | |/ _` | | |    / _` |_  / | | | |/ _ \ / _` |/ _` |
//     \  / (_| | | | | | | | (_| | | |___| (_| |/ /| |_| | | (_) | (_| | (_| |
//      \/ \__,_|_| |_|_|_|_|\__,_| |______\__,_/___|\__, |_|\___/ \__,_|\__,_|
//                                                    __/ |
//                                                   |___/                      v17.6.1
/*!
 * vanilla-lazyload v17.6.1 (https://www.andreaverlicchi.eu/vanilla-lazyload/)
 * Released under the MIT License (https://github.com/verlok/vanilla-lazyload/blob/master/LICENSE)
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined'
    ? (module.exports = factory())
    : typeof define === 'function' && define.amd
    ? define(factory)
    : ((global = typeof globalThis !== 'undefined' ? globalThis : global || self),
      (global.LazyLoad = factory()));
})(this, function () {
  'use strict';

  function _extends() {
    _extends =
      Object.assign ||
      function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

    return _extends.apply(this, arguments);
  }

  var runningOnBrowser = typeof window !== 'undefined';
  var isBot =
    (runningOnBrowser && !('onscroll' in window)) ||
    (typeof navigator !== 'undefined' && /(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent));
  var supportsIntersectionObserver = runningOnBrowser && 'IntersectionObserver' in window;
  var supportsClassList = runningOnBrowser && 'classList' in document.createElement('p');
  var isHiDpi = runningOnBrowser && window.devicePixelRatio > 1;

  var defaultSettings = {
    elements_selector: '.lazy',
    container: isBot || runningOnBrowser ? document : null,
    threshold: 300,
    thresholds: null,
    data_src: 'src',
    data_srcset: 'srcset',
    data_sizes: 'sizes',
    data_bg: 'bg',
    data_bg_hidpi: 'bg-hidpi',
    data_bg_multi: 'bg-multi',
    data_bg_multi_hidpi: 'bg-multi-hidpi',
    data_poster: 'poster',
    class_applied: 'applied',
    class_loading: 'loading',
    class_loaded: 'loaded',
    class_error: 'error',
    class_entered: 'entered',
    class_exited: 'exited',
    unobserve_completed: true,
    unobserve_entered: false,
    cancel_on_exit: true,
    callback_enter: null,
    callback_exit: null,
    callback_applied: null,
    callback_loading: null,
    callback_loaded: null,
    callback_error: null,
    callback_finish: null,
    callback_cancel: null,
    use_native: false,
  };
  var getExtendedSettings = function getExtendedSettings(customSettings) {
    return _extends({}, defaultSettings, customSettings);
  };

  /* Creates instance and notifies it through the window element */
  var createInstance = function createInstance(classObj, options) {
    var event;
    var eventString = 'LazyLoad::Initialized';
    var instance = new classObj(options);

    try {
      // Works in modern browsers
      event = new CustomEvent(eventString, {
        detail: {
          instance: instance,
        },
      });
    } catch (err) {
      // Works in Internet Explorer (all versions)
      event = document.createEvent('CustomEvent');
      event.initCustomEvent(eventString, false, false, {
        instance: instance,
      });
    }

    window.dispatchEvent(event);
  };
  /* Auto initialization of one or more instances of lazyload, depending on the 
      options passed in (plain object or an array) */

  var autoInitialize = function autoInitialize(classObj, options) {
    if (!options) {
      return;
    }

    if (!options.length) {
      // Plain object
      createInstance(classObj, options);
    } else {
      // Array of objects
      for (var i = 0, optionsItem; (optionsItem = options[i]); i += 1) {
        createInstance(classObj, optionsItem);
      }
    }
  };

  var SRC = 'src';
  var SRCSET = 'srcset';
  var SIZES = 'sizes';
  var POSTER = 'poster';
  var ORIGINALS = 'llOriginalAttrs';
  var DATA = 'data';

  var statusLoading = 'loading';
  var statusLoaded = 'loaded';
  var statusApplied = 'applied';
  var statusEntered = 'entered';
  var statusError = 'error';
  var statusNative = 'native';

  var dataPrefix = 'data-';
  var statusDataName = 'll-status';
  var getData = function getData(element, attribute) {
    return element.getAttribute(dataPrefix + attribute);
  };
  var setData = function setData(element, attribute, value) {
    var attrName = dataPrefix + attribute;

    if (value === null) {
      element.removeAttribute(attrName);
      return;
    }

    element.setAttribute(attrName, value);
  };
  var getStatus = function getStatus(element) {
    return getData(element, statusDataName);
  };
  var setStatus = function setStatus(element, status) {
    return setData(element, statusDataName, status);
  };
  var resetStatus = function resetStatus(element) {
    return setStatus(element, null);
  };
  var hasEmptyStatus = function hasEmptyStatus(element) {
    return getStatus(element) === null;
  };
  var hasStatusLoading = function hasStatusLoading(element) {
    return getStatus(element) === statusLoading;
  };
  var hasStatusError = function hasStatusError(element) {
    return getStatus(element) === statusError;
  };
  var hasStatusNative = function hasStatusNative(element) {
    return getStatus(element) === statusNative;
  };
  var statusesAfterLoading = [statusLoading, statusLoaded, statusApplied, statusError];
  var hadStartedLoading = function hadStartedLoading(element) {
    return statusesAfterLoading.indexOf(getStatus(element)) >= 0;
  };

  var safeCallback = function safeCallback(callback, arg1, arg2, arg3) {
    if (!callback) {
      return;
    }

    if (arg3 !== undefined) {
      callback(arg1, arg2, arg3);
      return;
    }

    if (arg2 !== undefined) {
      callback(arg1, arg2);
      return;
    }

    callback(arg1);
  };

  var addClass = function addClass(element, className) {
    if (supportsClassList) {
      element.classList.add(className);
      return;
    }

    element.className += (element.className ? ' ' : '') + className;
  };
  var removeClass = function removeClass(element, className) {
    if (supportsClassList) {
      element.classList.remove(className);
      return;
    }

    element.className = element.className
      .replace(new RegExp('(^|\\s+)' + className + '(\\s+|$)'), ' ')
      .replace(/^\s+/, '')
      .replace(/\s+$/, '');
  };

  var addTempImage = function addTempImage(element) {
    element.llTempImage = document.createElement('IMG');
  };
  var deleteTempImage = function deleteTempImage(element) {
    delete element.llTempImage;
  };
  var getTempImage = function getTempImage(element) {
    return element.llTempImage;
  };

  var unobserve = function unobserve(element, instance) {
    if (!instance) return;
    var observer = instance._observer;
    if (!observer) return;
    observer.unobserve(element);
  };
  var resetObserver = function resetObserver(observer) {
    observer.disconnect();
  };
  var unobserveEntered = function unobserveEntered(element, settings, instance) {
    if (settings.unobserve_entered) unobserve(element, instance);
  };

  var updateLoadingCount = function updateLoadingCount(instance, delta) {
    if (!instance) return;
    instance.loadingCount += delta;
  };
  var decreaseToLoadCount = function decreaseToLoadCount(instance) {
    if (!instance) return;
    instance.toLoadCount -= 1;
  };
  var setToLoadCount = function setToLoadCount(instance, value) {
    if (!instance) return;
    instance.toLoadCount = value;
  };
  var isSomethingLoading = function isSomethingLoading(instance) {
    return instance.loadingCount > 0;
  };
  var haveElementsToLoad = function haveElementsToLoad(instance) {
    return instance.toLoadCount > 0;
  };

  var getSourceTags = function getSourceTags(parentTag) {
    var sourceTags = [];

    for (var i = 0, childTag; (childTag = parentTag.children[i]); i += 1) {
      if (childTag.tagName === 'SOURCE') {
        sourceTags.push(childTag);
      }
    }

    return sourceTags;
  };

  var forEachPictureSource = function forEachPictureSource(element, fn) {
    var parent = element.parentNode;

    if (!parent || parent.tagName !== 'PICTURE') {
      return;
    }

    var sourceTags = getSourceTags(parent);
    sourceTags.forEach(fn);
  };
  var forEachVideoSource = function forEachVideoSource(element, fn) {
    var sourceTags = getSourceTags(element);
    sourceTags.forEach(fn);
  };

  var attrsSrc = [SRC];
  var attrsSrcPoster = [SRC, POSTER];
  var attrsSrcSrcsetSizes = [SRC, SRCSET, SIZES];
  var attrsData = [DATA];
  var hasOriginalAttrs = function hasOriginalAttrs(element) {
    return !!element[ORIGINALS];
  };
  var getOriginalAttrs = function getOriginalAttrs(element) {
    return element[ORIGINALS];
  };
  var deleteOriginalAttrs = function deleteOriginalAttrs(element) {
    return delete element[ORIGINALS];
  }; // ## SAVE ##

  var setOriginalsObject = function setOriginalsObject(element, attributes) {
    if (hasOriginalAttrs(element)) {
      return;
    }

    var originals = {};
    attributes.forEach(function (attribute) {
      originals[attribute] = element.getAttribute(attribute);
    });
    element[ORIGINALS] = originals;
  };
  var saveOriginalBackgroundStyle = function saveOriginalBackgroundStyle(element) {
    if (hasOriginalAttrs(element)) {
      return;
    }

    element[ORIGINALS] = {
      backgroundImage: element.style.backgroundImage,
    };
  }; // ## RESTORE ##

  var setOrResetAttribute = function setOrResetAttribute(element, attrName, value) {
    if (!value) {
      element.removeAttribute(attrName);
      return;
    }

    element.setAttribute(attrName, value);
  };

  var restoreOriginalAttrs = function restoreOriginalAttrs(element, attributes) {
    if (!hasOriginalAttrs(element)) {
      return;
    }

    var originals = getOriginalAttrs(element);
    attributes.forEach(function (attribute) {
      setOrResetAttribute(element, attribute, originals[attribute]);
    });
  };
  var restoreOriginalBgImage = function restoreOriginalBgImage(element) {
    if (!hasOriginalAttrs(element)) {
      return;
    }

    var originals = getOriginalAttrs(element);
    element.style.backgroundImage = originals.backgroundImage;
  };

  var manageApplied = function manageApplied(element, settings, instance) {
    addClass(element, settings.class_applied);
    setStatus(element, statusApplied); // Instance is not provided when loading is called from static class

    if (!instance) return;

    if (settings.unobserve_completed) {
      // Unobserve now because we can't do it on load
      unobserve(element, settings);
    }

    safeCallback(settings.callback_applied, element, instance);
  };
  var manageLoading = function manageLoading(element, settings, instance) {
    addClass(element, settings.class_loading);
    setStatus(element, statusLoading); // Instance is not provided when loading is called from static class

    if (!instance) return;
    updateLoadingCount(instance, +1);
    safeCallback(settings.callback_loading, element, instance);
  };
  var setAttributeIfValue = function setAttributeIfValue(element, attrName, value) {
    if (!value) {
      return;
    }

    element.setAttribute(attrName, value);
  };
  var setImageAttributes = function setImageAttributes(element, settings) {
    setAttributeIfValue(element, SIZES, getData(element, settings.data_sizes));
    setAttributeIfValue(element, SRCSET, getData(element, settings.data_srcset));
    setAttributeIfValue(element, SRC, getData(element, settings.data_src));
  };
  var setSourcesImg = function setSourcesImg(imgEl, settings) {
    forEachPictureSource(imgEl, function (sourceTag) {
      setOriginalsObject(sourceTag, attrsSrcSrcsetSizes);
      setImageAttributes(sourceTag, settings);
    });
    setOriginalsObject(imgEl, attrsSrcSrcsetSizes);
    setImageAttributes(imgEl, settings);
  };
  var setSourcesIframe = function setSourcesIframe(iframe, settings) {
    setOriginalsObject(iframe, attrsSrc);
    setAttributeIfValue(iframe, SRC, getData(iframe, settings.data_src));
  };
  var setSourcesVideo = function setSourcesVideo(videoEl, settings) {
    forEachVideoSource(videoEl, function (sourceEl) {
      setOriginalsObject(sourceEl, attrsSrc);
      setAttributeIfValue(sourceEl, SRC, getData(sourceEl, settings.data_src));
    });
    setOriginalsObject(videoEl, attrsSrcPoster);
    setAttributeIfValue(videoEl, POSTER, getData(videoEl, settings.data_poster));
    setAttributeIfValue(videoEl, SRC, getData(videoEl, settings.data_src));
    videoEl.load();
  };
  var setSourcesObject = function setSourcesObject(object, settings) {
    setOriginalsObject(object, attrsData);
    setAttributeIfValue(object, DATA, getData(object, settings.data_src));
  };
  var setBackground = function setBackground(element, settings, instance) {
    var bg1xValue = getData(element, settings.data_bg);
    var bgHiDpiValue = getData(element, settings.data_bg_hidpi);
    var bgDataValue = isHiDpi && bgHiDpiValue ? bgHiDpiValue : bg1xValue;
    if (!bgDataValue) return;
    element.style.backgroundImage = 'url("'.concat(bgDataValue, '")');
    getTempImage(element).setAttribute(SRC, bgDataValue);
    manageLoading(element, settings, instance);
  }; // NOTE: THE TEMP IMAGE TRICK CANNOT BE DONE WITH data-multi-bg
  // BECAUSE INSIDE ITS VALUES MUST BE WRAPPED WITH URL() AND ONE OF THEM
  // COULD BE A GRADIENT BACKGROUND IMAGE

  var setMultiBackground = function setMultiBackground(element, settings, instance) {
    var bg1xValue = getData(element, settings.data_bg_multi);
    var bgHiDpiValue = getData(element, settings.data_bg_multi_hidpi);
    var bgDataValue = isHiDpi && bgHiDpiValue ? bgHiDpiValue : bg1xValue;

    if (!bgDataValue) {
      return;
    }

    element.style.backgroundImage = bgDataValue;
    manageApplied(element, settings, instance);
  };
  var setSourcesFunctions = {
    IMG: setSourcesImg,
    IFRAME: setSourcesIframe,
    VIDEO: setSourcesVideo,
    OBJECT: setSourcesObject,
  };
  var setSourcesNative = function setSourcesNative(element, settings) {
    var setSourcesFunction = setSourcesFunctions[element.tagName];

    if (!setSourcesFunction) {
      return;
    }

    setSourcesFunction(element, settings);
  };
  var setSources = function setSources(element, settings, instance) {
    var setSourcesFunction = setSourcesFunctions[element.tagName];

    if (!setSourcesFunction) {
      return;
    }

    setSourcesFunction(element, settings);
    manageLoading(element, settings, instance);
  };

  var elementsWithLoadEvent = ['IMG', 'IFRAME', 'VIDEO', 'OBJECT'];
  var hasLoadEvent = function hasLoadEvent(element) {
    return elementsWithLoadEvent.indexOf(element.tagName) > -1;
  };
  var checkFinish = function checkFinish(settings, instance) {
    if (instance && !isSomethingLoading(instance) && !haveElementsToLoad(instance)) {
      safeCallback(settings.callback_finish, instance);
    }
  };
  var addEventListener = function addEventListener(element, eventName, handler) {
    element.addEventListener(eventName, handler);
    element.llEvLisnrs[eventName] = handler;
  };
  var removeEventListener = function removeEventListener(element, eventName, handler) {
    element.removeEventListener(eventName, handler);
  };
  var hasEventListeners = function hasEventListeners(element) {
    return !!element.llEvLisnrs;
  };
  var addEventListeners = function addEventListeners(element, loadHandler, errorHandler) {
    if (!hasEventListeners(element)) element.llEvLisnrs = {};
    var loadEventName = element.tagName === 'VIDEO' ? 'loadeddata' : 'load';
    addEventListener(element, loadEventName, loadHandler);
    addEventListener(element, 'error', errorHandler);
  };
  var removeEventListeners = function removeEventListeners(element) {
    if (!hasEventListeners(element)) {
      return;
    }

    var eventListeners = element.llEvLisnrs;

    for (var eventName in eventListeners) {
      var handler = eventListeners[eventName];
      removeEventListener(element, eventName, handler);
    }

    delete element.llEvLisnrs;
  };
  var doneHandler = function doneHandler(element, settings, instance) {
    deleteTempImage(element);
    updateLoadingCount(instance, -1);
    decreaseToLoadCount(instance);
    removeClass(element, settings.class_loading);

    if (settings.unobserve_completed) {
      unobserve(element, instance);
    }
  };
  var loadHandler = function loadHandler(event, element, settings, instance) {
    var goingNative = hasStatusNative(element);
    doneHandler(element, settings, instance);
    addClass(element, settings.class_loaded);
    setStatus(element, statusLoaded);
    safeCallback(settings.callback_loaded, element, instance);
    if (!goingNative) checkFinish(settings, instance);
  };
  var errorHandler = function errorHandler(event, element, settings, instance) {
    var goingNative = hasStatusNative(element);
    doneHandler(element, settings, instance);
    addClass(element, settings.class_error);
    setStatus(element, statusError);
    safeCallback(settings.callback_error, element, instance);
    if (!goingNative) checkFinish(settings, instance);
  };
  var addOneShotEventListeners = function addOneShotEventListeners(element, settings, instance) {
    var elementToListenTo = getTempImage(element) || element;

    if (hasEventListeners(elementToListenTo)) {
      // This happens when loading is retried twice
      return;
    }

    var _loadHandler = function _loadHandler(event) {
      loadHandler(event, element, settings, instance);
      removeEventListeners(elementToListenTo);
    };

    var _errorHandler = function _errorHandler(event) {
      errorHandler(event, element, settings, instance);
      removeEventListeners(elementToListenTo);
    };

    addEventListeners(elementToListenTo, _loadHandler, _errorHandler);
  };

  var loadBackground = function loadBackground(element, settings, instance) {
    addTempImage(element);
    addOneShotEventListeners(element, settings, instance);
    saveOriginalBackgroundStyle(element);
    setBackground(element, settings, instance);
    setMultiBackground(element, settings, instance);
  };

  var loadRegular = function loadRegular(element, settings, instance) {
    addOneShotEventListeners(element, settings, instance);
    setSources(element, settings, instance);
  };

  var load = function load(element, settings, instance) {
    if (hasLoadEvent(element)) {
      loadRegular(element, settings, instance);
    } else {
      loadBackground(element, settings, instance);
    }
  };
  var loadNative = function loadNative(element, settings, instance) {
    element.setAttribute('loading', 'lazy');
    addOneShotEventListeners(element, settings, instance);
    setSourcesNative(element, settings);
    setStatus(element, statusNative);
  };

  var removeImageAttributes = function removeImageAttributes(element) {
    element.removeAttribute(SRC);
    element.removeAttribute(SRCSET);
    element.removeAttribute(SIZES);
  };

  var resetSourcesImg = function resetSourcesImg(element) {
    forEachPictureSource(element, function (sourceTag) {
      removeImageAttributes(sourceTag);
    });
    removeImageAttributes(element);
  };

  var restoreImg = function restoreImg(imgEl) {
    forEachPictureSource(imgEl, function (sourceEl) {
      restoreOriginalAttrs(sourceEl, attrsSrcSrcsetSizes);
    });
    restoreOriginalAttrs(imgEl, attrsSrcSrcsetSizes);
  };
  var restoreVideo = function restoreVideo(videoEl) {
    forEachVideoSource(videoEl, function (sourceEl) {
      restoreOriginalAttrs(sourceEl, attrsSrc);
    });
    restoreOriginalAttrs(videoEl, attrsSrcPoster);
    videoEl.load();
  };
  var restoreIframe = function restoreIframe(iframeEl) {
    restoreOriginalAttrs(iframeEl, attrsSrc);
  };
  var restoreObject = function restoreObject(objectEl) {
    restoreOriginalAttrs(objectEl, attrsData);
  };
  var restoreFunctions = {
    IMG: restoreImg,
    IFRAME: restoreIframe,
    VIDEO: restoreVideo,
    OBJECT: restoreObject,
  };

  var restoreAttributes = function restoreAttributes(element) {
    var restoreFunction = restoreFunctions[element.tagName];

    if (!restoreFunction) {
      restoreOriginalBgImage(element);
      return;
    }

    restoreFunction(element);
  };

  var resetClasses = function resetClasses(element, settings) {
    if (hasEmptyStatus(element) || hasStatusNative(element)) {
      return;
    }

    removeClass(element, settings.class_entered);
    removeClass(element, settings.class_exited);
    removeClass(element, settings.class_applied);
    removeClass(element, settings.class_loading);
    removeClass(element, settings.class_loaded);
    removeClass(element, settings.class_error);
  };

  var restore = function restore(element, settings) {
    restoreAttributes(element);
    resetClasses(element, settings);
    resetStatus(element);
    deleteOriginalAttrs(element);
  };

  var cancelLoading = function cancelLoading(element, entry, settings, instance) {
    if (!settings.cancel_on_exit) return;
    if (!hasStatusLoading(element)) return;
    if (element.tagName !== 'IMG') return; //Works only on images

    removeEventListeners(element);
    resetSourcesImg(element);
    restoreImg(element);
    removeClass(element, settings.class_loading);
    updateLoadingCount(instance, -1);
    resetStatus(element);
    safeCallback(settings.callback_cancel, element, entry, instance);
  };

  var onEnter = function onEnter(element, entry, settings, instance) {
    var dontLoad = hadStartedLoading(element);
    /* Save status 
    before setting it, to prevent loading it again. Fixes #526. */

    setStatus(element, statusEntered);
    addClass(element, settings.class_entered);
    removeClass(element, settings.class_exited);
    unobserveEntered(element, settings, instance);
    safeCallback(settings.callback_enter, element, entry, instance);
    if (dontLoad) return;
    load(element, settings, instance);
  };
  var onExit = function onExit(element, entry, settings, instance) {
    if (hasEmptyStatus(element)) return; //Ignore the first pass, at landing

    addClass(element, settings.class_exited);
    cancelLoading(element, entry, settings, instance);
    safeCallback(settings.callback_exit, element, entry, instance);
  };

  var tagsWithNativeLazy = ['IMG', 'IFRAME', 'VIDEO'];
  var shouldUseNative = function shouldUseNative(settings) {
    return settings.use_native && 'loading' in HTMLImageElement.prototype;
  };
  var loadAllNative = function loadAllNative(elements, settings, instance) {
    elements.forEach(function (element) {
      if (tagsWithNativeLazy.indexOf(element.tagName) === -1) {
        return;
      }

      loadNative(element, settings, instance);
    });
    setToLoadCount(instance, 0);
  };

  var isIntersecting = function isIntersecting(entry) {
    return entry.isIntersecting || entry.intersectionRatio > 0;
  };

  var getObserverSettings = function getObserverSettings(settings) {
    return {
      root: settings.container === document ? null : settings.container,
      rootMargin: settings.thresholds || settings.threshold + 'px',
    };
  };

  var intersectionHandler = function intersectionHandler(entries, settings, instance) {
    entries.forEach(function (entry) {
      return isIntersecting(entry)
        ? onEnter(entry.target, entry, settings, instance)
        : onExit(entry.target, entry, settings, instance);
    });
  };

  var observeElements = function observeElements(observer, elements) {
    elements.forEach(function (element) {
      observer.observe(element);
    });
  };
  var updateObserver = function updateObserver(observer, elementsToObserve) {
    resetObserver(observer);
    observeElements(observer, elementsToObserve);
  };
  var setObserver = function setObserver(settings, instance) {
    if (!supportsIntersectionObserver || shouldUseNative(settings)) {
      return;
    }

    instance._observer = new IntersectionObserver(function (entries) {
      intersectionHandler(entries, settings, instance);
    }, getObserverSettings(settings));
  };

  var toArray = function toArray(nodeSet) {
    return Array.prototype.slice.call(nodeSet);
  };
  var queryElements = function queryElements(settings) {
    return settings.container.querySelectorAll(settings.elements_selector);
  };
  var excludeManagedElements = function excludeManagedElements(elements) {
    return toArray(elements).filter(hasEmptyStatus);
  };
  var hasError = function hasError(element) {
    return hasStatusError(element);
  };
  var filterErrorElements = function filterErrorElements(elements) {
    return toArray(elements).filter(hasError);
  };
  var getElementsToLoad = function getElementsToLoad(elements, settings) {
    return excludeManagedElements(elements || queryElements(settings));
  };

  var retryLazyLoad = function retryLazyLoad(settings, instance) {
    var errorElements = filterErrorElements(queryElements(settings));
    errorElements.forEach(function (element) {
      removeClass(element, settings.class_error);
      resetStatus(element);
    });
    instance.update();
  };
  var setOnlineCheck = function setOnlineCheck(settings, instance) {
    if (!runningOnBrowser) {
      return;
    }

    window.addEventListener('online', function () {
      retryLazyLoad(settings, instance);
    });
  };

  var LazyLoad = function LazyLoad(customSettings, elements) {
    var settings = getExtendedSettings(customSettings);
    this._settings = settings;
    this.loadingCount = 0;
    setObserver(settings, this);
    setOnlineCheck(settings, this);
    this.update(elements);
  };

  LazyLoad.prototype = {
    update: function update(givenNodeset) {
      var settings = this._settings;
      var elementsToLoad = getElementsToLoad(givenNodeset, settings);
      setToLoadCount(this, elementsToLoad.length);

      if (isBot || !supportsIntersectionObserver) {
        this.loadAll(elementsToLoad);
        return;
      }

      if (shouldUseNative(settings)) {
        loadAllNative(elementsToLoad, settings, this);
        return;
      }

      updateObserver(this._observer, elementsToLoad);
    },
    destroy: function destroy() {
      // Observer
      if (this._observer) {
        this._observer.disconnect();
      } // Clean custom attributes on elements

      queryElements(this._settings).forEach(function (element) {
        deleteOriginalAttrs(element);
      }); // Delete all internal props

      delete this._observer;
      delete this._settings;
      delete this.loadingCount;
      delete this.toLoadCount;
    },
    loadAll: function loadAll(elements) {
      var _this = this;

      var settings = this._settings;
      var elementsToLoad = getElementsToLoad(elements, settings);
      elementsToLoad.forEach(function (element) {
        unobserve(element, _this);
        load(element, settings, _this);
      });
    },
    restoreAll: function restoreAll() {
      var settings = this._settings;
      queryElements(settings).forEach(function (element) {
        restore(element, settings);
      });
    },
  };

  LazyLoad.load = function (element, customSettings) {
    var settings = getExtendedSettings(customSettings);
    load(element, settings);
  };

  LazyLoad.resetStatus = function (element) {
    resetStatus(element);
  }; // Automatic instances creation if required (useful for async script loading)

  if (runningOnBrowser) {
    autoInitialize(LazyLoad, window.lazyLoadOptions);
  }

  return LazyLoad;
});

('use strict');

//
// Vanilla Lazyload Initialization
//

$.fn.select2.defaults.set('theme', 'bootstrap5');
// #endregion

// #region / CSS Element Queries v1.2.2
//    _____  _____ _____   ______ _                           _      ____                  _
//   / ____|/ ____/ ____| |  ____| |                         | |    / __ \                (_)
//  | |    | (___| (___   | |__  | | ___ _ __ ___   ___ _ __ | |_  | |  | |_   _  ___ _ __ _  ___  ___
//  | |     \___ \\___ \  |  __| | |/ _ \ '_ ` _ \ / _ \ '_ \| __| | |  | | | | |/ _ \ '__| |/ _ \/ __|
//  | |____ ____) |___) | | |____| |  __/ | | | | |  __/ | | | |_  | |__| | |_| |  __/ |  | |  __/\__ \
//   \_____|_____/_____/  |______|_|\___|_| |_| |_|\___|_| |_|\__|  \___\_\\__,_|\___|_|  |_|\___||___/
//
//                                                                                                      v1.2.2
/* ResizeSensor*/
('use strict');

/**
 * Copyright Marc J. Schmidt. See the LICENSE file at the top-level
 * directory of this distribution and at
 * https://github.com/marcj/css-element-queries/blob/master/LICENSE.
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.ResizeSensor = factory();
  }
})(typeof window !== 'undefined' ? window : this, function () {
  // Make sure it does not throw in a SSR (Server Side Rendering) situation
  if (typeof window === 'undefined') {
    return null;
  }
  // https://github.com/Semantic-Org/Semantic-UI/issues/3855
  // https://github.com/marcj/css-element-queries/issues/257
  var globalWindow =
    typeof window != 'undefined' && window.Math == Math
      ? window
      : typeof self != 'undefined' && self.Math == Math
      ? self
      : Function('return this')();
  // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.
  // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and
  // would generate too many unnecessary events.
  var requestAnimationFrame =
    globalWindow.requestAnimationFrame ||
    globalWindow.mozRequestAnimationFrame ||
    globalWindow.webkitRequestAnimationFrame ||
    function (fn) {
      return globalWindow.setTimeout(fn, 20);
    };

  var cancelAnimationFrame =
    globalWindow.cancelAnimationFrame ||
    globalWindow.mozCancelAnimationFrame ||
    globalWindow.webkitCancelAnimationFrame ||
    function (timer) {
      globalWindow.clearTimeout(timer);
    };

  /**
   * Iterate over each of the provided element(s).
   *
   * @param {HTMLElement|HTMLElement[]} elements
   * @param {Function}                  callback
   */
  function forEachElement(elements, callback) {
    var elementsType = Object.prototype.toString.call(elements);
    var isCollectionTyped =
      '[object Array]' === elementsType ||
      '[object NodeList]' === elementsType ||
      '[object HTMLCollection]' === elementsType ||
      '[object Object]' === elementsType ||
      ('undefined' !== typeof jQuery && elements instanceof jQuery) || //jquery
      ('undefined' !== typeof Elements && elements instanceof Elements); //mootools
    var i = 0,
      j = elements.length;
    if (isCollectionTyped) {
      for (; i < j; i++) {
        callback(elements[i]);
      }
    } else {
      callback(elements);
    }
  }

  /**
   * Get element size
   * @param {HTMLElement} element
   * @returns {Object} {width, height}
   */
  function getElementSize(element) {
    if (!element.getBoundingClientRect) {
      return {
        width: element.offsetWidth,
        height: element.offsetHeight,
      };
    }

    var rect = element.getBoundingClientRect();
    return {
      width: Math.round(rect.width),
      height: Math.round(rect.height),
    };
  }

  /**
   * Apply CSS styles to element.
   *
   * @param {HTMLElement} element
   * @param {Object} style
   */
  function setStyle(element, style) {
    Object.keys(style).forEach(function (key) {
      element.style[key] = style[key];
    });
  }

  /**
   * Class for dimension change detection.
   *
   * @param {Element|Element[]|Elements|jQuery} element
   * @param {Function} callback
   *
   * @constructor
   */
  var ResizeSensor = function (element, callback) {
    //Is used when checking in reset() only for invisible elements
    var lastAnimationFrameForInvisibleCheck = 0;

    /**
     *
     * @constructor
     */
    function EventQueue() {
      var q = [];
      this.add = function (ev) {
        q.push(ev);
      };

      var i, j;
      this.call = function (sizeInfo) {
        for (i = 0, j = q.length; i < j; i++) {
          q[i].call(this, sizeInfo);
        }
      };

      this.remove = function (ev) {
        var newQueue = [];
        for (i = 0, j = q.length; i < j; i++) {
          if (q[i] !== ev) newQueue.push(q[i]);
        }
        q = newQueue;
      };

      this.length = function () {
        return q.length;
      };
    }

    /**
     *
     * @param {HTMLElement} element
     * @param {Function}    resized
     */
    function attachResizeEvent(element, resized) {
      if (!element) return;
      if (element.resizedAttached) {
        element.resizedAttached.add(resized);
        return;
      }

      element.resizedAttached = new EventQueue();
      element.resizedAttached.add(resized);

      element.resizeSensor = document.createElement('div');
      element.resizeSensor.dir = 'ltr';
      element.resizeSensor.className = 'resize-sensor';

      var style = {
        pointerEvents: 'none',
        position: 'absolute',
        left: '0px',
        top: '0px',
        right: '0px',
        bottom: '0px',
        overflow: 'hidden',
        zIndex: '-1',
        visibility: 'hidden',
        maxWidth: '100%',
      };
      var styleChild = {
        position: 'absolute',
        left: '0px',
        top: '0px',
        transition: '0s',
      };

      setStyle(element.resizeSensor, style);

      var expand = document.createElement('div');
      expand.className = 'resize-sensor-expand';
      setStyle(expand, style);

      var expandChild = document.createElement('div');
      setStyle(expandChild, styleChild);
      expand.appendChild(expandChild);

      var shrink = document.createElement('div');
      shrink.className = 'resize-sensor-shrink';
      setStyle(shrink, style);

      var shrinkChild = document.createElement('div');
      setStyle(shrinkChild, styleChild);
      setStyle(shrinkChild, { width: '200%', height: '200%' });
      shrink.appendChild(shrinkChild);

      element.resizeSensor.appendChild(expand);
      element.resizeSensor.appendChild(shrink);
      element.appendChild(element.resizeSensor);

      var computedStyle = window.getComputedStyle(element);
      var position = computedStyle ? computedStyle.getPropertyValue('position') : null;
      if (
        'absolute' !== position &&
        'relative' !== position &&
        'fixed' !== position &&
        'sticky' !== position
      ) {
        element.style.position = 'relative';
      }

      var dirty = false;

      //last request animation frame id used in onscroll event
      var rafId = 0;
      var size = getElementSize(element);
      var lastWidth = 0;
      var lastHeight = 0;
      var initialHiddenCheck = true;
      lastAnimationFrameForInvisibleCheck = 0;

      var resetExpandShrink = function () {
        var width = element.offsetWidth;
        var height = element.offsetHeight;

        expandChild.style.width = width + 10 + 'px';
        expandChild.style.height = height + 10 + 'px';

        expand.scrollLeft = width + 10;
        expand.scrollTop = height + 10;

        shrink.scrollLeft = width + 10;
        shrink.scrollTop = height + 10;
      };

      var reset = function () {
        // Check if element is hidden
        if (initialHiddenCheck) {
          var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;
          if (invisible) {
            // Check in next frame
            if (!lastAnimationFrameForInvisibleCheck) {
              lastAnimationFrameForInvisibleCheck = requestAnimationFrame(function () {
                lastAnimationFrameForInvisibleCheck = 0;
                reset();
              });
            }

            return;
          } else {
            // Stop checking
            initialHiddenCheck = false;
          }
        }

        resetExpandShrink();
      };
      element.resizeSensor.resetSensor = reset;

      var onResized = function () {
        rafId = 0;

        if (!dirty) return;

        lastWidth = size.width;
        lastHeight = size.height;

        if (element.resizedAttached) {
          element.resizedAttached.call(size);
        }
      };

      var onScroll = function () {
        size = getElementSize(element);
        dirty = size.width !== lastWidth || size.height !== lastHeight;

        if (dirty && !rafId) {
          rafId = requestAnimationFrame(onResized);
        }

        reset();
      };

      var addEvent = function (el, name, cb) {
        if (el.attachEvent) {
          el.attachEvent('on' + name, cb);
        } else {
          el.addEventListener(name, cb);
        }
      };

      addEvent(expand, 'scroll', onScroll);
      addEvent(shrink, 'scroll', onScroll);

      // Fix for custom Elements and invisible elements
      lastAnimationFrameForInvisibleCheck = requestAnimationFrame(function () {
        lastAnimationFrameForInvisibleCheck = 0;
        reset();
      });
    }

    forEachElement(element, function (elem) {
      attachResizeEvent(elem, callback);
    });

    this.detach = function (ev) {
      // clean up the unfinished animation frame to prevent a potential endless requestAnimationFrame of reset
      if (lastAnimationFrameForInvisibleCheck) {
        cancelAnimationFrame(lastAnimationFrameForInvisibleCheck);
        lastAnimationFrameForInvisibleCheck = 0;
      }
      ResizeSensor.detach(element, ev);
    };

    this.reset = function () {
      //To prevent invoking element.resizeSensor.resetSensor if it's undefined
      if (element.resizeSensor.resetSensor) {
        element.resizeSensor.resetSensor();
      }
    };
  };

  ResizeSensor.reset = function (element) {
    forEachElement(element, function (elem) {
      //To prevent invoking element.resizeSensor.resetSensor if it's undefined
      if (element.resizeSensor.resetSensor) {
        elem.resizeSensor.resetSensor();
      }
    });
  };

  ResizeSensor.detach = function (element, ev) {
    forEachElement(element, function (elem) {
      if (!elem) return;
      if (elem.resizedAttached && typeof ev === 'function') {
        elem.resizedAttached.remove(ev);
        if (elem.resizedAttached.length()) return;
      }
      if (elem.resizeSensor) {
        if (elem.contains(elem.resizeSensor)) {
          elem.removeChild(elem.resizeSensor);
        }
        delete elem.resizeSensor;
        delete elem.resizedAttached;
      }
    });
  };

  if (typeof MutationObserver !== 'undefined') {
    var observer = new MutationObserver(function (mutations) {
      for (var i in mutations) {
        if (mutations.hasOwnProperty(i)) {
          var items = mutations[i].addedNodes;
          for (var j = 0; j < items.length; j++) {
            if (items[j].resizeSensor) {
              ResizeSensor.reset(items[j]);
            }
          }
        }
      }
    });

    document.addEventListener('DOMContentLoaded', function (event) {
      observer.observe(document.body, {
        childList: true,
        subtree: true,
      });
    });
  }

  return ResizeSensor;
});
/* ElementQueries */
('use strict');

/**
 * Copyright Marc J. Schmidt. See the LICENSE file at the top-level
 * directory of this distribution and at
 * https://github.com/marcj/css-element-queries/blob/master/LICENSE.
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['./ResizeSensor.js'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('./ResizeSensor.js'));
  } else {
    root.ElementQueries = factory(root.ResizeSensor);
    root.ElementQueries.listen();
  }
})(typeof window !== 'undefined' ? window : this, function (ResizeSensor) {
  /**
   *
   * @type {Function}
   * @constructor
   */
  var ElementQueries = function () {
    //<style> element with our dynamically created styles
    var cssStyleElement;

    //all rules found for element queries
    var allQueries = {};

    //association map to identify which selector belongs to a element from the animationstart event.
    var idToSelectorMapping = [];

    /**
     *
     * @param element
     * @returns {Number}
     */
    function getEmSize(element) {
      if (!element) {
        element = document.documentElement;
      }
      var fontSize = window.getComputedStyle(element, null).fontSize;
      return parseFloat(fontSize) || 16;
    }

    /**
     * Get element size
     * @param {HTMLElement} element
     * @returns {Object} {width, height}
     */
    function getElementSize(element) {
      if (!element.getBoundingClientRect) {
        return {
          width: element.offsetWidth,
          height: element.offsetHeight,
        };
      }

      var rect = element.getBoundingClientRect();
      return {
        width: Math.round(rect.width),
        height: Math.round(rect.height),
      };
    }

    /**
     *
     * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE
     *
     * @param {HTMLElement} element
     * @param {*} value
     * @returns {*}
     */
    function convertToPx(element, value) {
      var numbers = value.split(/\d/);
      var units = numbers[numbers.length - 1];
      value = parseFloat(value);
      switch (units) {
        case 'px':
          return value;
        case 'em':
          return value * getEmSize(element);
        case 'rem':
          return value * getEmSize();
        // Viewport units!
        // According to http://quirksmode.org/mobile/tableViewport.html
        // documentElement.clientWidth/Height gets us the most reliable info
        case 'vw':
          return (value * document.documentElement.clientWidth) / 100;
        case 'vh':
          return (value * document.documentElement.clientHeight) / 100;
        case 'vmin':
        case 'vmax':
          var vw = document.documentElement.clientWidth / 100;
          var vh = document.documentElement.clientHeight / 100;
          var chooser = Math[units === 'vmin' ? 'min' : 'max'];
          return value * chooser(vw, vh);
        default:
          return value;
        // for now, not supporting physical units (since they are just a set number of px)
        // or ex/ch (getting accurate measurements is hard)
      }
    }

    /**
     *
     * @param {HTMLElement} element
     * @param {String} id
     * @constructor
     */
    function SetupInformation(element, id) {
      this.element = element;
      var key, option, elementSize, value, actualValue, attrValues, attrValue, attrName;

      var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];

      /**
       * Extracts the computed width/height and sets to min/max- attribute.
       */
      this.call = function () {
        // extract current dimensions
        elementSize = getElementSize(this.element);

        attrValues = {};

        for (key in allQueries[id]) {
          if (!allQueries[id].hasOwnProperty(key)) {
            continue;
          }
          option = allQueries[id][key];

          value = convertToPx(this.element, option.value);

          actualValue = option.property === 'width' ? elementSize.width : elementSize.height;
          attrName = option.mode + '-' + option.property;
          attrValue = '';

          if (option.mode === 'min' && actualValue >= value) {
            attrValue += option.value;
          }

          if (option.mode === 'max' && actualValue <= value) {
            attrValue += option.value;
          }

          if (!attrValues[attrName]) attrValues[attrName] = '';
          if (
            attrValue &&
            -1 === (' ' + attrValues[attrName] + ' ').indexOf(' ' + attrValue + ' ')
          ) {
            attrValues[attrName] += ' ' + attrValue;
          }
        }

        for (var k in attributes) {
          if (!attributes.hasOwnProperty(k)) continue;

          if (attrValues[attributes[k]]) {
            this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));
          } else {
            this.element.removeAttribute(attributes[k]);
          }
        }
      };
    }

    /**
     * @param {HTMLElement} element
     * @param {Object}      id
     */
    function setupElement(element, id) {
      if (!element.elementQueriesSetupInformation) {
        element.elementQueriesSetupInformation = new SetupInformation(element, id);
      }

      if (!element.elementQueriesSensor) {
        element.elementQueriesSensor = new ResizeSensor(element, function () {
          element.elementQueriesSetupInformation.call();
        });
      }
    }

    /**
     * Stores rules to the selector that should be applied once resized.
     *
     * @param {String} selector
     * @param {String} mode min|max
     * @param {String} property width|height
     * @param {String} value
     */
    function queueQuery(selector, mode, property, value) {
      if (typeof allQueries[selector] === 'undefined') {
        allQueries[selector] = [];
        // add animation to trigger animationstart event, so we know exactly when a element appears in the DOM

        var id = idToSelectorMapping.length;
        cssStyleElement.innerHTML += '\n' + selector + ' {animation: 0.1s element-queries;}';
        cssStyleElement.innerHTML +=
          '\n' + selector + ' > .resize-sensor {min-width: ' + id + 'px;}';
        idToSelectorMapping.push(selector);
      }

      allQueries[selector].push({
        mode: mode,
        property: property,
        value: value,
      });
    }

    function getQuery(container) {
      var query;
      if (document.querySelectorAll)
        query = container
          ? container.querySelectorAll.bind(container)
          : document.querySelectorAll.bind(document);
      if (!query && 'undefined' !== typeof $$) query = $$;
      if (!query && 'undefined' !== typeof jQuery) query = jQuery;

      if (!query) {
        throw "No document.querySelectorAll, jQuery or Mootools's $$ found.";
      }

      return query;
    }

    /**
     * If animationStart didn't catch a new element in the DOM, we can manually search for it
     */
    function findElementQueriesElements(container) {
      var query = getQuery(container);

      for (var selector in allQueries)
        if (allQueries.hasOwnProperty(selector)) {
          // find all elements based on the extract query selector from the element query rule
          var elements = query(selector, container);

          for (var i = 0, j = elements.length; i < j; i++) {
            setupElement(elements[i], selector);
          }
        }
    }

    /**
     *
     * @param {HTMLElement} element
     */
    function attachResponsiveImage(element) {
      var children = [];
      var rules = [];
      var sources = [];
      var defaultImageId = 0;
      var lastActiveImage = -1;
      var loadedImages = [];

      for (var i in element.children) {
        if (!element.children.hasOwnProperty(i)) continue;

        if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {
          children.push(element.children[i]);

          var minWidth =
            element.children[i].getAttribute('min-width') ||
            element.children[i].getAttribute('data-min-width');
          //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');
          var src =
            element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');

          sources.push(src);

          var rule = {
            minWidth: minWidth,
          };

          rules.push(rule);

          if (!minWidth) {
            defaultImageId = children.length - 1;
            element.children[i].style.display = 'block';
          } else {
            element.children[i].style.display = 'none';
          }
        }
      }

      lastActiveImage = defaultImageId;

      function check() {
        var imageToDisplay = false,
          i;

        for (i in children) {
          if (!children.hasOwnProperty(i)) continue;

          if (rules[i].minWidth) {
            if (element.offsetWidth > rules[i].minWidth) {
              imageToDisplay = i;
            }
          }
        }

        if (!imageToDisplay) {
          //no rule matched, show default
          imageToDisplay = defaultImageId;
        }

        if (lastActiveImage !== imageToDisplay) {
          //image change

          if (!loadedImages[imageToDisplay]) {
            //image has not been loaded yet, we need to load the image first in memory to prevent flash of
            //no content

            var image = new Image();
            image.onload = function () {
              children[imageToDisplay].src = sources[imageToDisplay];

              children[lastActiveImage].style.display = 'none';
              children[imageToDisplay].style.display = 'block';

              loadedImages[imageToDisplay] = true;

              lastActiveImage = imageToDisplay;
            };

            image.src = sources[imageToDisplay];
          } else {
            children[lastActiveImage].style.display = 'none';
            children[imageToDisplay].style.display = 'block';
            lastActiveImage = imageToDisplay;
          }
        } else {
          //make sure for initial check call the .src is set correctly
          children[imageToDisplay].src = sources[imageToDisplay];
        }
      }

      element.resizeSensorInstance = new ResizeSensor(element, check);
      check();
    }

    function findResponsiveImages() {
      var query = getQuery();

      var elements = query('[data-responsive-image],[responsive-image]');
      for (var i = 0, j = elements.length; i < j; i++) {
        attachResponsiveImage(elements[i]);
      }
    }

    var regex =
      /,?[\s\t]*([^,\n]*?)((?:\[[\s\t]*?(?:min|max)-(?:width|height)[\s\t]*?[~$\^]?=[\s\t]*?"[^"]*?"[\s\t]*?])+)([^,\n\s\{]*)/gim;
    var attrRegex =
      /\[[\s\t]*?(min|max)-(width|height)[\s\t]*?[~$\^]?=[\s\t]*?"([^"]*?)"[\s\t]*?]/gim;

    /**
     * @param {String} css
     */
    function extractQuery(css) {
      var match, smatch, attrs, attrMatch;

      css = css.replace(/'/g, '"');
      while (null !== (match = regex.exec(css))) {
        smatch = match[1] + match[3];
        attrs = match[2];

        while (null !== (attrMatch = attrRegex.exec(attrs))) {
          queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);
        }
      }
    }

    /**
     * @param {CssRule[]|String} rules
     */
    function readRules(rules) {
      var selector = '';

      if (!rules) {
        return;
      }

      if ('string' === typeof rules) {
        rules = rules.toLowerCase();
        if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {
          extractQuery(rules);
        }
      } else {
        for (var i = 0, j = rules.length; i < j; i++) {
          if (1 === rules[i].type) {
            selector = rules[i].selectorText || rules[i].cssText;
            if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {
              extractQuery(selector);
            } else if (
              -1 !== selector.indexOf('min-width') ||
              -1 !== selector.indexOf('max-width')
            ) {
              extractQuery(selector);
            }
          } else if (4 === rules[i].type) {
            readRules(rules[i].cssRules || rules[i].rules);
          } else if (3 === rules[i].type) {
            if (rules[i].styleSheet.hasOwnProperty('cssRules')) {
              readRules(rules[i].styleSheet.cssRules);
            }
          }
        }
      }
    }

    var defaultCssInjected = false;

    /**
     * Searches all css rules and setups the event listener to all elements with element query rules..
     */
    this.init = function () {
      var animationStart = 'animationstart';
      if (typeof document.documentElement.style['webkitAnimationName'] !== 'undefined') {
        animationStart = 'webkitAnimationStart';
      } else if (typeof document.documentElement.style['MozAnimationName'] !== 'undefined') {
        animationStart = 'mozanimationstart';
      } else if (typeof document.documentElement.style['OAnimationName'] !== 'undefined') {
        animationStart = 'oanimationstart';
      }

      document.body.addEventListener(animationStart, function (e) {
        var element = e.target;
        var styles = element && window.getComputedStyle(element, null);
        var animationName = styles && styles.getPropertyValue('animation-name');
        var requiresSetup = animationName && -1 !== animationName.indexOf('element-queries');

        if (requiresSetup) {
          element.elementQueriesSensor = new ResizeSensor(element, function () {
            if (element.elementQueriesSetupInformation) {
              element.elementQueriesSetupInformation.call();
            }
          });

          var sensorStyles = window.getComputedStyle(element.resizeSensor, null);
          var id = sensorStyles.getPropertyValue('min-width');
          id = parseInt(id.replace('px', ''));
          setupElement(e.target, idToSelectorMapping[id]);
        }
      });

      if (!defaultCssInjected) {
        cssStyleElement = document.createElement('style');
        cssStyleElement.type = 'text/css';
        cssStyleElement.innerHTML =
          '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img {width: 100%;}';

        //safari wants at least one rule in keyframes to start working
        cssStyleElement.innerHTML += '\n@keyframes element-queries { 0% { visibility: inherit; } }';
        document.getElementsByTagName('head')[0].appendChild(cssStyleElement);
        defaultCssInjected = true;
      }

      for (var i = 0, j = document.styleSheets.length; i < j; i++) {
        try {
          if (
            document.styleSheets[i].href &&
            0 === document.styleSheets[i].href.indexOf('file://')
          ) {
            console.warn(
              'CssElementQueries: unable to parse local css files, ' + document.styleSheets[i].href
            );
          }

          readRules(
            document.styleSheets[i].cssRules ||
              document.styleSheets[i].rules ||
              document.styleSheets[i].cssText
          );
        } catch (e) {}
      }

      findResponsiveImages();
    };

    /**
     * Go through all collected rules (readRules()) and attach the resize-listener.
     * Not necessary to call it manually, since we detect automatically when new elements
     * are available in the DOM. However, sometimes handy for dirty DOM modifications.
     *
     * @param {HTMLElement} container only elements of the container are considered (document.body if not set)
     */
    this.findElementQueriesElements = function (container) {
      findElementQueriesElements(container);
    };

    this.update = function () {
      this.init();
    };
  };

  ElementQueries.update = function () {
    ElementQueries.instance.update();
  };

  /**
   * Removes all sensor and elementquery information from the element.
   *
   * @param {HTMLElement} element
   */
  ElementQueries.detach = function (element) {
    if (element.elementQueriesSetupInformation) {
      //element queries
      element.elementQueriesSensor.detach();
      delete element.elementQueriesSetupInformation;
      delete element.elementQueriesSensor;
    } else if (element.resizeSensorInstance) {
      //responsive image

      element.resizeSensorInstance.detach();
      delete element.resizeSensorInstance;
    }
  };

  ElementQueries.init = function () {
    if (!ElementQueries.instance) {
      ElementQueries.instance = new ElementQueries();
    }

    ElementQueries.instance.init();
  };

  var domLoaded = function (callback) {
    /* Mozilla, Chrome, Opera */
    if (document.addEventListener) {
      document.addEventListener('DOMContentLoaded', callback, false);
    } else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {
      /* Safari, iCab, Konqueror */
      var DOMLoadTimer = setInterval(function () {
        if (/loaded|complete/i.test(document.readyState)) {
          callback();
          clearInterval(DOMLoadTimer);
        }
      }, 10);
    } else window.onload = callback;
    /* Other web browsers */
  };

  ElementQueries.findElementQueriesElements = function (container) {
    ElementQueries.instance.findElementQueriesElements(container);
  };

  ElementQueries.listen = function () {
    domLoaded(ElementQueries.init);
  };

  return ElementQueries;
});
// #endregion
